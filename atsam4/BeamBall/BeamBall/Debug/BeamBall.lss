
BeamBall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003598  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000860  20000000  00403598  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000010c  20000860  00403df8  00020860  2**2
                  ALLOC
  3 .stack        00003004  2000096c  00403f04  00020860  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020860  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002088a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016146  00000000  00000000  000208e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000302b  00000000  00000000  00036a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004ef1  00000000  00000000  00039a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b78  00000000  00000000  0003e945  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a88  00000000  00000000  0003f4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000151c0  00000000  00000000  0003ff45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dbe7  00000000  00000000  00055105  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00053eb5  00000000  00000000  00062cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000021b4  00000000  00000000  000b6ba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 39 00 20 f5 0b 40 00 f3 0b 40 00 f3 0b 40 00     p9. ..@...@...@.
  400010:	f3 0b 40 00 f3 0b 40 00 f3 0b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	f3 0b 40 00 f3 0b 40 00 00 00 00 00 f3 0b 40 00     ..@...@.......@.
  40003c:	f3 0b 40 00 f3 0b 40 00 f3 0b 40 00 f3 0b 40 00     ..@...@...@...@.
  40004c:	f3 0b 40 00 f3 0b 40 00 f3 0b 40 00 f3 0b 40 00     ..@...@...@...@.
  40005c:	f3 0b 40 00 f3 0b 40 00 f3 0b 40 00 00 00 00 00     ..@...@...@.....
  40006c:	a1 07 40 00 b5 07 40 00 c9 07 40 00 f3 0b 40 00     ..@...@...@...@.
  40007c:	f3 0b 40 00 00 00 00 00 00 00 00 00 f3 0b 40 00     ..@...........@.
  40008c:	f3 0b 40 00 f3 0b 40 00 f3 0b 40 00 f3 0b 40 00     ..@...@...@...@.
  40009c:	fd 10 40 00 29 11 40 00 f3 0b 40 00 f3 0b 40 00     ..@.).@...@...@.
  4000ac:	f3 0b 40 00 f3 0b 40 00 f3 0b 40 00 f3 0b 40 00     ..@...@...@...@.
  4000bc:	f3 0b 40 00 f3 0b 40 00 f3 0b 40 00 f3 0b 40 00     ..@...@...@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000860 	.word	0x20000860
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00403598 	.word	0x00403598

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00403598 	.word	0x00403598
  40012c:	20000864 	.word	0x20000864
  400130:	00403598 	.word	0x00403598
  400134:	00000000 	.word	0x00000000

00400138 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400138:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40013a:	480e      	ldr	r0, [pc, #56]	; (400174 <sysclk_init+0x3c>)
  40013c:	4b0e      	ldr	r3, [pc, #56]	; (400178 <sysclk_init+0x40>)
  40013e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400140:	213e      	movs	r1, #62	; 0x3e
  400142:	2000      	movs	r0, #0
  400144:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x44>)
  400146:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400148:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x48>)
  40014a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40014c:	2800      	cmp	r0, #0
  40014e:	d0fc      	beq.n	40014a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400150:	4b0c      	ldr	r3, [pc, #48]	; (400184 <sysclk_init+0x4c>)
  400152:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400154:	4a0c      	ldr	r2, [pc, #48]	; (400188 <sysclk_init+0x50>)
  400156:	4b0d      	ldr	r3, [pc, #52]	; (40018c <sysclk_init+0x54>)
  400158:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40015a:	4c0d      	ldr	r4, [pc, #52]	; (400190 <sysclk_init+0x58>)
  40015c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40015e:	2800      	cmp	r0, #0
  400160:	d0fc      	beq.n	40015c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400162:	2010      	movs	r0, #16
  400164:	4b0b      	ldr	r3, [pc, #44]	; (400194 <sysclk_init+0x5c>)
  400166:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400168:	4b0b      	ldr	r3, [pc, #44]	; (400198 <sysclk_init+0x60>)
  40016a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40016c:	4801      	ldr	r0, [pc, #4]	; (400174 <sysclk_init+0x3c>)
  40016e:	4b02      	ldr	r3, [pc, #8]	; (400178 <sysclk_init+0x40>)
  400170:	4798      	blx	r3
  400172:	bd10      	pop	{r4, pc}
  400174:	07270e00 	.word	0x07270e00
  400178:	00400db1 	.word	0x00400db1
  40017c:	00400841 	.word	0x00400841
  400180:	00400895 	.word	0x00400895
  400184:	004008a5 	.word	0x004008a5
  400188:	20133f01 	.word	0x20133f01
  40018c:	400e0400 	.word	0x400e0400
  400190:	004008b5 	.word	0x004008b5
  400194:	004007dd 	.word	0x004007dd
  400198:	00400ca1 	.word	0x00400ca1

0040019c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40019c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001a0:	b980      	cbnz	r0, 4001c4 <_read+0x28>
  4001a2:	460c      	mov	r4, r1
  4001a4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001a6:	2a00      	cmp	r2, #0
  4001a8:	dd0f      	ble.n	4001ca <_read+0x2e>
  4001aa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001ac:	4e08      	ldr	r6, [pc, #32]	; (4001d0 <_read+0x34>)
  4001ae:	4d09      	ldr	r5, [pc, #36]	; (4001d4 <_read+0x38>)
  4001b0:	6830      	ldr	r0, [r6, #0]
  4001b2:	4621      	mov	r1, r4
  4001b4:	682b      	ldr	r3, [r5, #0]
  4001b6:	4798      	blx	r3
		ptr++;
  4001b8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001ba:	42bc      	cmp	r4, r7
  4001bc:	d1f8      	bne.n	4001b0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001be:	4640      	mov	r0, r8
  4001c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001c4:	f04f 38ff 	mov.w	r8, #4294967295
  4001c8:	e7f9      	b.n	4001be <_read+0x22>
	for (; len > 0; --len) {
  4001ca:	4680      	mov	r8, r0
  4001cc:	e7f7      	b.n	4001be <_read+0x22>
  4001ce:	bf00      	nop
  4001d0:	20000938 	.word	0x20000938
  4001d4:	20000930 	.word	0x20000930

004001d8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001d8:	3801      	subs	r0, #1
  4001da:	2802      	cmp	r0, #2
  4001dc:	d815      	bhi.n	40020a <_write+0x32>
{
  4001de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001e2:	460e      	mov	r6, r1
  4001e4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4001e6:	b19a      	cbz	r2, 400210 <_write+0x38>
  4001e8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001ea:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400224 <_write+0x4c>
  4001ee:	4f0c      	ldr	r7, [pc, #48]	; (400220 <_write+0x48>)
  4001f0:	f8d8 0000 	ldr.w	r0, [r8]
  4001f4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001f8:	683b      	ldr	r3, [r7, #0]
  4001fa:	4798      	blx	r3
  4001fc:	2800      	cmp	r0, #0
  4001fe:	db0a      	blt.n	400216 <_write+0x3e>
  400200:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400202:	3c01      	subs	r4, #1
  400204:	d1f4      	bne.n	4001f0 <_write+0x18>
  400206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40020a:	f04f 30ff 	mov.w	r0, #4294967295
  40020e:	4770      	bx	lr
	for (; len != 0; --len) {
  400210:	4610      	mov	r0, r2
  400212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400216:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40021a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40021e:	bf00      	nop
  400220:	20000934 	.word	0x20000934
  400224:	20000938 	.word	0x20000938

00400228 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400228:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40022a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40022e:	4b46      	ldr	r3, [pc, #280]	; (400348 <board_init+0x120>)
  400230:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400232:	200b      	movs	r0, #11
  400234:	4c45      	ldr	r4, [pc, #276]	; (40034c <board_init+0x124>)
  400236:	47a0      	blx	r4
  400238:	200c      	movs	r0, #12
  40023a:	47a0      	blx	r4
  40023c:	200d      	movs	r0, #13
  40023e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400240:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400244:	2013      	movs	r0, #19
  400246:	4c42      	ldr	r4, [pc, #264]	; (400350 <board_init+0x128>)
  400248:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40024a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40024e:	2014      	movs	r0, #20
  400250:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400252:	4940      	ldr	r1, [pc, #256]	; (400354 <board_init+0x12c>)
  400254:	2023      	movs	r0, #35	; 0x23
  400256:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400258:	493f      	ldr	r1, [pc, #252]	; (400358 <board_init+0x130>)
  40025a:	204c      	movs	r0, #76	; 0x4c
  40025c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40025e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400262:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400266:	483d      	ldr	r0, [pc, #244]	; (40035c <board_init+0x134>)
  400268:	4b3d      	ldr	r3, [pc, #244]	; (400360 <board_init+0x138>)
  40026a:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  40026c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400270:	2000      	movs	r0, #0
  400272:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  400274:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400278:	2008      	movs	r0, #8
  40027a:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  40027c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400280:	2052      	movs	r0, #82	; 0x52
  400282:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400284:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400288:	200c      	movs	r0, #12
  40028a:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  40028c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400290:	200d      	movs	r0, #13
  400292:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400294:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400298:	200e      	movs	r0, #14
  40029a:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#  ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  40029c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002a0:	200b      	movs	r0, #11
  4002a2:	47a0      	blx	r4
#  endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  4002a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002a8:	2015      	movs	r0, #21
  4002aa:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  4002ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002b0:	2016      	movs	r0, #22
  4002b2:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_SCK_IDX, PIN_USART1_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM33312 enable pin */
	gpio_configure_pin(PIN_USART1_EN_IDX, PIN_USART1_EN_FLAGS);
  4002b4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4002b8:	2017      	movs	r0, #23
  4002ba:	47a0      	blx	r4
	gpio_set_pin_low(PIN_USART1_EN_IDX);
  4002bc:	2017      	movs	r0, #23
  4002be:	4b29      	ldr	r3, [pc, #164]	; (400364 <board_init+0x13c>)
  4002c0:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  4002c2:	4d29      	ldr	r5, [pc, #164]	; (400368 <board_init+0x140>)
  4002c4:	4629      	mov	r1, r5
  4002c6:	2040      	movs	r0, #64	; 0x40
  4002c8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  4002ca:	4629      	mov	r1, r5
  4002cc:	2041      	movs	r0, #65	; 0x41
  4002ce:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  4002d0:	4629      	mov	r1, r5
  4002d2:	2042      	movs	r0, #66	; 0x42
  4002d4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  4002d6:	4629      	mov	r1, r5
  4002d8:	2043      	movs	r0, #67	; 0x43
  4002da:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  4002dc:	4629      	mov	r1, r5
  4002de:	2044      	movs	r0, #68	; 0x44
  4002e0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  4002e2:	4629      	mov	r1, r5
  4002e4:	2045      	movs	r0, #69	; 0x45
  4002e6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  4002e8:	4629      	mov	r1, r5
  4002ea:	2046      	movs	r0, #70	; 0x46
  4002ec:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  4002ee:	4629      	mov	r1, r5
  4002f0:	2047      	movs	r0, #71	; 0x47
  4002f2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  4002f4:	4629      	mov	r1, r5
  4002f6:	204b      	movs	r0, #75	; 0x4b
  4002f8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  4002fa:	4629      	mov	r1, r5
  4002fc:	2048      	movs	r0, #72	; 0x48
  4002fe:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  400300:	4629      	mov	r1, r5
  400302:	204f      	movs	r0, #79	; 0x4f
  400304:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  400306:	4629      	mov	r1, r5
  400308:	2053      	movs	r0, #83	; 0x53
  40030a:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  40030c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400310:	204d      	movs	r0, #77	; 0x4d
  400312:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_ADS7843
	/* Configure Touchscreen SPI pins */
	gpio_configure_pin(BOARD_ADS7843_IRQ_GPIO,BOARD_ADS7843_IRQ_FLAGS);
  400314:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  400318:	4629      	mov	r1, r5
  40031a:	2010      	movs	r0, #16
  40031c:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ADS7843_BUSY_GPIO, BOARD_ADS7843_BUSY_FLAGS);
  40031e:	4629      	mov	r1, r5
  400320:	2011      	movs	r0, #17
  400322:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400324:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400328:	200c      	movs	r0, #12
  40032a:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  40032c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400330:	200d      	movs	r0, #13
  400332:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400334:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400338:	200e      	movs	r0, #14
  40033a:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  40033c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400340:	200b      	movs	r0, #11
  400342:	47a0      	blx	r4
  400344:	bd38      	pop	{r3, r4, r5, pc}
  400346:	bf00      	nop
  400348:	400e1450 	.word	0x400e1450
  40034c:	004008c5 	.word	0x004008c5
  400350:	004004d1 	.word	0x004004d1
  400354:	28000079 	.word	0x28000079
  400358:	28000059 	.word	0x28000059
  40035c:	400e0e00 	.word	0x400e0e00
  400360:	004005f1 	.word	0x004005f1
  400364:	004004b7 	.word	0x004004b7
  400368:	08000001 	.word	0x08000001

0040036c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40036c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40036e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400372:	d039      	beq.n	4003e8 <pio_set_peripheral+0x7c>
  400374:	d813      	bhi.n	40039e <pio_set_peripheral+0x32>
  400376:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40037a:	d025      	beq.n	4003c8 <pio_set_peripheral+0x5c>
  40037c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400380:	d10a      	bne.n	400398 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400382:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400384:	4313      	orrs	r3, r2
  400386:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400388:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40038a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40038c:	400b      	ands	r3, r1
  40038e:	ea23 0302 	bic.w	r3, r3, r2
  400392:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400394:	6042      	str	r2, [r0, #4]
  400396:	4770      	bx	lr
	switch (ul_type) {
  400398:	2900      	cmp	r1, #0
  40039a:	d1fb      	bne.n	400394 <pio_set_peripheral+0x28>
  40039c:	4770      	bx	lr
  40039e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4003a2:	d020      	beq.n	4003e6 <pio_set_peripheral+0x7a>
  4003a4:	d809      	bhi.n	4003ba <pio_set_peripheral+0x4e>
  4003a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4003aa:	d1f3      	bne.n	400394 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4003ae:	4313      	orrs	r3, r2
  4003b0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4003b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4003b4:	4313      	orrs	r3, r2
  4003b6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003b8:	e7ec      	b.n	400394 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4003ba:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4003be:	d012      	beq.n	4003e6 <pio_set_peripheral+0x7a>
  4003c0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4003c4:	d00f      	beq.n	4003e6 <pio_set_peripheral+0x7a>
  4003c6:	e7e5      	b.n	400394 <pio_set_peripheral+0x28>
{
  4003c8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4003cc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4003ce:	43d3      	mvns	r3, r2
  4003d0:	4021      	ands	r1, r4
  4003d2:	461c      	mov	r4, r3
  4003d4:	4019      	ands	r1, r3
  4003d6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4003d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4003da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4003dc:	400b      	ands	r3, r1
  4003de:	4023      	ands	r3, r4
  4003e0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4003e2:	6042      	str	r2, [r0, #4]
}
  4003e4:	bc10      	pop	{r4}
  4003e6:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4003ea:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4003ec:	400b      	ands	r3, r1
  4003ee:	ea23 0302 	bic.w	r3, r3, r2
  4003f2:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4003f4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4003f6:	4313      	orrs	r3, r2
  4003f8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003fa:	e7cb      	b.n	400394 <pio_set_peripheral+0x28>

004003fc <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4003fc:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4003fe:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400402:	bf14      	ite	ne
  400404:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400406:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400408:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40040c:	bf14      	ite	ne
  40040e:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  400410:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  400412:	f012 0f02 	tst.w	r2, #2
  400416:	d107      	bne.n	400428 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400418:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40041c:	bf18      	it	ne
  40041e:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  400422:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400424:	6001      	str	r1, [r0, #0]
  400426:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  400428:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40042c:	e7f9      	b.n	400422 <pio_set_input+0x26>

0040042e <pio_set_output>:
{
  40042e:	b410      	push	{r4}
  400430:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400432:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400434:	b944      	cbnz	r4, 400448 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  400436:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400438:	b143      	cbz	r3, 40044c <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  40043a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40043c:	b942      	cbnz	r2, 400450 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40043e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400440:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400442:	6001      	str	r1, [r0, #0]
}
  400444:	bc10      	pop	{r4}
  400446:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400448:	6641      	str	r1, [r0, #100]	; 0x64
  40044a:	e7f5      	b.n	400438 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40044c:	6541      	str	r1, [r0, #84]	; 0x54
  40044e:	e7f5      	b.n	40043c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400450:	6301      	str	r1, [r0, #48]	; 0x30
  400452:	e7f5      	b.n	400440 <pio_set_output+0x12>

00400454 <pio_pull_down>:
	if (ul_pull_down_enable) {
  400454:	b912      	cbnz	r2, 40045c <pio_pull_down+0x8>
		p_pio->PIO_PPDDR = ul_mask;
  400456:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  40045a:	4770      	bx	lr
		p_pio->PIO_PPDER = ul_mask;
  40045c:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  400460:	4770      	bx	lr

00400462 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400462:	f012 0f10 	tst.w	r2, #16
  400466:	d010      	beq.n	40048a <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  400468:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40046c:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  400470:	bf14      	ite	ne
  400472:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  400476:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  40047a:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  40047e:	bf14      	ite	ne
  400480:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  400484:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400488:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  40048a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40048e:	4770      	bx	lr

00400490 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400490:	6401      	str	r1, [r0, #64]	; 0x40
  400492:	4770      	bx	lr

00400494 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400494:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400496:	4770      	bx	lr

00400498 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400498:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40049a:	4770      	bx	lr

0040049c <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40049c:	0943      	lsrs	r3, r0, #5
  40049e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004a2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004a6:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4004a8:	f000 001f 	and.w	r0, r0, #31
  4004ac:	2201      	movs	r2, #1
  4004ae:	fa02 f000 	lsl.w	r0, r2, r0
  4004b2:	6318      	str	r0, [r3, #48]	; 0x30
  4004b4:	4770      	bx	lr

004004b6 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004b6:	0943      	lsrs	r3, r0, #5
  4004b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004bc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004c0:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4004c2:	f000 001f 	and.w	r0, r0, #31
  4004c6:	2201      	movs	r2, #1
  4004c8:	fa02 f000 	lsl.w	r0, r2, r0
  4004cc:	6358      	str	r0, [r3, #52]	; 0x34
  4004ce:	4770      	bx	lr

004004d0 <pio_configure_pin>:
{
  4004d0:	b570      	push	{r4, r5, r6, lr}
  4004d2:	b082      	sub	sp, #8
  4004d4:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004d6:	0943      	lsrs	r3, r0, #5
  4004d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004dc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004e0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4004e2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4004e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4004ea:	d053      	beq.n	400594 <pio_configure_pin+0xc4>
  4004ec:	d80a      	bhi.n	400504 <pio_configure_pin+0x34>
  4004ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4004f2:	d02d      	beq.n	400550 <pio_configure_pin+0x80>
  4004f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4004f8:	d03b      	beq.n	400572 <pio_configure_pin+0xa2>
  4004fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4004fe:	d015      	beq.n	40052c <pio_configure_pin+0x5c>
		return 0;
  400500:	2000      	movs	r0, #0
  400502:	e023      	b.n	40054c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  400504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400508:	d055      	beq.n	4005b6 <pio_configure_pin+0xe6>
  40050a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40050e:	d052      	beq.n	4005b6 <pio_configure_pin+0xe6>
  400510:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400514:	d1f4      	bne.n	400500 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400516:	f000 011f 	and.w	r1, r0, #31
  40051a:	2601      	movs	r6, #1
  40051c:	462a      	mov	r2, r5
  40051e:	fa06 f101 	lsl.w	r1, r6, r1
  400522:	4620      	mov	r0, r4
  400524:	4b2f      	ldr	r3, [pc, #188]	; (4005e4 <pio_configure_pin+0x114>)
  400526:	4798      	blx	r3
	return 1;
  400528:	4630      	mov	r0, r6
		break;
  40052a:	e00f      	b.n	40054c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40052c:	f000 001f 	and.w	r0, r0, #31
  400530:	2601      	movs	r6, #1
  400532:	4086      	lsls	r6, r0
  400534:	4632      	mov	r2, r6
  400536:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40053a:	4620      	mov	r0, r4
  40053c:	4b2a      	ldr	r3, [pc, #168]	; (4005e8 <pio_configure_pin+0x118>)
  40053e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400540:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400544:	bf14      	ite	ne
  400546:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400548:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40054a:	2001      	movs	r0, #1
}
  40054c:	b002      	add	sp, #8
  40054e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400550:	f000 001f 	and.w	r0, r0, #31
  400554:	2601      	movs	r6, #1
  400556:	4086      	lsls	r6, r0
  400558:	4632      	mov	r2, r6
  40055a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40055e:	4620      	mov	r0, r4
  400560:	4b21      	ldr	r3, [pc, #132]	; (4005e8 <pio_configure_pin+0x118>)
  400562:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400564:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400568:	bf14      	ite	ne
  40056a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40056c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40056e:	2001      	movs	r0, #1
  400570:	e7ec      	b.n	40054c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400572:	f000 001f 	and.w	r0, r0, #31
  400576:	2601      	movs	r6, #1
  400578:	4086      	lsls	r6, r0
  40057a:	4632      	mov	r2, r6
  40057c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400580:	4620      	mov	r0, r4
  400582:	4b19      	ldr	r3, [pc, #100]	; (4005e8 <pio_configure_pin+0x118>)
  400584:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400586:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40058a:	bf14      	ite	ne
  40058c:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40058e:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400590:	2001      	movs	r0, #1
  400592:	e7db      	b.n	40054c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400594:	f000 001f 	and.w	r0, r0, #31
  400598:	2601      	movs	r6, #1
  40059a:	4086      	lsls	r6, r0
  40059c:	4632      	mov	r2, r6
  40059e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005a2:	4620      	mov	r0, r4
  4005a4:	4b10      	ldr	r3, [pc, #64]	; (4005e8 <pio_configure_pin+0x118>)
  4005a6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4005a8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4005ac:	bf14      	ite	ne
  4005ae:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4005b0:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4005b2:	2001      	movs	r0, #1
  4005b4:	e7ca      	b.n	40054c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4005b6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4005ba:	f000 011f 	and.w	r1, r0, #31
  4005be:	2601      	movs	r6, #1
  4005c0:	ea05 0306 	and.w	r3, r5, r6
  4005c4:	9300      	str	r3, [sp, #0]
  4005c6:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4005ca:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005ce:	bf14      	ite	ne
  4005d0:	2200      	movne	r2, #0
  4005d2:	2201      	moveq	r2, #1
  4005d4:	fa06 f101 	lsl.w	r1, r6, r1
  4005d8:	4620      	mov	r0, r4
  4005da:	4c04      	ldr	r4, [pc, #16]	; (4005ec <pio_configure_pin+0x11c>)
  4005dc:	47a0      	blx	r4
	return 1;
  4005de:	4630      	mov	r0, r6
		break;
  4005e0:	e7b4      	b.n	40054c <pio_configure_pin+0x7c>
  4005e2:	bf00      	nop
  4005e4:	004003fd 	.word	0x004003fd
  4005e8:	0040036d 	.word	0x0040036d
  4005ec:	0040042f 	.word	0x0040042f

004005f0 <pio_configure_pin_group>:
{
  4005f0:	b570      	push	{r4, r5, r6, lr}
  4005f2:	b082      	sub	sp, #8
  4005f4:	4605      	mov	r5, r0
  4005f6:	460e      	mov	r6, r1
  4005f8:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  4005fa:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4005fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400602:	d03d      	beq.n	400680 <pio_configure_pin_group+0x90>
  400604:	d80a      	bhi.n	40061c <pio_configure_pin_group+0x2c>
  400606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40060a:	d021      	beq.n	400650 <pio_configure_pin_group+0x60>
  40060c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400610:	d02a      	beq.n	400668 <pio_configure_pin_group+0x78>
  400612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400616:	d00e      	beq.n	400636 <pio_configure_pin_group+0x46>
		return 0;
  400618:	2000      	movs	r0, #0
  40061a:	e017      	b.n	40064c <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  40061c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400620:	d03a      	beq.n	400698 <pio_configure_pin_group+0xa8>
  400622:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400626:	d037      	beq.n	400698 <pio_configure_pin_group+0xa8>
  400628:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40062c:	d1f4      	bne.n	400618 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  40062e:	4b23      	ldr	r3, [pc, #140]	; (4006bc <pio_configure_pin_group+0xcc>)
  400630:	4798      	blx	r3
	return 1;
  400632:	2001      	movs	r0, #1
		break;
  400634:	e00a      	b.n	40064c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400636:	460a      	mov	r2, r1
  400638:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40063c:	4b20      	ldr	r3, [pc, #128]	; (4006c0 <pio_configure_pin_group+0xd0>)
  40063e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400640:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400644:	bf14      	ite	ne
  400646:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400648:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40064a:	2001      	movs	r0, #1
}
  40064c:	b002      	add	sp, #8
  40064e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400650:	460a      	mov	r2, r1
  400652:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400656:	4b1a      	ldr	r3, [pc, #104]	; (4006c0 <pio_configure_pin_group+0xd0>)
  400658:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40065a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40065e:	bf14      	ite	ne
  400660:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400662:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400664:	2001      	movs	r0, #1
  400666:	e7f1      	b.n	40064c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400668:	460a      	mov	r2, r1
  40066a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40066e:	4b14      	ldr	r3, [pc, #80]	; (4006c0 <pio_configure_pin_group+0xd0>)
  400670:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400672:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400676:	bf14      	ite	ne
  400678:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40067a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40067c:	2001      	movs	r0, #1
  40067e:	e7e5      	b.n	40064c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400680:	460a      	mov	r2, r1
  400682:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400686:	4b0e      	ldr	r3, [pc, #56]	; (4006c0 <pio_configure_pin_group+0xd0>)
  400688:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40068a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40068e:	bf14      	ite	ne
  400690:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400692:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400694:	2001      	movs	r0, #1
  400696:	e7d9      	b.n	40064c <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400698:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  40069c:	f004 0301 	and.w	r3, r4, #1
  4006a0:	9300      	str	r3, [sp, #0]
  4006a2:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4006a6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4006aa:	bf14      	ite	ne
  4006ac:	2200      	movne	r2, #0
  4006ae:	2201      	moveq	r2, #1
  4006b0:	4631      	mov	r1, r6
  4006b2:	4628      	mov	r0, r5
  4006b4:	4c03      	ldr	r4, [pc, #12]	; (4006c4 <pio_configure_pin_group+0xd4>)
  4006b6:	47a0      	blx	r4
	return 1;
  4006b8:	2001      	movs	r0, #1
		break;
  4006ba:	e7c7      	b.n	40064c <pio_configure_pin_group+0x5c>
  4006bc:	004003fd 	.word	0x004003fd
  4006c0:	0040036d 	.word	0x0040036d
  4006c4:	0040042f 	.word	0x0040042f

004006c8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4006c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4006cc:	4681      	mov	r9, r0
  4006ce:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4006d0:	4b12      	ldr	r3, [pc, #72]	; (40071c <pio_handler_process+0x54>)
  4006d2:	4798      	blx	r3
  4006d4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4006d6:	4648      	mov	r0, r9
  4006d8:	4b11      	ldr	r3, [pc, #68]	; (400720 <pio_handler_process+0x58>)
  4006da:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4006dc:	4005      	ands	r5, r0
  4006de:	d013      	beq.n	400708 <pio_handler_process+0x40>
  4006e0:	4c10      	ldr	r4, [pc, #64]	; (400724 <pio_handler_process+0x5c>)
  4006e2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4006e6:	e003      	b.n	4006f0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4006e8:	42b4      	cmp	r4, r6
  4006ea:	d00d      	beq.n	400708 <pio_handler_process+0x40>
  4006ec:	3410      	adds	r4, #16
		while (status != 0) {
  4006ee:	b15d      	cbz	r5, 400708 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4006f0:	6820      	ldr	r0, [r4, #0]
  4006f2:	42b8      	cmp	r0, r7
  4006f4:	d1f8      	bne.n	4006e8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4006f6:	6861      	ldr	r1, [r4, #4]
  4006f8:	4229      	tst	r1, r5
  4006fa:	d0f5      	beq.n	4006e8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4006fc:	68e3      	ldr	r3, [r4, #12]
  4006fe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400700:	6863      	ldr	r3, [r4, #4]
  400702:	ea25 0503 	bic.w	r5, r5, r3
  400706:	e7ef      	b.n	4006e8 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400708:	4b07      	ldr	r3, [pc, #28]	; (400728 <pio_handler_process+0x60>)
  40070a:	681b      	ldr	r3, [r3, #0]
  40070c:	b123      	cbz	r3, 400718 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40070e:	4b07      	ldr	r3, [pc, #28]	; (40072c <pio_handler_process+0x64>)
  400710:	681b      	ldr	r3, [r3, #0]
  400712:	b10b      	cbz	r3, 400718 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400714:	4648      	mov	r0, r9
  400716:	4798      	blx	r3
  400718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40071c:	00400495 	.word	0x00400495
  400720:	00400499 	.word	0x00400499
  400724:	2000087c 	.word	0x2000087c
  400728:	2000093c 	.word	0x2000093c
  40072c:	200008f0 	.word	0x200008f0

00400730 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400732:	4c18      	ldr	r4, [pc, #96]	; (400794 <pio_handler_set+0x64>)
  400734:	6826      	ldr	r6, [r4, #0]
  400736:	2e06      	cmp	r6, #6
  400738:	d829      	bhi.n	40078e <pio_handler_set+0x5e>
  40073a:	f04f 0c00 	mov.w	ip, #0
  40073e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400740:	4f15      	ldr	r7, [pc, #84]	; (400798 <pio_handler_set+0x68>)
  400742:	e004      	b.n	40074e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400744:	3401      	adds	r4, #1
  400746:	b2e4      	uxtb	r4, r4
  400748:	46a4      	mov	ip, r4
  40074a:	42a6      	cmp	r6, r4
  40074c:	d309      	bcc.n	400762 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40074e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400750:	0125      	lsls	r5, r4, #4
  400752:	597d      	ldr	r5, [r7, r5]
  400754:	428d      	cmp	r5, r1
  400756:	d1f5      	bne.n	400744 <pio_handler_set+0x14>
  400758:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40075c:	686d      	ldr	r5, [r5, #4]
  40075e:	4295      	cmp	r5, r2
  400760:	d1f0      	bne.n	400744 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400762:	4d0d      	ldr	r5, [pc, #52]	; (400798 <pio_handler_set+0x68>)
  400764:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400768:	eb05 040e 	add.w	r4, r5, lr
  40076c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400770:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400772:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400774:	9906      	ldr	r1, [sp, #24]
  400776:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400778:	3601      	adds	r6, #1
  40077a:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  40077c:	bf04      	itt	eq
  40077e:	4905      	ldreq	r1, [pc, #20]	; (400794 <pio_handler_set+0x64>)
  400780:	600e      	streq	r6, [r1, #0]
  400782:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400784:	461a      	mov	r2, r3
  400786:	4b05      	ldr	r3, [pc, #20]	; (40079c <pio_handler_set+0x6c>)
  400788:	4798      	blx	r3

	return 0;
  40078a:	2000      	movs	r0, #0
  40078c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  40078e:	2001      	movs	r0, #1
}
  400790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400792:	bf00      	nop
  400794:	200008ec 	.word	0x200008ec
  400798:	2000087c 	.word	0x2000087c
  40079c:	00400463 	.word	0x00400463

004007a0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4007a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4007a2:	210b      	movs	r1, #11
  4007a4:	4801      	ldr	r0, [pc, #4]	; (4007ac <PIOA_Handler+0xc>)
  4007a6:	4b02      	ldr	r3, [pc, #8]	; (4007b0 <PIOA_Handler+0x10>)
  4007a8:	4798      	blx	r3
  4007aa:	bd08      	pop	{r3, pc}
  4007ac:	400e0e00 	.word	0x400e0e00
  4007b0:	004006c9 	.word	0x004006c9

004007b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4007b4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4007b6:	210c      	movs	r1, #12
  4007b8:	4801      	ldr	r0, [pc, #4]	; (4007c0 <PIOB_Handler+0xc>)
  4007ba:	4b02      	ldr	r3, [pc, #8]	; (4007c4 <PIOB_Handler+0x10>)
  4007bc:	4798      	blx	r3
  4007be:	bd08      	pop	{r3, pc}
  4007c0:	400e1000 	.word	0x400e1000
  4007c4:	004006c9 	.word	0x004006c9

004007c8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4007c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4007ca:	210d      	movs	r1, #13
  4007cc:	4801      	ldr	r0, [pc, #4]	; (4007d4 <PIOC_Handler+0xc>)
  4007ce:	4b02      	ldr	r3, [pc, #8]	; (4007d8 <PIOC_Handler+0x10>)
  4007d0:	4798      	blx	r3
  4007d2:	bd08      	pop	{r3, pc}
  4007d4:	400e1200 	.word	0x400e1200
  4007d8:	004006c9 	.word	0x004006c9

004007dc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4007dc:	4a17      	ldr	r2, [pc, #92]	; (40083c <pmc_switch_mck_to_pllack+0x60>)
  4007de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4007e4:	4318      	orrs	r0, r3
  4007e6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007ea:	f013 0f08 	tst.w	r3, #8
  4007ee:	d10a      	bne.n	400806 <pmc_switch_mck_to_pllack+0x2a>
  4007f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007f4:	4911      	ldr	r1, [pc, #68]	; (40083c <pmc_switch_mck_to_pllack+0x60>)
  4007f6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007f8:	f012 0f08 	tst.w	r2, #8
  4007fc:	d103      	bne.n	400806 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007fe:	3b01      	subs	r3, #1
  400800:	d1f9      	bne.n	4007f6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400802:	2001      	movs	r0, #1
  400804:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400806:	4a0d      	ldr	r2, [pc, #52]	; (40083c <pmc_switch_mck_to_pllack+0x60>)
  400808:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40080a:	f023 0303 	bic.w	r3, r3, #3
  40080e:	f043 0302 	orr.w	r3, r3, #2
  400812:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400814:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400816:	f013 0f08 	tst.w	r3, #8
  40081a:	d10a      	bne.n	400832 <pmc_switch_mck_to_pllack+0x56>
  40081c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400820:	4906      	ldr	r1, [pc, #24]	; (40083c <pmc_switch_mck_to_pllack+0x60>)
  400822:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400824:	f012 0f08 	tst.w	r2, #8
  400828:	d105      	bne.n	400836 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40082a:	3b01      	subs	r3, #1
  40082c:	d1f9      	bne.n	400822 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40082e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400830:	4770      	bx	lr
	return 0;
  400832:	2000      	movs	r0, #0
  400834:	4770      	bx	lr
  400836:	2000      	movs	r0, #0
  400838:	4770      	bx	lr
  40083a:	bf00      	nop
  40083c:	400e0400 	.word	0x400e0400

00400840 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400840:	b9c8      	cbnz	r0, 400876 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400842:	4a11      	ldr	r2, [pc, #68]	; (400888 <pmc_switch_mainck_to_xtal+0x48>)
  400844:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400846:	0209      	lsls	r1, r1, #8
  400848:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40084a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40084e:	f023 0303 	bic.w	r3, r3, #3
  400852:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400856:	f043 0301 	orr.w	r3, r3, #1
  40085a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40085c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40085e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400860:	f013 0f01 	tst.w	r3, #1
  400864:	d0fb      	beq.n	40085e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400866:	4a08      	ldr	r2, [pc, #32]	; (400888 <pmc_switch_mainck_to_xtal+0x48>)
  400868:	6a13      	ldr	r3, [r2, #32]
  40086a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40086e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400872:	6213      	str	r3, [r2, #32]
  400874:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400876:	4904      	ldr	r1, [pc, #16]	; (400888 <pmc_switch_mainck_to_xtal+0x48>)
  400878:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40087a:	4a04      	ldr	r2, [pc, #16]	; (40088c <pmc_switch_mainck_to_xtal+0x4c>)
  40087c:	401a      	ands	r2, r3
  40087e:	4b04      	ldr	r3, [pc, #16]	; (400890 <pmc_switch_mainck_to_xtal+0x50>)
  400880:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400882:	620b      	str	r3, [r1, #32]
  400884:	4770      	bx	lr
  400886:	bf00      	nop
  400888:	400e0400 	.word	0x400e0400
  40088c:	fec8fffc 	.word	0xfec8fffc
  400890:	01370002 	.word	0x01370002

00400894 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400894:	4b02      	ldr	r3, [pc, #8]	; (4008a0 <pmc_osc_is_ready_mainck+0xc>)
  400896:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400898:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40089c:	4770      	bx	lr
  40089e:	bf00      	nop
  4008a0:	400e0400 	.word	0x400e0400

004008a4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4008a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008a8:	4b01      	ldr	r3, [pc, #4]	; (4008b0 <pmc_disable_pllack+0xc>)
  4008aa:	629a      	str	r2, [r3, #40]	; 0x28
  4008ac:	4770      	bx	lr
  4008ae:	bf00      	nop
  4008b0:	400e0400 	.word	0x400e0400

004008b4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4008b4:	4b02      	ldr	r3, [pc, #8]	; (4008c0 <pmc_is_locked_pllack+0xc>)
  4008b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008b8:	f000 0002 	and.w	r0, r0, #2
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop
  4008c0:	400e0400 	.word	0x400e0400

004008c4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4008c4:	2822      	cmp	r0, #34	; 0x22
  4008c6:	d81e      	bhi.n	400906 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4008c8:	281f      	cmp	r0, #31
  4008ca:	d80c      	bhi.n	4008e6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4008cc:	4b11      	ldr	r3, [pc, #68]	; (400914 <pmc_enable_periph_clk+0x50>)
  4008ce:	699a      	ldr	r2, [r3, #24]
  4008d0:	2301      	movs	r3, #1
  4008d2:	4083      	lsls	r3, r0
  4008d4:	4393      	bics	r3, r2
  4008d6:	d018      	beq.n	40090a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4008d8:	2301      	movs	r3, #1
  4008da:	fa03 f000 	lsl.w	r0, r3, r0
  4008de:	4b0d      	ldr	r3, [pc, #52]	; (400914 <pmc_enable_periph_clk+0x50>)
  4008e0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008e2:	2000      	movs	r0, #0
  4008e4:	4770      	bx	lr
		ul_id -= 32;
  4008e6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008e8:	4b0a      	ldr	r3, [pc, #40]	; (400914 <pmc_enable_periph_clk+0x50>)
  4008ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4008ee:	2301      	movs	r3, #1
  4008f0:	4083      	lsls	r3, r0
  4008f2:	4393      	bics	r3, r2
  4008f4:	d00b      	beq.n	40090e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4008f6:	2301      	movs	r3, #1
  4008f8:	fa03 f000 	lsl.w	r0, r3, r0
  4008fc:	4b05      	ldr	r3, [pc, #20]	; (400914 <pmc_enable_periph_clk+0x50>)
  4008fe:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400902:	2000      	movs	r0, #0
  400904:	4770      	bx	lr
		return 1;
  400906:	2001      	movs	r0, #1
  400908:	4770      	bx	lr
	return 0;
  40090a:	2000      	movs	r0, #0
  40090c:	4770      	bx	lr
  40090e:	2000      	movs	r0, #0
}
  400910:	4770      	bx	lr
  400912:	bf00      	nop
  400914:	400e0400 	.word	0x400e0400

00400918 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  400918:	b4f0      	push	{r4, r5, r6, r7}
  40091a:	b08c      	sub	sp, #48	; 0x30
  40091c:	4607      	mov	r7, r0
  40091e:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  400920:	ac01      	add	r4, sp, #4
  400922:	4d11      	ldr	r5, [pc, #68]	; (400968 <pwm_clocks_generate+0x50>)
  400924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40092a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40092c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400930:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  400934:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  400936:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400938:	f852 0b04 	ldr.w	r0, [r2], #4
  40093c:	fbb6 f0f0 	udiv	r0, r6, r0
  400940:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400944:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  400948:	d907      	bls.n	40095a <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  40094a:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  40094c:	2b0b      	cmp	r3, #11
  40094e:	d1f3      	bne.n	400938 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  400950:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  400954:	b00c      	add	sp, #48	; 0x30
  400956:	bcf0      	pop	{r4, r5, r6, r7}
  400958:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  40095a:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  40095c:	bf94      	ite	ls
  40095e:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  400962:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  400966:	e7f5      	b.n	400954 <pwm_clocks_generate+0x3c>
  400968:	0040342c 	.word	0x0040342c

0040096c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  40096c:	b570      	push	{r4, r5, r6, lr}
  40096e:	4606      	mov	r6, r0
  400970:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  400972:	680c      	ldr	r4, [r1, #0]
  400974:	b144      	cbz	r4, 400988 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  400976:	6889      	ldr	r1, [r1, #8]
  400978:	4620      	mov	r0, r4
  40097a:	4b0c      	ldr	r3, [pc, #48]	; (4009ac <pwm_init+0x40>)
  40097c:	4798      	blx	r3
  40097e:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  400980:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400984:	4298      	cmp	r0, r3
  400986:	d00c      	beq.n	4009a2 <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  400988:	6868      	ldr	r0, [r5, #4]
  40098a:	b140      	cbz	r0, 40099e <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  40098c:	68a9      	ldr	r1, [r5, #8]
  40098e:	4b07      	ldr	r3, [pc, #28]	; (4009ac <pwm_init+0x40>)
  400990:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  400992:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400996:	4298      	cmp	r0, r3
  400998:	d005      	beq.n	4009a6 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  40099a:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  40099e:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  4009a0:	2400      	movs	r4, #0
}
  4009a2:	4620      	mov	r0, r4
  4009a4:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  4009a6:	4604      	mov	r4, r0
  4009a8:	e7fb      	b.n	4009a2 <pwm_init+0x36>
  4009aa:	bf00      	nop
  4009ac:	00400919 	.word	0x00400919

004009b0 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  4009b0:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  4009b2:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4009b4:	684b      	ldr	r3, [r1, #4]
  4009b6:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  4009ba:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4009bc:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  4009be:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4009c0:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  4009c2:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4009c4:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  4009c8:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4009ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  4009ce:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4009d0:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  4009d4:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4009d6:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  4009da:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  4009de:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4009e2:	68cb      	ldr	r3, [r1, #12]
  4009e4:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4009e8:	690b      	ldr	r3, [r1, #16]
  4009ea:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4009ee:	7d8b      	ldrb	r3, [r1, #22]
  4009f0:	b13b      	cbz	r3, 400a02 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  4009f2:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4009f4:	8b4b      	ldrh	r3, [r1, #26]
  4009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4009fa:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  4009fe:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  400a02:	6c85      	ldr	r5, [r0, #72]	; 0x48
  400a04:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  400a08:	4093      	lsls	r3, r2
  400a0a:	43db      	mvns	r3, r3
  400a0c:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  400a0e:	7fcc      	ldrb	r4, [r1, #31]
  400a10:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  400a14:	7f8c      	ldrb	r4, [r1, #30]
  400a16:	4094      	lsls	r4, r2
  400a18:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  400a1c:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  400a1e:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  400a20:	6c44      	ldr	r4, [r0, #68]	; 0x44
  400a22:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  400a24:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  400a28:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  400a2c:	f891 4020 	ldrb.w	r4, [r1, #32]
  400a30:	4094      	lsls	r4, r2
  400a32:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400a36:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  400a38:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  400a3a:	2301      	movs	r3, #1
  400a3c:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  400a3e:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  400a42:	b31c      	cbz	r4, 400a8c <pwm_channel_init+0xdc>
		p_pwm->PWM_SCM |= channel;
  400a44:	6a04      	ldr	r4, [r0, #32]
  400a46:	431c      	orrs	r4, r3
  400a48:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  400a4a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  400a4e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  400a50:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400a52:	bf0c      	ite	eq
  400a54:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  400a56:	439c      	bicne	r4, r3
  400a58:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  400a5a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  400a5e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  400a60:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400a62:	bf0c      	ite	eq
  400a64:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  400a68:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
  400a6c:	6683      	str	r3, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  400a6e:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  400a70:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  400a72:	23ff      	movs	r3, #255	; 0xff
  400a74:	4093      	lsls	r3, r2
  400a76:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  400a7a:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  400a7e:	fa03 f202 	lsl.w	r2, r3, r2
  400a82:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  400a84:	66c2      	str	r2, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  400a86:	2000      	movs	r0, #0
  400a88:	bc70      	pop	{r4, r5, r6}
  400a8a:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  400a8c:	6a04      	ldr	r4, [r0, #32]
  400a8e:	ea24 0403 	bic.w	r4, r4, r3
  400a92:	6204      	str	r4, [r0, #32]
  400a94:	e7d9      	b.n	400a4a <pwm_channel_init+0x9a>

00400a96 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  400a96:	690b      	ldr	r3, [r1, #16]
  400a98:	4293      	cmp	r3, r2
  400a9a:	d202      	bcs.n	400aa2 <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
  400a9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  400aa0:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
  400aa2:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
  400aa4:	60ca      	str	r2, [r1, #12]
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  400aa6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  400aaa:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
	return 0;
  400aae:	2000      	movs	r0, #0
  400ab0:	4770      	bx	lr

00400ab2 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  400ab2:	2301      	movs	r3, #1
  400ab4:	fa03 f101 	lsl.w	r1, r3, r1
  400ab8:	6041      	str	r1, [r0, #4]
  400aba:	4770      	bx	lr

00400abc <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  400abc:	2301      	movs	r3, #1
  400abe:	fa03 f101 	lsl.w	r1, r3, r1
  400ac2:	6081      	str	r1, [r0, #8]
  400ac4:	4770      	bx	lr

00400ac6 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400ac6:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ac8:	0189      	lsls	r1, r1, #6
  400aca:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400acc:	2402      	movs	r4, #2
  400ace:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400ad0:	f04f 31ff 	mov.w	r1, #4294967295
  400ad4:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400ad6:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400ad8:	605a      	str	r2, [r3, #4]
}
  400ada:	bc10      	pop	{r4}
  400adc:	4770      	bx	lr

00400ade <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400ade:	0189      	lsls	r1, r1, #6
  400ae0:	2305      	movs	r3, #5
  400ae2:	5043      	str	r3, [r0, r1]
  400ae4:	4770      	bx	lr

00400ae6 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400ae6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400aea:	61ca      	str	r2, [r1, #28]
  400aec:	4770      	bx	lr

00400aee <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400aee:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400af2:	624a      	str	r2, [r1, #36]	; 0x24
  400af4:	4770      	bx	lr

00400af6 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400af6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400afa:	6a08      	ldr	r0, [r1, #32]
}
  400afc:	4770      	bx	lr

00400afe <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400afe:	b4f0      	push	{r4, r5, r6, r7}
  400b00:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400b02:	2402      	movs	r4, #2
  400b04:	9401      	str	r4, [sp, #4]
  400b06:	2408      	movs	r4, #8
  400b08:	9402      	str	r4, [sp, #8]
  400b0a:	2420      	movs	r4, #32
  400b0c:	9403      	str	r4, [sp, #12]
  400b0e:	2480      	movs	r4, #128	; 0x80
  400b10:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400b12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400b14:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400b16:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400b18:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400b1c:	d814      	bhi.n	400b48 <tc_find_mck_divisor+0x4a>
  400b1e:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400b20:	42a0      	cmp	r0, r4
  400b22:	d217      	bcs.n	400b54 <tc_find_mck_divisor+0x56>
  400b24:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400b26:	af01      	add	r7, sp, #4
  400b28:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400b2c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400b30:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400b32:	4284      	cmp	r4, r0
  400b34:	d30a      	bcc.n	400b4c <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400b36:	4286      	cmp	r6, r0
  400b38:	d90d      	bls.n	400b56 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400b3a:	3501      	adds	r5, #1
	for (ul_index = 0;
  400b3c:	2d05      	cmp	r5, #5
  400b3e:	d1f3      	bne.n	400b28 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400b40:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400b42:	b006      	add	sp, #24
  400b44:	bcf0      	pop	{r4, r5, r6, r7}
  400b46:	4770      	bx	lr
			return 0;
  400b48:	2000      	movs	r0, #0
  400b4a:	e7fa      	b.n	400b42 <tc_find_mck_divisor+0x44>
  400b4c:	2000      	movs	r0, #0
  400b4e:	e7f8      	b.n	400b42 <tc_find_mck_divisor+0x44>
	return 1;
  400b50:	2001      	movs	r0, #1
  400b52:	e7f6      	b.n	400b42 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400b54:	2500      	movs	r5, #0
	if (p_uldiv) {
  400b56:	b12a      	cbz	r2, 400b64 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400b58:	a906      	add	r1, sp, #24
  400b5a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400b5e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400b62:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400b64:	2b00      	cmp	r3, #0
  400b66:	d0f3      	beq.n	400b50 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400b68:	601d      	str	r5, [r3, #0]
	return 1;
  400b6a:	2001      	movs	r0, #1
  400b6c:	e7e9      	b.n	400b42 <tc_find_mck_divisor+0x44>

00400b6e <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400b6e:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400b70:	23ac      	movs	r3, #172	; 0xac
  400b72:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400b74:	680b      	ldr	r3, [r1, #0]
  400b76:	684a      	ldr	r2, [r1, #4]
  400b78:	fbb3 f3f2 	udiv	r3, r3, r2
  400b7c:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400b7e:	1e5c      	subs	r4, r3, #1
  400b80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400b84:	4294      	cmp	r4, r2
  400b86:	d80b      	bhi.n	400ba0 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  400b88:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400b8a:	688b      	ldr	r3, [r1, #8]
  400b8c:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400b8e:	f240 2302 	movw	r3, #514	; 0x202
  400b92:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400b96:	2350      	movs	r3, #80	; 0x50
  400b98:	6003      	str	r3, [r0, #0]

	return 0;
  400b9a:	2000      	movs	r0, #0
}
  400b9c:	bc10      	pop	{r4}
  400b9e:	4770      	bx	lr
		return 1;
  400ba0:	2001      	movs	r0, #1
  400ba2:	e7fb      	b.n	400b9c <uart_init+0x2e>

00400ba4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400ba4:	6943      	ldr	r3, [r0, #20]
  400ba6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400baa:	bf1a      	itte	ne
  400bac:	61c1      	strne	r1, [r0, #28]
	return 0;
  400bae:	2000      	movne	r0, #0
		return 1;
  400bb0:	2001      	moveq	r0, #1
}
  400bb2:	4770      	bx	lr

00400bb4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400bb4:	6943      	ldr	r3, [r0, #20]
  400bb6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400bba:	bf1d      	ittte	ne
  400bbc:	6983      	ldrne	r3, [r0, #24]
  400bbe:	700b      	strbne	r3, [r1, #0]
	return 0;
  400bc0:	2000      	movne	r0, #0
		return 1;
  400bc2:	2001      	moveq	r0, #1
}
  400bc4:	4770      	bx	lr

00400bc6 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400bc6:	6943      	ldr	r3, [r0, #20]
  400bc8:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400bcc:	bf1d      	ittte	ne
  400bce:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400bd2:	61c1      	strne	r1, [r0, #28]
	return 0;
  400bd4:	2000      	movne	r0, #0
		return 1;
  400bd6:	2001      	moveq	r0, #1
}
  400bd8:	4770      	bx	lr

00400bda <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400bda:	6943      	ldr	r3, [r0, #20]
  400bdc:	f013 0f01 	tst.w	r3, #1
  400be0:	d005      	beq.n	400bee <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400be2:	6983      	ldr	r3, [r0, #24]
  400be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400be8:	600b      	str	r3, [r1, #0]

	return 0;
  400bea:	2000      	movs	r0, #0
  400bec:	4770      	bx	lr
		return 1;
  400bee:	2001      	movs	r0, #1
}
  400bf0:	4770      	bx	lr

00400bf2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400bf2:	e7fe      	b.n	400bf2 <Dummy_Handler>

00400bf4 <Reset_Handler>:
{
  400bf4:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  400bf6:	4b21      	ldr	r3, [pc, #132]	; (400c7c <Reset_Handler+0x88>)
  400bf8:	4a21      	ldr	r2, [pc, #132]	; (400c80 <Reset_Handler+0x8c>)
  400bfa:	429a      	cmp	r2, r3
  400bfc:	d928      	bls.n	400c50 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  400bfe:	4b21      	ldr	r3, [pc, #132]	; (400c84 <Reset_Handler+0x90>)
  400c00:	4a1e      	ldr	r2, [pc, #120]	; (400c7c <Reset_Handler+0x88>)
  400c02:	429a      	cmp	r2, r3
  400c04:	d20c      	bcs.n	400c20 <Reset_Handler+0x2c>
  400c06:	3b01      	subs	r3, #1
  400c08:	1a9b      	subs	r3, r3, r2
  400c0a:	f023 0303 	bic.w	r3, r3, #3
  400c0e:	3304      	adds	r3, #4
  400c10:	4413      	add	r3, r2
  400c12:	491b      	ldr	r1, [pc, #108]	; (400c80 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  400c14:	f851 0b04 	ldr.w	r0, [r1], #4
  400c18:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400c1c:	429a      	cmp	r2, r3
  400c1e:	d1f9      	bne.n	400c14 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400c20:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  400c22:	4b19      	ldr	r3, [pc, #100]	; (400c88 <Reset_Handler+0x94>)
  400c24:	4a19      	ldr	r2, [pc, #100]	; (400c8c <Reset_Handler+0x98>)
  400c26:	429a      	cmp	r2, r3
  400c28:	d20a      	bcs.n	400c40 <Reset_Handler+0x4c>
  400c2a:	3b01      	subs	r3, #1
  400c2c:	1a9b      	subs	r3, r3, r2
  400c2e:	f023 0303 	bic.w	r3, r3, #3
  400c32:	3304      	adds	r3, #4
  400c34:	4413      	add	r3, r2
		*pDest++ = 0;
  400c36:	2100      	movs	r1, #0
  400c38:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400c3c:	429a      	cmp	r2, r3
  400c3e:	d1fb      	bne.n	400c38 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  400c40:	4b13      	ldr	r3, [pc, #76]	; (400c90 <Reset_Handler+0x9c>)
  400c42:	4a14      	ldr	r2, [pc, #80]	; (400c94 <Reset_Handler+0xa0>)
  400c44:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  400c46:	4b14      	ldr	r3, [pc, #80]	; (400c98 <Reset_Handler+0xa4>)
  400c48:	4798      	blx	r3
	main();
  400c4a:	4b14      	ldr	r3, [pc, #80]	; (400c9c <Reset_Handler+0xa8>)
  400c4c:	4798      	blx	r3
  400c4e:	e7fe      	b.n	400c4e <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  400c50:	4b0a      	ldr	r3, [pc, #40]	; (400c7c <Reset_Handler+0x88>)
  400c52:	4a0b      	ldr	r2, [pc, #44]	; (400c80 <Reset_Handler+0x8c>)
  400c54:	429a      	cmp	r2, r3
  400c56:	d2e3      	bcs.n	400c20 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400c58:	4b0a      	ldr	r3, [pc, #40]	; (400c84 <Reset_Handler+0x90>)
  400c5a:	4808      	ldr	r0, [pc, #32]	; (400c7c <Reset_Handler+0x88>)
  400c5c:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400c5e:	4611      	mov	r1, r2
  400c60:	3a04      	subs	r2, #4
  400c62:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  400c64:	2800      	cmp	r0, #0
  400c66:	d0db      	beq.n	400c20 <Reset_Handler+0x2c>
  400c68:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  400c6c:	f852 0904 	ldr.w	r0, [r2], #-4
  400c70:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  400c74:	42ca      	cmn	r2, r1
  400c76:	d1f9      	bne.n	400c6c <Reset_Handler+0x78>
  400c78:	e7d2      	b.n	400c20 <Reset_Handler+0x2c>
  400c7a:	bf00      	nop
  400c7c:	20000000 	.word	0x20000000
  400c80:	00403598 	.word	0x00403598
  400c84:	20000860 	.word	0x20000860
  400c88:	2000096c 	.word	0x2000096c
  400c8c:	20000860 	.word	0x20000860
  400c90:	e000ed00 	.word	0xe000ed00
  400c94:	00400000 	.word	0x00400000
  400c98:	00401831 	.word	0x00401831
  400c9c:	0040143d 	.word	0x0040143d

00400ca0 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400ca0:	4b3c      	ldr	r3, [pc, #240]	; (400d94 <SystemCoreClockUpdate+0xf4>)
  400ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ca4:	f003 0303 	and.w	r3, r3, #3
  400ca8:	2b03      	cmp	r3, #3
  400caa:	d80e      	bhi.n	400cca <SystemCoreClockUpdate+0x2a>
  400cac:	e8df f003 	tbb	[pc, r3]
  400cb0:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400cb4:	4b38      	ldr	r3, [pc, #224]	; (400d98 <SystemCoreClockUpdate+0xf8>)
  400cb6:	695b      	ldr	r3, [r3, #20]
  400cb8:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400cbc:	bf14      	ite	ne
  400cbe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400cc2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400cc6:	4b35      	ldr	r3, [pc, #212]	; (400d9c <SystemCoreClockUpdate+0xfc>)
  400cc8:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400cca:	4b32      	ldr	r3, [pc, #200]	; (400d94 <SystemCoreClockUpdate+0xf4>)
  400ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cd2:	2b70      	cmp	r3, #112	; 0x70
  400cd4:	d055      	beq.n	400d82 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400cd6:	4b2f      	ldr	r3, [pc, #188]	; (400d94 <SystemCoreClockUpdate+0xf4>)
  400cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  400cda:	4930      	ldr	r1, [pc, #192]	; (400d9c <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400cdc:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  400ce0:	680b      	ldr	r3, [r1, #0]
  400ce2:	40d3      	lsrs	r3, r2
  400ce4:	600b      	str	r3, [r1, #0]
  400ce6:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400ce8:	4b2a      	ldr	r3, [pc, #168]	; (400d94 <SystemCoreClockUpdate+0xf4>)
  400cea:	6a1b      	ldr	r3, [r3, #32]
  400cec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400cf0:	d003      	beq.n	400cfa <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400cf2:	4a2b      	ldr	r2, [pc, #172]	; (400da0 <SystemCoreClockUpdate+0x100>)
  400cf4:	4b29      	ldr	r3, [pc, #164]	; (400d9c <SystemCoreClockUpdate+0xfc>)
  400cf6:	601a      	str	r2, [r3, #0]
  400cf8:	e7e7      	b.n	400cca <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400cfa:	4a2a      	ldr	r2, [pc, #168]	; (400da4 <SystemCoreClockUpdate+0x104>)
  400cfc:	4b27      	ldr	r3, [pc, #156]	; (400d9c <SystemCoreClockUpdate+0xfc>)
  400cfe:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400d00:	4b24      	ldr	r3, [pc, #144]	; (400d94 <SystemCoreClockUpdate+0xf4>)
  400d02:	6a1b      	ldr	r3, [r3, #32]
  400d04:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d08:	2b10      	cmp	r3, #16
  400d0a:	d005      	beq.n	400d18 <SystemCoreClockUpdate+0x78>
  400d0c:	2b20      	cmp	r3, #32
  400d0e:	d1dc      	bne.n	400cca <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400d10:	4a23      	ldr	r2, [pc, #140]	; (400da0 <SystemCoreClockUpdate+0x100>)
  400d12:	4b22      	ldr	r3, [pc, #136]	; (400d9c <SystemCoreClockUpdate+0xfc>)
  400d14:	601a      	str	r2, [r3, #0]
			break;
  400d16:	e7d8      	b.n	400cca <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400d18:	4a23      	ldr	r2, [pc, #140]	; (400da8 <SystemCoreClockUpdate+0x108>)
  400d1a:	4b20      	ldr	r3, [pc, #128]	; (400d9c <SystemCoreClockUpdate+0xfc>)
  400d1c:	601a      	str	r2, [r3, #0]
			break;
  400d1e:	e7d4      	b.n	400cca <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400d20:	4b1c      	ldr	r3, [pc, #112]	; (400d94 <SystemCoreClockUpdate+0xf4>)
  400d22:	6a1b      	ldr	r3, [r3, #32]
  400d24:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400d28:	d018      	beq.n	400d5c <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400d2a:	4a1d      	ldr	r2, [pc, #116]	; (400da0 <SystemCoreClockUpdate+0x100>)
  400d2c:	4b1b      	ldr	r3, [pc, #108]	; (400d9c <SystemCoreClockUpdate+0xfc>)
  400d2e:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400d30:	4b18      	ldr	r3, [pc, #96]	; (400d94 <SystemCoreClockUpdate+0xf4>)
  400d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d34:	f003 0303 	and.w	r3, r3, #3
  400d38:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400d3a:	4a16      	ldr	r2, [pc, #88]	; (400d94 <SystemCoreClockUpdate+0xf4>)
  400d3c:	bf07      	ittee	eq
  400d3e:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400d40:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400d42:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400d44:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400d46:	4815      	ldr	r0, [pc, #84]	; (400d9c <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400d48:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400d4c:	6803      	ldr	r3, [r0, #0]
  400d4e:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  400d52:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400d54:	fbb3 f3f2 	udiv	r3, r3, r2
  400d58:	6003      	str	r3, [r0, #0]
  400d5a:	e7b6      	b.n	400cca <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400d5c:	4a11      	ldr	r2, [pc, #68]	; (400da4 <SystemCoreClockUpdate+0x104>)
  400d5e:	4b0f      	ldr	r3, [pc, #60]	; (400d9c <SystemCoreClockUpdate+0xfc>)
  400d60:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400d62:	4b0c      	ldr	r3, [pc, #48]	; (400d94 <SystemCoreClockUpdate+0xf4>)
  400d64:	6a1b      	ldr	r3, [r3, #32]
  400d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d6a:	2b10      	cmp	r3, #16
  400d6c:	d005      	beq.n	400d7a <SystemCoreClockUpdate+0xda>
  400d6e:	2b20      	cmp	r3, #32
  400d70:	d1de      	bne.n	400d30 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400d72:	4a0b      	ldr	r2, [pc, #44]	; (400da0 <SystemCoreClockUpdate+0x100>)
  400d74:	4b09      	ldr	r3, [pc, #36]	; (400d9c <SystemCoreClockUpdate+0xfc>)
  400d76:	601a      	str	r2, [r3, #0]
					break;
  400d78:	e7da      	b.n	400d30 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400d7a:	4a0b      	ldr	r2, [pc, #44]	; (400da8 <SystemCoreClockUpdate+0x108>)
  400d7c:	4b07      	ldr	r3, [pc, #28]	; (400d9c <SystemCoreClockUpdate+0xfc>)
  400d7e:	601a      	str	r2, [r3, #0]
					break;
  400d80:	e7d6      	b.n	400d30 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400d82:	4a06      	ldr	r2, [pc, #24]	; (400d9c <SystemCoreClockUpdate+0xfc>)
  400d84:	6813      	ldr	r3, [r2, #0]
  400d86:	4909      	ldr	r1, [pc, #36]	; (400dac <SystemCoreClockUpdate+0x10c>)
  400d88:	fba1 1303 	umull	r1, r3, r1, r3
  400d8c:	085b      	lsrs	r3, r3, #1
  400d8e:	6013      	str	r3, [r2, #0]
  400d90:	4770      	bx	lr
  400d92:	bf00      	nop
  400d94:	400e0400 	.word	0x400e0400
  400d98:	400e1410 	.word	0x400e1410
  400d9c:	2000000c 	.word	0x2000000c
  400da0:	00b71b00 	.word	0x00b71b00
  400da4:	003d0900 	.word	0x003d0900
  400da8:	007a1200 	.word	0x007a1200
  400dac:	aaaaaaab 	.word	0xaaaaaaab

00400db0 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400db0:	4b1a      	ldr	r3, [pc, #104]	; (400e1c <system_init_flash+0x6c>)
  400db2:	4298      	cmp	r0, r3
  400db4:	d914      	bls.n	400de0 <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400db6:	4b1a      	ldr	r3, [pc, #104]	; (400e20 <system_init_flash+0x70>)
  400db8:	4298      	cmp	r0, r3
  400dba:	d919      	bls.n	400df0 <system_init_flash+0x40>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400dbc:	4b19      	ldr	r3, [pc, #100]	; (400e24 <system_init_flash+0x74>)
  400dbe:	4298      	cmp	r0, r3
  400dc0:	d91d      	bls.n	400dfe <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400dc2:	4b19      	ldr	r3, [pc, #100]	; (400e28 <system_init_flash+0x78>)
  400dc4:	4298      	cmp	r0, r3
  400dc6:	d921      	bls.n	400e0c <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400dc8:	4b18      	ldr	r3, [pc, #96]	; (400e2c <system_init_flash+0x7c>)
  400dca:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400dcc:	bf94      	ite	ls
  400dce:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400dd2:	4b17      	ldrhi	r3, [pc, #92]	; (400e30 <system_init_flash+0x80>)
  400dd4:	4a17      	ldr	r2, [pc, #92]	; (400e34 <system_init_flash+0x84>)
  400dd6:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400dd8:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ddc:	6013      	str	r3, [r2, #0]
  400dde:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400de0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400de4:	4a13      	ldr	r2, [pc, #76]	; (400e34 <system_init_flash+0x84>)
  400de6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400de8:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400dec:	6013      	str	r3, [r2, #0]
  400dee:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400df0:	4b11      	ldr	r3, [pc, #68]	; (400e38 <system_init_flash+0x88>)
  400df2:	4a10      	ldr	r2, [pc, #64]	; (400e34 <system_init_flash+0x84>)
  400df4:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400df6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400dfa:	6013      	str	r3, [r2, #0]
  400dfc:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400dfe:	4b0f      	ldr	r3, [pc, #60]	; (400e3c <system_init_flash+0x8c>)
  400e00:	4a0c      	ldr	r2, [pc, #48]	; (400e34 <system_init_flash+0x84>)
  400e02:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400e04:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400e08:	6013      	str	r3, [r2, #0]
  400e0a:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400e0c:	4b0c      	ldr	r3, [pc, #48]	; (400e40 <system_init_flash+0x90>)
  400e0e:	4a09      	ldr	r2, [pc, #36]	; (400e34 <system_init_flash+0x84>)
  400e10:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400e12:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400e16:	6013      	str	r3, [r2, #0]
  400e18:	4770      	bx	lr
  400e1a:	bf00      	nop
  400e1c:	01312cff 	.word	0x01312cff
  400e20:	026259ff 	.word	0x026259ff
  400e24:	039386ff 	.word	0x039386ff
  400e28:	04c4b3ff 	.word	0x04c4b3ff
  400e2c:	05f5e0ff 	.word	0x05f5e0ff
  400e30:	04000500 	.word	0x04000500
  400e34:	400e0a00 	.word	0x400e0a00
  400e38:	04000100 	.word	0x04000100
  400e3c:	04000200 	.word	0x04000200
  400e40:	04000300 	.word	0x04000300

00400e44 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400e44:	4b0a      	ldr	r3, [pc, #40]	; (400e70 <_sbrk+0x2c>)
  400e46:	681b      	ldr	r3, [r3, #0]
  400e48:	b153      	cbz	r3, 400e60 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400e4a:	4b09      	ldr	r3, [pc, #36]	; (400e70 <_sbrk+0x2c>)
  400e4c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400e4e:	181a      	adds	r2, r3, r0
  400e50:	4908      	ldr	r1, [pc, #32]	; (400e74 <_sbrk+0x30>)
  400e52:	4291      	cmp	r1, r2
  400e54:	db08      	blt.n	400e68 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400e56:	4610      	mov	r0, r2
  400e58:	4a05      	ldr	r2, [pc, #20]	; (400e70 <_sbrk+0x2c>)
  400e5a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400e5c:	4618      	mov	r0, r3
  400e5e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400e60:	4a05      	ldr	r2, [pc, #20]	; (400e78 <_sbrk+0x34>)
  400e62:	4b03      	ldr	r3, [pc, #12]	; (400e70 <_sbrk+0x2c>)
  400e64:	601a      	str	r2, [r3, #0]
  400e66:	e7f0      	b.n	400e4a <_sbrk+0x6>
		return (caddr_t) -1;	
  400e68:	f04f 30ff 	mov.w	r0, #4294967295
}
  400e6c:	4770      	bx	lr
  400e6e:	bf00      	nop
  400e70:	200008f4 	.word	0x200008f4
  400e74:	20027ffc 	.word	0x20027ffc
  400e78:	20003970 	.word	0x20003970

00400e7c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400e7c:	f04f 30ff 	mov.w	r0, #4294967295
  400e80:	4770      	bx	lr

00400e82 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400e86:	604b      	str	r3, [r1, #4]

	return 0;
}
  400e88:	2000      	movs	r0, #0
  400e8a:	4770      	bx	lr

00400e8c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400e8c:	2001      	movs	r0, #1
  400e8e:	4770      	bx	lr

00400e90 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400e90:	2000      	movs	r0, #0
  400e92:	4770      	bx	lr

00400e94 <vReadSensor>:

#include <asf.h>
#include "BeamBall.h"


void vReadSensor(void) {
  400e94:	b508      	push	{r3, lr}
	puts("Iniciando Leitura do Sensor\r\n");
  400e96:	480a      	ldr	r0, [pc, #40]	; (400ec0 <vReadSensor+0x2c>)
  400e98:	4b0a      	ldr	r3, [pc, #40]	; (400ec4 <vReadSensor+0x30>)
  400e9a:	4798      	blx	r3
	
	// clear timer
	tc_get_status(TC_SENSOR,CHANNEL_SENSOR);
  400e9c:	2101      	movs	r1, #1
  400e9e:	480a      	ldr	r0, [pc, #40]	; (400ec8 <vReadSensor+0x34>)
  400ea0:	4b0a      	ldr	r3, [pc, #40]	; (400ecc <vReadSensor+0x38>)
  400ea2:	4798      	blx	r3
	vClearSensorCounter();
  400ea4:	4b0a      	ldr	r3, [pc, #40]	; (400ed0 <vReadSensor+0x3c>)
  400ea6:	4798      	blx	r3
	
	gpio_set_pin_high(PIO_TRIGGER);
  400ea8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  400eac:	4b09      	ldr	r3, [pc, #36]	; (400ed4 <vReadSensor+0x40>)
  400eae:	4798      	blx	r3
	delay_us(10);
  400eb0:	2056      	movs	r0, #86	; 0x56
  400eb2:	4b09      	ldr	r3, [pc, #36]	; (400ed8 <vReadSensor+0x44>)
  400eb4:	4798      	blx	r3
	gpio_set_pin_low(PIO_TRIGGER);
  400eb6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  400eba:	4b08      	ldr	r3, [pc, #32]	; (400edc <vReadSensor+0x48>)
  400ebc:	4798      	blx	r3
  400ebe:	bd08      	pop	{r3, pc}
  400ec0:	00403478 	.word	0x00403478
  400ec4:	00401985 	.word	0x00401985
  400ec8:	40010000 	.word	0x40010000
  400ecc:	00400af7 	.word	0x00400af7
  400ed0:	00401049 	.word	0x00401049
  400ed4:	0040049d 	.word	0x0040049d
  400ed8:	20000001 	.word	0x20000001
  400edc:	004004b7 	.word	0x004004b7

00400ee0 <vMalhaControle>:
}

void vMalhaControle(double distance) {
  400ee0:	b538      	push	{r3, r4, r5, lr}
  400ee2:	4604      	mov	r4, r0
  400ee4:	460d      	mov	r5, r1
	puts("Executando Malha de Controle\r\n");
  400ee6:	4804      	ldr	r0, [pc, #16]	; (400ef8 <vMalhaControle+0x18>)
  400ee8:	4b04      	ldr	r3, [pc, #16]	; (400efc <vMalhaControle+0x1c>)
  400eea:	4798      	blx	r3
	// Update Motor position
	vRunMotor(motorPos);
}

void vRunMotor(double pos) {
	vPWMUpdateDuty(pos);
  400eec:	4620      	mov	r0, r4
  400eee:	4629      	mov	r1, r5
  400ef0:	4b03      	ldr	r3, [pc, #12]	; (400f00 <vMalhaControle+0x20>)
  400ef2:	4798      	blx	r3
  400ef4:	bd38      	pop	{r3, r4, r5, pc}
  400ef6:	bf00      	nop
  400ef8:	00403458 	.word	0x00403458
  400efc:	00401985 	.word	0x00401985
  400f00:	004013a5 	.word	0x004013a5

00400f04 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400f04:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f06:	b083      	sub	sp, #12
  400f08:	4605      	mov	r5, r0
  400f0a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400f0c:	2300      	movs	r3, #0
  400f0e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400f10:	4b18      	ldr	r3, [pc, #96]	; (400f74 <usart_serial_getchar+0x70>)
  400f12:	4298      	cmp	r0, r3
  400f14:	d00a      	beq.n	400f2c <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400f16:	4b18      	ldr	r3, [pc, #96]	; (400f78 <usart_serial_getchar+0x74>)
  400f18:	4298      	cmp	r0, r3
  400f1a:	d00f      	beq.n	400f3c <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400f1c:	4b17      	ldr	r3, [pc, #92]	; (400f7c <usart_serial_getchar+0x78>)
  400f1e:	4298      	cmp	r0, r3
  400f20:	d014      	beq.n	400f4c <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400f22:	4b17      	ldr	r3, [pc, #92]	; (400f80 <usart_serial_getchar+0x7c>)
  400f24:	429d      	cmp	r5, r3
  400f26:	d01b      	beq.n	400f60 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400f28:	b003      	add	sp, #12
  400f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400f2c:	461f      	mov	r7, r3
  400f2e:	4e15      	ldr	r6, [pc, #84]	; (400f84 <usart_serial_getchar+0x80>)
  400f30:	4621      	mov	r1, r4
  400f32:	4638      	mov	r0, r7
  400f34:	47b0      	blx	r6
  400f36:	2800      	cmp	r0, #0
  400f38:	d1fa      	bne.n	400f30 <usart_serial_getchar+0x2c>
  400f3a:	e7f2      	b.n	400f22 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400f3c:	461e      	mov	r6, r3
  400f3e:	4d11      	ldr	r5, [pc, #68]	; (400f84 <usart_serial_getchar+0x80>)
  400f40:	4621      	mov	r1, r4
  400f42:	4630      	mov	r0, r6
  400f44:	47a8      	blx	r5
  400f46:	2800      	cmp	r0, #0
  400f48:	d1fa      	bne.n	400f40 <usart_serial_getchar+0x3c>
  400f4a:	e7ed      	b.n	400f28 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400f4c:	461e      	mov	r6, r3
  400f4e:	4d0e      	ldr	r5, [pc, #56]	; (400f88 <usart_serial_getchar+0x84>)
  400f50:	a901      	add	r1, sp, #4
  400f52:	4630      	mov	r0, r6
  400f54:	47a8      	blx	r5
  400f56:	2800      	cmp	r0, #0
  400f58:	d1fa      	bne.n	400f50 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400f5a:	9b01      	ldr	r3, [sp, #4]
  400f5c:	7023      	strb	r3, [r4, #0]
  400f5e:	e7e3      	b.n	400f28 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400f60:	461e      	mov	r6, r3
  400f62:	4d09      	ldr	r5, [pc, #36]	; (400f88 <usart_serial_getchar+0x84>)
  400f64:	a901      	add	r1, sp, #4
  400f66:	4630      	mov	r0, r6
  400f68:	47a8      	blx	r5
  400f6a:	2800      	cmp	r0, #0
  400f6c:	d1fa      	bne.n	400f64 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400f6e:	9b01      	ldr	r3, [sp, #4]
  400f70:	7023      	strb	r3, [r4, #0]
}
  400f72:	e7d9      	b.n	400f28 <usart_serial_getchar+0x24>
  400f74:	400e0600 	.word	0x400e0600
  400f78:	400e0800 	.word	0x400e0800
  400f7c:	40024000 	.word	0x40024000
  400f80:	40028000 	.word	0x40028000
  400f84:	00400bb5 	.word	0x00400bb5
  400f88:	00400bdb 	.word	0x00400bdb

00400f8c <usart_serial_putchar>:
{
  400f8c:	b570      	push	{r4, r5, r6, lr}
  400f8e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400f90:	4b18      	ldr	r3, [pc, #96]	; (400ff4 <usart_serial_putchar+0x68>)
  400f92:	4298      	cmp	r0, r3
  400f94:	d00a      	beq.n	400fac <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400f96:	4b18      	ldr	r3, [pc, #96]	; (400ff8 <usart_serial_putchar+0x6c>)
  400f98:	4298      	cmp	r0, r3
  400f9a:	d010      	beq.n	400fbe <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400f9c:	4b17      	ldr	r3, [pc, #92]	; (400ffc <usart_serial_putchar+0x70>)
  400f9e:	4298      	cmp	r0, r3
  400fa0:	d016      	beq.n	400fd0 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400fa2:	4b17      	ldr	r3, [pc, #92]	; (401000 <usart_serial_putchar+0x74>)
  400fa4:	4298      	cmp	r0, r3
  400fa6:	d01c      	beq.n	400fe2 <usart_serial_putchar+0x56>
	return 0;
  400fa8:	2000      	movs	r0, #0
}
  400faa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400fac:	461e      	mov	r6, r3
  400fae:	4d15      	ldr	r5, [pc, #84]	; (401004 <usart_serial_putchar+0x78>)
  400fb0:	4621      	mov	r1, r4
  400fb2:	4630      	mov	r0, r6
  400fb4:	47a8      	blx	r5
  400fb6:	2800      	cmp	r0, #0
  400fb8:	d1fa      	bne.n	400fb0 <usart_serial_putchar+0x24>
		return 1;
  400fba:	2001      	movs	r0, #1
  400fbc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400fbe:	461e      	mov	r6, r3
  400fc0:	4d10      	ldr	r5, [pc, #64]	; (401004 <usart_serial_putchar+0x78>)
  400fc2:	4621      	mov	r1, r4
  400fc4:	4630      	mov	r0, r6
  400fc6:	47a8      	blx	r5
  400fc8:	2800      	cmp	r0, #0
  400fca:	d1fa      	bne.n	400fc2 <usart_serial_putchar+0x36>
		return 1;
  400fcc:	2001      	movs	r0, #1
  400fce:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400fd0:	461e      	mov	r6, r3
  400fd2:	4d0d      	ldr	r5, [pc, #52]	; (401008 <usart_serial_putchar+0x7c>)
  400fd4:	4621      	mov	r1, r4
  400fd6:	4630      	mov	r0, r6
  400fd8:	47a8      	blx	r5
  400fda:	2800      	cmp	r0, #0
  400fdc:	d1fa      	bne.n	400fd4 <usart_serial_putchar+0x48>
		return 1;
  400fde:	2001      	movs	r0, #1
  400fe0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400fe2:	461e      	mov	r6, r3
  400fe4:	4d08      	ldr	r5, [pc, #32]	; (401008 <usart_serial_putchar+0x7c>)
  400fe6:	4621      	mov	r1, r4
  400fe8:	4630      	mov	r0, r6
  400fea:	47a8      	blx	r5
  400fec:	2800      	cmp	r0, #0
  400fee:	d1fa      	bne.n	400fe6 <usart_serial_putchar+0x5a>
		return 1;
  400ff0:	2001      	movs	r0, #1
  400ff2:	bd70      	pop	{r4, r5, r6, pc}
  400ff4:	400e0600 	.word	0x400e0600
  400ff8:	400e0800 	.word	0x400e0800
  400ffc:	40024000 	.word	0x40024000
  401000:	40028000 	.word	0x40028000
  401004:	00400ba5 	.word	0x00400ba5
  401008:	00400bc7 	.word	0x00400bc7

0040100c <vSensorISR>:
    tc_start(TC_SENSOR,CHANNEL_SENSOR);
}

/* ISR Configuration */

void vSensorISR(const uint32_t id, const uint32_t index) {
  40100c:	b508      	push	{r3, lr}
	return (sensor_counter/58);
  40100e:	4b08      	ldr	r3, [pc, #32]	; (401030 <vSensorISR+0x24>)
  401010:	681b      	ldr	r3, [r3, #0]
  401012:	4808      	ldr	r0, [pc, #32]	; (401034 <vSensorISR+0x28>)
  401014:	fb80 2003 	smull	r2, r0, r0, r3
  401018:	4418      	add	r0, r3
  40101a:	17db      	asrs	r3, r3, #31
  40101c:	ebc3 1060 	rsb	r0, r3, r0, asr #5
  401020:	4b05      	ldr	r3, [pc, #20]	; (401038 <vSensorISR+0x2c>)
  401022:	4798      	blx	r3
	double distance = dGetDistance();
	vMalhaControle(distance);
  401024:	4b05      	ldr	r3, [pc, #20]	; (40103c <vSensorISR+0x30>)
  401026:	4798      	blx	r3
	
	puts("Sensor ISR \r\n");
  401028:	4805      	ldr	r0, [pc, #20]	; (401040 <vSensorISR+0x34>)
  40102a:	4b06      	ldr	r3, [pc, #24]	; (401044 <vSensorISR+0x38>)
  40102c:	4798      	blx	r3
  40102e:	bd08      	pop	{r3, pc}
  401030:	200008f8 	.word	0x200008f8
  401034:	8d3dcb09 	.word	0x8d3dcb09
  401038:	00401725 	.word	0x00401725
  40103c:	00400ee1 	.word	0x00400ee1
  401040:	00403544 	.word	0x00403544
  401044:	00401985 	.word	0x00401985

00401048 <vClearSensorCounter>:
	sensor_counter = 0;
  401048:	2200      	movs	r2, #0
  40104a:	4b01      	ldr	r3, [pc, #4]	; (401050 <vClearSensorCounter+0x8>)
  40104c:	601a      	str	r2, [r3, #0]
  40104e:	4770      	bx	lr
  401050:	200008f8 	.word	0x200008f8

00401054 <vAddSensorCounter>:
	sensor_counter++;
  401054:	4a02      	ldr	r2, [pc, #8]	; (401060 <vAddSensorCounter+0xc>)
  401056:	6813      	ldr	r3, [r2, #0]
  401058:	3301      	adds	r3, #1
  40105a:	6013      	str	r3, [r2, #0]
  40105c:	4770      	bx	lr
  40105e:	bf00      	nop
  401060:	200008f8 	.word	0x200008f8

00401064 <vConfigureUART>:
void vConfigureUART(void) {
  401064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401068:	b084      	sub	sp, #16
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40106a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4010f8 <vConfigureUART+0x94>
  40106e:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  401072:	4c16      	ldr	r4, [pc, #88]	; (4010cc <vConfigureUART+0x68>)
  401074:	6823      	ldr	r3, [r4, #0]
  401076:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  401078:	68a3      	ldr	r3, [r4, #8]
  40107a:	9303      	str	r3, [sp, #12]
  40107c:	2008      	movs	r0, #8
  40107e:	4f14      	ldr	r7, [pc, #80]	; (4010d0 <vConfigureUART+0x6c>)
  401080:	47b8      	blx	r7
		uart_init((Uart*)p_usart, &uart_settings);
  401082:	4d14      	ldr	r5, [pc, #80]	; (4010d4 <vConfigureUART+0x70>)
  401084:	a901      	add	r1, sp, #4
  401086:	4628      	mov	r0, r5
  401088:	4e13      	ldr	r6, [pc, #76]	; (4010d8 <vConfigureUART+0x74>)
  40108a:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40108c:	4b13      	ldr	r3, [pc, #76]	; (4010dc <vConfigureUART+0x78>)
  40108e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401090:	4a13      	ldr	r2, [pc, #76]	; (4010e0 <vConfigureUART+0x7c>)
  401092:	4b14      	ldr	r3, [pc, #80]	; (4010e4 <vConfigureUART+0x80>)
  401094:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401096:	4a14      	ldr	r2, [pc, #80]	; (4010e8 <vConfigureUART+0x84>)
  401098:	4b14      	ldr	r3, [pc, #80]	; (4010ec <vConfigureUART+0x88>)
  40109a:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40109c:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  4010a0:	6823      	ldr	r3, [r4, #0]
  4010a2:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  4010a4:	68a3      	ldr	r3, [r4, #8]
  4010a6:	9303      	str	r3, [sp, #12]
  4010a8:	2008      	movs	r0, #8
  4010aa:	47b8      	blx	r7
		uart_init((Uart*)p_usart, &uart_settings);
  4010ac:	a901      	add	r1, sp, #4
  4010ae:	4628      	mov	r0, r5
  4010b0:	47b0      	blx	r6
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4010b2:	4d0f      	ldr	r5, [pc, #60]	; (4010f0 <vConfigureUART+0x8c>)
  4010b4:	682b      	ldr	r3, [r5, #0]
  4010b6:	2100      	movs	r1, #0
  4010b8:	6898      	ldr	r0, [r3, #8]
  4010ba:	4c0e      	ldr	r4, [pc, #56]	; (4010f4 <vConfigureUART+0x90>)
  4010bc:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4010be:	682b      	ldr	r3, [r5, #0]
  4010c0:	2100      	movs	r1, #0
  4010c2:	6858      	ldr	r0, [r3, #4]
  4010c4:	47a0      	blx	r4
}
  4010c6:	b004      	add	sp, #16
  4010c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010cc:	20000014 	.word	0x20000014
  4010d0:	004008c5 	.word	0x004008c5
  4010d4:	400e0600 	.word	0x400e0600
  4010d8:	00400b6f 	.word	0x00400b6f
  4010dc:	20000938 	.word	0x20000938
  4010e0:	00400f8d 	.word	0x00400f8d
  4010e4:	20000934 	.word	0x20000934
  4010e8:	00400f05 	.word	0x00400f05
  4010ec:	20000930 	.word	0x20000930
  4010f0:	20000024 	.word	0x20000024
  4010f4:	00401995 	.word	0x00401995
  4010f8:	07270e00 	.word	0x07270e00

004010fc <TC0_Handler>:
void TC0_Handler(void) {
  4010fc:	b508      	push	{r3, lr}
	puts("Timer Sensor\r\n");
  4010fe:	4805      	ldr	r0, [pc, #20]	; (401114 <TC0_Handler+0x18>)
  401100:	4b05      	ldr	r3, [pc, #20]	; (401118 <TC0_Handler+0x1c>)
  401102:	4798      	blx	r3
	tc_get_status(TC,CHANNEL);
  401104:	2100      	movs	r1, #0
  401106:	4805      	ldr	r0, [pc, #20]	; (40111c <TC0_Handler+0x20>)
  401108:	4b05      	ldr	r3, [pc, #20]	; (401120 <TC0_Handler+0x24>)
  40110a:	4798      	blx	r3
	vReadSensor();
  40110c:	4b05      	ldr	r3, [pc, #20]	; (401124 <TC0_Handler+0x28>)
  40110e:	4798      	blx	r3
  401110:	bd08      	pop	{r3, pc}
  401112:	bf00      	nop
  401114:	00403498 	.word	0x00403498
  401118:	00401985 	.word	0x00401985
  40111c:	40010000 	.word	0x40010000
  401120:	00400af7 	.word	0x00400af7
  401124:	00400e95 	.word	0x00400e95

00401128 <TC1_Handler>:
void TC1_Handler(void) {
  401128:	b508      	push	{r3, lr}
	puts("Timer Contador\r\n");
  40112a:	4805      	ldr	r0, [pc, #20]	; (401140 <TC1_Handler+0x18>)
  40112c:	4b05      	ldr	r3, [pc, #20]	; (401144 <TC1_Handler+0x1c>)
  40112e:	4798      	blx	r3
	tc_get_status(TC_SENSOR,CHANNEL_SENSOR);
  401130:	2101      	movs	r1, #1
  401132:	4805      	ldr	r0, [pc, #20]	; (401148 <TC1_Handler+0x20>)
  401134:	4b05      	ldr	r3, [pc, #20]	; (40114c <TC1_Handler+0x24>)
  401136:	4798      	blx	r3
	vAddSensorCounter();
  401138:	4b05      	ldr	r3, [pc, #20]	; (401150 <TC1_Handler+0x28>)
  40113a:	4798      	blx	r3
  40113c:	bd08      	pop	{r3, pc}
  40113e:	bf00      	nop
  401140:	004034a8 	.word	0x004034a8
  401144:	00401985 	.word	0x00401985
  401148:	40010000 	.word	0x40010000
  40114c:	00400af7 	.word	0x00400af7
  401150:	00401055 	.word	0x00401055

00401154 <vConfigureTimer>:
void vConfigureTimer() {
  401154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401158:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_TC);
  40115a:	2017      	movs	r0, #23
  40115c:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 40124c <vConfigureTimer+0xf8>
  401160:	47d8      	blx	fp
	tc_find_mck_divisor(TC_FREQ,ul_sysclk,&ul_div,&ul_tcclk,ul_sysclk);
  401162:	4c2e      	ldr	r4, [pc, #184]	; (40121c <vConfigureTimer+0xc8>)
  401164:	9400      	str	r4, [sp, #0]
  401166:	ab03      	add	r3, sp, #12
  401168:	aa02      	add	r2, sp, #8
  40116a:	4621      	mov	r1, r4
  40116c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401170:	4d2b      	ldr	r5, [pc, #172]	; (401220 <vConfigureTimer+0xcc>)
  401172:	47a8      	blx	r5
	tc_init(TC,CHANNEL,TC_CMR_CPCTRG|ul_tcclk);
  401174:	9a03      	ldr	r2, [sp, #12]
  401176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40117a:	2100      	movs	r1, #0
  40117c:	4829      	ldr	r0, [pc, #164]	; (401224 <vConfigureTimer+0xd0>)
  40117e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 401250 <vConfigureTimer+0xfc>
  401182:	47c8      	blx	r9
	RC = (ul_sysclk/ul_div)/TC_FREQ;
  401184:	9a02      	ldr	r2, [sp, #8]
  401186:	fbb4 f2f2 	udiv	r2, r4, r2
  40118a:	4b27      	ldr	r3, [pc, #156]	; (401228 <vConfigureTimer+0xd4>)
  40118c:	fba3 3202 	umull	r3, r2, r3, r2
    tc_write_rc(TC,CHANNEL,RC);
  401190:	0992      	lsrs	r2, r2, #6
  401192:	2100      	movs	r1, #0
  401194:	4823      	ldr	r0, [pc, #140]	; (401224 <vConfigureTimer+0xd0>)
  401196:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 401254 <vConfigureTimer+0x100>
  40119a:	47c0      	blx	r8
	tc_enable_interrupt(TC,CHANNEL,TC_IER_CPCS);
  40119c:	2210      	movs	r2, #16
  40119e:	2100      	movs	r1, #0
  4011a0:	4820      	ldr	r0, [pc, #128]	; (401224 <vConfigureTimer+0xd0>)
  4011a2:	4f22      	ldr	r7, [pc, #136]	; (40122c <vConfigureTimer+0xd8>)
  4011a4:	47b8      	blx	r7
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4011a6:	4e22      	ldr	r6, [pc, #136]	; (401230 <vConfigureTimer+0xdc>)
  4011a8:	2330      	movs	r3, #48	; 0x30
  4011aa:	f886 3317 	strb.w	r3, [r6, #791]	; 0x317
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4011ae:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
  4011b2:	f8c6 a000 	str.w	sl, [r6]
	puts("Timer 0 Configurado para 100ms\r\n");
  4011b6:	481f      	ldr	r0, [pc, #124]	; (401234 <vConfigureTimer+0xe0>)
  4011b8:	4b1f      	ldr	r3, [pc, #124]	; (401238 <vConfigureTimer+0xe4>)
  4011ba:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC_SENSOR);
  4011bc:	2017      	movs	r0, #23
  4011be:	47d8      	blx	fp
	tc_find_mck_divisor(TC_FREQ_SENSOR,ul_sysclk,&ul_div,&ul_tcclk,ul_sysclk);
  4011c0:	9400      	str	r4, [sp, #0]
  4011c2:	ab03      	add	r3, sp, #12
  4011c4:	aa02      	add	r2, sp, #8
  4011c6:	4621      	mov	r1, r4
  4011c8:	481c      	ldr	r0, [pc, #112]	; (40123c <vConfigureTimer+0xe8>)
  4011ca:	47a8      	blx	r5
	tc_init(TC_SENSOR,CHANNEL_SENSOR,TC_CMR_CPCTRG|ul_tcclk);
  4011cc:	9a03      	ldr	r2, [sp, #12]
  4011ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4011d2:	2101      	movs	r1, #1
  4011d4:	4813      	ldr	r0, [pc, #76]	; (401224 <vConfigureTimer+0xd0>)
  4011d6:	47c8      	blx	r9
	RC = (ul_sysclk/ul_div)/TC_FREQ_SENSOR;
  4011d8:	9a02      	ldr	r2, [sp, #8]
  4011da:	fbb4 f2f2 	udiv	r2, r4, r2
  4011de:	0952      	lsrs	r2, r2, #5
  4011e0:	4c17      	ldr	r4, [pc, #92]	; (401240 <vConfigureTimer+0xec>)
  4011e2:	fba4 3202 	umull	r3, r2, r4, r2
    tc_write_rc(TC_SENSOR,CHANNEL_SENSOR,RC);
  4011e6:	09d2      	lsrs	r2, r2, #7
  4011e8:	2101      	movs	r1, #1
  4011ea:	480e      	ldr	r0, [pc, #56]	; (401224 <vConfigureTimer+0xd0>)
  4011ec:	47c0      	blx	r8
	tc_enable_interrupt(TC_SENSOR,CHANNEL_SENSOR,TC_IER_CPCS);
  4011ee:	2210      	movs	r2, #16
  4011f0:	2101      	movs	r1, #1
  4011f2:	480c      	ldr	r0, [pc, #48]	; (401224 <vConfigureTimer+0xd0>)
  4011f4:	47b8      	blx	r7
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4011f6:	2340      	movs	r3, #64	; 0x40
  4011f8:	f886 3317 	strb.w	r3, [r6, #791]	; 0x317
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4011fc:	f8c6 a000 	str.w	sl, [r6]
	puts("Timer 1 Configurado para 10us\r\n");
  401200:	4810      	ldr	r0, [pc, #64]	; (401244 <vConfigureTimer+0xf0>)
  401202:	4b0d      	ldr	r3, [pc, #52]	; (401238 <vConfigureTimer+0xe4>)
  401204:	4798      	blx	r3
	tc_start(TC,CHANNEL);
  401206:	2100      	movs	r1, #0
  401208:	4806      	ldr	r0, [pc, #24]	; (401224 <vConfigureTimer+0xd0>)
  40120a:	4c0f      	ldr	r4, [pc, #60]	; (401248 <vConfigureTimer+0xf4>)
  40120c:	47a0      	blx	r4
    tc_start(TC_SENSOR,CHANNEL_SENSOR);
  40120e:	2101      	movs	r1, #1
  401210:	4804      	ldr	r0, [pc, #16]	; (401224 <vConfigureTimer+0xd0>)
  401212:	47a0      	blx	r4
}
  401214:	b005      	add	sp, #20
  401216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40121a:	bf00      	nop
  40121c:	07270e00 	.word	0x07270e00
  401220:	00400aff 	.word	0x00400aff
  401224:	40010000 	.word	0x40010000
  401228:	10624dd3 	.word	0x10624dd3
  40122c:	00400aef 	.word	0x00400aef
  401230:	e000e100 	.word	0xe000e100
  401234:	00403500 	.word	0x00403500
  401238:	00401985 	.word	0x00401985
  40123c:	000186a0 	.word	0x000186a0
  401240:	0a7c5ac5 	.word	0x0a7c5ac5
  401244:	00403524 	.word	0x00403524
  401248:	00400adf 	.word	0x00400adf
  40124c:	004008c5 	.word	0x004008c5
  401250:	00400ac7 	.word	0x00400ac7
  401254:	00400ae7 	.word	0x00400ae7

00401258 <vConfigureISR>:
	vPWMUpdateDuty(btn_duty);
	
	puts("Button Right ISR \r\n");
}

void vConfigureISR() {
  401258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40125c:	b082      	sub	sp, #8
	puts("Configuracao Sensor ISR \r\n");
  40125e:	4828      	ldr	r0, [pc, #160]	; (401300 <vConfigureISR+0xa8>)
  401260:	4b28      	ldr	r3, [pc, #160]	; (401304 <vConfigureISR+0xac>)
  401262:	4798      	blx	r3
	
	/* Configuracao da ISR no PIO_ECHO do Sensor */
	pio_set_input(PIOA, PIO_ECHO, PIO_DEBOUNCE);
  401264:	4c28      	ldr	r4, [pc, #160]	; (401308 <vConfigureISR+0xb0>)
  401266:	2208      	movs	r2, #8
  401268:	4611      	mov	r1, r2
  40126a:	4620      	mov	r0, r4
  40126c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 40132c <vConfigureISR+0xd4>
  401270:	47c8      	blx	r9
	pio_pull_down(PIOA,PIO_ECHO,1);
  401272:	2201      	movs	r2, #1
  401274:	2108      	movs	r1, #8
  401276:	4620      	mov	r0, r4
  401278:	4b24      	ldr	r3, [pc, #144]	; (40130c <vConfigureISR+0xb4>)
  40127a:	4798      	blx	r3
	pio_handler_set(PIOA,ID_PIOA,PIO_ECHO,PIO_IT_RISE_EDGE,vSensorISR);
  40127c:	4b24      	ldr	r3, [pc, #144]	; (401310 <vConfigureISR+0xb8>)
  40127e:	9300      	str	r3, [sp, #0]
  401280:	2370      	movs	r3, #112	; 0x70
  401282:	2208      	movs	r2, #8
  401284:	210b      	movs	r1, #11
  401286:	4620      	mov	r0, r4
  401288:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 401330 <vConfigureISR+0xd8>
  40128c:	47c0      	blx	r8
	pio_enable_interrupt(PIOA,PIO_ECHO);
  40128e:	2108      	movs	r1, #8
  401290:	4620      	mov	r0, r4
  401292:	4e20      	ldr	r6, [pc, #128]	; (401314 <vConfigureISR+0xbc>)
  401294:	47b0      	blx	r6
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401296:	4c20      	ldr	r4, [pc, #128]	; (401318 <vConfigureISR+0xc0>)
  401298:	2310      	movs	r3, #16
  40129a:	f884 330b 	strb.w	r3, [r4, #779]	; 0x30b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40129e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4012a2:	6023      	str	r3, [r4, #0]
	NVIC_SetPriority(PIOA_IRQn, SENSOR_PRIORITY);
	NVIC_EnableIRQ(PIOA_IRQn);
	
	/* ISR no Botao */
	pio_set_input(PIOB, PIO_BUTTON_LEFT, PIO_PULLUP | PIO_DEBOUNCE);
  4012a4:	4d1d      	ldr	r5, [pc, #116]	; (40131c <vConfigureISR+0xc4>)
  4012a6:	2209      	movs	r2, #9
  4012a8:	2108      	movs	r1, #8
  4012aa:	4628      	mov	r0, r5
  4012ac:	47c8      	blx	r9
	pio_handler_set(PIOB,ID_PIOB,PIO_BUTTON_LEFT,PIO_IT_RISE_EDGE,vButtonLeftISR);
  4012ae:	4b1c      	ldr	r3, [pc, #112]	; (401320 <vConfigureISR+0xc8>)
  4012b0:	9300      	str	r3, [sp, #0]
  4012b2:	2370      	movs	r3, #112	; 0x70
  4012b4:	2208      	movs	r2, #8
  4012b6:	210c      	movs	r1, #12
  4012b8:	4628      	mov	r0, r5
  4012ba:	47c0      	blx	r8
	pio_enable_interrupt(PIOB,PIO_BUTTON_LEFT);
  4012bc:	2108      	movs	r1, #8
  4012be:	4628      	mov	r0, r5
  4012c0:	47b0      	blx	r6
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4012c2:	f04f 0a20 	mov.w	sl, #32
  4012c6:	f884 a30c 	strb.w	sl, [r4, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4012ca:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  4012ce:	6025      	str	r5, [r4, #0]
	NVIC_SetPriority(PIOB_IRQn, BUTTON_PRIORITY);
	NVIC_EnableIRQ(PIOB_IRQn);
	
	pio_set_input(PIOC, PIO_BUTTON_RIGTH, PIO_PULLUP | PIO_DEBOUNCE);
  4012d0:	4f14      	ldr	r7, [pc, #80]	; (401324 <vConfigureISR+0xcc>)
  4012d2:	2209      	movs	r2, #9
  4012d4:	4629      	mov	r1, r5
  4012d6:	4638      	mov	r0, r7
  4012d8:	47c8      	blx	r9
	pio_handler_set(PIOC,ID_PIOC,PIO_BUTTON_RIGTH,PIO_IT_RISE_EDGE,vButtonRightISR);
  4012da:	4b13      	ldr	r3, [pc, #76]	; (401328 <vConfigureISR+0xd0>)
  4012dc:	9300      	str	r3, [sp, #0]
  4012de:	2370      	movs	r3, #112	; 0x70
  4012e0:	462a      	mov	r2, r5
  4012e2:	210d      	movs	r1, #13
  4012e4:	4638      	mov	r0, r7
  4012e6:	47c0      	blx	r8
	pio_enable_interrupt(PIOC,PIO_BUTTON_RIGTH);
  4012e8:	4629      	mov	r1, r5
  4012ea:	4638      	mov	r0, r7
  4012ec:	47b0      	blx	r6
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4012ee:	f884 a30d 	strb.w	sl, [r4, #781]	; 0x30d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4012f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4012f6:	6023      	str	r3, [r4, #0]
	NVIC_SetPriority(PIOC_IRQn, BUTTON_PRIORITY);
	NVIC_EnableIRQ(PIOC_IRQn);
}
  4012f8:	b002      	add	sp, #8
  4012fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4012fe:	bf00      	nop
  401300:	004034e4 	.word	0x004034e4
  401304:	00401985 	.word	0x00401985
  401308:	400e0e00 	.word	0x400e0e00
  40130c:	00400455 	.word	0x00400455
  401310:	0040100d 	.word	0x0040100d
  401314:	00400491 	.word	0x00400491
  401318:	e000e100 	.word	0xe000e100
  40131c:	400e1000 	.word	0x400e1000
  401320:	004013cd 	.word	0x004013cd
  401324:	400e1200 	.word	0x400e1200
  401328:	00401405 	.word	0x00401405
  40132c:	004003fd 	.word	0x004003fd
  401330:	00400731 	.word	0x00400731

00401334 <vConfigurePWM>:

/* PWM Configuration */

void vConfigurePWM() {
  401334:	b530      	push	{r4, r5, lr}
  401336:	b085      	sub	sp, #20
	
	pmc_enable_periph_clk(ID_PWM);
  401338:	201f      	movs	r0, #31
  40133a:	4b12      	ldr	r3, [pc, #72]	; (401384 <vConfigurePWM+0x50>)
  40133c:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL);
  40133e:	4d12      	ldr	r5, [pc, #72]	; (401388 <vConfigurePWM+0x54>)
  401340:	2100      	movs	r1, #0
  401342:	4628      	mov	r0, r5
  401344:	4b11      	ldr	r3, [pc, #68]	; (40138c <vConfigurePWM+0x58>)
  401346:	4798      	blx	r3
	pwm_clock_t clock_setting = {
  401348:	f241 3388 	movw	r3, #5000	; 0x1388
  40134c:	9301      	str	r3, [sp, #4]
  40134e:	2400      	movs	r4, #0
  401350:	9402      	str	r4, [sp, #8]
  401352:	4b0f      	ldr	r3, [pc, #60]	; (401390 <vConfigurePWM+0x5c>)
  401354:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
  401356:	a901      	add	r1, sp, #4
  401358:	4628      	mov	r0, r5
  40135a:	4b0e      	ldr	r3, [pc, #56]	; (401394 <vConfigurePWM+0x60>)
  40135c:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel.alignment = PWM_ALIGN_LEFT;
  40135e:	490e      	ldr	r1, [pc, #56]	; (401398 <vConfigurePWM+0x64>)
  401360:	810c      	strh	r4, [r1, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel.polarity = PWM_LOW;
  401362:	728c      	strb	r4, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel.ul_prescaler = PWM_CMR_CPRE_CLKA;
  401364:	230b      	movs	r3, #11
  401366:	604b      	str	r3, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel.ul_period = PERIOD_VALUE;
  401368:	2364      	movs	r3, #100	; 0x64
  40136a:	610b      	str	r3, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel.ul_duty = INIT_DUTY_VALUE;
  40136c:	2301      	movs	r3, #1
  40136e:	60cb      	str	r3, [r1, #12]
	g_pwm_channel.channel = PWM_CHANNEL;
  401370:	600c      	str	r4, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel);
  401372:	4628      	mov	r0, r5
  401374:	4b09      	ldr	r3, [pc, #36]	; (40139c <vConfigurePWM+0x68>)
  401376:	4798      	blx	r3
	//pwm_channel_enable_interrupt(PWM, PIN_PWM_LED0_CHANNEL, 0);

	/* Configure interrupt and enable PWM interrupt */
	//NVIC_EnableIRQ(PWM_IRQn);
	
	pwm_channel_enable(PWM, PWM_CHANNEL);
  401378:	4621      	mov	r1, r4
  40137a:	4628      	mov	r0, r5
  40137c:	4b08      	ldr	r3, [pc, #32]	; (4013a0 <vConfigurePWM+0x6c>)
  40137e:	4798      	blx	r3

}
  401380:	b005      	add	sp, #20
  401382:	bd30      	pop	{r4, r5, pc}
  401384:	004008c5 	.word	0x004008c5
  401388:	40020000 	.word	0x40020000
  40138c:	00400abd 	.word	0x00400abd
  401390:	07270e00 	.word	0x07270e00
  401394:	0040096d 	.word	0x0040096d
  401398:	20000940 	.word	0x20000940
  40139c:	004009b1 	.word	0x004009b1
  4013a0:	00400ab3 	.word	0x00400ab3

004013a4 <vPWMUpdateDuty>:

void vPWMUpdateDuty (double duty) {
  4013a4:	b510      	push	{r4, lr}
	g_pwm_channel.channel = PWM_CHANNEL;
  4013a6:	4c05      	ldr	r4, [pc, #20]	; (4013bc <vPWMUpdateDuty+0x18>)
  4013a8:	2300      	movs	r3, #0
  4013aa:	6023      	str	r3, [r4, #0]
	pwm_channel_update_duty(PWM, &g_pwm_channel, duty);
  4013ac:	4b04      	ldr	r3, [pc, #16]	; (4013c0 <vPWMUpdateDuty+0x1c>)
  4013ae:	4798      	blx	r3
  4013b0:	4602      	mov	r2, r0
  4013b2:	4621      	mov	r1, r4
  4013b4:	4803      	ldr	r0, [pc, #12]	; (4013c4 <vPWMUpdateDuty+0x20>)
  4013b6:	4b04      	ldr	r3, [pc, #16]	; (4013c8 <vPWMUpdateDuty+0x24>)
  4013b8:	4798      	blx	r3
  4013ba:	bd10      	pop	{r4, pc}
  4013bc:	20000940 	.word	0x20000940
  4013c0:	004017f1 	.word	0x004017f1
  4013c4:	40020000 	.word	0x40020000
  4013c8:	00400a97 	.word	0x00400a97

004013cc <vButtonLeftISR>:
void vButtonLeftISR(const uint32_t id, const uint32_t index) {
  4013cc:	b508      	push	{r3, lr}
	if (btn_duty < MAX_DUTY_VALUE) btn_duty++;
  4013ce:	4b08      	ldr	r3, [pc, #32]	; (4013f0 <vButtonLeftISR+0x24>)
  4013d0:	681b      	ldr	r3, [r3, #0]
  4013d2:	2b08      	cmp	r3, #8
  4013d4:	d802      	bhi.n	4013dc <vButtonLeftISR+0x10>
  4013d6:	3301      	adds	r3, #1
  4013d8:	4a05      	ldr	r2, [pc, #20]	; (4013f0 <vButtonLeftISR+0x24>)
  4013da:	6013      	str	r3, [r2, #0]
	vPWMUpdateDuty(btn_duty);
  4013dc:	4b04      	ldr	r3, [pc, #16]	; (4013f0 <vButtonLeftISR+0x24>)
  4013de:	6818      	ldr	r0, [r3, #0]
  4013e0:	4b04      	ldr	r3, [pc, #16]	; (4013f4 <vButtonLeftISR+0x28>)
  4013e2:	4798      	blx	r3
  4013e4:	4b04      	ldr	r3, [pc, #16]	; (4013f8 <vButtonLeftISR+0x2c>)
  4013e6:	4798      	blx	r3
	puts("Button Left ISR \r\n");
  4013e8:	4804      	ldr	r0, [pc, #16]	; (4013fc <vButtonLeftISR+0x30>)
  4013ea:	4b05      	ldr	r3, [pc, #20]	; (401400 <vButtonLeftISR+0x34>)
  4013ec:	4798      	blx	r3
  4013ee:	bd08      	pop	{r3, pc}
  4013f0:	20000010 	.word	0x20000010
  4013f4:	00401705 	.word	0x00401705
  4013f8:	004013a5 	.word	0x004013a5
  4013fc:	004034bc 	.word	0x004034bc
  401400:	00401985 	.word	0x00401985

00401404 <vButtonRightISR>:
void vButtonRightISR(const uint32_t id, const uint32_t index) {
  401404:	b508      	push	{r3, lr}
	if (btn_duty > MIN_DUTY_VALUE) btn_duty--;
  401406:	4b08      	ldr	r3, [pc, #32]	; (401428 <vButtonRightISR+0x24>)
  401408:	681b      	ldr	r3, [r3, #0]
  40140a:	2b01      	cmp	r3, #1
  40140c:	d902      	bls.n	401414 <vButtonRightISR+0x10>
  40140e:	3b01      	subs	r3, #1
  401410:	4a05      	ldr	r2, [pc, #20]	; (401428 <vButtonRightISR+0x24>)
  401412:	6013      	str	r3, [r2, #0]
	vPWMUpdateDuty(btn_duty);
  401414:	4b04      	ldr	r3, [pc, #16]	; (401428 <vButtonRightISR+0x24>)
  401416:	6818      	ldr	r0, [r3, #0]
  401418:	4b04      	ldr	r3, [pc, #16]	; (40142c <vButtonRightISR+0x28>)
  40141a:	4798      	blx	r3
  40141c:	4b04      	ldr	r3, [pc, #16]	; (401430 <vButtonRightISR+0x2c>)
  40141e:	4798      	blx	r3
	puts("Button Right ISR \r\n");
  401420:	4804      	ldr	r0, [pc, #16]	; (401434 <vButtonRightISR+0x30>)
  401422:	4b05      	ldr	r3, [pc, #20]	; (401438 <vButtonRightISR+0x34>)
  401424:	4798      	blx	r3
  401426:	bd08      	pop	{r3, pc}
  401428:	20000010 	.word	0x20000010
  40142c:	00401705 	.word	0x00401705
  401430:	004013a5 	.word	0x004013a5
  401434:	004034d0 	.word	0x004034d0
  401438:	00401985 	.word	0x00401985

0040143c <main>:
 */
#include <asf.h>
#include "BeamBall.h"

int main (void)
{
  40143c:	b508      	push	{r3, lr}
	sysclk_init();
  40143e:	4b08      	ldr	r3, [pc, #32]	; (401460 <main+0x24>)
  401440:	4798      	blx	r3
	board_init();
  401442:	4b08      	ldr	r3, [pc, #32]	; (401464 <main+0x28>)
  401444:	4798      	blx	r3
	vConfigureUART();
  401446:	4b08      	ldr	r3, [pc, #32]	; (401468 <main+0x2c>)
  401448:	4798      	blx	r3

	puts("Inicializing Beam Ball\r\n");
  40144a:	4808      	ldr	r0, [pc, #32]	; (40146c <main+0x30>)
  40144c:	4b08      	ldr	r3, [pc, #32]	; (401470 <main+0x34>)
  40144e:	4798      	blx	r3

	vConfigurePWM();
  401450:	4b08      	ldr	r3, [pc, #32]	; (401474 <main+0x38>)
  401452:	4798      	blx	r3
	vConfigureISR();
  401454:	4b08      	ldr	r3, [pc, #32]	; (401478 <main+0x3c>)
  401456:	4798      	blx	r3
	vConfigureTimer();
  401458:	4b08      	ldr	r3, [pc, #32]	; (40147c <main+0x40>)
  40145a:	4798      	blx	r3
  40145c:	e7fe      	b.n	40145c <main+0x20>
  40145e:	bf00      	nop
  401460:	00400139 	.word	0x00400139
  401464:	00400229 	.word	0x00400229
  401468:	00401065 	.word	0x00401065
  40146c:	00403554 	.word	0x00403554
  401470:	00401985 	.word	0x00401985
  401474:	00401335 	.word	0x00401335
  401478:	00401259 	.word	0x00401259
  40147c:	00401155 	.word	0x00401155

00401480 <__aeabi_drsub>:
  401480:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401484:	e002      	b.n	40148c <__adddf3>
  401486:	bf00      	nop

00401488 <__aeabi_dsub>:
  401488:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040148c <__adddf3>:
  40148c:	b530      	push	{r4, r5, lr}
  40148e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401492:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401496:	ea94 0f05 	teq	r4, r5
  40149a:	bf08      	it	eq
  40149c:	ea90 0f02 	teqeq	r0, r2
  4014a0:	bf1f      	itttt	ne
  4014a2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4014a6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4014aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4014ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4014b2:	f000 80e2 	beq.w	40167a <__adddf3+0x1ee>
  4014b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4014ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4014be:	bfb8      	it	lt
  4014c0:	426d      	neglt	r5, r5
  4014c2:	dd0c      	ble.n	4014de <__adddf3+0x52>
  4014c4:	442c      	add	r4, r5
  4014c6:	ea80 0202 	eor.w	r2, r0, r2
  4014ca:	ea81 0303 	eor.w	r3, r1, r3
  4014ce:	ea82 0000 	eor.w	r0, r2, r0
  4014d2:	ea83 0101 	eor.w	r1, r3, r1
  4014d6:	ea80 0202 	eor.w	r2, r0, r2
  4014da:	ea81 0303 	eor.w	r3, r1, r3
  4014de:	2d36      	cmp	r5, #54	; 0x36
  4014e0:	bf88      	it	hi
  4014e2:	bd30      	pophi	{r4, r5, pc}
  4014e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4014e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4014ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4014f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4014f4:	d002      	beq.n	4014fc <__adddf3+0x70>
  4014f6:	4240      	negs	r0, r0
  4014f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4014fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401500:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401504:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401508:	d002      	beq.n	401510 <__adddf3+0x84>
  40150a:	4252      	negs	r2, r2
  40150c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401510:	ea94 0f05 	teq	r4, r5
  401514:	f000 80a7 	beq.w	401666 <__adddf3+0x1da>
  401518:	f1a4 0401 	sub.w	r4, r4, #1
  40151c:	f1d5 0e20 	rsbs	lr, r5, #32
  401520:	db0d      	blt.n	40153e <__adddf3+0xb2>
  401522:	fa02 fc0e 	lsl.w	ip, r2, lr
  401526:	fa22 f205 	lsr.w	r2, r2, r5
  40152a:	1880      	adds	r0, r0, r2
  40152c:	f141 0100 	adc.w	r1, r1, #0
  401530:	fa03 f20e 	lsl.w	r2, r3, lr
  401534:	1880      	adds	r0, r0, r2
  401536:	fa43 f305 	asr.w	r3, r3, r5
  40153a:	4159      	adcs	r1, r3
  40153c:	e00e      	b.n	40155c <__adddf3+0xd0>
  40153e:	f1a5 0520 	sub.w	r5, r5, #32
  401542:	f10e 0e20 	add.w	lr, lr, #32
  401546:	2a01      	cmp	r2, #1
  401548:	fa03 fc0e 	lsl.w	ip, r3, lr
  40154c:	bf28      	it	cs
  40154e:	f04c 0c02 	orrcs.w	ip, ip, #2
  401552:	fa43 f305 	asr.w	r3, r3, r5
  401556:	18c0      	adds	r0, r0, r3
  401558:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40155c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401560:	d507      	bpl.n	401572 <__adddf3+0xe6>
  401562:	f04f 0e00 	mov.w	lr, #0
  401566:	f1dc 0c00 	rsbs	ip, ip, #0
  40156a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40156e:	eb6e 0101 	sbc.w	r1, lr, r1
  401572:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401576:	d31b      	bcc.n	4015b0 <__adddf3+0x124>
  401578:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40157c:	d30c      	bcc.n	401598 <__adddf3+0x10c>
  40157e:	0849      	lsrs	r1, r1, #1
  401580:	ea5f 0030 	movs.w	r0, r0, rrx
  401584:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401588:	f104 0401 	add.w	r4, r4, #1
  40158c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401590:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401594:	f080 809a 	bcs.w	4016cc <__adddf3+0x240>
  401598:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40159c:	bf08      	it	eq
  40159e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4015a2:	f150 0000 	adcs.w	r0, r0, #0
  4015a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4015aa:	ea41 0105 	orr.w	r1, r1, r5
  4015ae:	bd30      	pop	{r4, r5, pc}
  4015b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4015b4:	4140      	adcs	r0, r0
  4015b6:	eb41 0101 	adc.w	r1, r1, r1
  4015ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4015be:	f1a4 0401 	sub.w	r4, r4, #1
  4015c2:	d1e9      	bne.n	401598 <__adddf3+0x10c>
  4015c4:	f091 0f00 	teq	r1, #0
  4015c8:	bf04      	itt	eq
  4015ca:	4601      	moveq	r1, r0
  4015cc:	2000      	moveq	r0, #0
  4015ce:	fab1 f381 	clz	r3, r1
  4015d2:	bf08      	it	eq
  4015d4:	3320      	addeq	r3, #32
  4015d6:	f1a3 030b 	sub.w	r3, r3, #11
  4015da:	f1b3 0220 	subs.w	r2, r3, #32
  4015de:	da0c      	bge.n	4015fa <__adddf3+0x16e>
  4015e0:	320c      	adds	r2, #12
  4015e2:	dd08      	ble.n	4015f6 <__adddf3+0x16a>
  4015e4:	f102 0c14 	add.w	ip, r2, #20
  4015e8:	f1c2 020c 	rsb	r2, r2, #12
  4015ec:	fa01 f00c 	lsl.w	r0, r1, ip
  4015f0:	fa21 f102 	lsr.w	r1, r1, r2
  4015f4:	e00c      	b.n	401610 <__adddf3+0x184>
  4015f6:	f102 0214 	add.w	r2, r2, #20
  4015fa:	bfd8      	it	le
  4015fc:	f1c2 0c20 	rsble	ip, r2, #32
  401600:	fa01 f102 	lsl.w	r1, r1, r2
  401604:	fa20 fc0c 	lsr.w	ip, r0, ip
  401608:	bfdc      	itt	le
  40160a:	ea41 010c 	orrle.w	r1, r1, ip
  40160e:	4090      	lslle	r0, r2
  401610:	1ae4      	subs	r4, r4, r3
  401612:	bfa2      	ittt	ge
  401614:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401618:	4329      	orrge	r1, r5
  40161a:	bd30      	popge	{r4, r5, pc}
  40161c:	ea6f 0404 	mvn.w	r4, r4
  401620:	3c1f      	subs	r4, #31
  401622:	da1c      	bge.n	40165e <__adddf3+0x1d2>
  401624:	340c      	adds	r4, #12
  401626:	dc0e      	bgt.n	401646 <__adddf3+0x1ba>
  401628:	f104 0414 	add.w	r4, r4, #20
  40162c:	f1c4 0220 	rsb	r2, r4, #32
  401630:	fa20 f004 	lsr.w	r0, r0, r4
  401634:	fa01 f302 	lsl.w	r3, r1, r2
  401638:	ea40 0003 	orr.w	r0, r0, r3
  40163c:	fa21 f304 	lsr.w	r3, r1, r4
  401640:	ea45 0103 	orr.w	r1, r5, r3
  401644:	bd30      	pop	{r4, r5, pc}
  401646:	f1c4 040c 	rsb	r4, r4, #12
  40164a:	f1c4 0220 	rsb	r2, r4, #32
  40164e:	fa20 f002 	lsr.w	r0, r0, r2
  401652:	fa01 f304 	lsl.w	r3, r1, r4
  401656:	ea40 0003 	orr.w	r0, r0, r3
  40165a:	4629      	mov	r1, r5
  40165c:	bd30      	pop	{r4, r5, pc}
  40165e:	fa21 f004 	lsr.w	r0, r1, r4
  401662:	4629      	mov	r1, r5
  401664:	bd30      	pop	{r4, r5, pc}
  401666:	f094 0f00 	teq	r4, #0
  40166a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40166e:	bf06      	itte	eq
  401670:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401674:	3401      	addeq	r4, #1
  401676:	3d01      	subne	r5, #1
  401678:	e74e      	b.n	401518 <__adddf3+0x8c>
  40167a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40167e:	bf18      	it	ne
  401680:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401684:	d029      	beq.n	4016da <__adddf3+0x24e>
  401686:	ea94 0f05 	teq	r4, r5
  40168a:	bf08      	it	eq
  40168c:	ea90 0f02 	teqeq	r0, r2
  401690:	d005      	beq.n	40169e <__adddf3+0x212>
  401692:	ea54 0c00 	orrs.w	ip, r4, r0
  401696:	bf04      	itt	eq
  401698:	4619      	moveq	r1, r3
  40169a:	4610      	moveq	r0, r2
  40169c:	bd30      	pop	{r4, r5, pc}
  40169e:	ea91 0f03 	teq	r1, r3
  4016a2:	bf1e      	ittt	ne
  4016a4:	2100      	movne	r1, #0
  4016a6:	2000      	movne	r0, #0
  4016a8:	bd30      	popne	{r4, r5, pc}
  4016aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4016ae:	d105      	bne.n	4016bc <__adddf3+0x230>
  4016b0:	0040      	lsls	r0, r0, #1
  4016b2:	4149      	adcs	r1, r1
  4016b4:	bf28      	it	cs
  4016b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4016ba:	bd30      	pop	{r4, r5, pc}
  4016bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4016c0:	bf3c      	itt	cc
  4016c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4016c6:	bd30      	popcc	{r4, r5, pc}
  4016c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4016cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4016d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4016d4:	f04f 0000 	mov.w	r0, #0
  4016d8:	bd30      	pop	{r4, r5, pc}
  4016da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4016de:	bf1a      	itte	ne
  4016e0:	4619      	movne	r1, r3
  4016e2:	4610      	movne	r0, r2
  4016e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4016e8:	bf1c      	itt	ne
  4016ea:	460b      	movne	r3, r1
  4016ec:	4602      	movne	r2, r0
  4016ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4016f2:	bf06      	itte	eq
  4016f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4016f8:	ea91 0f03 	teqeq	r1, r3
  4016fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401700:	bd30      	pop	{r4, r5, pc}
  401702:	bf00      	nop

00401704 <__aeabi_ui2d>:
  401704:	f090 0f00 	teq	r0, #0
  401708:	bf04      	itt	eq
  40170a:	2100      	moveq	r1, #0
  40170c:	4770      	bxeq	lr
  40170e:	b530      	push	{r4, r5, lr}
  401710:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401714:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401718:	f04f 0500 	mov.w	r5, #0
  40171c:	f04f 0100 	mov.w	r1, #0
  401720:	e750      	b.n	4015c4 <__adddf3+0x138>
  401722:	bf00      	nop

00401724 <__aeabi_i2d>:
  401724:	f090 0f00 	teq	r0, #0
  401728:	bf04      	itt	eq
  40172a:	2100      	moveq	r1, #0
  40172c:	4770      	bxeq	lr
  40172e:	b530      	push	{r4, r5, lr}
  401730:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401734:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401738:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40173c:	bf48      	it	mi
  40173e:	4240      	negmi	r0, r0
  401740:	f04f 0100 	mov.w	r1, #0
  401744:	e73e      	b.n	4015c4 <__adddf3+0x138>
  401746:	bf00      	nop

00401748 <__aeabi_f2d>:
  401748:	0042      	lsls	r2, r0, #1
  40174a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40174e:	ea4f 0131 	mov.w	r1, r1, rrx
  401752:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401756:	bf1f      	itttt	ne
  401758:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40175c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401760:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401764:	4770      	bxne	lr
  401766:	f092 0f00 	teq	r2, #0
  40176a:	bf14      	ite	ne
  40176c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401770:	4770      	bxeq	lr
  401772:	b530      	push	{r4, r5, lr}
  401774:	f44f 7460 	mov.w	r4, #896	; 0x380
  401778:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40177c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401780:	e720      	b.n	4015c4 <__adddf3+0x138>
  401782:	bf00      	nop

00401784 <__aeabi_ul2d>:
  401784:	ea50 0201 	orrs.w	r2, r0, r1
  401788:	bf08      	it	eq
  40178a:	4770      	bxeq	lr
  40178c:	b530      	push	{r4, r5, lr}
  40178e:	f04f 0500 	mov.w	r5, #0
  401792:	e00a      	b.n	4017aa <__aeabi_l2d+0x16>

00401794 <__aeabi_l2d>:
  401794:	ea50 0201 	orrs.w	r2, r0, r1
  401798:	bf08      	it	eq
  40179a:	4770      	bxeq	lr
  40179c:	b530      	push	{r4, r5, lr}
  40179e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4017a2:	d502      	bpl.n	4017aa <__aeabi_l2d+0x16>
  4017a4:	4240      	negs	r0, r0
  4017a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4017aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4017ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4017b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4017b6:	f43f aedc 	beq.w	401572 <__adddf3+0xe6>
  4017ba:	f04f 0203 	mov.w	r2, #3
  4017be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4017c2:	bf18      	it	ne
  4017c4:	3203      	addne	r2, #3
  4017c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4017ca:	bf18      	it	ne
  4017cc:	3203      	addne	r2, #3
  4017ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4017d2:	f1c2 0320 	rsb	r3, r2, #32
  4017d6:	fa00 fc03 	lsl.w	ip, r0, r3
  4017da:	fa20 f002 	lsr.w	r0, r0, r2
  4017de:	fa01 fe03 	lsl.w	lr, r1, r3
  4017e2:	ea40 000e 	orr.w	r0, r0, lr
  4017e6:	fa21 f102 	lsr.w	r1, r1, r2
  4017ea:	4414      	add	r4, r2
  4017ec:	e6c1      	b.n	401572 <__adddf3+0xe6>
  4017ee:	bf00      	nop

004017f0 <__aeabi_d2uiz>:
  4017f0:	004a      	lsls	r2, r1, #1
  4017f2:	d211      	bcs.n	401818 <__aeabi_d2uiz+0x28>
  4017f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4017f8:	d211      	bcs.n	40181e <__aeabi_d2uiz+0x2e>
  4017fa:	d50d      	bpl.n	401818 <__aeabi_d2uiz+0x28>
  4017fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  401800:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  401804:	d40e      	bmi.n	401824 <__aeabi_d2uiz+0x34>
  401806:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40180a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40180e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  401812:	fa23 f002 	lsr.w	r0, r3, r2
  401816:	4770      	bx	lr
  401818:	f04f 0000 	mov.w	r0, #0
  40181c:	4770      	bx	lr
  40181e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  401822:	d102      	bne.n	40182a <__aeabi_d2uiz+0x3a>
  401824:	f04f 30ff 	mov.w	r0, #4294967295
  401828:	4770      	bx	lr
  40182a:	f04f 0000 	mov.w	r0, #0
  40182e:	4770      	bx	lr

00401830 <__libc_init_array>:
  401830:	b570      	push	{r4, r5, r6, lr}
  401832:	4e0f      	ldr	r6, [pc, #60]	; (401870 <__libc_init_array+0x40>)
  401834:	4d0f      	ldr	r5, [pc, #60]	; (401874 <__libc_init_array+0x44>)
  401836:	1b76      	subs	r6, r6, r5
  401838:	10b6      	asrs	r6, r6, #2
  40183a:	bf18      	it	ne
  40183c:	2400      	movne	r4, #0
  40183e:	d005      	beq.n	40184c <__libc_init_array+0x1c>
  401840:	3401      	adds	r4, #1
  401842:	f855 3b04 	ldr.w	r3, [r5], #4
  401846:	4798      	blx	r3
  401848:	42a6      	cmp	r6, r4
  40184a:	d1f9      	bne.n	401840 <__libc_init_array+0x10>
  40184c:	4e0a      	ldr	r6, [pc, #40]	; (401878 <__libc_init_array+0x48>)
  40184e:	4d0b      	ldr	r5, [pc, #44]	; (40187c <__libc_init_array+0x4c>)
  401850:	1b76      	subs	r6, r6, r5
  401852:	f001 fe8f 	bl	403574 <_init>
  401856:	10b6      	asrs	r6, r6, #2
  401858:	bf18      	it	ne
  40185a:	2400      	movne	r4, #0
  40185c:	d006      	beq.n	40186c <__libc_init_array+0x3c>
  40185e:	3401      	adds	r4, #1
  401860:	f855 3b04 	ldr.w	r3, [r5], #4
  401864:	4798      	blx	r3
  401866:	42a6      	cmp	r6, r4
  401868:	d1f9      	bne.n	40185e <__libc_init_array+0x2e>
  40186a:	bd70      	pop	{r4, r5, r6, pc}
  40186c:	bd70      	pop	{r4, r5, r6, pc}
  40186e:	bf00      	nop
  401870:	00403580 	.word	0x00403580
  401874:	00403580 	.word	0x00403580
  401878:	00403588 	.word	0x00403588
  40187c:	00403580 	.word	0x00403580

00401880 <memset>:
  401880:	b470      	push	{r4, r5, r6}
  401882:	0786      	lsls	r6, r0, #30
  401884:	d046      	beq.n	401914 <memset+0x94>
  401886:	1e54      	subs	r4, r2, #1
  401888:	2a00      	cmp	r2, #0
  40188a:	d041      	beq.n	401910 <memset+0x90>
  40188c:	b2ca      	uxtb	r2, r1
  40188e:	4603      	mov	r3, r0
  401890:	e002      	b.n	401898 <memset+0x18>
  401892:	f114 34ff 	adds.w	r4, r4, #4294967295
  401896:	d33b      	bcc.n	401910 <memset+0x90>
  401898:	f803 2b01 	strb.w	r2, [r3], #1
  40189c:	079d      	lsls	r5, r3, #30
  40189e:	d1f8      	bne.n	401892 <memset+0x12>
  4018a0:	2c03      	cmp	r4, #3
  4018a2:	d92e      	bls.n	401902 <memset+0x82>
  4018a4:	b2cd      	uxtb	r5, r1
  4018a6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4018aa:	2c0f      	cmp	r4, #15
  4018ac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4018b0:	d919      	bls.n	4018e6 <memset+0x66>
  4018b2:	f103 0210 	add.w	r2, r3, #16
  4018b6:	4626      	mov	r6, r4
  4018b8:	3e10      	subs	r6, #16
  4018ba:	2e0f      	cmp	r6, #15
  4018bc:	f842 5c10 	str.w	r5, [r2, #-16]
  4018c0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4018c4:	f842 5c08 	str.w	r5, [r2, #-8]
  4018c8:	f842 5c04 	str.w	r5, [r2, #-4]
  4018cc:	f102 0210 	add.w	r2, r2, #16
  4018d0:	d8f2      	bhi.n	4018b8 <memset+0x38>
  4018d2:	f1a4 0210 	sub.w	r2, r4, #16
  4018d6:	f022 020f 	bic.w	r2, r2, #15
  4018da:	f004 040f 	and.w	r4, r4, #15
  4018de:	3210      	adds	r2, #16
  4018e0:	2c03      	cmp	r4, #3
  4018e2:	4413      	add	r3, r2
  4018e4:	d90d      	bls.n	401902 <memset+0x82>
  4018e6:	461e      	mov	r6, r3
  4018e8:	4622      	mov	r2, r4
  4018ea:	3a04      	subs	r2, #4
  4018ec:	2a03      	cmp	r2, #3
  4018ee:	f846 5b04 	str.w	r5, [r6], #4
  4018f2:	d8fa      	bhi.n	4018ea <memset+0x6a>
  4018f4:	1f22      	subs	r2, r4, #4
  4018f6:	f022 0203 	bic.w	r2, r2, #3
  4018fa:	3204      	adds	r2, #4
  4018fc:	4413      	add	r3, r2
  4018fe:	f004 0403 	and.w	r4, r4, #3
  401902:	b12c      	cbz	r4, 401910 <memset+0x90>
  401904:	b2c9      	uxtb	r1, r1
  401906:	441c      	add	r4, r3
  401908:	f803 1b01 	strb.w	r1, [r3], #1
  40190c:	429c      	cmp	r4, r3
  40190e:	d1fb      	bne.n	401908 <memset+0x88>
  401910:	bc70      	pop	{r4, r5, r6}
  401912:	4770      	bx	lr
  401914:	4614      	mov	r4, r2
  401916:	4603      	mov	r3, r0
  401918:	e7c2      	b.n	4018a0 <memset+0x20>
  40191a:	bf00      	nop

0040191c <_puts_r>:
  40191c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40191e:	4605      	mov	r5, r0
  401920:	b089      	sub	sp, #36	; 0x24
  401922:	4608      	mov	r0, r1
  401924:	460c      	mov	r4, r1
  401926:	f000 f8eb 	bl	401b00 <strlen>
  40192a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40192c:	4f14      	ldr	r7, [pc, #80]	; (401980 <_puts_r+0x64>)
  40192e:	9404      	str	r4, [sp, #16]
  401930:	2601      	movs	r6, #1
  401932:	1c44      	adds	r4, r0, #1
  401934:	a904      	add	r1, sp, #16
  401936:	2202      	movs	r2, #2
  401938:	9403      	str	r4, [sp, #12]
  40193a:	9005      	str	r0, [sp, #20]
  40193c:	68ac      	ldr	r4, [r5, #8]
  40193e:	9706      	str	r7, [sp, #24]
  401940:	9607      	str	r6, [sp, #28]
  401942:	9101      	str	r1, [sp, #4]
  401944:	9202      	str	r2, [sp, #8]
  401946:	b1b3      	cbz	r3, 401976 <_puts_r+0x5a>
  401948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40194c:	049a      	lsls	r2, r3, #18
  40194e:	d406      	bmi.n	40195e <_puts_r+0x42>
  401950:	6e62      	ldr	r2, [r4, #100]	; 0x64
  401952:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40195a:	81a3      	strh	r3, [r4, #12]
  40195c:	6662      	str	r2, [r4, #100]	; 0x64
  40195e:	4621      	mov	r1, r4
  401960:	4628      	mov	r0, r5
  401962:	aa01      	add	r2, sp, #4
  401964:	f000 fbd8 	bl	402118 <__sfvwrite_r>
  401968:	2800      	cmp	r0, #0
  40196a:	bf14      	ite	ne
  40196c:	f04f 30ff 	movne.w	r0, #4294967295
  401970:	200a      	moveq	r0, #10
  401972:	b009      	add	sp, #36	; 0x24
  401974:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401976:	4628      	mov	r0, r5
  401978:	f000 fa74 	bl	401e64 <__sinit>
  40197c:	e7e4      	b.n	401948 <_puts_r+0x2c>
  40197e:	bf00      	nop
  401980:	00403550 	.word	0x00403550

00401984 <puts>:
  401984:	4b02      	ldr	r3, [pc, #8]	; (401990 <puts+0xc>)
  401986:	4601      	mov	r1, r0
  401988:	6818      	ldr	r0, [r3, #0]
  40198a:	f7ff bfc7 	b.w	40191c <_puts_r>
  40198e:	bf00      	nop
  401990:	20000024 	.word	0x20000024

00401994 <setbuf>:
  401994:	2900      	cmp	r1, #0
  401996:	bf0c      	ite	eq
  401998:	2202      	moveq	r2, #2
  40199a:	2200      	movne	r2, #0
  40199c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4019a0:	f000 b800 	b.w	4019a4 <setvbuf>

004019a4 <setvbuf>:
  4019a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4019a8:	4c50      	ldr	r4, [pc, #320]	; (401aec <setvbuf+0x148>)
  4019aa:	6825      	ldr	r5, [r4, #0]
  4019ac:	b083      	sub	sp, #12
  4019ae:	4604      	mov	r4, r0
  4019b0:	460f      	mov	r7, r1
  4019b2:	4690      	mov	r8, r2
  4019b4:	461e      	mov	r6, r3
  4019b6:	b115      	cbz	r5, 4019be <setvbuf+0x1a>
  4019b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4019ba:	2b00      	cmp	r3, #0
  4019bc:	d077      	beq.n	401aae <setvbuf+0x10a>
  4019be:	f1b8 0f02 	cmp.w	r8, #2
  4019c2:	d004      	beq.n	4019ce <setvbuf+0x2a>
  4019c4:	f1b8 0f01 	cmp.w	r8, #1
  4019c8:	d87d      	bhi.n	401ac6 <setvbuf+0x122>
  4019ca:	2e00      	cmp	r6, #0
  4019cc:	db7b      	blt.n	401ac6 <setvbuf+0x122>
  4019ce:	4621      	mov	r1, r4
  4019d0:	4628      	mov	r0, r5
  4019d2:	f000 f9b3 	bl	401d3c <_fflush_r>
  4019d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4019d8:	b141      	cbz	r1, 4019ec <setvbuf+0x48>
  4019da:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4019de:	4299      	cmp	r1, r3
  4019e0:	d002      	beq.n	4019e8 <setvbuf+0x44>
  4019e2:	4628      	mov	r0, r5
  4019e4:	f000 fab2 	bl	401f4c <_free_r>
  4019e8:	2300      	movs	r3, #0
  4019ea:	6323      	str	r3, [r4, #48]	; 0x30
  4019ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4019f0:	2200      	movs	r2, #0
  4019f2:	61a2      	str	r2, [r4, #24]
  4019f4:	6062      	str	r2, [r4, #4]
  4019f6:	061a      	lsls	r2, r3, #24
  4019f8:	d452      	bmi.n	401aa0 <setvbuf+0xfc>
  4019fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4019fe:	f023 0303 	bic.w	r3, r3, #3
  401a02:	f1b8 0f02 	cmp.w	r8, #2
  401a06:	81a3      	strh	r3, [r4, #12]
  401a08:	d037      	beq.n	401a7a <setvbuf+0xd6>
  401a0a:	ab01      	add	r3, sp, #4
  401a0c:	466a      	mov	r2, sp
  401a0e:	4621      	mov	r1, r4
  401a10:	4628      	mov	r0, r5
  401a12:	f000 fd23 	bl	40245c <__swhatbuf_r>
  401a16:	89a3      	ldrh	r3, [r4, #12]
  401a18:	4318      	orrs	r0, r3
  401a1a:	81a0      	strh	r0, [r4, #12]
  401a1c:	b316      	cbz	r6, 401a64 <setvbuf+0xc0>
  401a1e:	b317      	cbz	r7, 401a66 <setvbuf+0xc2>
  401a20:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401a22:	2b00      	cmp	r3, #0
  401a24:	d04b      	beq.n	401abe <setvbuf+0x11a>
  401a26:	9b00      	ldr	r3, [sp, #0]
  401a28:	6027      	str	r7, [r4, #0]
  401a2a:	429e      	cmp	r6, r3
  401a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a30:	6127      	str	r7, [r4, #16]
  401a32:	bf1c      	itt	ne
  401a34:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  401a38:	81a3      	strhne	r3, [r4, #12]
  401a3a:	f1b8 0f01 	cmp.w	r8, #1
  401a3e:	bf04      	itt	eq
  401a40:	f043 0301 	orreq.w	r3, r3, #1
  401a44:	81a3      	strheq	r3, [r4, #12]
  401a46:	b29b      	uxth	r3, r3
  401a48:	f013 0008 	ands.w	r0, r3, #8
  401a4c:	6166      	str	r6, [r4, #20]
  401a4e:	d023      	beq.n	401a98 <setvbuf+0xf4>
  401a50:	f013 0001 	ands.w	r0, r3, #1
  401a54:	d02f      	beq.n	401ab6 <setvbuf+0x112>
  401a56:	2000      	movs	r0, #0
  401a58:	4276      	negs	r6, r6
  401a5a:	61a6      	str	r6, [r4, #24]
  401a5c:	60a0      	str	r0, [r4, #8]
  401a5e:	b003      	add	sp, #12
  401a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a64:	9e00      	ldr	r6, [sp, #0]
  401a66:	4630      	mov	r0, r6
  401a68:	f000 fd6a 	bl	402540 <malloc>
  401a6c:	4607      	mov	r7, r0
  401a6e:	b368      	cbz	r0, 401acc <setvbuf+0x128>
  401a70:	89a3      	ldrh	r3, [r4, #12]
  401a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a76:	81a3      	strh	r3, [r4, #12]
  401a78:	e7d2      	b.n	401a20 <setvbuf+0x7c>
  401a7a:	2000      	movs	r0, #0
  401a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401a80:	f043 0302 	orr.w	r3, r3, #2
  401a84:	2500      	movs	r5, #0
  401a86:	2101      	movs	r1, #1
  401a88:	81a3      	strh	r3, [r4, #12]
  401a8a:	60a5      	str	r5, [r4, #8]
  401a8c:	6022      	str	r2, [r4, #0]
  401a8e:	6122      	str	r2, [r4, #16]
  401a90:	6161      	str	r1, [r4, #20]
  401a92:	b003      	add	sp, #12
  401a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a98:	60a0      	str	r0, [r4, #8]
  401a9a:	b003      	add	sp, #12
  401a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401aa0:	6921      	ldr	r1, [r4, #16]
  401aa2:	4628      	mov	r0, r5
  401aa4:	f000 fa52 	bl	401f4c <_free_r>
  401aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401aac:	e7a5      	b.n	4019fa <setvbuf+0x56>
  401aae:	4628      	mov	r0, r5
  401ab0:	f000 f9d8 	bl	401e64 <__sinit>
  401ab4:	e783      	b.n	4019be <setvbuf+0x1a>
  401ab6:	60a6      	str	r6, [r4, #8]
  401ab8:	b003      	add	sp, #12
  401aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401abe:	4628      	mov	r0, r5
  401ac0:	f000 f9d0 	bl	401e64 <__sinit>
  401ac4:	e7af      	b.n	401a26 <setvbuf+0x82>
  401ac6:	f04f 30ff 	mov.w	r0, #4294967295
  401aca:	e7e2      	b.n	401a92 <setvbuf+0xee>
  401acc:	f8dd 9000 	ldr.w	r9, [sp]
  401ad0:	45b1      	cmp	r9, r6
  401ad2:	d006      	beq.n	401ae2 <setvbuf+0x13e>
  401ad4:	4648      	mov	r0, r9
  401ad6:	f000 fd33 	bl	402540 <malloc>
  401ada:	4607      	mov	r7, r0
  401adc:	b108      	cbz	r0, 401ae2 <setvbuf+0x13e>
  401ade:	464e      	mov	r6, r9
  401ae0:	e7c6      	b.n	401a70 <setvbuf+0xcc>
  401ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401ae6:	f04f 30ff 	mov.w	r0, #4294967295
  401aea:	e7c7      	b.n	401a7c <setvbuf+0xd8>
  401aec:	20000024 	.word	0x20000024
	...

00401b00 <strlen>:
  401b00:	f890 f000 	pld	[r0]
  401b04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401b08:	f020 0107 	bic.w	r1, r0, #7
  401b0c:	f06f 0c00 	mvn.w	ip, #0
  401b10:	f010 0407 	ands.w	r4, r0, #7
  401b14:	f891 f020 	pld	[r1, #32]
  401b18:	f040 8049 	bne.w	401bae <strlen+0xae>
  401b1c:	f04f 0400 	mov.w	r4, #0
  401b20:	f06f 0007 	mvn.w	r0, #7
  401b24:	e9d1 2300 	ldrd	r2, r3, [r1]
  401b28:	f891 f040 	pld	[r1, #64]	; 0x40
  401b2c:	f100 0008 	add.w	r0, r0, #8
  401b30:	fa82 f24c 	uadd8	r2, r2, ip
  401b34:	faa4 f28c 	sel	r2, r4, ip
  401b38:	fa83 f34c 	uadd8	r3, r3, ip
  401b3c:	faa2 f38c 	sel	r3, r2, ip
  401b40:	bb4b      	cbnz	r3, 401b96 <strlen+0x96>
  401b42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401b46:	fa82 f24c 	uadd8	r2, r2, ip
  401b4a:	f100 0008 	add.w	r0, r0, #8
  401b4e:	faa4 f28c 	sel	r2, r4, ip
  401b52:	fa83 f34c 	uadd8	r3, r3, ip
  401b56:	faa2 f38c 	sel	r3, r2, ip
  401b5a:	b9e3      	cbnz	r3, 401b96 <strlen+0x96>
  401b5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401b60:	fa82 f24c 	uadd8	r2, r2, ip
  401b64:	f100 0008 	add.w	r0, r0, #8
  401b68:	faa4 f28c 	sel	r2, r4, ip
  401b6c:	fa83 f34c 	uadd8	r3, r3, ip
  401b70:	faa2 f38c 	sel	r3, r2, ip
  401b74:	b97b      	cbnz	r3, 401b96 <strlen+0x96>
  401b76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  401b7a:	f101 0120 	add.w	r1, r1, #32
  401b7e:	fa82 f24c 	uadd8	r2, r2, ip
  401b82:	f100 0008 	add.w	r0, r0, #8
  401b86:	faa4 f28c 	sel	r2, r4, ip
  401b8a:	fa83 f34c 	uadd8	r3, r3, ip
  401b8e:	faa2 f38c 	sel	r3, r2, ip
  401b92:	2b00      	cmp	r3, #0
  401b94:	d0c6      	beq.n	401b24 <strlen+0x24>
  401b96:	2a00      	cmp	r2, #0
  401b98:	bf04      	itt	eq
  401b9a:	3004      	addeq	r0, #4
  401b9c:	461a      	moveq	r2, r3
  401b9e:	ba12      	rev	r2, r2
  401ba0:	fab2 f282 	clz	r2, r2
  401ba4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401ba8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401bac:	4770      	bx	lr
  401bae:	e9d1 2300 	ldrd	r2, r3, [r1]
  401bb2:	f004 0503 	and.w	r5, r4, #3
  401bb6:	f1c4 0000 	rsb	r0, r4, #0
  401bba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  401bbe:	f014 0f04 	tst.w	r4, #4
  401bc2:	f891 f040 	pld	[r1, #64]	; 0x40
  401bc6:	fa0c f505 	lsl.w	r5, ip, r5
  401bca:	ea62 0205 	orn	r2, r2, r5
  401bce:	bf1c      	itt	ne
  401bd0:	ea63 0305 	ornne	r3, r3, r5
  401bd4:	4662      	movne	r2, ip
  401bd6:	f04f 0400 	mov.w	r4, #0
  401bda:	e7a9      	b.n	401b30 <strlen+0x30>

00401bdc <register_fini>:
  401bdc:	4b02      	ldr	r3, [pc, #8]	; (401be8 <register_fini+0xc>)
  401bde:	b113      	cbz	r3, 401be6 <register_fini+0xa>
  401be0:	4802      	ldr	r0, [pc, #8]	; (401bec <register_fini+0x10>)
  401be2:	f000 b805 	b.w	401bf0 <atexit>
  401be6:	4770      	bx	lr
  401be8:	00000000 	.word	0x00000000
  401bec:	00401e79 	.word	0x00401e79

00401bf0 <atexit>:
  401bf0:	2300      	movs	r3, #0
  401bf2:	4601      	mov	r1, r0
  401bf4:	461a      	mov	r2, r3
  401bf6:	4618      	mov	r0, r3
  401bf8:	f001 bb22 	b.w	403240 <__register_exitproc>

00401bfc <__sflush_r>:
  401bfc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401c00:	b29a      	uxth	r2, r3
  401c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c06:	460d      	mov	r5, r1
  401c08:	0711      	lsls	r1, r2, #28
  401c0a:	4680      	mov	r8, r0
  401c0c:	d43a      	bmi.n	401c84 <__sflush_r+0x88>
  401c0e:	686a      	ldr	r2, [r5, #4]
  401c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401c14:	2a00      	cmp	r2, #0
  401c16:	81ab      	strh	r3, [r5, #12]
  401c18:	dd6f      	ble.n	401cfa <__sflush_r+0xfe>
  401c1a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401c1c:	2c00      	cmp	r4, #0
  401c1e:	d049      	beq.n	401cb4 <__sflush_r+0xb8>
  401c20:	2200      	movs	r2, #0
  401c22:	b29b      	uxth	r3, r3
  401c24:	f8d8 6000 	ldr.w	r6, [r8]
  401c28:	f8c8 2000 	str.w	r2, [r8]
  401c2c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  401c30:	d067      	beq.n	401d02 <__sflush_r+0x106>
  401c32:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401c34:	075f      	lsls	r7, r3, #29
  401c36:	d505      	bpl.n	401c44 <__sflush_r+0x48>
  401c38:	6869      	ldr	r1, [r5, #4]
  401c3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401c3c:	1a52      	subs	r2, r2, r1
  401c3e:	b10b      	cbz	r3, 401c44 <__sflush_r+0x48>
  401c40:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401c42:	1ad2      	subs	r2, r2, r3
  401c44:	2300      	movs	r3, #0
  401c46:	69e9      	ldr	r1, [r5, #28]
  401c48:	4640      	mov	r0, r8
  401c4a:	47a0      	blx	r4
  401c4c:	1c44      	adds	r4, r0, #1
  401c4e:	d03c      	beq.n	401cca <__sflush_r+0xce>
  401c50:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401c54:	692a      	ldr	r2, [r5, #16]
  401c56:	602a      	str	r2, [r5, #0]
  401c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401c5c:	2200      	movs	r2, #0
  401c5e:	81ab      	strh	r3, [r5, #12]
  401c60:	04db      	lsls	r3, r3, #19
  401c62:	606a      	str	r2, [r5, #4]
  401c64:	d447      	bmi.n	401cf6 <__sflush_r+0xfa>
  401c66:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401c68:	f8c8 6000 	str.w	r6, [r8]
  401c6c:	b311      	cbz	r1, 401cb4 <__sflush_r+0xb8>
  401c6e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  401c72:	4299      	cmp	r1, r3
  401c74:	d002      	beq.n	401c7c <__sflush_r+0x80>
  401c76:	4640      	mov	r0, r8
  401c78:	f000 f968 	bl	401f4c <_free_r>
  401c7c:	2000      	movs	r0, #0
  401c7e:	6328      	str	r0, [r5, #48]	; 0x30
  401c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c84:	692e      	ldr	r6, [r5, #16]
  401c86:	b1ae      	cbz	r6, 401cb4 <__sflush_r+0xb8>
  401c88:	682c      	ldr	r4, [r5, #0]
  401c8a:	602e      	str	r6, [r5, #0]
  401c8c:	0791      	lsls	r1, r2, #30
  401c8e:	bf0c      	ite	eq
  401c90:	696b      	ldreq	r3, [r5, #20]
  401c92:	2300      	movne	r3, #0
  401c94:	1ba4      	subs	r4, r4, r6
  401c96:	60ab      	str	r3, [r5, #8]
  401c98:	e00a      	b.n	401cb0 <__sflush_r+0xb4>
  401c9a:	4623      	mov	r3, r4
  401c9c:	4632      	mov	r2, r6
  401c9e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  401ca0:	69e9      	ldr	r1, [r5, #28]
  401ca2:	4640      	mov	r0, r8
  401ca4:	47b8      	blx	r7
  401ca6:	2800      	cmp	r0, #0
  401ca8:	eba4 0400 	sub.w	r4, r4, r0
  401cac:	4406      	add	r6, r0
  401cae:	dd04      	ble.n	401cba <__sflush_r+0xbe>
  401cb0:	2c00      	cmp	r4, #0
  401cb2:	dcf2      	bgt.n	401c9a <__sflush_r+0x9e>
  401cb4:	2000      	movs	r0, #0
  401cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401cba:	89ab      	ldrh	r3, [r5, #12]
  401cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401cc0:	81ab      	strh	r3, [r5, #12]
  401cc2:	f04f 30ff 	mov.w	r0, #4294967295
  401cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401cca:	f8d8 4000 	ldr.w	r4, [r8]
  401cce:	2c1d      	cmp	r4, #29
  401cd0:	d8f3      	bhi.n	401cba <__sflush_r+0xbe>
  401cd2:	4b19      	ldr	r3, [pc, #100]	; (401d38 <__sflush_r+0x13c>)
  401cd4:	40e3      	lsrs	r3, r4
  401cd6:	43db      	mvns	r3, r3
  401cd8:	f013 0301 	ands.w	r3, r3, #1
  401cdc:	d1ed      	bne.n	401cba <__sflush_r+0xbe>
  401cde:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  401ce2:	606b      	str	r3, [r5, #4]
  401ce4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401ce8:	6929      	ldr	r1, [r5, #16]
  401cea:	81ab      	strh	r3, [r5, #12]
  401cec:	04da      	lsls	r2, r3, #19
  401cee:	6029      	str	r1, [r5, #0]
  401cf0:	d5b9      	bpl.n	401c66 <__sflush_r+0x6a>
  401cf2:	2c00      	cmp	r4, #0
  401cf4:	d1b7      	bne.n	401c66 <__sflush_r+0x6a>
  401cf6:	6528      	str	r0, [r5, #80]	; 0x50
  401cf8:	e7b5      	b.n	401c66 <__sflush_r+0x6a>
  401cfa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401cfc:	2a00      	cmp	r2, #0
  401cfe:	dc8c      	bgt.n	401c1a <__sflush_r+0x1e>
  401d00:	e7d8      	b.n	401cb4 <__sflush_r+0xb8>
  401d02:	2301      	movs	r3, #1
  401d04:	69e9      	ldr	r1, [r5, #28]
  401d06:	4640      	mov	r0, r8
  401d08:	47a0      	blx	r4
  401d0a:	1c43      	adds	r3, r0, #1
  401d0c:	4602      	mov	r2, r0
  401d0e:	d002      	beq.n	401d16 <__sflush_r+0x11a>
  401d10:	89ab      	ldrh	r3, [r5, #12]
  401d12:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401d14:	e78e      	b.n	401c34 <__sflush_r+0x38>
  401d16:	f8d8 3000 	ldr.w	r3, [r8]
  401d1a:	2b00      	cmp	r3, #0
  401d1c:	d0f8      	beq.n	401d10 <__sflush_r+0x114>
  401d1e:	2b1d      	cmp	r3, #29
  401d20:	d001      	beq.n	401d26 <__sflush_r+0x12a>
  401d22:	2b16      	cmp	r3, #22
  401d24:	d102      	bne.n	401d2c <__sflush_r+0x130>
  401d26:	f8c8 6000 	str.w	r6, [r8]
  401d2a:	e7c3      	b.n	401cb4 <__sflush_r+0xb8>
  401d2c:	89ab      	ldrh	r3, [r5, #12]
  401d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401d32:	81ab      	strh	r3, [r5, #12]
  401d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401d38:	20400001 	.word	0x20400001

00401d3c <_fflush_r>:
  401d3c:	b510      	push	{r4, lr}
  401d3e:	4604      	mov	r4, r0
  401d40:	b082      	sub	sp, #8
  401d42:	b108      	cbz	r0, 401d48 <_fflush_r+0xc>
  401d44:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401d46:	b153      	cbz	r3, 401d5e <_fflush_r+0x22>
  401d48:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  401d4c:	b908      	cbnz	r0, 401d52 <_fflush_r+0x16>
  401d4e:	b002      	add	sp, #8
  401d50:	bd10      	pop	{r4, pc}
  401d52:	4620      	mov	r0, r4
  401d54:	b002      	add	sp, #8
  401d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401d5a:	f7ff bf4f 	b.w	401bfc <__sflush_r>
  401d5e:	9101      	str	r1, [sp, #4]
  401d60:	f000 f880 	bl	401e64 <__sinit>
  401d64:	9901      	ldr	r1, [sp, #4]
  401d66:	e7ef      	b.n	401d48 <_fflush_r+0xc>

00401d68 <_cleanup_r>:
  401d68:	4901      	ldr	r1, [pc, #4]	; (401d70 <_cleanup_r+0x8>)
  401d6a:	f000 bb4d 	b.w	402408 <_fwalk_reent>
  401d6e:	bf00      	nop
  401d70:	00403309 	.word	0x00403309

00401d74 <__sinit.part.1>:
  401d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d78:	4b35      	ldr	r3, [pc, #212]	; (401e50 <__sinit.part.1+0xdc>)
  401d7a:	6845      	ldr	r5, [r0, #4]
  401d7c:	63c3      	str	r3, [r0, #60]	; 0x3c
  401d7e:	2400      	movs	r4, #0
  401d80:	4607      	mov	r7, r0
  401d82:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  401d86:	2304      	movs	r3, #4
  401d88:	2103      	movs	r1, #3
  401d8a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  401d8e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  401d92:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  401d96:	b083      	sub	sp, #12
  401d98:	602c      	str	r4, [r5, #0]
  401d9a:	606c      	str	r4, [r5, #4]
  401d9c:	60ac      	str	r4, [r5, #8]
  401d9e:	666c      	str	r4, [r5, #100]	; 0x64
  401da0:	81ec      	strh	r4, [r5, #14]
  401da2:	612c      	str	r4, [r5, #16]
  401da4:	616c      	str	r4, [r5, #20]
  401da6:	61ac      	str	r4, [r5, #24]
  401da8:	81ab      	strh	r3, [r5, #12]
  401daa:	4621      	mov	r1, r4
  401dac:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401db0:	2208      	movs	r2, #8
  401db2:	f7ff fd65 	bl	401880 <memset>
  401db6:	68be      	ldr	r6, [r7, #8]
  401db8:	f8df b098 	ldr.w	fp, [pc, #152]	; 401e54 <__sinit.part.1+0xe0>
  401dbc:	f8df a098 	ldr.w	sl, [pc, #152]	; 401e58 <__sinit.part.1+0xe4>
  401dc0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 401e5c <__sinit.part.1+0xe8>
  401dc4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401e60 <__sinit.part.1+0xec>
  401dc8:	f8c5 b020 	str.w	fp, [r5, #32]
  401dcc:	2301      	movs	r3, #1
  401dce:	2209      	movs	r2, #9
  401dd0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401dd4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401dd8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401ddc:	61ed      	str	r5, [r5, #28]
  401dde:	4621      	mov	r1, r4
  401de0:	81f3      	strh	r3, [r6, #14]
  401de2:	81b2      	strh	r2, [r6, #12]
  401de4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  401de8:	6034      	str	r4, [r6, #0]
  401dea:	6074      	str	r4, [r6, #4]
  401dec:	60b4      	str	r4, [r6, #8]
  401dee:	6674      	str	r4, [r6, #100]	; 0x64
  401df0:	6134      	str	r4, [r6, #16]
  401df2:	6174      	str	r4, [r6, #20]
  401df4:	61b4      	str	r4, [r6, #24]
  401df6:	2208      	movs	r2, #8
  401df8:	9301      	str	r3, [sp, #4]
  401dfa:	f7ff fd41 	bl	401880 <memset>
  401dfe:	68fd      	ldr	r5, [r7, #12]
  401e00:	61f6      	str	r6, [r6, #28]
  401e02:	2012      	movs	r0, #18
  401e04:	2202      	movs	r2, #2
  401e06:	f8c6 b020 	str.w	fp, [r6, #32]
  401e0a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  401e0e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  401e12:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  401e16:	4621      	mov	r1, r4
  401e18:	81a8      	strh	r0, [r5, #12]
  401e1a:	81ea      	strh	r2, [r5, #14]
  401e1c:	602c      	str	r4, [r5, #0]
  401e1e:	606c      	str	r4, [r5, #4]
  401e20:	60ac      	str	r4, [r5, #8]
  401e22:	666c      	str	r4, [r5, #100]	; 0x64
  401e24:	612c      	str	r4, [r5, #16]
  401e26:	616c      	str	r4, [r5, #20]
  401e28:	61ac      	str	r4, [r5, #24]
  401e2a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401e2e:	2208      	movs	r2, #8
  401e30:	f7ff fd26 	bl	401880 <memset>
  401e34:	9b01      	ldr	r3, [sp, #4]
  401e36:	61ed      	str	r5, [r5, #28]
  401e38:	f8c5 b020 	str.w	fp, [r5, #32]
  401e3c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401e40:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401e44:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401e48:	63bb      	str	r3, [r7, #56]	; 0x38
  401e4a:	b003      	add	sp, #12
  401e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e50:	00401d69 	.word	0x00401d69
  401e54:	004030c5 	.word	0x004030c5
  401e58:	004030e9 	.word	0x004030e9
  401e5c:	00403125 	.word	0x00403125
  401e60:	00403145 	.word	0x00403145

00401e64 <__sinit>:
  401e64:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401e66:	b103      	cbz	r3, 401e6a <__sinit+0x6>
  401e68:	4770      	bx	lr
  401e6a:	f7ff bf83 	b.w	401d74 <__sinit.part.1>
  401e6e:	bf00      	nop

00401e70 <__sfp_lock_acquire>:
  401e70:	4770      	bx	lr
  401e72:	bf00      	nop

00401e74 <__sfp_lock_release>:
  401e74:	4770      	bx	lr
  401e76:	bf00      	nop

00401e78 <__libc_fini_array>:
  401e78:	b538      	push	{r3, r4, r5, lr}
  401e7a:	4c0a      	ldr	r4, [pc, #40]	; (401ea4 <__libc_fini_array+0x2c>)
  401e7c:	4d0a      	ldr	r5, [pc, #40]	; (401ea8 <__libc_fini_array+0x30>)
  401e7e:	1b64      	subs	r4, r4, r5
  401e80:	10a4      	asrs	r4, r4, #2
  401e82:	d00a      	beq.n	401e9a <__libc_fini_array+0x22>
  401e84:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401e88:	3b01      	subs	r3, #1
  401e8a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401e8e:	3c01      	subs	r4, #1
  401e90:	f855 3904 	ldr.w	r3, [r5], #-4
  401e94:	4798      	blx	r3
  401e96:	2c00      	cmp	r4, #0
  401e98:	d1f9      	bne.n	401e8e <__libc_fini_array+0x16>
  401e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401e9e:	f001 bb73 	b.w	403588 <_fini>
  401ea2:	bf00      	nop
  401ea4:	00403598 	.word	0x00403598
  401ea8:	00403594 	.word	0x00403594

00401eac <_malloc_trim_r>:
  401eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401eae:	4f24      	ldr	r7, [pc, #144]	; (401f40 <_malloc_trim_r+0x94>)
  401eb0:	460c      	mov	r4, r1
  401eb2:	4606      	mov	r6, r0
  401eb4:	f000 ff4a 	bl	402d4c <__malloc_lock>
  401eb8:	68bb      	ldr	r3, [r7, #8]
  401eba:	685d      	ldr	r5, [r3, #4]
  401ebc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  401ec0:	310f      	adds	r1, #15
  401ec2:	f025 0503 	bic.w	r5, r5, #3
  401ec6:	4429      	add	r1, r5
  401ec8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401ecc:	f021 010f 	bic.w	r1, r1, #15
  401ed0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401ed4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401ed8:	db07      	blt.n	401eea <_malloc_trim_r+0x3e>
  401eda:	2100      	movs	r1, #0
  401edc:	4630      	mov	r0, r6
  401ede:	f001 f8df 	bl	4030a0 <_sbrk_r>
  401ee2:	68bb      	ldr	r3, [r7, #8]
  401ee4:	442b      	add	r3, r5
  401ee6:	4298      	cmp	r0, r3
  401ee8:	d004      	beq.n	401ef4 <_malloc_trim_r+0x48>
  401eea:	4630      	mov	r0, r6
  401eec:	f000 ff30 	bl	402d50 <__malloc_unlock>
  401ef0:	2000      	movs	r0, #0
  401ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401ef4:	4261      	negs	r1, r4
  401ef6:	4630      	mov	r0, r6
  401ef8:	f001 f8d2 	bl	4030a0 <_sbrk_r>
  401efc:	3001      	adds	r0, #1
  401efe:	d00d      	beq.n	401f1c <_malloc_trim_r+0x70>
  401f00:	4b10      	ldr	r3, [pc, #64]	; (401f44 <_malloc_trim_r+0x98>)
  401f02:	68ba      	ldr	r2, [r7, #8]
  401f04:	6819      	ldr	r1, [r3, #0]
  401f06:	1b2d      	subs	r5, r5, r4
  401f08:	f045 0501 	orr.w	r5, r5, #1
  401f0c:	4630      	mov	r0, r6
  401f0e:	1b09      	subs	r1, r1, r4
  401f10:	6055      	str	r5, [r2, #4]
  401f12:	6019      	str	r1, [r3, #0]
  401f14:	f000 ff1c 	bl	402d50 <__malloc_unlock>
  401f18:	2001      	movs	r0, #1
  401f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f1c:	2100      	movs	r1, #0
  401f1e:	4630      	mov	r0, r6
  401f20:	f001 f8be 	bl	4030a0 <_sbrk_r>
  401f24:	68ba      	ldr	r2, [r7, #8]
  401f26:	1a83      	subs	r3, r0, r2
  401f28:	2b0f      	cmp	r3, #15
  401f2a:	ddde      	ble.n	401eea <_malloc_trim_r+0x3e>
  401f2c:	4c06      	ldr	r4, [pc, #24]	; (401f48 <_malloc_trim_r+0x9c>)
  401f2e:	4905      	ldr	r1, [pc, #20]	; (401f44 <_malloc_trim_r+0x98>)
  401f30:	6824      	ldr	r4, [r4, #0]
  401f32:	f043 0301 	orr.w	r3, r3, #1
  401f36:	1b00      	subs	r0, r0, r4
  401f38:	6053      	str	r3, [r2, #4]
  401f3a:	6008      	str	r0, [r1, #0]
  401f3c:	e7d5      	b.n	401eea <_malloc_trim_r+0x3e>
  401f3e:	bf00      	nop
  401f40:	20000450 	.word	0x20000450
  401f44:	200008fc 	.word	0x200008fc
  401f48:	20000858 	.word	0x20000858

00401f4c <_free_r>:
  401f4c:	2900      	cmp	r1, #0
  401f4e:	d044      	beq.n	401fda <_free_r+0x8e>
  401f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f54:	460d      	mov	r5, r1
  401f56:	4680      	mov	r8, r0
  401f58:	f000 fef8 	bl	402d4c <__malloc_lock>
  401f5c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401f60:	4969      	ldr	r1, [pc, #420]	; (402108 <_free_r+0x1bc>)
  401f62:	f027 0301 	bic.w	r3, r7, #1
  401f66:	f1a5 0408 	sub.w	r4, r5, #8
  401f6a:	18e2      	adds	r2, r4, r3
  401f6c:	688e      	ldr	r6, [r1, #8]
  401f6e:	6850      	ldr	r0, [r2, #4]
  401f70:	42b2      	cmp	r2, r6
  401f72:	f020 0003 	bic.w	r0, r0, #3
  401f76:	d05e      	beq.n	402036 <_free_r+0xea>
  401f78:	07fe      	lsls	r6, r7, #31
  401f7a:	6050      	str	r0, [r2, #4]
  401f7c:	d40b      	bmi.n	401f96 <_free_r+0x4a>
  401f7e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  401f82:	1be4      	subs	r4, r4, r7
  401f84:	f101 0e08 	add.w	lr, r1, #8
  401f88:	68a5      	ldr	r5, [r4, #8]
  401f8a:	4575      	cmp	r5, lr
  401f8c:	443b      	add	r3, r7
  401f8e:	d06d      	beq.n	40206c <_free_r+0x120>
  401f90:	68e7      	ldr	r7, [r4, #12]
  401f92:	60ef      	str	r7, [r5, #12]
  401f94:	60bd      	str	r5, [r7, #8]
  401f96:	1815      	adds	r5, r2, r0
  401f98:	686d      	ldr	r5, [r5, #4]
  401f9a:	07ed      	lsls	r5, r5, #31
  401f9c:	d53e      	bpl.n	40201c <_free_r+0xd0>
  401f9e:	f043 0201 	orr.w	r2, r3, #1
  401fa2:	6062      	str	r2, [r4, #4]
  401fa4:	50e3      	str	r3, [r4, r3]
  401fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401faa:	d217      	bcs.n	401fdc <_free_r+0x90>
  401fac:	08db      	lsrs	r3, r3, #3
  401fae:	1c58      	adds	r0, r3, #1
  401fb0:	109a      	asrs	r2, r3, #2
  401fb2:	684d      	ldr	r5, [r1, #4]
  401fb4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  401fb8:	60a7      	str	r7, [r4, #8]
  401fba:	2301      	movs	r3, #1
  401fbc:	4093      	lsls	r3, r2
  401fbe:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  401fc2:	432b      	orrs	r3, r5
  401fc4:	3a08      	subs	r2, #8
  401fc6:	60e2      	str	r2, [r4, #12]
  401fc8:	604b      	str	r3, [r1, #4]
  401fca:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  401fce:	60fc      	str	r4, [r7, #12]
  401fd0:	4640      	mov	r0, r8
  401fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401fd6:	f000 bebb 	b.w	402d50 <__malloc_unlock>
  401fda:	4770      	bx	lr
  401fdc:	0a5a      	lsrs	r2, r3, #9
  401fde:	2a04      	cmp	r2, #4
  401fe0:	d852      	bhi.n	402088 <_free_r+0x13c>
  401fe2:	099a      	lsrs	r2, r3, #6
  401fe4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401fe8:	00ff      	lsls	r7, r7, #3
  401fea:	f102 0538 	add.w	r5, r2, #56	; 0x38
  401fee:	19c8      	adds	r0, r1, r7
  401ff0:	59ca      	ldr	r2, [r1, r7]
  401ff2:	3808      	subs	r0, #8
  401ff4:	4290      	cmp	r0, r2
  401ff6:	d04f      	beq.n	402098 <_free_r+0x14c>
  401ff8:	6851      	ldr	r1, [r2, #4]
  401ffa:	f021 0103 	bic.w	r1, r1, #3
  401ffe:	428b      	cmp	r3, r1
  402000:	d232      	bcs.n	402068 <_free_r+0x11c>
  402002:	6892      	ldr	r2, [r2, #8]
  402004:	4290      	cmp	r0, r2
  402006:	d1f7      	bne.n	401ff8 <_free_r+0xac>
  402008:	68c3      	ldr	r3, [r0, #12]
  40200a:	60a0      	str	r0, [r4, #8]
  40200c:	60e3      	str	r3, [r4, #12]
  40200e:	609c      	str	r4, [r3, #8]
  402010:	60c4      	str	r4, [r0, #12]
  402012:	4640      	mov	r0, r8
  402014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402018:	f000 be9a 	b.w	402d50 <__malloc_unlock>
  40201c:	6895      	ldr	r5, [r2, #8]
  40201e:	4f3b      	ldr	r7, [pc, #236]	; (40210c <_free_r+0x1c0>)
  402020:	42bd      	cmp	r5, r7
  402022:	4403      	add	r3, r0
  402024:	d040      	beq.n	4020a8 <_free_r+0x15c>
  402026:	68d0      	ldr	r0, [r2, #12]
  402028:	60e8      	str	r0, [r5, #12]
  40202a:	f043 0201 	orr.w	r2, r3, #1
  40202e:	6085      	str	r5, [r0, #8]
  402030:	6062      	str	r2, [r4, #4]
  402032:	50e3      	str	r3, [r4, r3]
  402034:	e7b7      	b.n	401fa6 <_free_r+0x5a>
  402036:	07ff      	lsls	r7, r7, #31
  402038:	4403      	add	r3, r0
  40203a:	d407      	bmi.n	40204c <_free_r+0x100>
  40203c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402040:	1aa4      	subs	r4, r4, r2
  402042:	4413      	add	r3, r2
  402044:	68a0      	ldr	r0, [r4, #8]
  402046:	68e2      	ldr	r2, [r4, #12]
  402048:	60c2      	str	r2, [r0, #12]
  40204a:	6090      	str	r0, [r2, #8]
  40204c:	4a30      	ldr	r2, [pc, #192]	; (402110 <_free_r+0x1c4>)
  40204e:	6812      	ldr	r2, [r2, #0]
  402050:	f043 0001 	orr.w	r0, r3, #1
  402054:	4293      	cmp	r3, r2
  402056:	6060      	str	r0, [r4, #4]
  402058:	608c      	str	r4, [r1, #8]
  40205a:	d3b9      	bcc.n	401fd0 <_free_r+0x84>
  40205c:	4b2d      	ldr	r3, [pc, #180]	; (402114 <_free_r+0x1c8>)
  40205e:	4640      	mov	r0, r8
  402060:	6819      	ldr	r1, [r3, #0]
  402062:	f7ff ff23 	bl	401eac <_malloc_trim_r>
  402066:	e7b3      	b.n	401fd0 <_free_r+0x84>
  402068:	4610      	mov	r0, r2
  40206a:	e7cd      	b.n	402008 <_free_r+0xbc>
  40206c:	1811      	adds	r1, r2, r0
  40206e:	6849      	ldr	r1, [r1, #4]
  402070:	07c9      	lsls	r1, r1, #31
  402072:	d444      	bmi.n	4020fe <_free_r+0x1b2>
  402074:	6891      	ldr	r1, [r2, #8]
  402076:	68d2      	ldr	r2, [r2, #12]
  402078:	60ca      	str	r2, [r1, #12]
  40207a:	4403      	add	r3, r0
  40207c:	f043 0001 	orr.w	r0, r3, #1
  402080:	6091      	str	r1, [r2, #8]
  402082:	6060      	str	r0, [r4, #4]
  402084:	50e3      	str	r3, [r4, r3]
  402086:	e7a3      	b.n	401fd0 <_free_r+0x84>
  402088:	2a14      	cmp	r2, #20
  40208a:	d816      	bhi.n	4020ba <_free_r+0x16e>
  40208c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402090:	00ff      	lsls	r7, r7, #3
  402092:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402096:	e7aa      	b.n	401fee <_free_r+0xa2>
  402098:	10aa      	asrs	r2, r5, #2
  40209a:	2301      	movs	r3, #1
  40209c:	684d      	ldr	r5, [r1, #4]
  40209e:	4093      	lsls	r3, r2
  4020a0:	432b      	orrs	r3, r5
  4020a2:	604b      	str	r3, [r1, #4]
  4020a4:	4603      	mov	r3, r0
  4020a6:	e7b0      	b.n	40200a <_free_r+0xbe>
  4020a8:	f043 0201 	orr.w	r2, r3, #1
  4020ac:	614c      	str	r4, [r1, #20]
  4020ae:	610c      	str	r4, [r1, #16]
  4020b0:	60e5      	str	r5, [r4, #12]
  4020b2:	60a5      	str	r5, [r4, #8]
  4020b4:	6062      	str	r2, [r4, #4]
  4020b6:	50e3      	str	r3, [r4, r3]
  4020b8:	e78a      	b.n	401fd0 <_free_r+0x84>
  4020ba:	2a54      	cmp	r2, #84	; 0x54
  4020bc:	d806      	bhi.n	4020cc <_free_r+0x180>
  4020be:	0b1a      	lsrs	r2, r3, #12
  4020c0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4020c4:	00ff      	lsls	r7, r7, #3
  4020c6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4020ca:	e790      	b.n	401fee <_free_r+0xa2>
  4020cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4020d0:	d806      	bhi.n	4020e0 <_free_r+0x194>
  4020d2:	0bda      	lsrs	r2, r3, #15
  4020d4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4020d8:	00ff      	lsls	r7, r7, #3
  4020da:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4020de:	e786      	b.n	401fee <_free_r+0xa2>
  4020e0:	f240 5054 	movw	r0, #1364	; 0x554
  4020e4:	4282      	cmp	r2, r0
  4020e6:	d806      	bhi.n	4020f6 <_free_r+0x1aa>
  4020e8:	0c9a      	lsrs	r2, r3, #18
  4020ea:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4020ee:	00ff      	lsls	r7, r7, #3
  4020f0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4020f4:	e77b      	b.n	401fee <_free_r+0xa2>
  4020f6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4020fa:	257e      	movs	r5, #126	; 0x7e
  4020fc:	e777      	b.n	401fee <_free_r+0xa2>
  4020fe:	f043 0101 	orr.w	r1, r3, #1
  402102:	6061      	str	r1, [r4, #4]
  402104:	6013      	str	r3, [r2, #0]
  402106:	e763      	b.n	401fd0 <_free_r+0x84>
  402108:	20000450 	.word	0x20000450
  40210c:	20000458 	.word	0x20000458
  402110:	2000085c 	.word	0x2000085c
  402114:	2000092c 	.word	0x2000092c

00402118 <__sfvwrite_r>:
  402118:	6893      	ldr	r3, [r2, #8]
  40211a:	2b00      	cmp	r3, #0
  40211c:	d073      	beq.n	402206 <__sfvwrite_r+0xee>
  40211e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402122:	898b      	ldrh	r3, [r1, #12]
  402124:	b083      	sub	sp, #12
  402126:	460c      	mov	r4, r1
  402128:	0719      	lsls	r1, r3, #28
  40212a:	9000      	str	r0, [sp, #0]
  40212c:	4616      	mov	r6, r2
  40212e:	d526      	bpl.n	40217e <__sfvwrite_r+0x66>
  402130:	6922      	ldr	r2, [r4, #16]
  402132:	b322      	cbz	r2, 40217e <__sfvwrite_r+0x66>
  402134:	f013 0002 	ands.w	r0, r3, #2
  402138:	6835      	ldr	r5, [r6, #0]
  40213a:	d02c      	beq.n	402196 <__sfvwrite_r+0x7e>
  40213c:	f04f 0900 	mov.w	r9, #0
  402140:	4fb0      	ldr	r7, [pc, #704]	; (402404 <__sfvwrite_r+0x2ec>)
  402142:	46c8      	mov	r8, r9
  402144:	46b2      	mov	sl, r6
  402146:	45b8      	cmp	r8, r7
  402148:	4643      	mov	r3, r8
  40214a:	464a      	mov	r2, r9
  40214c:	bf28      	it	cs
  40214e:	463b      	movcs	r3, r7
  402150:	9800      	ldr	r0, [sp, #0]
  402152:	f1b8 0f00 	cmp.w	r8, #0
  402156:	d050      	beq.n	4021fa <__sfvwrite_r+0xe2>
  402158:	69e1      	ldr	r1, [r4, #28]
  40215a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40215c:	47b0      	blx	r6
  40215e:	2800      	cmp	r0, #0
  402160:	dd58      	ble.n	402214 <__sfvwrite_r+0xfc>
  402162:	f8da 3008 	ldr.w	r3, [sl, #8]
  402166:	1a1b      	subs	r3, r3, r0
  402168:	4481      	add	r9, r0
  40216a:	eba8 0800 	sub.w	r8, r8, r0
  40216e:	f8ca 3008 	str.w	r3, [sl, #8]
  402172:	2b00      	cmp	r3, #0
  402174:	d1e7      	bne.n	402146 <__sfvwrite_r+0x2e>
  402176:	2000      	movs	r0, #0
  402178:	b003      	add	sp, #12
  40217a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40217e:	4621      	mov	r1, r4
  402180:	9800      	ldr	r0, [sp, #0]
  402182:	f000 fff9 	bl	403178 <__swsetup_r>
  402186:	2800      	cmp	r0, #0
  402188:	f040 8133 	bne.w	4023f2 <__sfvwrite_r+0x2da>
  40218c:	89a3      	ldrh	r3, [r4, #12]
  40218e:	6835      	ldr	r5, [r6, #0]
  402190:	f013 0002 	ands.w	r0, r3, #2
  402194:	d1d2      	bne.n	40213c <__sfvwrite_r+0x24>
  402196:	f013 0901 	ands.w	r9, r3, #1
  40219a:	d145      	bne.n	402228 <__sfvwrite_r+0x110>
  40219c:	464f      	mov	r7, r9
  40219e:	9601      	str	r6, [sp, #4]
  4021a0:	b337      	cbz	r7, 4021f0 <__sfvwrite_r+0xd8>
  4021a2:	059a      	lsls	r2, r3, #22
  4021a4:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4021a8:	f140 8083 	bpl.w	4022b2 <__sfvwrite_r+0x19a>
  4021ac:	4547      	cmp	r7, r8
  4021ae:	46c3      	mov	fp, r8
  4021b0:	f0c0 80ab 	bcc.w	40230a <__sfvwrite_r+0x1f2>
  4021b4:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4021b8:	f040 80ac 	bne.w	402314 <__sfvwrite_r+0x1fc>
  4021bc:	6820      	ldr	r0, [r4, #0]
  4021be:	46ba      	mov	sl, r7
  4021c0:	465a      	mov	r2, fp
  4021c2:	4649      	mov	r1, r9
  4021c4:	f000 fd5e 	bl	402c84 <memmove>
  4021c8:	68a2      	ldr	r2, [r4, #8]
  4021ca:	6823      	ldr	r3, [r4, #0]
  4021cc:	eba2 0208 	sub.w	r2, r2, r8
  4021d0:	445b      	add	r3, fp
  4021d2:	60a2      	str	r2, [r4, #8]
  4021d4:	6023      	str	r3, [r4, #0]
  4021d6:	9a01      	ldr	r2, [sp, #4]
  4021d8:	6893      	ldr	r3, [r2, #8]
  4021da:	eba3 030a 	sub.w	r3, r3, sl
  4021de:	44d1      	add	r9, sl
  4021e0:	eba7 070a 	sub.w	r7, r7, sl
  4021e4:	6093      	str	r3, [r2, #8]
  4021e6:	2b00      	cmp	r3, #0
  4021e8:	d0c5      	beq.n	402176 <__sfvwrite_r+0x5e>
  4021ea:	89a3      	ldrh	r3, [r4, #12]
  4021ec:	2f00      	cmp	r7, #0
  4021ee:	d1d8      	bne.n	4021a2 <__sfvwrite_r+0x8a>
  4021f0:	f8d5 9000 	ldr.w	r9, [r5]
  4021f4:	686f      	ldr	r7, [r5, #4]
  4021f6:	3508      	adds	r5, #8
  4021f8:	e7d2      	b.n	4021a0 <__sfvwrite_r+0x88>
  4021fa:	f8d5 9000 	ldr.w	r9, [r5]
  4021fe:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402202:	3508      	adds	r5, #8
  402204:	e79f      	b.n	402146 <__sfvwrite_r+0x2e>
  402206:	2000      	movs	r0, #0
  402208:	4770      	bx	lr
  40220a:	4621      	mov	r1, r4
  40220c:	9800      	ldr	r0, [sp, #0]
  40220e:	f7ff fd95 	bl	401d3c <_fflush_r>
  402212:	b370      	cbz	r0, 402272 <__sfvwrite_r+0x15a>
  402214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40221c:	f04f 30ff 	mov.w	r0, #4294967295
  402220:	81a3      	strh	r3, [r4, #12]
  402222:	b003      	add	sp, #12
  402224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402228:	4681      	mov	r9, r0
  40222a:	4633      	mov	r3, r6
  40222c:	464e      	mov	r6, r9
  40222e:	46a8      	mov	r8, r5
  402230:	469a      	mov	sl, r3
  402232:	464d      	mov	r5, r9
  402234:	b34e      	cbz	r6, 40228a <__sfvwrite_r+0x172>
  402236:	b380      	cbz	r0, 40229a <__sfvwrite_r+0x182>
  402238:	6820      	ldr	r0, [r4, #0]
  40223a:	6923      	ldr	r3, [r4, #16]
  40223c:	6962      	ldr	r2, [r4, #20]
  40223e:	45b1      	cmp	r9, r6
  402240:	46cb      	mov	fp, r9
  402242:	bf28      	it	cs
  402244:	46b3      	movcs	fp, r6
  402246:	4298      	cmp	r0, r3
  402248:	465f      	mov	r7, fp
  40224a:	d904      	bls.n	402256 <__sfvwrite_r+0x13e>
  40224c:	68a3      	ldr	r3, [r4, #8]
  40224e:	4413      	add	r3, r2
  402250:	459b      	cmp	fp, r3
  402252:	f300 80a6 	bgt.w	4023a2 <__sfvwrite_r+0x28a>
  402256:	4593      	cmp	fp, r2
  402258:	db4b      	blt.n	4022f2 <__sfvwrite_r+0x1da>
  40225a:	4613      	mov	r3, r2
  40225c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40225e:	69e1      	ldr	r1, [r4, #28]
  402260:	9800      	ldr	r0, [sp, #0]
  402262:	462a      	mov	r2, r5
  402264:	47b8      	blx	r7
  402266:	1e07      	subs	r7, r0, #0
  402268:	ddd4      	ble.n	402214 <__sfvwrite_r+0xfc>
  40226a:	ebb9 0907 	subs.w	r9, r9, r7
  40226e:	d0cc      	beq.n	40220a <__sfvwrite_r+0xf2>
  402270:	2001      	movs	r0, #1
  402272:	f8da 3008 	ldr.w	r3, [sl, #8]
  402276:	1bdb      	subs	r3, r3, r7
  402278:	443d      	add	r5, r7
  40227a:	1bf6      	subs	r6, r6, r7
  40227c:	f8ca 3008 	str.w	r3, [sl, #8]
  402280:	2b00      	cmp	r3, #0
  402282:	f43f af78 	beq.w	402176 <__sfvwrite_r+0x5e>
  402286:	2e00      	cmp	r6, #0
  402288:	d1d5      	bne.n	402236 <__sfvwrite_r+0x11e>
  40228a:	f108 0308 	add.w	r3, r8, #8
  40228e:	e913 0060 	ldmdb	r3, {r5, r6}
  402292:	4698      	mov	r8, r3
  402294:	3308      	adds	r3, #8
  402296:	2e00      	cmp	r6, #0
  402298:	d0f9      	beq.n	40228e <__sfvwrite_r+0x176>
  40229a:	4632      	mov	r2, r6
  40229c:	210a      	movs	r1, #10
  40229e:	4628      	mov	r0, r5
  4022a0:	f000 fc06 	bl	402ab0 <memchr>
  4022a4:	2800      	cmp	r0, #0
  4022a6:	f000 80a1 	beq.w	4023ec <__sfvwrite_r+0x2d4>
  4022aa:	3001      	adds	r0, #1
  4022ac:	eba0 0905 	sub.w	r9, r0, r5
  4022b0:	e7c2      	b.n	402238 <__sfvwrite_r+0x120>
  4022b2:	6820      	ldr	r0, [r4, #0]
  4022b4:	6923      	ldr	r3, [r4, #16]
  4022b6:	4298      	cmp	r0, r3
  4022b8:	d802      	bhi.n	4022c0 <__sfvwrite_r+0x1a8>
  4022ba:	6963      	ldr	r3, [r4, #20]
  4022bc:	429f      	cmp	r7, r3
  4022be:	d25d      	bcs.n	40237c <__sfvwrite_r+0x264>
  4022c0:	45b8      	cmp	r8, r7
  4022c2:	bf28      	it	cs
  4022c4:	46b8      	movcs	r8, r7
  4022c6:	4642      	mov	r2, r8
  4022c8:	4649      	mov	r1, r9
  4022ca:	f000 fcdb 	bl	402c84 <memmove>
  4022ce:	68a3      	ldr	r3, [r4, #8]
  4022d0:	6822      	ldr	r2, [r4, #0]
  4022d2:	eba3 0308 	sub.w	r3, r3, r8
  4022d6:	4442      	add	r2, r8
  4022d8:	60a3      	str	r3, [r4, #8]
  4022da:	6022      	str	r2, [r4, #0]
  4022dc:	b10b      	cbz	r3, 4022e2 <__sfvwrite_r+0x1ca>
  4022de:	46c2      	mov	sl, r8
  4022e0:	e779      	b.n	4021d6 <__sfvwrite_r+0xbe>
  4022e2:	4621      	mov	r1, r4
  4022e4:	9800      	ldr	r0, [sp, #0]
  4022e6:	f7ff fd29 	bl	401d3c <_fflush_r>
  4022ea:	2800      	cmp	r0, #0
  4022ec:	d192      	bne.n	402214 <__sfvwrite_r+0xfc>
  4022ee:	46c2      	mov	sl, r8
  4022f0:	e771      	b.n	4021d6 <__sfvwrite_r+0xbe>
  4022f2:	465a      	mov	r2, fp
  4022f4:	4629      	mov	r1, r5
  4022f6:	f000 fcc5 	bl	402c84 <memmove>
  4022fa:	68a2      	ldr	r2, [r4, #8]
  4022fc:	6823      	ldr	r3, [r4, #0]
  4022fe:	eba2 020b 	sub.w	r2, r2, fp
  402302:	445b      	add	r3, fp
  402304:	60a2      	str	r2, [r4, #8]
  402306:	6023      	str	r3, [r4, #0]
  402308:	e7af      	b.n	40226a <__sfvwrite_r+0x152>
  40230a:	6820      	ldr	r0, [r4, #0]
  40230c:	46b8      	mov	r8, r7
  40230e:	46ba      	mov	sl, r7
  402310:	46bb      	mov	fp, r7
  402312:	e755      	b.n	4021c0 <__sfvwrite_r+0xa8>
  402314:	6962      	ldr	r2, [r4, #20]
  402316:	6820      	ldr	r0, [r4, #0]
  402318:	6921      	ldr	r1, [r4, #16]
  40231a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40231e:	eba0 0a01 	sub.w	sl, r0, r1
  402322:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402326:	f10a 0001 	add.w	r0, sl, #1
  40232a:	ea4f 0868 	mov.w	r8, r8, asr #1
  40232e:	4438      	add	r0, r7
  402330:	4540      	cmp	r0, r8
  402332:	4642      	mov	r2, r8
  402334:	bf84      	itt	hi
  402336:	4680      	movhi	r8, r0
  402338:	4642      	movhi	r2, r8
  40233a:	055b      	lsls	r3, r3, #21
  40233c:	d544      	bpl.n	4023c8 <__sfvwrite_r+0x2b0>
  40233e:	4611      	mov	r1, r2
  402340:	9800      	ldr	r0, [sp, #0]
  402342:	f000 f905 	bl	402550 <_malloc_r>
  402346:	4683      	mov	fp, r0
  402348:	2800      	cmp	r0, #0
  40234a:	d055      	beq.n	4023f8 <__sfvwrite_r+0x2e0>
  40234c:	4652      	mov	r2, sl
  40234e:	6921      	ldr	r1, [r4, #16]
  402350:	f000 fbfe 	bl	402b50 <memcpy>
  402354:	89a3      	ldrh	r3, [r4, #12]
  402356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40235a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40235e:	81a3      	strh	r3, [r4, #12]
  402360:	eb0b 000a 	add.w	r0, fp, sl
  402364:	eba8 030a 	sub.w	r3, r8, sl
  402368:	f8c4 b010 	str.w	fp, [r4, #16]
  40236c:	f8c4 8014 	str.w	r8, [r4, #20]
  402370:	6020      	str	r0, [r4, #0]
  402372:	60a3      	str	r3, [r4, #8]
  402374:	46b8      	mov	r8, r7
  402376:	46ba      	mov	sl, r7
  402378:	46bb      	mov	fp, r7
  40237a:	e721      	b.n	4021c0 <__sfvwrite_r+0xa8>
  40237c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402380:	42b9      	cmp	r1, r7
  402382:	bf28      	it	cs
  402384:	4639      	movcs	r1, r7
  402386:	464a      	mov	r2, r9
  402388:	fb91 f1f3 	sdiv	r1, r1, r3
  40238c:	9800      	ldr	r0, [sp, #0]
  40238e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402390:	fb03 f301 	mul.w	r3, r3, r1
  402394:	69e1      	ldr	r1, [r4, #28]
  402396:	47b0      	blx	r6
  402398:	f1b0 0a00 	subs.w	sl, r0, #0
  40239c:	f73f af1b 	bgt.w	4021d6 <__sfvwrite_r+0xbe>
  4023a0:	e738      	b.n	402214 <__sfvwrite_r+0xfc>
  4023a2:	461a      	mov	r2, r3
  4023a4:	4629      	mov	r1, r5
  4023a6:	9301      	str	r3, [sp, #4]
  4023a8:	f000 fc6c 	bl	402c84 <memmove>
  4023ac:	6822      	ldr	r2, [r4, #0]
  4023ae:	9b01      	ldr	r3, [sp, #4]
  4023b0:	9800      	ldr	r0, [sp, #0]
  4023b2:	441a      	add	r2, r3
  4023b4:	6022      	str	r2, [r4, #0]
  4023b6:	4621      	mov	r1, r4
  4023b8:	f7ff fcc0 	bl	401d3c <_fflush_r>
  4023bc:	9b01      	ldr	r3, [sp, #4]
  4023be:	2800      	cmp	r0, #0
  4023c0:	f47f af28 	bne.w	402214 <__sfvwrite_r+0xfc>
  4023c4:	461f      	mov	r7, r3
  4023c6:	e750      	b.n	40226a <__sfvwrite_r+0x152>
  4023c8:	9800      	ldr	r0, [sp, #0]
  4023ca:	f000 fcc3 	bl	402d54 <_realloc_r>
  4023ce:	4683      	mov	fp, r0
  4023d0:	2800      	cmp	r0, #0
  4023d2:	d1c5      	bne.n	402360 <__sfvwrite_r+0x248>
  4023d4:	9d00      	ldr	r5, [sp, #0]
  4023d6:	6921      	ldr	r1, [r4, #16]
  4023d8:	4628      	mov	r0, r5
  4023da:	f7ff fdb7 	bl	401f4c <_free_r>
  4023de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4023e2:	220c      	movs	r2, #12
  4023e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4023e8:	602a      	str	r2, [r5, #0]
  4023ea:	e715      	b.n	402218 <__sfvwrite_r+0x100>
  4023ec:	f106 0901 	add.w	r9, r6, #1
  4023f0:	e722      	b.n	402238 <__sfvwrite_r+0x120>
  4023f2:	f04f 30ff 	mov.w	r0, #4294967295
  4023f6:	e6bf      	b.n	402178 <__sfvwrite_r+0x60>
  4023f8:	9a00      	ldr	r2, [sp, #0]
  4023fa:	230c      	movs	r3, #12
  4023fc:	6013      	str	r3, [r2, #0]
  4023fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402402:	e709      	b.n	402218 <__sfvwrite_r+0x100>
  402404:	7ffffc00 	.word	0x7ffffc00

00402408 <_fwalk_reent>:
  402408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40240c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402410:	d01f      	beq.n	402452 <_fwalk_reent+0x4a>
  402412:	4688      	mov	r8, r1
  402414:	4606      	mov	r6, r0
  402416:	f04f 0900 	mov.w	r9, #0
  40241a:	687d      	ldr	r5, [r7, #4]
  40241c:	68bc      	ldr	r4, [r7, #8]
  40241e:	3d01      	subs	r5, #1
  402420:	d411      	bmi.n	402446 <_fwalk_reent+0x3e>
  402422:	89a3      	ldrh	r3, [r4, #12]
  402424:	2b01      	cmp	r3, #1
  402426:	f105 35ff 	add.w	r5, r5, #4294967295
  40242a:	d908      	bls.n	40243e <_fwalk_reent+0x36>
  40242c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402430:	3301      	adds	r3, #1
  402432:	4621      	mov	r1, r4
  402434:	4630      	mov	r0, r6
  402436:	d002      	beq.n	40243e <_fwalk_reent+0x36>
  402438:	47c0      	blx	r8
  40243a:	ea49 0900 	orr.w	r9, r9, r0
  40243e:	1c6b      	adds	r3, r5, #1
  402440:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402444:	d1ed      	bne.n	402422 <_fwalk_reent+0x1a>
  402446:	683f      	ldr	r7, [r7, #0]
  402448:	2f00      	cmp	r7, #0
  40244a:	d1e6      	bne.n	40241a <_fwalk_reent+0x12>
  40244c:	4648      	mov	r0, r9
  40244e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402452:	46b9      	mov	r9, r7
  402454:	4648      	mov	r0, r9
  402456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40245a:	bf00      	nop

0040245c <__swhatbuf_r>:
  40245c:	b570      	push	{r4, r5, r6, lr}
  40245e:	460c      	mov	r4, r1
  402460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402464:	2900      	cmp	r1, #0
  402466:	b090      	sub	sp, #64	; 0x40
  402468:	4615      	mov	r5, r2
  40246a:	461e      	mov	r6, r3
  40246c:	db14      	blt.n	402498 <__swhatbuf_r+0x3c>
  40246e:	aa01      	add	r2, sp, #4
  402470:	f000 ff8a 	bl	403388 <_fstat_r>
  402474:	2800      	cmp	r0, #0
  402476:	db0f      	blt.n	402498 <__swhatbuf_r+0x3c>
  402478:	9a02      	ldr	r2, [sp, #8]
  40247a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40247e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402482:	fab2 f282 	clz	r2, r2
  402486:	0952      	lsrs	r2, r2, #5
  402488:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40248c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402490:	6032      	str	r2, [r6, #0]
  402492:	602b      	str	r3, [r5, #0]
  402494:	b010      	add	sp, #64	; 0x40
  402496:	bd70      	pop	{r4, r5, r6, pc}
  402498:	89a2      	ldrh	r2, [r4, #12]
  40249a:	2300      	movs	r3, #0
  40249c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4024a0:	6033      	str	r3, [r6, #0]
  4024a2:	d004      	beq.n	4024ae <__swhatbuf_r+0x52>
  4024a4:	2240      	movs	r2, #64	; 0x40
  4024a6:	4618      	mov	r0, r3
  4024a8:	602a      	str	r2, [r5, #0]
  4024aa:	b010      	add	sp, #64	; 0x40
  4024ac:	bd70      	pop	{r4, r5, r6, pc}
  4024ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4024b2:	602b      	str	r3, [r5, #0]
  4024b4:	b010      	add	sp, #64	; 0x40
  4024b6:	bd70      	pop	{r4, r5, r6, pc}

004024b8 <__smakebuf_r>:
  4024b8:	898a      	ldrh	r2, [r1, #12]
  4024ba:	0792      	lsls	r2, r2, #30
  4024bc:	460b      	mov	r3, r1
  4024be:	d506      	bpl.n	4024ce <__smakebuf_r+0x16>
  4024c0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4024c4:	2101      	movs	r1, #1
  4024c6:	601a      	str	r2, [r3, #0]
  4024c8:	611a      	str	r2, [r3, #16]
  4024ca:	6159      	str	r1, [r3, #20]
  4024cc:	4770      	bx	lr
  4024ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024d0:	b083      	sub	sp, #12
  4024d2:	ab01      	add	r3, sp, #4
  4024d4:	466a      	mov	r2, sp
  4024d6:	460c      	mov	r4, r1
  4024d8:	4605      	mov	r5, r0
  4024da:	f7ff ffbf 	bl	40245c <__swhatbuf_r>
  4024de:	9900      	ldr	r1, [sp, #0]
  4024e0:	4606      	mov	r6, r0
  4024e2:	4628      	mov	r0, r5
  4024e4:	f000 f834 	bl	402550 <_malloc_r>
  4024e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4024ec:	b1d0      	cbz	r0, 402524 <__smakebuf_r+0x6c>
  4024ee:	9a01      	ldr	r2, [sp, #4]
  4024f0:	4f12      	ldr	r7, [pc, #72]	; (40253c <__smakebuf_r+0x84>)
  4024f2:	9900      	ldr	r1, [sp, #0]
  4024f4:	63ef      	str	r7, [r5, #60]	; 0x3c
  4024f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4024fa:	81a3      	strh	r3, [r4, #12]
  4024fc:	6020      	str	r0, [r4, #0]
  4024fe:	6120      	str	r0, [r4, #16]
  402500:	6161      	str	r1, [r4, #20]
  402502:	b91a      	cbnz	r2, 40250c <__smakebuf_r+0x54>
  402504:	4333      	orrs	r3, r6
  402506:	81a3      	strh	r3, [r4, #12]
  402508:	b003      	add	sp, #12
  40250a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40250c:	4628      	mov	r0, r5
  40250e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402512:	f000 ff4d 	bl	4033b0 <_isatty_r>
  402516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40251a:	2800      	cmp	r0, #0
  40251c:	d0f2      	beq.n	402504 <__smakebuf_r+0x4c>
  40251e:	f043 0301 	orr.w	r3, r3, #1
  402522:	e7ef      	b.n	402504 <__smakebuf_r+0x4c>
  402524:	059a      	lsls	r2, r3, #22
  402526:	d4ef      	bmi.n	402508 <__smakebuf_r+0x50>
  402528:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40252c:	f043 0302 	orr.w	r3, r3, #2
  402530:	2101      	movs	r1, #1
  402532:	81a3      	strh	r3, [r4, #12]
  402534:	6022      	str	r2, [r4, #0]
  402536:	6122      	str	r2, [r4, #16]
  402538:	6161      	str	r1, [r4, #20]
  40253a:	e7e5      	b.n	402508 <__smakebuf_r+0x50>
  40253c:	00401d69 	.word	0x00401d69

00402540 <malloc>:
  402540:	4b02      	ldr	r3, [pc, #8]	; (40254c <malloc+0xc>)
  402542:	4601      	mov	r1, r0
  402544:	6818      	ldr	r0, [r3, #0]
  402546:	f000 b803 	b.w	402550 <_malloc_r>
  40254a:	bf00      	nop
  40254c:	20000024 	.word	0x20000024

00402550 <_malloc_r>:
  402550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402554:	f101 060b 	add.w	r6, r1, #11
  402558:	2e16      	cmp	r6, #22
  40255a:	b083      	sub	sp, #12
  40255c:	4605      	mov	r5, r0
  40255e:	f240 809e 	bls.w	40269e <_malloc_r+0x14e>
  402562:	f036 0607 	bics.w	r6, r6, #7
  402566:	f100 80bd 	bmi.w	4026e4 <_malloc_r+0x194>
  40256a:	42b1      	cmp	r1, r6
  40256c:	f200 80ba 	bhi.w	4026e4 <_malloc_r+0x194>
  402570:	f000 fbec 	bl	402d4c <__malloc_lock>
  402574:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402578:	f0c0 8293 	bcc.w	402aa2 <_malloc_r+0x552>
  40257c:	0a73      	lsrs	r3, r6, #9
  40257e:	f000 80b8 	beq.w	4026f2 <_malloc_r+0x1a2>
  402582:	2b04      	cmp	r3, #4
  402584:	f200 8179 	bhi.w	40287a <_malloc_r+0x32a>
  402588:	09b3      	lsrs	r3, r6, #6
  40258a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40258e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402592:	00c3      	lsls	r3, r0, #3
  402594:	4fbf      	ldr	r7, [pc, #764]	; (402894 <_malloc_r+0x344>)
  402596:	443b      	add	r3, r7
  402598:	f1a3 0108 	sub.w	r1, r3, #8
  40259c:	685c      	ldr	r4, [r3, #4]
  40259e:	42a1      	cmp	r1, r4
  4025a0:	d106      	bne.n	4025b0 <_malloc_r+0x60>
  4025a2:	e00c      	b.n	4025be <_malloc_r+0x6e>
  4025a4:	2a00      	cmp	r2, #0
  4025a6:	f280 80aa 	bge.w	4026fe <_malloc_r+0x1ae>
  4025aa:	68e4      	ldr	r4, [r4, #12]
  4025ac:	42a1      	cmp	r1, r4
  4025ae:	d006      	beq.n	4025be <_malloc_r+0x6e>
  4025b0:	6863      	ldr	r3, [r4, #4]
  4025b2:	f023 0303 	bic.w	r3, r3, #3
  4025b6:	1b9a      	subs	r2, r3, r6
  4025b8:	2a0f      	cmp	r2, #15
  4025ba:	ddf3      	ble.n	4025a4 <_malloc_r+0x54>
  4025bc:	4670      	mov	r0, lr
  4025be:	693c      	ldr	r4, [r7, #16]
  4025c0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4028a8 <_malloc_r+0x358>
  4025c4:	4574      	cmp	r4, lr
  4025c6:	f000 81ab 	beq.w	402920 <_malloc_r+0x3d0>
  4025ca:	6863      	ldr	r3, [r4, #4]
  4025cc:	f023 0303 	bic.w	r3, r3, #3
  4025d0:	1b9a      	subs	r2, r3, r6
  4025d2:	2a0f      	cmp	r2, #15
  4025d4:	f300 8190 	bgt.w	4028f8 <_malloc_r+0x3a8>
  4025d8:	2a00      	cmp	r2, #0
  4025da:	f8c7 e014 	str.w	lr, [r7, #20]
  4025de:	f8c7 e010 	str.w	lr, [r7, #16]
  4025e2:	f280 809d 	bge.w	402720 <_malloc_r+0x1d0>
  4025e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4025ea:	f080 8161 	bcs.w	4028b0 <_malloc_r+0x360>
  4025ee:	08db      	lsrs	r3, r3, #3
  4025f0:	f103 0c01 	add.w	ip, r3, #1
  4025f4:	1099      	asrs	r1, r3, #2
  4025f6:	687a      	ldr	r2, [r7, #4]
  4025f8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4025fc:	f8c4 8008 	str.w	r8, [r4, #8]
  402600:	2301      	movs	r3, #1
  402602:	408b      	lsls	r3, r1
  402604:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402608:	4313      	orrs	r3, r2
  40260a:	3908      	subs	r1, #8
  40260c:	60e1      	str	r1, [r4, #12]
  40260e:	607b      	str	r3, [r7, #4]
  402610:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402614:	f8c8 400c 	str.w	r4, [r8, #12]
  402618:	1082      	asrs	r2, r0, #2
  40261a:	2401      	movs	r4, #1
  40261c:	4094      	lsls	r4, r2
  40261e:	429c      	cmp	r4, r3
  402620:	f200 808b 	bhi.w	40273a <_malloc_r+0x1ea>
  402624:	421c      	tst	r4, r3
  402626:	d106      	bne.n	402636 <_malloc_r+0xe6>
  402628:	f020 0003 	bic.w	r0, r0, #3
  40262c:	0064      	lsls	r4, r4, #1
  40262e:	421c      	tst	r4, r3
  402630:	f100 0004 	add.w	r0, r0, #4
  402634:	d0fa      	beq.n	40262c <_malloc_r+0xdc>
  402636:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40263a:	46cc      	mov	ip, r9
  40263c:	4680      	mov	r8, r0
  40263e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402642:	459c      	cmp	ip, r3
  402644:	d107      	bne.n	402656 <_malloc_r+0x106>
  402646:	e16d      	b.n	402924 <_malloc_r+0x3d4>
  402648:	2a00      	cmp	r2, #0
  40264a:	f280 817b 	bge.w	402944 <_malloc_r+0x3f4>
  40264e:	68db      	ldr	r3, [r3, #12]
  402650:	459c      	cmp	ip, r3
  402652:	f000 8167 	beq.w	402924 <_malloc_r+0x3d4>
  402656:	6859      	ldr	r1, [r3, #4]
  402658:	f021 0103 	bic.w	r1, r1, #3
  40265c:	1b8a      	subs	r2, r1, r6
  40265e:	2a0f      	cmp	r2, #15
  402660:	ddf2      	ble.n	402648 <_malloc_r+0xf8>
  402662:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402666:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40266a:	9300      	str	r3, [sp, #0]
  40266c:	199c      	adds	r4, r3, r6
  40266e:	4628      	mov	r0, r5
  402670:	f046 0601 	orr.w	r6, r6, #1
  402674:	f042 0501 	orr.w	r5, r2, #1
  402678:	605e      	str	r6, [r3, #4]
  40267a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40267e:	f8cc 8008 	str.w	r8, [ip, #8]
  402682:	617c      	str	r4, [r7, #20]
  402684:	613c      	str	r4, [r7, #16]
  402686:	f8c4 e00c 	str.w	lr, [r4, #12]
  40268a:	f8c4 e008 	str.w	lr, [r4, #8]
  40268e:	6065      	str	r5, [r4, #4]
  402690:	505a      	str	r2, [r3, r1]
  402692:	f000 fb5d 	bl	402d50 <__malloc_unlock>
  402696:	9b00      	ldr	r3, [sp, #0]
  402698:	f103 0408 	add.w	r4, r3, #8
  40269c:	e01e      	b.n	4026dc <_malloc_r+0x18c>
  40269e:	2910      	cmp	r1, #16
  4026a0:	d820      	bhi.n	4026e4 <_malloc_r+0x194>
  4026a2:	f000 fb53 	bl	402d4c <__malloc_lock>
  4026a6:	2610      	movs	r6, #16
  4026a8:	2318      	movs	r3, #24
  4026aa:	2002      	movs	r0, #2
  4026ac:	4f79      	ldr	r7, [pc, #484]	; (402894 <_malloc_r+0x344>)
  4026ae:	443b      	add	r3, r7
  4026b0:	f1a3 0208 	sub.w	r2, r3, #8
  4026b4:	685c      	ldr	r4, [r3, #4]
  4026b6:	4294      	cmp	r4, r2
  4026b8:	f000 813d 	beq.w	402936 <_malloc_r+0x3e6>
  4026bc:	6863      	ldr	r3, [r4, #4]
  4026be:	68e1      	ldr	r1, [r4, #12]
  4026c0:	68a6      	ldr	r6, [r4, #8]
  4026c2:	f023 0303 	bic.w	r3, r3, #3
  4026c6:	4423      	add	r3, r4
  4026c8:	4628      	mov	r0, r5
  4026ca:	685a      	ldr	r2, [r3, #4]
  4026cc:	60f1      	str	r1, [r6, #12]
  4026ce:	f042 0201 	orr.w	r2, r2, #1
  4026d2:	608e      	str	r6, [r1, #8]
  4026d4:	605a      	str	r2, [r3, #4]
  4026d6:	f000 fb3b 	bl	402d50 <__malloc_unlock>
  4026da:	3408      	adds	r4, #8
  4026dc:	4620      	mov	r0, r4
  4026de:	b003      	add	sp, #12
  4026e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026e4:	2400      	movs	r4, #0
  4026e6:	230c      	movs	r3, #12
  4026e8:	4620      	mov	r0, r4
  4026ea:	602b      	str	r3, [r5, #0]
  4026ec:	b003      	add	sp, #12
  4026ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026f2:	2040      	movs	r0, #64	; 0x40
  4026f4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4026f8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4026fc:	e74a      	b.n	402594 <_malloc_r+0x44>
  4026fe:	4423      	add	r3, r4
  402700:	68e1      	ldr	r1, [r4, #12]
  402702:	685a      	ldr	r2, [r3, #4]
  402704:	68a6      	ldr	r6, [r4, #8]
  402706:	f042 0201 	orr.w	r2, r2, #1
  40270a:	60f1      	str	r1, [r6, #12]
  40270c:	4628      	mov	r0, r5
  40270e:	608e      	str	r6, [r1, #8]
  402710:	605a      	str	r2, [r3, #4]
  402712:	f000 fb1d 	bl	402d50 <__malloc_unlock>
  402716:	3408      	adds	r4, #8
  402718:	4620      	mov	r0, r4
  40271a:	b003      	add	sp, #12
  40271c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402720:	4423      	add	r3, r4
  402722:	4628      	mov	r0, r5
  402724:	685a      	ldr	r2, [r3, #4]
  402726:	f042 0201 	orr.w	r2, r2, #1
  40272a:	605a      	str	r2, [r3, #4]
  40272c:	f000 fb10 	bl	402d50 <__malloc_unlock>
  402730:	3408      	adds	r4, #8
  402732:	4620      	mov	r0, r4
  402734:	b003      	add	sp, #12
  402736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40273a:	68bc      	ldr	r4, [r7, #8]
  40273c:	6863      	ldr	r3, [r4, #4]
  40273e:	f023 0803 	bic.w	r8, r3, #3
  402742:	45b0      	cmp	r8, r6
  402744:	d304      	bcc.n	402750 <_malloc_r+0x200>
  402746:	eba8 0306 	sub.w	r3, r8, r6
  40274a:	2b0f      	cmp	r3, #15
  40274c:	f300 8085 	bgt.w	40285a <_malloc_r+0x30a>
  402750:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4028ac <_malloc_r+0x35c>
  402754:	4b50      	ldr	r3, [pc, #320]	; (402898 <_malloc_r+0x348>)
  402756:	f8d9 2000 	ldr.w	r2, [r9]
  40275a:	681b      	ldr	r3, [r3, #0]
  40275c:	3201      	adds	r2, #1
  40275e:	4433      	add	r3, r6
  402760:	eb04 0a08 	add.w	sl, r4, r8
  402764:	f000 8155 	beq.w	402a12 <_malloc_r+0x4c2>
  402768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40276c:	330f      	adds	r3, #15
  40276e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402772:	f02b 0b0f 	bic.w	fp, fp, #15
  402776:	4659      	mov	r1, fp
  402778:	4628      	mov	r0, r5
  40277a:	f000 fc91 	bl	4030a0 <_sbrk_r>
  40277e:	1c41      	adds	r1, r0, #1
  402780:	4602      	mov	r2, r0
  402782:	f000 80fc 	beq.w	40297e <_malloc_r+0x42e>
  402786:	4582      	cmp	sl, r0
  402788:	f200 80f7 	bhi.w	40297a <_malloc_r+0x42a>
  40278c:	4b43      	ldr	r3, [pc, #268]	; (40289c <_malloc_r+0x34c>)
  40278e:	6819      	ldr	r1, [r3, #0]
  402790:	4459      	add	r1, fp
  402792:	6019      	str	r1, [r3, #0]
  402794:	f000 814d 	beq.w	402a32 <_malloc_r+0x4e2>
  402798:	f8d9 0000 	ldr.w	r0, [r9]
  40279c:	3001      	adds	r0, #1
  40279e:	bf1b      	ittet	ne
  4027a0:	eba2 0a0a 	subne.w	sl, r2, sl
  4027a4:	4451      	addne	r1, sl
  4027a6:	f8c9 2000 	streq.w	r2, [r9]
  4027aa:	6019      	strne	r1, [r3, #0]
  4027ac:	f012 0107 	ands.w	r1, r2, #7
  4027b0:	f000 8115 	beq.w	4029de <_malloc_r+0x48e>
  4027b4:	f1c1 0008 	rsb	r0, r1, #8
  4027b8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4027bc:	4402      	add	r2, r0
  4027be:	3108      	adds	r1, #8
  4027c0:	eb02 090b 	add.w	r9, r2, fp
  4027c4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4027c8:	eba1 0909 	sub.w	r9, r1, r9
  4027cc:	4649      	mov	r1, r9
  4027ce:	4628      	mov	r0, r5
  4027d0:	9301      	str	r3, [sp, #4]
  4027d2:	9200      	str	r2, [sp, #0]
  4027d4:	f000 fc64 	bl	4030a0 <_sbrk_r>
  4027d8:	1c43      	adds	r3, r0, #1
  4027da:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4027de:	f000 8143 	beq.w	402a68 <_malloc_r+0x518>
  4027e2:	1a80      	subs	r0, r0, r2
  4027e4:	4448      	add	r0, r9
  4027e6:	f040 0001 	orr.w	r0, r0, #1
  4027ea:	6819      	ldr	r1, [r3, #0]
  4027ec:	60ba      	str	r2, [r7, #8]
  4027ee:	4449      	add	r1, r9
  4027f0:	42bc      	cmp	r4, r7
  4027f2:	6050      	str	r0, [r2, #4]
  4027f4:	6019      	str	r1, [r3, #0]
  4027f6:	d017      	beq.n	402828 <_malloc_r+0x2d8>
  4027f8:	f1b8 0f0f 	cmp.w	r8, #15
  4027fc:	f240 80fb 	bls.w	4029f6 <_malloc_r+0x4a6>
  402800:	6860      	ldr	r0, [r4, #4]
  402802:	f1a8 020c 	sub.w	r2, r8, #12
  402806:	f022 0207 	bic.w	r2, r2, #7
  40280a:	eb04 0e02 	add.w	lr, r4, r2
  40280e:	f000 0001 	and.w	r0, r0, #1
  402812:	f04f 0c05 	mov.w	ip, #5
  402816:	4310      	orrs	r0, r2
  402818:	2a0f      	cmp	r2, #15
  40281a:	6060      	str	r0, [r4, #4]
  40281c:	f8ce c004 	str.w	ip, [lr, #4]
  402820:	f8ce c008 	str.w	ip, [lr, #8]
  402824:	f200 8117 	bhi.w	402a56 <_malloc_r+0x506>
  402828:	4b1d      	ldr	r3, [pc, #116]	; (4028a0 <_malloc_r+0x350>)
  40282a:	68bc      	ldr	r4, [r7, #8]
  40282c:	681a      	ldr	r2, [r3, #0]
  40282e:	4291      	cmp	r1, r2
  402830:	bf88      	it	hi
  402832:	6019      	strhi	r1, [r3, #0]
  402834:	4b1b      	ldr	r3, [pc, #108]	; (4028a4 <_malloc_r+0x354>)
  402836:	681a      	ldr	r2, [r3, #0]
  402838:	4291      	cmp	r1, r2
  40283a:	6862      	ldr	r2, [r4, #4]
  40283c:	bf88      	it	hi
  40283e:	6019      	strhi	r1, [r3, #0]
  402840:	f022 0203 	bic.w	r2, r2, #3
  402844:	4296      	cmp	r6, r2
  402846:	eba2 0306 	sub.w	r3, r2, r6
  40284a:	d801      	bhi.n	402850 <_malloc_r+0x300>
  40284c:	2b0f      	cmp	r3, #15
  40284e:	dc04      	bgt.n	40285a <_malloc_r+0x30a>
  402850:	4628      	mov	r0, r5
  402852:	f000 fa7d 	bl	402d50 <__malloc_unlock>
  402856:	2400      	movs	r4, #0
  402858:	e740      	b.n	4026dc <_malloc_r+0x18c>
  40285a:	19a2      	adds	r2, r4, r6
  40285c:	f043 0301 	orr.w	r3, r3, #1
  402860:	f046 0601 	orr.w	r6, r6, #1
  402864:	6066      	str	r6, [r4, #4]
  402866:	4628      	mov	r0, r5
  402868:	60ba      	str	r2, [r7, #8]
  40286a:	6053      	str	r3, [r2, #4]
  40286c:	f000 fa70 	bl	402d50 <__malloc_unlock>
  402870:	3408      	adds	r4, #8
  402872:	4620      	mov	r0, r4
  402874:	b003      	add	sp, #12
  402876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40287a:	2b14      	cmp	r3, #20
  40287c:	d971      	bls.n	402962 <_malloc_r+0x412>
  40287e:	2b54      	cmp	r3, #84	; 0x54
  402880:	f200 80a3 	bhi.w	4029ca <_malloc_r+0x47a>
  402884:	0b33      	lsrs	r3, r6, #12
  402886:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40288a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40288e:	00c3      	lsls	r3, r0, #3
  402890:	e680      	b.n	402594 <_malloc_r+0x44>
  402892:	bf00      	nop
  402894:	20000450 	.word	0x20000450
  402898:	2000092c 	.word	0x2000092c
  40289c:	200008fc 	.word	0x200008fc
  4028a0:	20000924 	.word	0x20000924
  4028a4:	20000928 	.word	0x20000928
  4028a8:	20000458 	.word	0x20000458
  4028ac:	20000858 	.word	0x20000858
  4028b0:	0a5a      	lsrs	r2, r3, #9
  4028b2:	2a04      	cmp	r2, #4
  4028b4:	d95b      	bls.n	40296e <_malloc_r+0x41e>
  4028b6:	2a14      	cmp	r2, #20
  4028b8:	f200 80ae 	bhi.w	402a18 <_malloc_r+0x4c8>
  4028bc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4028c0:	00c9      	lsls	r1, r1, #3
  4028c2:	325b      	adds	r2, #91	; 0x5b
  4028c4:	eb07 0c01 	add.w	ip, r7, r1
  4028c8:	5879      	ldr	r1, [r7, r1]
  4028ca:	f1ac 0c08 	sub.w	ip, ip, #8
  4028ce:	458c      	cmp	ip, r1
  4028d0:	f000 8088 	beq.w	4029e4 <_malloc_r+0x494>
  4028d4:	684a      	ldr	r2, [r1, #4]
  4028d6:	f022 0203 	bic.w	r2, r2, #3
  4028da:	4293      	cmp	r3, r2
  4028dc:	d273      	bcs.n	4029c6 <_malloc_r+0x476>
  4028de:	6889      	ldr	r1, [r1, #8]
  4028e0:	458c      	cmp	ip, r1
  4028e2:	d1f7      	bne.n	4028d4 <_malloc_r+0x384>
  4028e4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4028e8:	687b      	ldr	r3, [r7, #4]
  4028ea:	60e2      	str	r2, [r4, #12]
  4028ec:	f8c4 c008 	str.w	ip, [r4, #8]
  4028f0:	6094      	str	r4, [r2, #8]
  4028f2:	f8cc 400c 	str.w	r4, [ip, #12]
  4028f6:	e68f      	b.n	402618 <_malloc_r+0xc8>
  4028f8:	19a1      	adds	r1, r4, r6
  4028fa:	f046 0c01 	orr.w	ip, r6, #1
  4028fe:	f042 0601 	orr.w	r6, r2, #1
  402902:	f8c4 c004 	str.w	ip, [r4, #4]
  402906:	4628      	mov	r0, r5
  402908:	6179      	str	r1, [r7, #20]
  40290a:	6139      	str	r1, [r7, #16]
  40290c:	f8c1 e00c 	str.w	lr, [r1, #12]
  402910:	f8c1 e008 	str.w	lr, [r1, #8]
  402914:	604e      	str	r6, [r1, #4]
  402916:	50e2      	str	r2, [r4, r3]
  402918:	f000 fa1a 	bl	402d50 <__malloc_unlock>
  40291c:	3408      	adds	r4, #8
  40291e:	e6dd      	b.n	4026dc <_malloc_r+0x18c>
  402920:	687b      	ldr	r3, [r7, #4]
  402922:	e679      	b.n	402618 <_malloc_r+0xc8>
  402924:	f108 0801 	add.w	r8, r8, #1
  402928:	f018 0f03 	tst.w	r8, #3
  40292c:	f10c 0c08 	add.w	ip, ip, #8
  402930:	f47f ae85 	bne.w	40263e <_malloc_r+0xee>
  402934:	e02d      	b.n	402992 <_malloc_r+0x442>
  402936:	68dc      	ldr	r4, [r3, #12]
  402938:	42a3      	cmp	r3, r4
  40293a:	bf08      	it	eq
  40293c:	3002      	addeq	r0, #2
  40293e:	f43f ae3e 	beq.w	4025be <_malloc_r+0x6e>
  402942:	e6bb      	b.n	4026bc <_malloc_r+0x16c>
  402944:	4419      	add	r1, r3
  402946:	461c      	mov	r4, r3
  402948:	684a      	ldr	r2, [r1, #4]
  40294a:	68db      	ldr	r3, [r3, #12]
  40294c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402950:	f042 0201 	orr.w	r2, r2, #1
  402954:	604a      	str	r2, [r1, #4]
  402956:	4628      	mov	r0, r5
  402958:	60f3      	str	r3, [r6, #12]
  40295a:	609e      	str	r6, [r3, #8]
  40295c:	f000 f9f8 	bl	402d50 <__malloc_unlock>
  402960:	e6bc      	b.n	4026dc <_malloc_r+0x18c>
  402962:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402966:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40296a:	00c3      	lsls	r3, r0, #3
  40296c:	e612      	b.n	402594 <_malloc_r+0x44>
  40296e:	099a      	lsrs	r2, r3, #6
  402970:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402974:	00c9      	lsls	r1, r1, #3
  402976:	3238      	adds	r2, #56	; 0x38
  402978:	e7a4      	b.n	4028c4 <_malloc_r+0x374>
  40297a:	42bc      	cmp	r4, r7
  40297c:	d054      	beq.n	402a28 <_malloc_r+0x4d8>
  40297e:	68bc      	ldr	r4, [r7, #8]
  402980:	6862      	ldr	r2, [r4, #4]
  402982:	f022 0203 	bic.w	r2, r2, #3
  402986:	e75d      	b.n	402844 <_malloc_r+0x2f4>
  402988:	f859 3908 	ldr.w	r3, [r9], #-8
  40298c:	4599      	cmp	r9, r3
  40298e:	f040 8086 	bne.w	402a9e <_malloc_r+0x54e>
  402992:	f010 0f03 	tst.w	r0, #3
  402996:	f100 30ff 	add.w	r0, r0, #4294967295
  40299a:	d1f5      	bne.n	402988 <_malloc_r+0x438>
  40299c:	687b      	ldr	r3, [r7, #4]
  40299e:	ea23 0304 	bic.w	r3, r3, r4
  4029a2:	607b      	str	r3, [r7, #4]
  4029a4:	0064      	lsls	r4, r4, #1
  4029a6:	429c      	cmp	r4, r3
  4029a8:	f63f aec7 	bhi.w	40273a <_malloc_r+0x1ea>
  4029ac:	2c00      	cmp	r4, #0
  4029ae:	f43f aec4 	beq.w	40273a <_malloc_r+0x1ea>
  4029b2:	421c      	tst	r4, r3
  4029b4:	4640      	mov	r0, r8
  4029b6:	f47f ae3e 	bne.w	402636 <_malloc_r+0xe6>
  4029ba:	0064      	lsls	r4, r4, #1
  4029bc:	421c      	tst	r4, r3
  4029be:	f100 0004 	add.w	r0, r0, #4
  4029c2:	d0fa      	beq.n	4029ba <_malloc_r+0x46a>
  4029c4:	e637      	b.n	402636 <_malloc_r+0xe6>
  4029c6:	468c      	mov	ip, r1
  4029c8:	e78c      	b.n	4028e4 <_malloc_r+0x394>
  4029ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4029ce:	d815      	bhi.n	4029fc <_malloc_r+0x4ac>
  4029d0:	0bf3      	lsrs	r3, r6, #15
  4029d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4029d6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4029da:	00c3      	lsls	r3, r0, #3
  4029dc:	e5da      	b.n	402594 <_malloc_r+0x44>
  4029de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4029e2:	e6ed      	b.n	4027c0 <_malloc_r+0x270>
  4029e4:	687b      	ldr	r3, [r7, #4]
  4029e6:	1092      	asrs	r2, r2, #2
  4029e8:	2101      	movs	r1, #1
  4029ea:	fa01 f202 	lsl.w	r2, r1, r2
  4029ee:	4313      	orrs	r3, r2
  4029f0:	607b      	str	r3, [r7, #4]
  4029f2:	4662      	mov	r2, ip
  4029f4:	e779      	b.n	4028ea <_malloc_r+0x39a>
  4029f6:	2301      	movs	r3, #1
  4029f8:	6053      	str	r3, [r2, #4]
  4029fa:	e729      	b.n	402850 <_malloc_r+0x300>
  4029fc:	f240 5254 	movw	r2, #1364	; 0x554
  402a00:	4293      	cmp	r3, r2
  402a02:	d822      	bhi.n	402a4a <_malloc_r+0x4fa>
  402a04:	0cb3      	lsrs	r3, r6, #18
  402a06:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402a0a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402a0e:	00c3      	lsls	r3, r0, #3
  402a10:	e5c0      	b.n	402594 <_malloc_r+0x44>
  402a12:	f103 0b10 	add.w	fp, r3, #16
  402a16:	e6ae      	b.n	402776 <_malloc_r+0x226>
  402a18:	2a54      	cmp	r2, #84	; 0x54
  402a1a:	d829      	bhi.n	402a70 <_malloc_r+0x520>
  402a1c:	0b1a      	lsrs	r2, r3, #12
  402a1e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402a22:	00c9      	lsls	r1, r1, #3
  402a24:	326e      	adds	r2, #110	; 0x6e
  402a26:	e74d      	b.n	4028c4 <_malloc_r+0x374>
  402a28:	4b20      	ldr	r3, [pc, #128]	; (402aac <_malloc_r+0x55c>)
  402a2a:	6819      	ldr	r1, [r3, #0]
  402a2c:	4459      	add	r1, fp
  402a2e:	6019      	str	r1, [r3, #0]
  402a30:	e6b2      	b.n	402798 <_malloc_r+0x248>
  402a32:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402a36:	2800      	cmp	r0, #0
  402a38:	f47f aeae 	bne.w	402798 <_malloc_r+0x248>
  402a3c:	eb08 030b 	add.w	r3, r8, fp
  402a40:	68ba      	ldr	r2, [r7, #8]
  402a42:	f043 0301 	orr.w	r3, r3, #1
  402a46:	6053      	str	r3, [r2, #4]
  402a48:	e6ee      	b.n	402828 <_malloc_r+0x2d8>
  402a4a:	207f      	movs	r0, #127	; 0x7f
  402a4c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402a50:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402a54:	e59e      	b.n	402594 <_malloc_r+0x44>
  402a56:	f104 0108 	add.w	r1, r4, #8
  402a5a:	4628      	mov	r0, r5
  402a5c:	9300      	str	r3, [sp, #0]
  402a5e:	f7ff fa75 	bl	401f4c <_free_r>
  402a62:	9b00      	ldr	r3, [sp, #0]
  402a64:	6819      	ldr	r1, [r3, #0]
  402a66:	e6df      	b.n	402828 <_malloc_r+0x2d8>
  402a68:	2001      	movs	r0, #1
  402a6a:	f04f 0900 	mov.w	r9, #0
  402a6e:	e6bc      	b.n	4027ea <_malloc_r+0x29a>
  402a70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402a74:	d805      	bhi.n	402a82 <_malloc_r+0x532>
  402a76:	0bda      	lsrs	r2, r3, #15
  402a78:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402a7c:	00c9      	lsls	r1, r1, #3
  402a7e:	3277      	adds	r2, #119	; 0x77
  402a80:	e720      	b.n	4028c4 <_malloc_r+0x374>
  402a82:	f240 5154 	movw	r1, #1364	; 0x554
  402a86:	428a      	cmp	r2, r1
  402a88:	d805      	bhi.n	402a96 <_malloc_r+0x546>
  402a8a:	0c9a      	lsrs	r2, r3, #18
  402a8c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402a90:	00c9      	lsls	r1, r1, #3
  402a92:	327c      	adds	r2, #124	; 0x7c
  402a94:	e716      	b.n	4028c4 <_malloc_r+0x374>
  402a96:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402a9a:	227e      	movs	r2, #126	; 0x7e
  402a9c:	e712      	b.n	4028c4 <_malloc_r+0x374>
  402a9e:	687b      	ldr	r3, [r7, #4]
  402aa0:	e780      	b.n	4029a4 <_malloc_r+0x454>
  402aa2:	08f0      	lsrs	r0, r6, #3
  402aa4:	f106 0308 	add.w	r3, r6, #8
  402aa8:	e600      	b.n	4026ac <_malloc_r+0x15c>
  402aaa:	bf00      	nop
  402aac:	200008fc 	.word	0x200008fc

00402ab0 <memchr>:
  402ab0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402ab4:	2a10      	cmp	r2, #16
  402ab6:	db2b      	blt.n	402b10 <memchr+0x60>
  402ab8:	f010 0f07 	tst.w	r0, #7
  402abc:	d008      	beq.n	402ad0 <memchr+0x20>
  402abe:	f810 3b01 	ldrb.w	r3, [r0], #1
  402ac2:	3a01      	subs	r2, #1
  402ac4:	428b      	cmp	r3, r1
  402ac6:	d02d      	beq.n	402b24 <memchr+0x74>
  402ac8:	f010 0f07 	tst.w	r0, #7
  402acc:	b342      	cbz	r2, 402b20 <memchr+0x70>
  402ace:	d1f6      	bne.n	402abe <memchr+0xe>
  402ad0:	b4f0      	push	{r4, r5, r6, r7}
  402ad2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402ad6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402ada:	f022 0407 	bic.w	r4, r2, #7
  402ade:	f07f 0700 	mvns.w	r7, #0
  402ae2:	2300      	movs	r3, #0
  402ae4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402ae8:	3c08      	subs	r4, #8
  402aea:	ea85 0501 	eor.w	r5, r5, r1
  402aee:	ea86 0601 	eor.w	r6, r6, r1
  402af2:	fa85 f547 	uadd8	r5, r5, r7
  402af6:	faa3 f587 	sel	r5, r3, r7
  402afa:	fa86 f647 	uadd8	r6, r6, r7
  402afe:	faa5 f687 	sel	r6, r5, r7
  402b02:	b98e      	cbnz	r6, 402b28 <memchr+0x78>
  402b04:	d1ee      	bne.n	402ae4 <memchr+0x34>
  402b06:	bcf0      	pop	{r4, r5, r6, r7}
  402b08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402b0c:	f002 0207 	and.w	r2, r2, #7
  402b10:	b132      	cbz	r2, 402b20 <memchr+0x70>
  402b12:	f810 3b01 	ldrb.w	r3, [r0], #1
  402b16:	3a01      	subs	r2, #1
  402b18:	ea83 0301 	eor.w	r3, r3, r1
  402b1c:	b113      	cbz	r3, 402b24 <memchr+0x74>
  402b1e:	d1f8      	bne.n	402b12 <memchr+0x62>
  402b20:	2000      	movs	r0, #0
  402b22:	4770      	bx	lr
  402b24:	3801      	subs	r0, #1
  402b26:	4770      	bx	lr
  402b28:	2d00      	cmp	r5, #0
  402b2a:	bf06      	itte	eq
  402b2c:	4635      	moveq	r5, r6
  402b2e:	3803      	subeq	r0, #3
  402b30:	3807      	subne	r0, #7
  402b32:	f015 0f01 	tst.w	r5, #1
  402b36:	d107      	bne.n	402b48 <memchr+0x98>
  402b38:	3001      	adds	r0, #1
  402b3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  402b3e:	bf02      	ittt	eq
  402b40:	3001      	addeq	r0, #1
  402b42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402b46:	3001      	addeq	r0, #1
  402b48:	bcf0      	pop	{r4, r5, r6, r7}
  402b4a:	3801      	subs	r0, #1
  402b4c:	4770      	bx	lr
  402b4e:	bf00      	nop

00402b50 <memcpy>:
  402b50:	4684      	mov	ip, r0
  402b52:	ea41 0300 	orr.w	r3, r1, r0
  402b56:	f013 0303 	ands.w	r3, r3, #3
  402b5a:	d16d      	bne.n	402c38 <memcpy+0xe8>
  402b5c:	3a40      	subs	r2, #64	; 0x40
  402b5e:	d341      	bcc.n	402be4 <memcpy+0x94>
  402b60:	f851 3b04 	ldr.w	r3, [r1], #4
  402b64:	f840 3b04 	str.w	r3, [r0], #4
  402b68:	f851 3b04 	ldr.w	r3, [r1], #4
  402b6c:	f840 3b04 	str.w	r3, [r0], #4
  402b70:	f851 3b04 	ldr.w	r3, [r1], #4
  402b74:	f840 3b04 	str.w	r3, [r0], #4
  402b78:	f851 3b04 	ldr.w	r3, [r1], #4
  402b7c:	f840 3b04 	str.w	r3, [r0], #4
  402b80:	f851 3b04 	ldr.w	r3, [r1], #4
  402b84:	f840 3b04 	str.w	r3, [r0], #4
  402b88:	f851 3b04 	ldr.w	r3, [r1], #4
  402b8c:	f840 3b04 	str.w	r3, [r0], #4
  402b90:	f851 3b04 	ldr.w	r3, [r1], #4
  402b94:	f840 3b04 	str.w	r3, [r0], #4
  402b98:	f851 3b04 	ldr.w	r3, [r1], #4
  402b9c:	f840 3b04 	str.w	r3, [r0], #4
  402ba0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ba4:	f840 3b04 	str.w	r3, [r0], #4
  402ba8:	f851 3b04 	ldr.w	r3, [r1], #4
  402bac:	f840 3b04 	str.w	r3, [r0], #4
  402bb0:	f851 3b04 	ldr.w	r3, [r1], #4
  402bb4:	f840 3b04 	str.w	r3, [r0], #4
  402bb8:	f851 3b04 	ldr.w	r3, [r1], #4
  402bbc:	f840 3b04 	str.w	r3, [r0], #4
  402bc0:	f851 3b04 	ldr.w	r3, [r1], #4
  402bc4:	f840 3b04 	str.w	r3, [r0], #4
  402bc8:	f851 3b04 	ldr.w	r3, [r1], #4
  402bcc:	f840 3b04 	str.w	r3, [r0], #4
  402bd0:	f851 3b04 	ldr.w	r3, [r1], #4
  402bd4:	f840 3b04 	str.w	r3, [r0], #4
  402bd8:	f851 3b04 	ldr.w	r3, [r1], #4
  402bdc:	f840 3b04 	str.w	r3, [r0], #4
  402be0:	3a40      	subs	r2, #64	; 0x40
  402be2:	d2bd      	bcs.n	402b60 <memcpy+0x10>
  402be4:	3230      	adds	r2, #48	; 0x30
  402be6:	d311      	bcc.n	402c0c <memcpy+0xbc>
  402be8:	f851 3b04 	ldr.w	r3, [r1], #4
  402bec:	f840 3b04 	str.w	r3, [r0], #4
  402bf0:	f851 3b04 	ldr.w	r3, [r1], #4
  402bf4:	f840 3b04 	str.w	r3, [r0], #4
  402bf8:	f851 3b04 	ldr.w	r3, [r1], #4
  402bfc:	f840 3b04 	str.w	r3, [r0], #4
  402c00:	f851 3b04 	ldr.w	r3, [r1], #4
  402c04:	f840 3b04 	str.w	r3, [r0], #4
  402c08:	3a10      	subs	r2, #16
  402c0a:	d2ed      	bcs.n	402be8 <memcpy+0x98>
  402c0c:	320c      	adds	r2, #12
  402c0e:	d305      	bcc.n	402c1c <memcpy+0xcc>
  402c10:	f851 3b04 	ldr.w	r3, [r1], #4
  402c14:	f840 3b04 	str.w	r3, [r0], #4
  402c18:	3a04      	subs	r2, #4
  402c1a:	d2f9      	bcs.n	402c10 <memcpy+0xc0>
  402c1c:	3204      	adds	r2, #4
  402c1e:	d008      	beq.n	402c32 <memcpy+0xe2>
  402c20:	07d2      	lsls	r2, r2, #31
  402c22:	bf1c      	itt	ne
  402c24:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402c28:	f800 3b01 	strbne.w	r3, [r0], #1
  402c2c:	d301      	bcc.n	402c32 <memcpy+0xe2>
  402c2e:	880b      	ldrh	r3, [r1, #0]
  402c30:	8003      	strh	r3, [r0, #0]
  402c32:	4660      	mov	r0, ip
  402c34:	4770      	bx	lr
  402c36:	bf00      	nop
  402c38:	2a08      	cmp	r2, #8
  402c3a:	d313      	bcc.n	402c64 <memcpy+0x114>
  402c3c:	078b      	lsls	r3, r1, #30
  402c3e:	d08d      	beq.n	402b5c <memcpy+0xc>
  402c40:	f010 0303 	ands.w	r3, r0, #3
  402c44:	d08a      	beq.n	402b5c <memcpy+0xc>
  402c46:	f1c3 0304 	rsb	r3, r3, #4
  402c4a:	1ad2      	subs	r2, r2, r3
  402c4c:	07db      	lsls	r3, r3, #31
  402c4e:	bf1c      	itt	ne
  402c50:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402c54:	f800 3b01 	strbne.w	r3, [r0], #1
  402c58:	d380      	bcc.n	402b5c <memcpy+0xc>
  402c5a:	f831 3b02 	ldrh.w	r3, [r1], #2
  402c5e:	f820 3b02 	strh.w	r3, [r0], #2
  402c62:	e77b      	b.n	402b5c <memcpy+0xc>
  402c64:	3a04      	subs	r2, #4
  402c66:	d3d9      	bcc.n	402c1c <memcpy+0xcc>
  402c68:	3a01      	subs	r2, #1
  402c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
  402c6e:	f800 3b01 	strb.w	r3, [r0], #1
  402c72:	d2f9      	bcs.n	402c68 <memcpy+0x118>
  402c74:	780b      	ldrb	r3, [r1, #0]
  402c76:	7003      	strb	r3, [r0, #0]
  402c78:	784b      	ldrb	r3, [r1, #1]
  402c7a:	7043      	strb	r3, [r0, #1]
  402c7c:	788b      	ldrb	r3, [r1, #2]
  402c7e:	7083      	strb	r3, [r0, #2]
  402c80:	4660      	mov	r0, ip
  402c82:	4770      	bx	lr

00402c84 <memmove>:
  402c84:	4288      	cmp	r0, r1
  402c86:	b5f0      	push	{r4, r5, r6, r7, lr}
  402c88:	d90d      	bls.n	402ca6 <memmove+0x22>
  402c8a:	188b      	adds	r3, r1, r2
  402c8c:	4298      	cmp	r0, r3
  402c8e:	d20a      	bcs.n	402ca6 <memmove+0x22>
  402c90:	1884      	adds	r4, r0, r2
  402c92:	2a00      	cmp	r2, #0
  402c94:	d051      	beq.n	402d3a <memmove+0xb6>
  402c96:	4622      	mov	r2, r4
  402c98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  402c9c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  402ca0:	4299      	cmp	r1, r3
  402ca2:	d1f9      	bne.n	402c98 <memmove+0x14>
  402ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402ca6:	2a0f      	cmp	r2, #15
  402ca8:	d948      	bls.n	402d3c <memmove+0xb8>
  402caa:	ea41 0300 	orr.w	r3, r1, r0
  402cae:	079b      	lsls	r3, r3, #30
  402cb0:	d146      	bne.n	402d40 <memmove+0xbc>
  402cb2:	f100 0410 	add.w	r4, r0, #16
  402cb6:	f101 0310 	add.w	r3, r1, #16
  402cba:	4615      	mov	r5, r2
  402cbc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  402cc0:	f844 6c10 	str.w	r6, [r4, #-16]
  402cc4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  402cc8:	f844 6c0c 	str.w	r6, [r4, #-12]
  402ccc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  402cd0:	f844 6c08 	str.w	r6, [r4, #-8]
  402cd4:	3d10      	subs	r5, #16
  402cd6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  402cda:	f844 6c04 	str.w	r6, [r4, #-4]
  402cde:	2d0f      	cmp	r5, #15
  402ce0:	f103 0310 	add.w	r3, r3, #16
  402ce4:	f104 0410 	add.w	r4, r4, #16
  402ce8:	d8e8      	bhi.n	402cbc <memmove+0x38>
  402cea:	f1a2 0310 	sub.w	r3, r2, #16
  402cee:	f023 030f 	bic.w	r3, r3, #15
  402cf2:	f002 0e0f 	and.w	lr, r2, #15
  402cf6:	3310      	adds	r3, #16
  402cf8:	f1be 0f03 	cmp.w	lr, #3
  402cfc:	4419      	add	r1, r3
  402cfe:	4403      	add	r3, r0
  402d00:	d921      	bls.n	402d46 <memmove+0xc2>
  402d02:	1f1e      	subs	r6, r3, #4
  402d04:	460d      	mov	r5, r1
  402d06:	4674      	mov	r4, lr
  402d08:	3c04      	subs	r4, #4
  402d0a:	f855 7b04 	ldr.w	r7, [r5], #4
  402d0e:	f846 7f04 	str.w	r7, [r6, #4]!
  402d12:	2c03      	cmp	r4, #3
  402d14:	d8f8      	bhi.n	402d08 <memmove+0x84>
  402d16:	f1ae 0404 	sub.w	r4, lr, #4
  402d1a:	f024 0403 	bic.w	r4, r4, #3
  402d1e:	3404      	adds	r4, #4
  402d20:	4421      	add	r1, r4
  402d22:	4423      	add	r3, r4
  402d24:	f002 0203 	and.w	r2, r2, #3
  402d28:	b162      	cbz	r2, 402d44 <memmove+0xc0>
  402d2a:	3b01      	subs	r3, #1
  402d2c:	440a      	add	r2, r1
  402d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
  402d32:	f803 4f01 	strb.w	r4, [r3, #1]!
  402d36:	428a      	cmp	r2, r1
  402d38:	d1f9      	bne.n	402d2e <memmove+0xaa>
  402d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402d3c:	4603      	mov	r3, r0
  402d3e:	e7f3      	b.n	402d28 <memmove+0xa4>
  402d40:	4603      	mov	r3, r0
  402d42:	e7f2      	b.n	402d2a <memmove+0xa6>
  402d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402d46:	4672      	mov	r2, lr
  402d48:	e7ee      	b.n	402d28 <memmove+0xa4>
  402d4a:	bf00      	nop

00402d4c <__malloc_lock>:
  402d4c:	4770      	bx	lr
  402d4e:	bf00      	nop

00402d50 <__malloc_unlock>:
  402d50:	4770      	bx	lr
  402d52:	bf00      	nop

00402d54 <_realloc_r>:
  402d54:	2900      	cmp	r1, #0
  402d56:	f000 8095 	beq.w	402e84 <_realloc_r+0x130>
  402d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d5e:	460d      	mov	r5, r1
  402d60:	4616      	mov	r6, r2
  402d62:	b083      	sub	sp, #12
  402d64:	4680      	mov	r8, r0
  402d66:	f106 070b 	add.w	r7, r6, #11
  402d6a:	f7ff ffef 	bl	402d4c <__malloc_lock>
  402d6e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  402d72:	2f16      	cmp	r7, #22
  402d74:	f02e 0403 	bic.w	r4, lr, #3
  402d78:	f1a5 0908 	sub.w	r9, r5, #8
  402d7c:	d83c      	bhi.n	402df8 <_realloc_r+0xa4>
  402d7e:	2210      	movs	r2, #16
  402d80:	4617      	mov	r7, r2
  402d82:	42be      	cmp	r6, r7
  402d84:	d83d      	bhi.n	402e02 <_realloc_r+0xae>
  402d86:	4294      	cmp	r4, r2
  402d88:	da43      	bge.n	402e12 <_realloc_r+0xbe>
  402d8a:	4bc4      	ldr	r3, [pc, #784]	; (40309c <_realloc_r+0x348>)
  402d8c:	6899      	ldr	r1, [r3, #8]
  402d8e:	eb09 0004 	add.w	r0, r9, r4
  402d92:	4288      	cmp	r0, r1
  402d94:	f000 80b4 	beq.w	402f00 <_realloc_r+0x1ac>
  402d98:	6843      	ldr	r3, [r0, #4]
  402d9a:	f023 0101 	bic.w	r1, r3, #1
  402d9e:	4401      	add	r1, r0
  402da0:	6849      	ldr	r1, [r1, #4]
  402da2:	07c9      	lsls	r1, r1, #31
  402da4:	d54c      	bpl.n	402e40 <_realloc_r+0xec>
  402da6:	f01e 0f01 	tst.w	lr, #1
  402daa:	f000 809b 	beq.w	402ee4 <_realloc_r+0x190>
  402dae:	4631      	mov	r1, r6
  402db0:	4640      	mov	r0, r8
  402db2:	f7ff fbcd 	bl	402550 <_malloc_r>
  402db6:	4606      	mov	r6, r0
  402db8:	2800      	cmp	r0, #0
  402dba:	d03a      	beq.n	402e32 <_realloc_r+0xde>
  402dbc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  402dc0:	f023 0301 	bic.w	r3, r3, #1
  402dc4:	444b      	add	r3, r9
  402dc6:	f1a0 0208 	sub.w	r2, r0, #8
  402dca:	429a      	cmp	r2, r3
  402dcc:	f000 8121 	beq.w	403012 <_realloc_r+0x2be>
  402dd0:	1f22      	subs	r2, r4, #4
  402dd2:	2a24      	cmp	r2, #36	; 0x24
  402dd4:	f200 8107 	bhi.w	402fe6 <_realloc_r+0x292>
  402dd8:	2a13      	cmp	r2, #19
  402dda:	f200 80db 	bhi.w	402f94 <_realloc_r+0x240>
  402dde:	4603      	mov	r3, r0
  402de0:	462a      	mov	r2, r5
  402de2:	6811      	ldr	r1, [r2, #0]
  402de4:	6019      	str	r1, [r3, #0]
  402de6:	6851      	ldr	r1, [r2, #4]
  402de8:	6059      	str	r1, [r3, #4]
  402dea:	6892      	ldr	r2, [r2, #8]
  402dec:	609a      	str	r2, [r3, #8]
  402dee:	4629      	mov	r1, r5
  402df0:	4640      	mov	r0, r8
  402df2:	f7ff f8ab 	bl	401f4c <_free_r>
  402df6:	e01c      	b.n	402e32 <_realloc_r+0xde>
  402df8:	f027 0707 	bic.w	r7, r7, #7
  402dfc:	2f00      	cmp	r7, #0
  402dfe:	463a      	mov	r2, r7
  402e00:	dabf      	bge.n	402d82 <_realloc_r+0x2e>
  402e02:	2600      	movs	r6, #0
  402e04:	230c      	movs	r3, #12
  402e06:	4630      	mov	r0, r6
  402e08:	f8c8 3000 	str.w	r3, [r8]
  402e0c:	b003      	add	sp, #12
  402e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e12:	462e      	mov	r6, r5
  402e14:	1be3      	subs	r3, r4, r7
  402e16:	2b0f      	cmp	r3, #15
  402e18:	d81e      	bhi.n	402e58 <_realloc_r+0x104>
  402e1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  402e1e:	f003 0301 	and.w	r3, r3, #1
  402e22:	4323      	orrs	r3, r4
  402e24:	444c      	add	r4, r9
  402e26:	f8c9 3004 	str.w	r3, [r9, #4]
  402e2a:	6863      	ldr	r3, [r4, #4]
  402e2c:	f043 0301 	orr.w	r3, r3, #1
  402e30:	6063      	str	r3, [r4, #4]
  402e32:	4640      	mov	r0, r8
  402e34:	f7ff ff8c 	bl	402d50 <__malloc_unlock>
  402e38:	4630      	mov	r0, r6
  402e3a:	b003      	add	sp, #12
  402e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e40:	f023 0303 	bic.w	r3, r3, #3
  402e44:	18e1      	adds	r1, r4, r3
  402e46:	4291      	cmp	r1, r2
  402e48:	db1f      	blt.n	402e8a <_realloc_r+0x136>
  402e4a:	68c3      	ldr	r3, [r0, #12]
  402e4c:	6882      	ldr	r2, [r0, #8]
  402e4e:	462e      	mov	r6, r5
  402e50:	60d3      	str	r3, [r2, #12]
  402e52:	460c      	mov	r4, r1
  402e54:	609a      	str	r2, [r3, #8]
  402e56:	e7dd      	b.n	402e14 <_realloc_r+0xc0>
  402e58:	f8d9 2004 	ldr.w	r2, [r9, #4]
  402e5c:	eb09 0107 	add.w	r1, r9, r7
  402e60:	f002 0201 	and.w	r2, r2, #1
  402e64:	444c      	add	r4, r9
  402e66:	f043 0301 	orr.w	r3, r3, #1
  402e6a:	4317      	orrs	r7, r2
  402e6c:	f8c9 7004 	str.w	r7, [r9, #4]
  402e70:	604b      	str	r3, [r1, #4]
  402e72:	6863      	ldr	r3, [r4, #4]
  402e74:	f043 0301 	orr.w	r3, r3, #1
  402e78:	3108      	adds	r1, #8
  402e7a:	6063      	str	r3, [r4, #4]
  402e7c:	4640      	mov	r0, r8
  402e7e:	f7ff f865 	bl	401f4c <_free_r>
  402e82:	e7d6      	b.n	402e32 <_realloc_r+0xde>
  402e84:	4611      	mov	r1, r2
  402e86:	f7ff bb63 	b.w	402550 <_malloc_r>
  402e8a:	f01e 0f01 	tst.w	lr, #1
  402e8e:	d18e      	bne.n	402dae <_realloc_r+0x5a>
  402e90:	f855 1c08 	ldr.w	r1, [r5, #-8]
  402e94:	eba9 0a01 	sub.w	sl, r9, r1
  402e98:	f8da 1004 	ldr.w	r1, [sl, #4]
  402e9c:	f021 0103 	bic.w	r1, r1, #3
  402ea0:	440b      	add	r3, r1
  402ea2:	4423      	add	r3, r4
  402ea4:	4293      	cmp	r3, r2
  402ea6:	db25      	blt.n	402ef4 <_realloc_r+0x1a0>
  402ea8:	68c2      	ldr	r2, [r0, #12]
  402eaa:	6881      	ldr	r1, [r0, #8]
  402eac:	4656      	mov	r6, sl
  402eae:	60ca      	str	r2, [r1, #12]
  402eb0:	6091      	str	r1, [r2, #8]
  402eb2:	f8da 100c 	ldr.w	r1, [sl, #12]
  402eb6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  402eba:	1f22      	subs	r2, r4, #4
  402ebc:	2a24      	cmp	r2, #36	; 0x24
  402ebe:	60c1      	str	r1, [r0, #12]
  402ec0:	6088      	str	r0, [r1, #8]
  402ec2:	f200 8094 	bhi.w	402fee <_realloc_r+0x29a>
  402ec6:	2a13      	cmp	r2, #19
  402ec8:	d96f      	bls.n	402faa <_realloc_r+0x256>
  402eca:	6829      	ldr	r1, [r5, #0]
  402ecc:	f8ca 1008 	str.w	r1, [sl, #8]
  402ed0:	6869      	ldr	r1, [r5, #4]
  402ed2:	f8ca 100c 	str.w	r1, [sl, #12]
  402ed6:	2a1b      	cmp	r2, #27
  402ed8:	f200 80a2 	bhi.w	403020 <_realloc_r+0x2cc>
  402edc:	3508      	adds	r5, #8
  402ede:	f10a 0210 	add.w	r2, sl, #16
  402ee2:	e063      	b.n	402fac <_realloc_r+0x258>
  402ee4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  402ee8:	eba9 0a03 	sub.w	sl, r9, r3
  402eec:	f8da 1004 	ldr.w	r1, [sl, #4]
  402ef0:	f021 0103 	bic.w	r1, r1, #3
  402ef4:	1863      	adds	r3, r4, r1
  402ef6:	4293      	cmp	r3, r2
  402ef8:	f6ff af59 	blt.w	402dae <_realloc_r+0x5a>
  402efc:	4656      	mov	r6, sl
  402efe:	e7d8      	b.n	402eb2 <_realloc_r+0x15e>
  402f00:	6841      	ldr	r1, [r0, #4]
  402f02:	f021 0b03 	bic.w	fp, r1, #3
  402f06:	44a3      	add	fp, r4
  402f08:	f107 0010 	add.w	r0, r7, #16
  402f0c:	4583      	cmp	fp, r0
  402f0e:	da56      	bge.n	402fbe <_realloc_r+0x26a>
  402f10:	f01e 0f01 	tst.w	lr, #1
  402f14:	f47f af4b 	bne.w	402dae <_realloc_r+0x5a>
  402f18:	f855 1c08 	ldr.w	r1, [r5, #-8]
  402f1c:	eba9 0a01 	sub.w	sl, r9, r1
  402f20:	f8da 1004 	ldr.w	r1, [sl, #4]
  402f24:	f021 0103 	bic.w	r1, r1, #3
  402f28:	448b      	add	fp, r1
  402f2a:	4558      	cmp	r0, fp
  402f2c:	dce2      	bgt.n	402ef4 <_realloc_r+0x1a0>
  402f2e:	4656      	mov	r6, sl
  402f30:	f8da 100c 	ldr.w	r1, [sl, #12]
  402f34:	f856 0f08 	ldr.w	r0, [r6, #8]!
  402f38:	1f22      	subs	r2, r4, #4
  402f3a:	2a24      	cmp	r2, #36	; 0x24
  402f3c:	60c1      	str	r1, [r0, #12]
  402f3e:	6088      	str	r0, [r1, #8]
  402f40:	f200 808f 	bhi.w	403062 <_realloc_r+0x30e>
  402f44:	2a13      	cmp	r2, #19
  402f46:	f240 808a 	bls.w	40305e <_realloc_r+0x30a>
  402f4a:	6829      	ldr	r1, [r5, #0]
  402f4c:	f8ca 1008 	str.w	r1, [sl, #8]
  402f50:	6869      	ldr	r1, [r5, #4]
  402f52:	f8ca 100c 	str.w	r1, [sl, #12]
  402f56:	2a1b      	cmp	r2, #27
  402f58:	f200 808a 	bhi.w	403070 <_realloc_r+0x31c>
  402f5c:	3508      	adds	r5, #8
  402f5e:	f10a 0210 	add.w	r2, sl, #16
  402f62:	6829      	ldr	r1, [r5, #0]
  402f64:	6011      	str	r1, [r2, #0]
  402f66:	6869      	ldr	r1, [r5, #4]
  402f68:	6051      	str	r1, [r2, #4]
  402f6a:	68a9      	ldr	r1, [r5, #8]
  402f6c:	6091      	str	r1, [r2, #8]
  402f6e:	eb0a 0107 	add.w	r1, sl, r7
  402f72:	ebab 0207 	sub.w	r2, fp, r7
  402f76:	f042 0201 	orr.w	r2, r2, #1
  402f7a:	6099      	str	r1, [r3, #8]
  402f7c:	604a      	str	r2, [r1, #4]
  402f7e:	f8da 3004 	ldr.w	r3, [sl, #4]
  402f82:	f003 0301 	and.w	r3, r3, #1
  402f86:	431f      	orrs	r7, r3
  402f88:	4640      	mov	r0, r8
  402f8a:	f8ca 7004 	str.w	r7, [sl, #4]
  402f8e:	f7ff fedf 	bl	402d50 <__malloc_unlock>
  402f92:	e751      	b.n	402e38 <_realloc_r+0xe4>
  402f94:	682b      	ldr	r3, [r5, #0]
  402f96:	6003      	str	r3, [r0, #0]
  402f98:	686b      	ldr	r3, [r5, #4]
  402f9a:	6043      	str	r3, [r0, #4]
  402f9c:	2a1b      	cmp	r2, #27
  402f9e:	d82d      	bhi.n	402ffc <_realloc_r+0x2a8>
  402fa0:	f100 0308 	add.w	r3, r0, #8
  402fa4:	f105 0208 	add.w	r2, r5, #8
  402fa8:	e71b      	b.n	402de2 <_realloc_r+0x8e>
  402faa:	4632      	mov	r2, r6
  402fac:	6829      	ldr	r1, [r5, #0]
  402fae:	6011      	str	r1, [r2, #0]
  402fb0:	6869      	ldr	r1, [r5, #4]
  402fb2:	6051      	str	r1, [r2, #4]
  402fb4:	68a9      	ldr	r1, [r5, #8]
  402fb6:	6091      	str	r1, [r2, #8]
  402fb8:	461c      	mov	r4, r3
  402fba:	46d1      	mov	r9, sl
  402fbc:	e72a      	b.n	402e14 <_realloc_r+0xc0>
  402fbe:	eb09 0107 	add.w	r1, r9, r7
  402fc2:	ebab 0b07 	sub.w	fp, fp, r7
  402fc6:	f04b 0201 	orr.w	r2, fp, #1
  402fca:	6099      	str	r1, [r3, #8]
  402fcc:	604a      	str	r2, [r1, #4]
  402fce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  402fd2:	f003 0301 	and.w	r3, r3, #1
  402fd6:	431f      	orrs	r7, r3
  402fd8:	4640      	mov	r0, r8
  402fda:	f845 7c04 	str.w	r7, [r5, #-4]
  402fde:	f7ff feb7 	bl	402d50 <__malloc_unlock>
  402fe2:	462e      	mov	r6, r5
  402fe4:	e728      	b.n	402e38 <_realloc_r+0xe4>
  402fe6:	4629      	mov	r1, r5
  402fe8:	f7ff fe4c 	bl	402c84 <memmove>
  402fec:	e6ff      	b.n	402dee <_realloc_r+0x9a>
  402fee:	4629      	mov	r1, r5
  402ff0:	4630      	mov	r0, r6
  402ff2:	461c      	mov	r4, r3
  402ff4:	46d1      	mov	r9, sl
  402ff6:	f7ff fe45 	bl	402c84 <memmove>
  402ffa:	e70b      	b.n	402e14 <_realloc_r+0xc0>
  402ffc:	68ab      	ldr	r3, [r5, #8]
  402ffe:	6083      	str	r3, [r0, #8]
  403000:	68eb      	ldr	r3, [r5, #12]
  403002:	60c3      	str	r3, [r0, #12]
  403004:	2a24      	cmp	r2, #36	; 0x24
  403006:	d017      	beq.n	403038 <_realloc_r+0x2e4>
  403008:	f100 0310 	add.w	r3, r0, #16
  40300c:	f105 0210 	add.w	r2, r5, #16
  403010:	e6e7      	b.n	402de2 <_realloc_r+0x8e>
  403012:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403016:	f023 0303 	bic.w	r3, r3, #3
  40301a:	441c      	add	r4, r3
  40301c:	462e      	mov	r6, r5
  40301e:	e6f9      	b.n	402e14 <_realloc_r+0xc0>
  403020:	68a9      	ldr	r1, [r5, #8]
  403022:	f8ca 1010 	str.w	r1, [sl, #16]
  403026:	68e9      	ldr	r1, [r5, #12]
  403028:	f8ca 1014 	str.w	r1, [sl, #20]
  40302c:	2a24      	cmp	r2, #36	; 0x24
  40302e:	d00c      	beq.n	40304a <_realloc_r+0x2f6>
  403030:	3510      	adds	r5, #16
  403032:	f10a 0218 	add.w	r2, sl, #24
  403036:	e7b9      	b.n	402fac <_realloc_r+0x258>
  403038:	692b      	ldr	r3, [r5, #16]
  40303a:	6103      	str	r3, [r0, #16]
  40303c:	696b      	ldr	r3, [r5, #20]
  40303e:	6143      	str	r3, [r0, #20]
  403040:	f105 0218 	add.w	r2, r5, #24
  403044:	f100 0318 	add.w	r3, r0, #24
  403048:	e6cb      	b.n	402de2 <_realloc_r+0x8e>
  40304a:	692a      	ldr	r2, [r5, #16]
  40304c:	f8ca 2018 	str.w	r2, [sl, #24]
  403050:	696a      	ldr	r2, [r5, #20]
  403052:	f8ca 201c 	str.w	r2, [sl, #28]
  403056:	3518      	adds	r5, #24
  403058:	f10a 0220 	add.w	r2, sl, #32
  40305c:	e7a6      	b.n	402fac <_realloc_r+0x258>
  40305e:	4632      	mov	r2, r6
  403060:	e77f      	b.n	402f62 <_realloc_r+0x20e>
  403062:	4629      	mov	r1, r5
  403064:	4630      	mov	r0, r6
  403066:	9301      	str	r3, [sp, #4]
  403068:	f7ff fe0c 	bl	402c84 <memmove>
  40306c:	9b01      	ldr	r3, [sp, #4]
  40306e:	e77e      	b.n	402f6e <_realloc_r+0x21a>
  403070:	68a9      	ldr	r1, [r5, #8]
  403072:	f8ca 1010 	str.w	r1, [sl, #16]
  403076:	68e9      	ldr	r1, [r5, #12]
  403078:	f8ca 1014 	str.w	r1, [sl, #20]
  40307c:	2a24      	cmp	r2, #36	; 0x24
  40307e:	d003      	beq.n	403088 <_realloc_r+0x334>
  403080:	3510      	adds	r5, #16
  403082:	f10a 0218 	add.w	r2, sl, #24
  403086:	e76c      	b.n	402f62 <_realloc_r+0x20e>
  403088:	692a      	ldr	r2, [r5, #16]
  40308a:	f8ca 2018 	str.w	r2, [sl, #24]
  40308e:	696a      	ldr	r2, [r5, #20]
  403090:	f8ca 201c 	str.w	r2, [sl, #28]
  403094:	3518      	adds	r5, #24
  403096:	f10a 0220 	add.w	r2, sl, #32
  40309a:	e762      	b.n	402f62 <_realloc_r+0x20e>
  40309c:	20000450 	.word	0x20000450

004030a0 <_sbrk_r>:
  4030a0:	b538      	push	{r3, r4, r5, lr}
  4030a2:	4c07      	ldr	r4, [pc, #28]	; (4030c0 <_sbrk_r+0x20>)
  4030a4:	2300      	movs	r3, #0
  4030a6:	4605      	mov	r5, r0
  4030a8:	4608      	mov	r0, r1
  4030aa:	6023      	str	r3, [r4, #0]
  4030ac:	f7fd feca 	bl	400e44 <_sbrk>
  4030b0:	1c43      	adds	r3, r0, #1
  4030b2:	d000      	beq.n	4030b6 <_sbrk_r+0x16>
  4030b4:	bd38      	pop	{r3, r4, r5, pc}
  4030b6:	6823      	ldr	r3, [r4, #0]
  4030b8:	2b00      	cmp	r3, #0
  4030ba:	d0fb      	beq.n	4030b4 <_sbrk_r+0x14>
  4030bc:	602b      	str	r3, [r5, #0]
  4030be:	bd38      	pop	{r3, r4, r5, pc}
  4030c0:	20000968 	.word	0x20000968

004030c4 <__sread>:
  4030c4:	b510      	push	{r4, lr}
  4030c6:	460c      	mov	r4, r1
  4030c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4030cc:	f000 f998 	bl	403400 <_read_r>
  4030d0:	2800      	cmp	r0, #0
  4030d2:	db03      	blt.n	4030dc <__sread+0x18>
  4030d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4030d6:	4403      	add	r3, r0
  4030d8:	6523      	str	r3, [r4, #80]	; 0x50
  4030da:	bd10      	pop	{r4, pc}
  4030dc:	89a3      	ldrh	r3, [r4, #12]
  4030de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4030e2:	81a3      	strh	r3, [r4, #12]
  4030e4:	bd10      	pop	{r4, pc}
  4030e6:	bf00      	nop

004030e8 <__swrite>:
  4030e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4030ec:	4616      	mov	r6, r2
  4030ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4030f2:	461f      	mov	r7, r3
  4030f4:	05d3      	lsls	r3, r2, #23
  4030f6:	460c      	mov	r4, r1
  4030f8:	4605      	mov	r5, r0
  4030fa:	d507      	bpl.n	40310c <__swrite+0x24>
  4030fc:	2200      	movs	r2, #0
  4030fe:	2302      	movs	r3, #2
  403100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403104:	f000 f966 	bl	4033d4 <_lseek_r>
  403108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40310c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403114:	81a2      	strh	r2, [r4, #12]
  403116:	463b      	mov	r3, r7
  403118:	4632      	mov	r2, r6
  40311a:	4628      	mov	r0, r5
  40311c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403120:	f000 b814 	b.w	40314c <_write_r>

00403124 <__sseek>:
  403124:	b510      	push	{r4, lr}
  403126:	460c      	mov	r4, r1
  403128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40312c:	f000 f952 	bl	4033d4 <_lseek_r>
  403130:	89a3      	ldrh	r3, [r4, #12]
  403132:	1c42      	adds	r2, r0, #1
  403134:	bf0e      	itee	eq
  403136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40313a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40313e:	6520      	strne	r0, [r4, #80]	; 0x50
  403140:	81a3      	strh	r3, [r4, #12]
  403142:	bd10      	pop	{r4, pc}

00403144 <__sclose>:
  403144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403148:	f000 b8cc 	b.w	4032e4 <_close_r>

0040314c <_write_r>:
  40314c:	b570      	push	{r4, r5, r6, lr}
  40314e:	460d      	mov	r5, r1
  403150:	4c08      	ldr	r4, [pc, #32]	; (403174 <_write_r+0x28>)
  403152:	4611      	mov	r1, r2
  403154:	4606      	mov	r6, r0
  403156:	461a      	mov	r2, r3
  403158:	4628      	mov	r0, r5
  40315a:	2300      	movs	r3, #0
  40315c:	6023      	str	r3, [r4, #0]
  40315e:	f7fd f83b 	bl	4001d8 <_write>
  403162:	1c43      	adds	r3, r0, #1
  403164:	d000      	beq.n	403168 <_write_r+0x1c>
  403166:	bd70      	pop	{r4, r5, r6, pc}
  403168:	6823      	ldr	r3, [r4, #0]
  40316a:	2b00      	cmp	r3, #0
  40316c:	d0fb      	beq.n	403166 <_write_r+0x1a>
  40316e:	6033      	str	r3, [r6, #0]
  403170:	bd70      	pop	{r4, r5, r6, pc}
  403172:	bf00      	nop
  403174:	20000968 	.word	0x20000968

00403178 <__swsetup_r>:
  403178:	b538      	push	{r3, r4, r5, lr}
  40317a:	4b30      	ldr	r3, [pc, #192]	; (40323c <__swsetup_r+0xc4>)
  40317c:	681b      	ldr	r3, [r3, #0]
  40317e:	4605      	mov	r5, r0
  403180:	460c      	mov	r4, r1
  403182:	b113      	cbz	r3, 40318a <__swsetup_r+0x12>
  403184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403186:	2a00      	cmp	r2, #0
  403188:	d038      	beq.n	4031fc <__swsetup_r+0x84>
  40318a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40318e:	b293      	uxth	r3, r2
  403190:	0718      	lsls	r0, r3, #28
  403192:	d50c      	bpl.n	4031ae <__swsetup_r+0x36>
  403194:	6920      	ldr	r0, [r4, #16]
  403196:	b1a8      	cbz	r0, 4031c4 <__swsetup_r+0x4c>
  403198:	f013 0201 	ands.w	r2, r3, #1
  40319c:	d01e      	beq.n	4031dc <__swsetup_r+0x64>
  40319e:	6963      	ldr	r3, [r4, #20]
  4031a0:	2200      	movs	r2, #0
  4031a2:	425b      	negs	r3, r3
  4031a4:	61a3      	str	r3, [r4, #24]
  4031a6:	60a2      	str	r2, [r4, #8]
  4031a8:	b1f0      	cbz	r0, 4031e8 <__swsetup_r+0x70>
  4031aa:	2000      	movs	r0, #0
  4031ac:	bd38      	pop	{r3, r4, r5, pc}
  4031ae:	06d9      	lsls	r1, r3, #27
  4031b0:	d53c      	bpl.n	40322c <__swsetup_r+0xb4>
  4031b2:	0758      	lsls	r0, r3, #29
  4031b4:	d426      	bmi.n	403204 <__swsetup_r+0x8c>
  4031b6:	6920      	ldr	r0, [r4, #16]
  4031b8:	f042 0308 	orr.w	r3, r2, #8
  4031bc:	81a3      	strh	r3, [r4, #12]
  4031be:	b29b      	uxth	r3, r3
  4031c0:	2800      	cmp	r0, #0
  4031c2:	d1e9      	bne.n	403198 <__swsetup_r+0x20>
  4031c4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4031c8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4031cc:	d0e4      	beq.n	403198 <__swsetup_r+0x20>
  4031ce:	4628      	mov	r0, r5
  4031d0:	4621      	mov	r1, r4
  4031d2:	f7ff f971 	bl	4024b8 <__smakebuf_r>
  4031d6:	89a3      	ldrh	r3, [r4, #12]
  4031d8:	6920      	ldr	r0, [r4, #16]
  4031da:	e7dd      	b.n	403198 <__swsetup_r+0x20>
  4031dc:	0799      	lsls	r1, r3, #30
  4031de:	bf58      	it	pl
  4031e0:	6962      	ldrpl	r2, [r4, #20]
  4031e2:	60a2      	str	r2, [r4, #8]
  4031e4:	2800      	cmp	r0, #0
  4031e6:	d1e0      	bne.n	4031aa <__swsetup_r+0x32>
  4031e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4031ec:	061a      	lsls	r2, r3, #24
  4031ee:	d5dd      	bpl.n	4031ac <__swsetup_r+0x34>
  4031f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4031f4:	81a3      	strh	r3, [r4, #12]
  4031f6:	f04f 30ff 	mov.w	r0, #4294967295
  4031fa:	bd38      	pop	{r3, r4, r5, pc}
  4031fc:	4618      	mov	r0, r3
  4031fe:	f7fe fe31 	bl	401e64 <__sinit>
  403202:	e7c2      	b.n	40318a <__swsetup_r+0x12>
  403204:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403206:	b151      	cbz	r1, 40321e <__swsetup_r+0xa6>
  403208:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40320c:	4299      	cmp	r1, r3
  40320e:	d004      	beq.n	40321a <__swsetup_r+0xa2>
  403210:	4628      	mov	r0, r5
  403212:	f7fe fe9b 	bl	401f4c <_free_r>
  403216:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40321a:	2300      	movs	r3, #0
  40321c:	6323      	str	r3, [r4, #48]	; 0x30
  40321e:	2300      	movs	r3, #0
  403220:	6920      	ldr	r0, [r4, #16]
  403222:	6063      	str	r3, [r4, #4]
  403224:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403228:	6020      	str	r0, [r4, #0]
  40322a:	e7c5      	b.n	4031b8 <__swsetup_r+0x40>
  40322c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403230:	2309      	movs	r3, #9
  403232:	602b      	str	r3, [r5, #0]
  403234:	f04f 30ff 	mov.w	r0, #4294967295
  403238:	81a2      	strh	r2, [r4, #12]
  40323a:	bd38      	pop	{r3, r4, r5, pc}
  40323c:	20000024 	.word	0x20000024

00403240 <__register_exitproc>:
  403240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403244:	4c25      	ldr	r4, [pc, #148]	; (4032dc <__register_exitproc+0x9c>)
  403246:	6825      	ldr	r5, [r4, #0]
  403248:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40324c:	4606      	mov	r6, r0
  40324e:	4688      	mov	r8, r1
  403250:	4692      	mov	sl, r2
  403252:	4699      	mov	r9, r3
  403254:	b3c4      	cbz	r4, 4032c8 <__register_exitproc+0x88>
  403256:	6860      	ldr	r0, [r4, #4]
  403258:	281f      	cmp	r0, #31
  40325a:	dc17      	bgt.n	40328c <__register_exitproc+0x4c>
  40325c:	1c43      	adds	r3, r0, #1
  40325e:	b176      	cbz	r6, 40327e <__register_exitproc+0x3e>
  403260:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403264:	2201      	movs	r2, #1
  403266:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40326a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40326e:	4082      	lsls	r2, r0
  403270:	4311      	orrs	r1, r2
  403272:	2e02      	cmp	r6, #2
  403274:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  403278:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40327c:	d01e      	beq.n	4032bc <__register_exitproc+0x7c>
  40327e:	3002      	adds	r0, #2
  403280:	6063      	str	r3, [r4, #4]
  403282:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403286:	2000      	movs	r0, #0
  403288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40328c:	4b14      	ldr	r3, [pc, #80]	; (4032e0 <__register_exitproc+0xa0>)
  40328e:	b303      	cbz	r3, 4032d2 <__register_exitproc+0x92>
  403290:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403294:	f7ff f954 	bl	402540 <malloc>
  403298:	4604      	mov	r4, r0
  40329a:	b1d0      	cbz	r0, 4032d2 <__register_exitproc+0x92>
  40329c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4032a0:	2700      	movs	r7, #0
  4032a2:	e880 0088 	stmia.w	r0, {r3, r7}
  4032a6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4032aa:	4638      	mov	r0, r7
  4032ac:	2301      	movs	r3, #1
  4032ae:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4032b2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4032b6:	2e00      	cmp	r6, #0
  4032b8:	d0e1      	beq.n	40327e <__register_exitproc+0x3e>
  4032ba:	e7d1      	b.n	403260 <__register_exitproc+0x20>
  4032bc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4032c0:	430a      	orrs	r2, r1
  4032c2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4032c6:	e7da      	b.n	40327e <__register_exitproc+0x3e>
  4032c8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4032cc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4032d0:	e7c1      	b.n	403256 <__register_exitproc+0x16>
  4032d2:	f04f 30ff 	mov.w	r0, #4294967295
  4032d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4032da:	bf00      	nop
  4032dc:	00403570 	.word	0x00403570
  4032e0:	00402541 	.word	0x00402541

004032e4 <_close_r>:
  4032e4:	b538      	push	{r3, r4, r5, lr}
  4032e6:	4c07      	ldr	r4, [pc, #28]	; (403304 <_close_r+0x20>)
  4032e8:	2300      	movs	r3, #0
  4032ea:	4605      	mov	r5, r0
  4032ec:	4608      	mov	r0, r1
  4032ee:	6023      	str	r3, [r4, #0]
  4032f0:	f7fd fdc4 	bl	400e7c <_close>
  4032f4:	1c43      	adds	r3, r0, #1
  4032f6:	d000      	beq.n	4032fa <_close_r+0x16>
  4032f8:	bd38      	pop	{r3, r4, r5, pc}
  4032fa:	6823      	ldr	r3, [r4, #0]
  4032fc:	2b00      	cmp	r3, #0
  4032fe:	d0fb      	beq.n	4032f8 <_close_r+0x14>
  403300:	602b      	str	r3, [r5, #0]
  403302:	bd38      	pop	{r3, r4, r5, pc}
  403304:	20000968 	.word	0x20000968

00403308 <_fclose_r>:
  403308:	b570      	push	{r4, r5, r6, lr}
  40330a:	b139      	cbz	r1, 40331c <_fclose_r+0x14>
  40330c:	4605      	mov	r5, r0
  40330e:	460c      	mov	r4, r1
  403310:	b108      	cbz	r0, 403316 <_fclose_r+0xe>
  403312:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403314:	b383      	cbz	r3, 403378 <_fclose_r+0x70>
  403316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40331a:	b913      	cbnz	r3, 403322 <_fclose_r+0x1a>
  40331c:	2600      	movs	r6, #0
  40331e:	4630      	mov	r0, r6
  403320:	bd70      	pop	{r4, r5, r6, pc}
  403322:	4621      	mov	r1, r4
  403324:	4628      	mov	r0, r5
  403326:	f7fe fc69 	bl	401bfc <__sflush_r>
  40332a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40332c:	4606      	mov	r6, r0
  40332e:	b133      	cbz	r3, 40333e <_fclose_r+0x36>
  403330:	69e1      	ldr	r1, [r4, #28]
  403332:	4628      	mov	r0, r5
  403334:	4798      	blx	r3
  403336:	2800      	cmp	r0, #0
  403338:	bfb8      	it	lt
  40333a:	f04f 36ff 	movlt.w	r6, #4294967295
  40333e:	89a3      	ldrh	r3, [r4, #12]
  403340:	061b      	lsls	r3, r3, #24
  403342:	d41c      	bmi.n	40337e <_fclose_r+0x76>
  403344:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403346:	b141      	cbz	r1, 40335a <_fclose_r+0x52>
  403348:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40334c:	4299      	cmp	r1, r3
  40334e:	d002      	beq.n	403356 <_fclose_r+0x4e>
  403350:	4628      	mov	r0, r5
  403352:	f7fe fdfb 	bl	401f4c <_free_r>
  403356:	2300      	movs	r3, #0
  403358:	6323      	str	r3, [r4, #48]	; 0x30
  40335a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40335c:	b121      	cbz	r1, 403368 <_fclose_r+0x60>
  40335e:	4628      	mov	r0, r5
  403360:	f7fe fdf4 	bl	401f4c <_free_r>
  403364:	2300      	movs	r3, #0
  403366:	6463      	str	r3, [r4, #68]	; 0x44
  403368:	f7fe fd82 	bl	401e70 <__sfp_lock_acquire>
  40336c:	2300      	movs	r3, #0
  40336e:	81a3      	strh	r3, [r4, #12]
  403370:	f7fe fd80 	bl	401e74 <__sfp_lock_release>
  403374:	4630      	mov	r0, r6
  403376:	bd70      	pop	{r4, r5, r6, pc}
  403378:	f7fe fd74 	bl	401e64 <__sinit>
  40337c:	e7cb      	b.n	403316 <_fclose_r+0xe>
  40337e:	6921      	ldr	r1, [r4, #16]
  403380:	4628      	mov	r0, r5
  403382:	f7fe fde3 	bl	401f4c <_free_r>
  403386:	e7dd      	b.n	403344 <_fclose_r+0x3c>

00403388 <_fstat_r>:
  403388:	b538      	push	{r3, r4, r5, lr}
  40338a:	460b      	mov	r3, r1
  40338c:	4c07      	ldr	r4, [pc, #28]	; (4033ac <_fstat_r+0x24>)
  40338e:	4605      	mov	r5, r0
  403390:	4611      	mov	r1, r2
  403392:	4618      	mov	r0, r3
  403394:	2300      	movs	r3, #0
  403396:	6023      	str	r3, [r4, #0]
  403398:	f7fd fd73 	bl	400e82 <_fstat>
  40339c:	1c43      	adds	r3, r0, #1
  40339e:	d000      	beq.n	4033a2 <_fstat_r+0x1a>
  4033a0:	bd38      	pop	{r3, r4, r5, pc}
  4033a2:	6823      	ldr	r3, [r4, #0]
  4033a4:	2b00      	cmp	r3, #0
  4033a6:	d0fb      	beq.n	4033a0 <_fstat_r+0x18>
  4033a8:	602b      	str	r3, [r5, #0]
  4033aa:	bd38      	pop	{r3, r4, r5, pc}
  4033ac:	20000968 	.word	0x20000968

004033b0 <_isatty_r>:
  4033b0:	b538      	push	{r3, r4, r5, lr}
  4033b2:	4c07      	ldr	r4, [pc, #28]	; (4033d0 <_isatty_r+0x20>)
  4033b4:	2300      	movs	r3, #0
  4033b6:	4605      	mov	r5, r0
  4033b8:	4608      	mov	r0, r1
  4033ba:	6023      	str	r3, [r4, #0]
  4033bc:	f7fd fd66 	bl	400e8c <_isatty>
  4033c0:	1c43      	adds	r3, r0, #1
  4033c2:	d000      	beq.n	4033c6 <_isatty_r+0x16>
  4033c4:	bd38      	pop	{r3, r4, r5, pc}
  4033c6:	6823      	ldr	r3, [r4, #0]
  4033c8:	2b00      	cmp	r3, #0
  4033ca:	d0fb      	beq.n	4033c4 <_isatty_r+0x14>
  4033cc:	602b      	str	r3, [r5, #0]
  4033ce:	bd38      	pop	{r3, r4, r5, pc}
  4033d0:	20000968 	.word	0x20000968

004033d4 <_lseek_r>:
  4033d4:	b570      	push	{r4, r5, r6, lr}
  4033d6:	460d      	mov	r5, r1
  4033d8:	4c08      	ldr	r4, [pc, #32]	; (4033fc <_lseek_r+0x28>)
  4033da:	4611      	mov	r1, r2
  4033dc:	4606      	mov	r6, r0
  4033de:	461a      	mov	r2, r3
  4033e0:	4628      	mov	r0, r5
  4033e2:	2300      	movs	r3, #0
  4033e4:	6023      	str	r3, [r4, #0]
  4033e6:	f7fd fd53 	bl	400e90 <_lseek>
  4033ea:	1c43      	adds	r3, r0, #1
  4033ec:	d000      	beq.n	4033f0 <_lseek_r+0x1c>
  4033ee:	bd70      	pop	{r4, r5, r6, pc}
  4033f0:	6823      	ldr	r3, [r4, #0]
  4033f2:	2b00      	cmp	r3, #0
  4033f4:	d0fb      	beq.n	4033ee <_lseek_r+0x1a>
  4033f6:	6033      	str	r3, [r6, #0]
  4033f8:	bd70      	pop	{r4, r5, r6, pc}
  4033fa:	bf00      	nop
  4033fc:	20000968 	.word	0x20000968

00403400 <_read_r>:
  403400:	b570      	push	{r4, r5, r6, lr}
  403402:	460d      	mov	r5, r1
  403404:	4c08      	ldr	r4, [pc, #32]	; (403428 <_read_r+0x28>)
  403406:	4611      	mov	r1, r2
  403408:	4606      	mov	r6, r0
  40340a:	461a      	mov	r2, r3
  40340c:	4628      	mov	r0, r5
  40340e:	2300      	movs	r3, #0
  403410:	6023      	str	r3, [r4, #0]
  403412:	f7fc fec3 	bl	40019c <_read>
  403416:	1c43      	adds	r3, r0, #1
  403418:	d000      	beq.n	40341c <_read_r+0x1c>
  40341a:	bd70      	pop	{r4, r5, r6, pc}
  40341c:	6823      	ldr	r3, [r4, #0]
  40341e:	2b00      	cmp	r3, #0
  403420:	d0fb      	beq.n	40341a <_read_r+0x1a>
  403422:	6033      	str	r3, [r6, #0]
  403424:	bd70      	pop	{r4, r5, r6, pc}
  403426:	bf00      	nop
  403428:	20000968 	.word	0x20000968
  40342c:	00000001 	.word	0x00000001
  403430:	00000002 	.word	0x00000002
  403434:	00000004 	.word	0x00000004
  403438:	00000008 	.word	0x00000008
  40343c:	00000010 	.word	0x00000010
  403440:	00000020 	.word	0x00000020
  403444:	00000040 	.word	0x00000040
  403448:	00000080 	.word	0x00000080
  40344c:	00000100 	.word	0x00000100
  403450:	00000200 	.word	0x00000200
  403454:	00000400 	.word	0x00000400
  403458:	63657845 	.word	0x63657845
  40345c:	6e617475 	.word	0x6e617475
  403460:	4d206f64 	.word	0x4d206f64
  403464:	61686c61 	.word	0x61686c61
  403468:	20656420 	.word	0x20656420
  40346c:	746e6f43 	.word	0x746e6f43
  403470:	656c6f72 	.word	0x656c6f72
  403474:	00000a0d 	.word	0x00000a0d
  403478:	63696e49 	.word	0x63696e49
  40347c:	646e6169 	.word	0x646e6169
  403480:	654c206f 	.word	0x654c206f
  403484:	72757469 	.word	0x72757469
  403488:	6f642061 	.word	0x6f642061
  40348c:	6e655320 	.word	0x6e655320
  403490:	0d726f73 	.word	0x0d726f73
  403494:	0000000a 	.word	0x0000000a
  403498:	656d6954 	.word	0x656d6954
  40349c:	65532072 	.word	0x65532072
  4034a0:	726f736e 	.word	0x726f736e
  4034a4:	00000a0d 	.word	0x00000a0d
  4034a8:	656d6954 	.word	0x656d6954
  4034ac:	6f432072 	.word	0x6f432072
  4034b0:	6461746e 	.word	0x6461746e
  4034b4:	0a0d726f 	.word	0x0a0d726f
  4034b8:	00000000 	.word	0x00000000
  4034bc:	74747542 	.word	0x74747542
  4034c0:	4c206e6f 	.word	0x4c206e6f
  4034c4:	20746665 	.word	0x20746665
  4034c8:	20525349 	.word	0x20525349
  4034cc:	00000a0d 	.word	0x00000a0d
  4034d0:	74747542 	.word	0x74747542
  4034d4:	52206e6f 	.word	0x52206e6f
  4034d8:	74686769 	.word	0x74686769
  4034dc:	52534920 	.word	0x52534920
  4034e0:	000a0d20 	.word	0x000a0d20
  4034e4:	666e6f43 	.word	0x666e6f43
  4034e8:	72756769 	.word	0x72756769
  4034ec:	6f616361 	.word	0x6f616361
  4034f0:	6e655320 	.word	0x6e655320
  4034f4:	20726f73 	.word	0x20726f73
  4034f8:	20525349 	.word	0x20525349
  4034fc:	00000a0d 	.word	0x00000a0d
  403500:	656d6954 	.word	0x656d6954
  403504:	20302072 	.word	0x20302072
  403508:	666e6f43 	.word	0x666e6f43
  40350c:	72756769 	.word	0x72756769
  403510:	206f6461 	.word	0x206f6461
  403514:	61726170 	.word	0x61726170
  403518:	30303120 	.word	0x30303120
  40351c:	0a0d736d 	.word	0x0a0d736d
  403520:	00000000 	.word	0x00000000
  403524:	656d6954 	.word	0x656d6954
  403528:	20312072 	.word	0x20312072
  40352c:	666e6f43 	.word	0x666e6f43
  403530:	72756769 	.word	0x72756769
  403534:	206f6461 	.word	0x206f6461
  403538:	61726170 	.word	0x61726170
  40353c:	75303120 	.word	0x75303120
  403540:	000a0d73 	.word	0x000a0d73
  403544:	736e6553 	.word	0x736e6553
  403548:	4920726f 	.word	0x4920726f
  40354c:	0d205253 	.word	0x0d205253
  403550:	0000000a 	.word	0x0000000a
  403554:	63696e49 	.word	0x63696e49
  403558:	696c6169 	.word	0x696c6169
  40355c:	676e697a 	.word	0x676e697a
  403560:	61654220 	.word	0x61654220
  403564:	6142206d 	.word	0x6142206d
  403568:	0a0d6c6c 	.word	0x0a0d6c6c
  40356c:	00000000 	.word	0x00000000

00403570 <_global_impure_ptr>:
  403570:	20000028                                (.. 

00403574 <_init>:
  403574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403576:	bf00      	nop
  403578:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40357a:	bc08      	pop	{r3}
  40357c:	469e      	mov	lr, r3
  40357e:	4770      	bx	lr

00403580 <__init_array_start>:
  403580:	00401bdd 	.word	0x00401bdd

00403584 <__frame_dummy_init_array_entry>:
  403584:	004000f1                                ..@.

00403588 <_fini>:
  403588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40358a:	bf00      	nop
  40358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40358e:	bc08      	pop	{r3}
  403590:	469e      	mov	lr, r3
  403592:	4770      	bx	lr

00403594 <__fini_array_start>:
  403594:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <btn_duty>:
20000010:	0001 0000                                   ....

20000014 <usart_options.8632>:
20000014:	c200 0001 00c0 0000 0800 0000 0000 0000     ................

20000024 <_impure_ptr>:
20000024:	0028 2000                                   (.. 

20000028 <impure_data>:
20000028:	0000 0000 0314 2000 037c 2000 03e4 2000     ....... |.. ... 
	...
200000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000450 <__malloc_av_>:
	...
20000458:	0450 2000 0450 2000 0458 2000 0458 2000     P.. P.. X.. X.. 
20000468:	0460 2000 0460 2000 0468 2000 0468 2000     `.. `.. h.. h.. 
20000478:	0470 2000 0470 2000 0478 2000 0478 2000     p.. p.. x.. x.. 
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 

20000858 <__malloc_sbrk_base>:
20000858:	ffff ffff                                   ....

2000085c <__malloc_trim_threshold>:
2000085c:	0000 0002                                   ....
