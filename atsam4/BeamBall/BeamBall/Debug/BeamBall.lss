
BeamBall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cd4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404cd4  00404cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009cc  20000000  00404cdc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000010c  200009cc  004056a8  000209cc  2**2
                  ALLOC
  4 .stack        00003000  20000ad8  004057b4  000209cc  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209cc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015e6a  00000000  00000000  00020a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003044  00000000  00000000  000368b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004ebb  00000000  00000000  000398fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b78  00000000  00000000  0003e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a88  00000000  00000000  0003f330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000151b7  00000000  00000000  0003fdb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000de2a  00000000  00000000  00054f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00053e49  00000000  00000000  00062d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000025b0  00000000  00000000  000b6be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 3a 00 20 39 0b 40 00 35 0b 40 00 35 0b 40 00     .:. 9.@.5.@.5.@.
  400010:	35 0b 40 00 35 0b 40 00 35 0b 40 00 00 00 00 00     5.@.5.@.5.@.....
	...
  40002c:	35 0b 40 00 35 0b 40 00 00 00 00 00 35 0b 40 00     5.@.5.@.....5.@.
  40003c:	35 0b 40 00 35 0b 40 00 35 0b 40 00 35 0b 40 00     5.@.5.@.5.@.5.@.
  40004c:	35 0b 40 00 35 0b 40 00 35 0b 40 00 35 0b 40 00     5.@.5.@.5.@.5.@.
  40005c:	35 0b 40 00 35 0b 40 00 35 0b 40 00 00 00 00 00     5.@.5.@.5.@.....
  40006c:	d1 06 40 00 e5 06 40 00 f9 06 40 00 35 0b 40 00     ..@...@...@.5.@.
  40007c:	35 0b 40 00 00 00 00 00 00 00 00 00 35 0b 40 00     5.@.........5.@.
  40008c:	35 0b 40 00 35 0b 40 00 35 0b 40 00 35 0b 40 00     5.@.5.@.5.@.5.@.
  40009c:	69 10 40 00 85 10 40 00 35 0b 40 00 35 0b 40 00     i.@...@.5.@.5.@.
  4000ac:	35 0b 40 00 35 0b 40 00 35 0b 40 00 35 0b 40 00     5.@.5.@.5.@.5.@.
  4000bc:	35 0b 40 00 35 0b 40 00 35 0b 40 00 35 0b 40 00     5.@.5.@.5.@.5.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009cc 	.word	0x200009cc
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404cdc 	.word	0x00404cdc

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00404cdc 	.word	0x00404cdc
  40012c:	200009d0 	.word	0x200009d0
  400130:	00404cdc 	.word	0x00404cdc
  400134:	00000000 	.word	0x00000000

00400138 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400138:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40013a:	480e      	ldr	r0, [pc, #56]	; (400174 <sysclk_init+0x3c>)
  40013c:	4b0e      	ldr	r3, [pc, #56]	; (400178 <sysclk_init+0x40>)
  40013e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400140:	213e      	movs	r1, #62	; 0x3e
  400142:	2000      	movs	r0, #0
  400144:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x44>)
  400146:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400148:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x48>)
  40014a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40014c:	2800      	cmp	r0, #0
  40014e:	d0fc      	beq.n	40014a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400150:	4b0c      	ldr	r3, [pc, #48]	; (400184 <sysclk_init+0x4c>)
  400152:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400154:	4a0c      	ldr	r2, [pc, #48]	; (400188 <sysclk_init+0x50>)
  400156:	4b0d      	ldr	r3, [pc, #52]	; (40018c <sysclk_init+0x54>)
  400158:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40015a:	4c0d      	ldr	r4, [pc, #52]	; (400190 <sysclk_init+0x58>)
  40015c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40015e:	2800      	cmp	r0, #0
  400160:	d0fc      	beq.n	40015c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400162:	2010      	movs	r0, #16
  400164:	4b0b      	ldr	r3, [pc, #44]	; (400194 <sysclk_init+0x5c>)
  400166:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400168:	4b0b      	ldr	r3, [pc, #44]	; (400198 <sysclk_init+0x60>)
  40016a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40016c:	4801      	ldr	r0, [pc, #4]	; (400174 <sysclk_init+0x3c>)
  40016e:	4b02      	ldr	r3, [pc, #8]	; (400178 <sysclk_init+0x40>)
  400170:	4798      	blx	r3
  400172:	bd10      	pop	{r4, pc}
  400174:	07270e00 	.word	0x07270e00
  400178:	00400cf5 	.word	0x00400cf5
  40017c:	00400771 	.word	0x00400771
  400180:	004007c5 	.word	0x004007c5
  400184:	004007d5 	.word	0x004007d5
  400188:	20133f01 	.word	0x20133f01
  40018c:	400e0400 	.word	0x400e0400
  400190:	004007e5 	.word	0x004007e5
  400194:	0040070d 	.word	0x0040070d
  400198:	00400be5 	.word	0x00400be5

0040019c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40019c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001a0:	b980      	cbnz	r0, 4001c4 <_read+0x28>
  4001a2:	460c      	mov	r4, r1
  4001a4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001a6:	2a00      	cmp	r2, #0
  4001a8:	dd0f      	ble.n	4001ca <_read+0x2e>
  4001aa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001ac:	4e08      	ldr	r6, [pc, #32]	; (4001d0 <_read+0x34>)
  4001ae:	4d09      	ldr	r5, [pc, #36]	; (4001d4 <_read+0x38>)
  4001b0:	6830      	ldr	r0, [r6, #0]
  4001b2:	4621      	mov	r1, r4
  4001b4:	682b      	ldr	r3, [r5, #0]
  4001b6:	4798      	blx	r3
		ptr++;
  4001b8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001ba:	42bc      	cmp	r4, r7
  4001bc:	d1f8      	bne.n	4001b0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001be:	4640      	mov	r0, r8
  4001c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001c4:	f04f 38ff 	mov.w	r8, #4294967295
  4001c8:	e7f9      	b.n	4001be <_read+0x22>
	for (; len > 0; --len) {
  4001ca:	4680      	mov	r8, r0
  4001cc:	e7f7      	b.n	4001be <_read+0x22>
  4001ce:	bf00      	nop
  4001d0:	20000aa4 	.word	0x20000aa4
  4001d4:	20000a9c 	.word	0x20000a9c

004001d8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001d8:	3801      	subs	r0, #1
  4001da:	2802      	cmp	r0, #2
  4001dc:	d815      	bhi.n	40020a <_write+0x32>
{
  4001de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001e2:	460e      	mov	r6, r1
  4001e4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4001e6:	b19a      	cbz	r2, 400210 <_write+0x38>
  4001e8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001ea:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400224 <_write+0x4c>
  4001ee:	4f0c      	ldr	r7, [pc, #48]	; (400220 <_write+0x48>)
  4001f0:	f8d8 0000 	ldr.w	r0, [r8]
  4001f4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001f8:	683b      	ldr	r3, [r7, #0]
  4001fa:	4798      	blx	r3
  4001fc:	2800      	cmp	r0, #0
  4001fe:	db0a      	blt.n	400216 <_write+0x3e>
  400200:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400202:	3c01      	subs	r4, #1
  400204:	d1f4      	bne.n	4001f0 <_write+0x18>
  400206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40020a:	f04f 30ff 	mov.w	r0, #4294967295
  40020e:	4770      	bx	lr
	for (; len != 0; --len) {
  400210:	4610      	mov	r0, r2
  400212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400216:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40021a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40021e:	bf00      	nop
  400220:	20000aa0 	.word	0x20000aa0
  400224:	20000aa4 	.word	0x20000aa4

00400228 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400228:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40022a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40022e:	4b14      	ldr	r3, [pc, #80]	; (400280 <board_init+0x58>)
  400230:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400232:	200b      	movs	r0, #11
  400234:	4c13      	ldr	r4, [pc, #76]	; (400284 <board_init+0x5c>)
  400236:	47a0      	blx	r4
  400238:	200c      	movs	r0, #12
  40023a:	47a0      	blx	r4
  40023c:	200d      	movs	r0, #13
  40023e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400240:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400244:	2013      	movs	r0, #19
  400246:	4c10      	ldr	r4, [pc, #64]	; (400288 <board_init+0x60>)
  400248:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40024a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40024e:	2014      	movs	r0, #20
  400250:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400252:	490e      	ldr	r1, [pc, #56]	; (40028c <board_init+0x64>)
  400254:	2023      	movs	r0, #35	; 0x23
  400256:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400258:	490d      	ldr	r1, [pc, #52]	; (400290 <board_init+0x68>)
  40025a:	204c      	movs	r0, #76	; 0x4c
  40025c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40025e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400262:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400266:	480b      	ldr	r0, [pc, #44]	; (400294 <board_init+0x6c>)
  400268:	4b0b      	ldr	r3, [pc, #44]	; (400298 <board_init+0x70>)
  40026a:	4798      	blx	r3
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
#endif

#ifdef CONF_BOARD_PWM_LED0
	/* Configure PWM LED0 pin */
	gpio_configure_pin(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
  40026c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400270:	2013      	movs	r0, #19
  400272:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_PWM_LED1
	/* Configure PWM LED1 pin */
	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
  400274:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400278:	2014      	movs	r0, #20
  40027a:	47a0      	blx	r4
  40027c:	bd10      	pop	{r4, pc}
  40027e:	bf00      	nop
  400280:	400e1450 	.word	0x400e1450
  400284:	004007f5 	.word	0x004007f5
  400288:	00400401 	.word	0x00400401
  40028c:	28000079 	.word	0x28000079
  400290:	28000059 	.word	0x28000059
  400294:	400e0e00 	.word	0x400e0e00
  400298:	00400521 	.word	0x00400521

0040029c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40029c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40029e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4002a2:	d039      	beq.n	400318 <pio_set_peripheral+0x7c>
  4002a4:	d813      	bhi.n	4002ce <pio_set_peripheral+0x32>
  4002a6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4002aa:	d025      	beq.n	4002f8 <pio_set_peripheral+0x5c>
  4002ac:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4002b0:	d10a      	bne.n	4002c8 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4002b4:	4313      	orrs	r3, r2
  4002b6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002b8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4002ba:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4002bc:	400b      	ands	r3, r1
  4002be:	ea23 0302 	bic.w	r3, r3, r2
  4002c2:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4002c4:	6042      	str	r2, [r0, #4]
  4002c6:	4770      	bx	lr
	switch (ul_type) {
  4002c8:	2900      	cmp	r1, #0
  4002ca:	d1fb      	bne.n	4002c4 <pio_set_peripheral+0x28>
  4002cc:	4770      	bx	lr
  4002ce:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4002d2:	d020      	beq.n	400316 <pio_set_peripheral+0x7a>
  4002d4:	d809      	bhi.n	4002ea <pio_set_peripheral+0x4e>
  4002d6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4002da:	d1f3      	bne.n	4002c4 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002dc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4002de:	4313      	orrs	r3, r2
  4002e0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4002e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4002e4:	4313      	orrs	r3, r2
  4002e6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002e8:	e7ec      	b.n	4002c4 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4002ea:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4002ee:	d012      	beq.n	400316 <pio_set_peripheral+0x7a>
  4002f0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4002f4:	d00f      	beq.n	400316 <pio_set_peripheral+0x7a>
  4002f6:	e7e5      	b.n	4002c4 <pio_set_peripheral+0x28>
{
  4002f8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002fa:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4002fc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4002fe:	43d3      	mvns	r3, r2
  400300:	4021      	ands	r1, r4
  400302:	461c      	mov	r4, r3
  400304:	4019      	ands	r1, r3
  400306:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400308:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40030a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40030c:	400b      	ands	r3, r1
  40030e:	4023      	ands	r3, r4
  400310:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400312:	6042      	str	r2, [r0, #4]
}
  400314:	bc10      	pop	{r4}
  400316:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400318:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40031a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40031c:	400b      	ands	r3, r1
  40031e:	ea23 0302 	bic.w	r3, r3, r2
  400322:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400324:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400326:	4313      	orrs	r3, r2
  400328:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40032a:	e7cb      	b.n	4002c4 <pio_set_peripheral+0x28>

0040032c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40032c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40032e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400332:	bf14      	ite	ne
  400334:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400336:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400338:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40033c:	bf14      	ite	ne
  40033e:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  400340:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  400342:	f012 0f02 	tst.w	r2, #2
  400346:	d107      	bne.n	400358 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400348:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40034c:	bf18      	it	ne
  40034e:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  400352:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400354:	6001      	str	r1, [r0, #0]
  400356:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  400358:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40035c:	e7f9      	b.n	400352 <pio_set_input+0x26>

0040035e <pio_set_output>:
{
  40035e:	b410      	push	{r4}
  400360:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400362:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400364:	b944      	cbnz	r4, 400378 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  400366:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400368:	b143      	cbz	r3, 40037c <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  40036a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40036c:	b942      	cbnz	r2, 400380 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40036e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400370:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400372:	6001      	str	r1, [r0, #0]
}
  400374:	bc10      	pop	{r4}
  400376:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400378:	6641      	str	r1, [r0, #100]	; 0x64
  40037a:	e7f5      	b.n	400368 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40037c:	6541      	str	r1, [r0, #84]	; 0x54
  40037e:	e7f5      	b.n	40036c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400380:	6301      	str	r1, [r0, #48]	; 0x30
  400382:	e7f5      	b.n	400370 <pio_set_output+0x12>

00400384 <pio_pull_down>:
	if (ul_pull_down_enable) {
  400384:	b912      	cbnz	r2, 40038c <pio_pull_down+0x8>
		p_pio->PIO_PPDDR = ul_mask;
  400386:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  40038a:	4770      	bx	lr
		p_pio->PIO_PPDER = ul_mask;
  40038c:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  400390:	4770      	bx	lr

00400392 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400392:	f012 0f10 	tst.w	r2, #16
  400396:	d010      	beq.n	4003ba <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  400398:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40039c:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  4003a0:	bf14      	ite	ne
  4003a2:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  4003a6:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  4003aa:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  4003ae:	bf14      	ite	ne
  4003b0:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  4003b4:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  4003b8:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4003ba:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4003be:	4770      	bx	lr

004003c0 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4003c0:	6401      	str	r1, [r0, #64]	; 0x40
  4003c2:	4770      	bx	lr

004003c4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4003c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4003c6:	4770      	bx	lr

004003c8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4003c8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4003ca:	4770      	bx	lr

004003cc <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4003cc:	0943      	lsrs	r3, r0, #5
  4003ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4003d2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4003d6:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4003d8:	f000 001f 	and.w	r0, r0, #31
  4003dc:	2201      	movs	r2, #1
  4003de:	fa02 f000 	lsl.w	r0, r2, r0
  4003e2:	6318      	str	r0, [r3, #48]	; 0x30
  4003e4:	4770      	bx	lr

004003e6 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4003e6:	0943      	lsrs	r3, r0, #5
  4003e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4003ec:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4003f0:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4003f2:	f000 001f 	and.w	r0, r0, #31
  4003f6:	2201      	movs	r2, #1
  4003f8:	fa02 f000 	lsl.w	r0, r2, r0
  4003fc:	6358      	str	r0, [r3, #52]	; 0x34
  4003fe:	4770      	bx	lr

00400400 <pio_configure_pin>:
{
  400400:	b570      	push	{r4, r5, r6, lr}
  400402:	b082      	sub	sp, #8
  400404:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400406:	0943      	lsrs	r3, r0, #5
  400408:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40040c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400410:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  400412:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40041a:	d053      	beq.n	4004c4 <pio_configure_pin+0xc4>
  40041c:	d80a      	bhi.n	400434 <pio_configure_pin+0x34>
  40041e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400422:	d02d      	beq.n	400480 <pio_configure_pin+0x80>
  400424:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400428:	d03b      	beq.n	4004a2 <pio_configure_pin+0xa2>
  40042a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40042e:	d015      	beq.n	40045c <pio_configure_pin+0x5c>
		return 0;
  400430:	2000      	movs	r0, #0
  400432:	e023      	b.n	40047c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  400434:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400438:	d055      	beq.n	4004e6 <pio_configure_pin+0xe6>
  40043a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40043e:	d052      	beq.n	4004e6 <pio_configure_pin+0xe6>
  400440:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400444:	d1f4      	bne.n	400430 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400446:	f000 011f 	and.w	r1, r0, #31
  40044a:	2601      	movs	r6, #1
  40044c:	462a      	mov	r2, r5
  40044e:	fa06 f101 	lsl.w	r1, r6, r1
  400452:	4620      	mov	r0, r4
  400454:	4b2f      	ldr	r3, [pc, #188]	; (400514 <pio_configure_pin+0x114>)
  400456:	4798      	blx	r3
	return 1;
  400458:	4630      	mov	r0, r6
		break;
  40045a:	e00f      	b.n	40047c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40045c:	f000 001f 	and.w	r0, r0, #31
  400460:	2601      	movs	r6, #1
  400462:	4086      	lsls	r6, r0
  400464:	4632      	mov	r2, r6
  400466:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40046a:	4620      	mov	r0, r4
  40046c:	4b2a      	ldr	r3, [pc, #168]	; (400518 <pio_configure_pin+0x118>)
  40046e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400470:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400474:	bf14      	ite	ne
  400476:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400478:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40047a:	2001      	movs	r0, #1
}
  40047c:	b002      	add	sp, #8
  40047e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400480:	f000 001f 	and.w	r0, r0, #31
  400484:	2601      	movs	r6, #1
  400486:	4086      	lsls	r6, r0
  400488:	4632      	mov	r2, r6
  40048a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40048e:	4620      	mov	r0, r4
  400490:	4b21      	ldr	r3, [pc, #132]	; (400518 <pio_configure_pin+0x118>)
  400492:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400494:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400498:	bf14      	ite	ne
  40049a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40049c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40049e:	2001      	movs	r0, #1
  4004a0:	e7ec      	b.n	40047c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4004a2:	f000 001f 	and.w	r0, r0, #31
  4004a6:	2601      	movs	r6, #1
  4004a8:	4086      	lsls	r6, r0
  4004aa:	4632      	mov	r2, r6
  4004ac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4004b0:	4620      	mov	r0, r4
  4004b2:	4b19      	ldr	r3, [pc, #100]	; (400518 <pio_configure_pin+0x118>)
  4004b4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4004b6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004ba:	bf14      	ite	ne
  4004bc:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4004be:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4004c0:	2001      	movs	r0, #1
  4004c2:	e7db      	b.n	40047c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4004c4:	f000 001f 	and.w	r0, r0, #31
  4004c8:	2601      	movs	r6, #1
  4004ca:	4086      	lsls	r6, r0
  4004cc:	4632      	mov	r2, r6
  4004ce:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4004d2:	4620      	mov	r0, r4
  4004d4:	4b10      	ldr	r3, [pc, #64]	; (400518 <pio_configure_pin+0x118>)
  4004d6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4004d8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004dc:	bf14      	ite	ne
  4004de:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4004e0:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4004e2:	2001      	movs	r0, #1
  4004e4:	e7ca      	b.n	40047c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4004e6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4004ea:	f000 011f 	and.w	r1, r0, #31
  4004ee:	2601      	movs	r6, #1
  4004f0:	ea05 0306 	and.w	r3, r5, r6
  4004f4:	9300      	str	r3, [sp, #0]
  4004f6:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4004fa:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4004fe:	bf14      	ite	ne
  400500:	2200      	movne	r2, #0
  400502:	2201      	moveq	r2, #1
  400504:	fa06 f101 	lsl.w	r1, r6, r1
  400508:	4620      	mov	r0, r4
  40050a:	4c04      	ldr	r4, [pc, #16]	; (40051c <pio_configure_pin+0x11c>)
  40050c:	47a0      	blx	r4
	return 1;
  40050e:	4630      	mov	r0, r6
		break;
  400510:	e7b4      	b.n	40047c <pio_configure_pin+0x7c>
  400512:	bf00      	nop
  400514:	0040032d 	.word	0x0040032d
  400518:	0040029d 	.word	0x0040029d
  40051c:	0040035f 	.word	0x0040035f

00400520 <pio_configure_pin_group>:
{
  400520:	b570      	push	{r4, r5, r6, lr}
  400522:	b082      	sub	sp, #8
  400524:	4605      	mov	r5, r0
  400526:	460e      	mov	r6, r1
  400528:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  40052a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  40052e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400532:	d03d      	beq.n	4005b0 <pio_configure_pin_group+0x90>
  400534:	d80a      	bhi.n	40054c <pio_configure_pin_group+0x2c>
  400536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40053a:	d021      	beq.n	400580 <pio_configure_pin_group+0x60>
  40053c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400540:	d02a      	beq.n	400598 <pio_configure_pin_group+0x78>
  400542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400546:	d00e      	beq.n	400566 <pio_configure_pin_group+0x46>
		return 0;
  400548:	2000      	movs	r0, #0
  40054a:	e017      	b.n	40057c <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  40054c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400550:	d03a      	beq.n	4005c8 <pio_configure_pin_group+0xa8>
  400552:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400556:	d037      	beq.n	4005c8 <pio_configure_pin_group+0xa8>
  400558:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40055c:	d1f4      	bne.n	400548 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  40055e:	4b23      	ldr	r3, [pc, #140]	; (4005ec <pio_configure_pin_group+0xcc>)
  400560:	4798      	blx	r3
	return 1;
  400562:	2001      	movs	r0, #1
		break;
  400564:	e00a      	b.n	40057c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400566:	460a      	mov	r2, r1
  400568:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40056c:	4b20      	ldr	r3, [pc, #128]	; (4005f0 <pio_configure_pin_group+0xd0>)
  40056e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400570:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400574:	bf14      	ite	ne
  400576:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400578:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40057a:	2001      	movs	r0, #1
}
  40057c:	b002      	add	sp, #8
  40057e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400580:	460a      	mov	r2, r1
  400582:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400586:	4b1a      	ldr	r3, [pc, #104]	; (4005f0 <pio_configure_pin_group+0xd0>)
  400588:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40058a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40058e:	bf14      	ite	ne
  400590:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400592:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400594:	2001      	movs	r0, #1
  400596:	e7f1      	b.n	40057c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400598:	460a      	mov	r2, r1
  40059a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40059e:	4b14      	ldr	r3, [pc, #80]	; (4005f0 <pio_configure_pin_group+0xd0>)
  4005a0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4005a2:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005a6:	bf14      	ite	ne
  4005a8:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4005aa:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4005ac:	2001      	movs	r0, #1
  4005ae:	e7e5      	b.n	40057c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4005b0:	460a      	mov	r2, r1
  4005b2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005b6:	4b0e      	ldr	r3, [pc, #56]	; (4005f0 <pio_configure_pin_group+0xd0>)
  4005b8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4005ba:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005be:	bf14      	ite	ne
  4005c0:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4005c2:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4005c4:	2001      	movs	r0, #1
  4005c6:	e7d9      	b.n	40057c <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4005c8:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  4005cc:	f004 0301 	and.w	r3, r4, #1
  4005d0:	9300      	str	r3, [sp, #0]
  4005d2:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4005d6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005da:	bf14      	ite	ne
  4005dc:	2200      	movne	r2, #0
  4005de:	2201      	moveq	r2, #1
  4005e0:	4631      	mov	r1, r6
  4005e2:	4628      	mov	r0, r5
  4005e4:	4c03      	ldr	r4, [pc, #12]	; (4005f4 <pio_configure_pin_group+0xd4>)
  4005e6:	47a0      	blx	r4
	return 1;
  4005e8:	2001      	movs	r0, #1
		break;
  4005ea:	e7c7      	b.n	40057c <pio_configure_pin_group+0x5c>
  4005ec:	0040032d 	.word	0x0040032d
  4005f0:	0040029d 	.word	0x0040029d
  4005f4:	0040035f 	.word	0x0040035f

004005f8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4005f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4005fc:	4681      	mov	r9, r0
  4005fe:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400600:	4b12      	ldr	r3, [pc, #72]	; (40064c <pio_handler_process+0x54>)
  400602:	4798      	blx	r3
  400604:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400606:	4648      	mov	r0, r9
  400608:	4b11      	ldr	r3, [pc, #68]	; (400650 <pio_handler_process+0x58>)
  40060a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40060c:	4005      	ands	r5, r0
  40060e:	d013      	beq.n	400638 <pio_handler_process+0x40>
  400610:	4c10      	ldr	r4, [pc, #64]	; (400654 <pio_handler_process+0x5c>)
  400612:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400616:	e003      	b.n	400620 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400618:	42b4      	cmp	r4, r6
  40061a:	d00d      	beq.n	400638 <pio_handler_process+0x40>
  40061c:	3410      	adds	r4, #16
		while (status != 0) {
  40061e:	b15d      	cbz	r5, 400638 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400620:	6820      	ldr	r0, [r4, #0]
  400622:	42b8      	cmp	r0, r7
  400624:	d1f8      	bne.n	400618 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400626:	6861      	ldr	r1, [r4, #4]
  400628:	4229      	tst	r1, r5
  40062a:	d0f5      	beq.n	400618 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40062c:	68e3      	ldr	r3, [r4, #12]
  40062e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400630:	6863      	ldr	r3, [r4, #4]
  400632:	ea25 0503 	bic.w	r5, r5, r3
  400636:	e7ef      	b.n	400618 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400638:	4b07      	ldr	r3, [pc, #28]	; (400658 <pio_handler_process+0x60>)
  40063a:	681b      	ldr	r3, [r3, #0]
  40063c:	b123      	cbz	r3, 400648 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40063e:	4b07      	ldr	r3, [pc, #28]	; (40065c <pio_handler_process+0x64>)
  400640:	681b      	ldr	r3, [r3, #0]
  400642:	b10b      	cbz	r3, 400648 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400644:	4648      	mov	r0, r9
  400646:	4798      	blx	r3
  400648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40064c:	004003c5 	.word	0x004003c5
  400650:	004003c9 	.word	0x004003c9
  400654:	200009e8 	.word	0x200009e8
  400658:	20000aa8 	.word	0x20000aa8
  40065c:	20000a5c 	.word	0x20000a5c

00400660 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400662:	4c18      	ldr	r4, [pc, #96]	; (4006c4 <pio_handler_set+0x64>)
  400664:	6826      	ldr	r6, [r4, #0]
  400666:	2e06      	cmp	r6, #6
  400668:	d829      	bhi.n	4006be <pio_handler_set+0x5e>
  40066a:	f04f 0c00 	mov.w	ip, #0
  40066e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400670:	4f15      	ldr	r7, [pc, #84]	; (4006c8 <pio_handler_set+0x68>)
  400672:	e004      	b.n	40067e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400674:	3401      	adds	r4, #1
  400676:	b2e4      	uxtb	r4, r4
  400678:	46a4      	mov	ip, r4
  40067a:	42a6      	cmp	r6, r4
  40067c:	d309      	bcc.n	400692 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40067e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400680:	0125      	lsls	r5, r4, #4
  400682:	597d      	ldr	r5, [r7, r5]
  400684:	428d      	cmp	r5, r1
  400686:	d1f5      	bne.n	400674 <pio_handler_set+0x14>
  400688:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40068c:	686d      	ldr	r5, [r5, #4]
  40068e:	4295      	cmp	r5, r2
  400690:	d1f0      	bne.n	400674 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400692:	4d0d      	ldr	r5, [pc, #52]	; (4006c8 <pio_handler_set+0x68>)
  400694:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400698:	eb05 040e 	add.w	r4, r5, lr
  40069c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4006a0:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4006a2:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4006a4:	9906      	ldr	r1, [sp, #24]
  4006a6:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4006a8:	3601      	adds	r6, #1
  4006aa:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  4006ac:	bf04      	itt	eq
  4006ae:	4905      	ldreq	r1, [pc, #20]	; (4006c4 <pio_handler_set+0x64>)
  4006b0:	600e      	streq	r6, [r1, #0]
  4006b2:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006b4:	461a      	mov	r2, r3
  4006b6:	4b05      	ldr	r3, [pc, #20]	; (4006cc <pio_handler_set+0x6c>)
  4006b8:	4798      	blx	r3

	return 0;
  4006ba:	2000      	movs	r0, #0
  4006bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4006be:	2001      	movs	r0, #1
}
  4006c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006c2:	bf00      	nop
  4006c4:	20000a58 	.word	0x20000a58
  4006c8:	200009e8 	.word	0x200009e8
  4006cc:	00400393 	.word	0x00400393

004006d0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4006d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4006d2:	210b      	movs	r1, #11
  4006d4:	4801      	ldr	r0, [pc, #4]	; (4006dc <PIOA_Handler+0xc>)
  4006d6:	4b02      	ldr	r3, [pc, #8]	; (4006e0 <PIOA_Handler+0x10>)
  4006d8:	4798      	blx	r3
  4006da:	bd08      	pop	{r3, pc}
  4006dc:	400e0e00 	.word	0x400e0e00
  4006e0:	004005f9 	.word	0x004005f9

004006e4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4006e4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4006e6:	210c      	movs	r1, #12
  4006e8:	4801      	ldr	r0, [pc, #4]	; (4006f0 <PIOB_Handler+0xc>)
  4006ea:	4b02      	ldr	r3, [pc, #8]	; (4006f4 <PIOB_Handler+0x10>)
  4006ec:	4798      	blx	r3
  4006ee:	bd08      	pop	{r3, pc}
  4006f0:	400e1000 	.word	0x400e1000
  4006f4:	004005f9 	.word	0x004005f9

004006f8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4006f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4006fa:	210d      	movs	r1, #13
  4006fc:	4801      	ldr	r0, [pc, #4]	; (400704 <PIOC_Handler+0xc>)
  4006fe:	4b02      	ldr	r3, [pc, #8]	; (400708 <PIOC_Handler+0x10>)
  400700:	4798      	blx	r3
  400702:	bd08      	pop	{r3, pc}
  400704:	400e1200 	.word	0x400e1200
  400708:	004005f9 	.word	0x004005f9

0040070c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40070c:	4a17      	ldr	r2, [pc, #92]	; (40076c <pmc_switch_mck_to_pllack+0x60>)
  40070e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400714:	4318      	orrs	r0, r3
  400716:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400718:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40071a:	f013 0f08 	tst.w	r3, #8
  40071e:	d10a      	bne.n	400736 <pmc_switch_mck_to_pllack+0x2a>
  400720:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400724:	4911      	ldr	r1, [pc, #68]	; (40076c <pmc_switch_mck_to_pllack+0x60>)
  400726:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400728:	f012 0f08 	tst.w	r2, #8
  40072c:	d103      	bne.n	400736 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40072e:	3b01      	subs	r3, #1
  400730:	d1f9      	bne.n	400726 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400732:	2001      	movs	r0, #1
  400734:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400736:	4a0d      	ldr	r2, [pc, #52]	; (40076c <pmc_switch_mck_to_pllack+0x60>)
  400738:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40073a:	f023 0303 	bic.w	r3, r3, #3
  40073e:	f043 0302 	orr.w	r3, r3, #2
  400742:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400744:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400746:	f013 0f08 	tst.w	r3, #8
  40074a:	d10a      	bne.n	400762 <pmc_switch_mck_to_pllack+0x56>
  40074c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400750:	4906      	ldr	r1, [pc, #24]	; (40076c <pmc_switch_mck_to_pllack+0x60>)
  400752:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400754:	f012 0f08 	tst.w	r2, #8
  400758:	d105      	bne.n	400766 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40075a:	3b01      	subs	r3, #1
  40075c:	d1f9      	bne.n	400752 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40075e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400760:	4770      	bx	lr
	return 0;
  400762:	2000      	movs	r0, #0
  400764:	4770      	bx	lr
  400766:	2000      	movs	r0, #0
  400768:	4770      	bx	lr
  40076a:	bf00      	nop
  40076c:	400e0400 	.word	0x400e0400

00400770 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400770:	b9c8      	cbnz	r0, 4007a6 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400772:	4a11      	ldr	r2, [pc, #68]	; (4007b8 <pmc_switch_mainck_to_xtal+0x48>)
  400774:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400776:	0209      	lsls	r1, r1, #8
  400778:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40077a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40077e:	f023 0303 	bic.w	r3, r3, #3
  400782:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400786:	f043 0301 	orr.w	r3, r3, #1
  40078a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40078c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40078e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400790:	f013 0f01 	tst.w	r3, #1
  400794:	d0fb      	beq.n	40078e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400796:	4a08      	ldr	r2, [pc, #32]	; (4007b8 <pmc_switch_mainck_to_xtal+0x48>)
  400798:	6a13      	ldr	r3, [r2, #32]
  40079a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40079e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4007a2:	6213      	str	r3, [r2, #32]
  4007a4:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007a6:	4904      	ldr	r1, [pc, #16]	; (4007b8 <pmc_switch_mainck_to_xtal+0x48>)
  4007a8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4007aa:	4a04      	ldr	r2, [pc, #16]	; (4007bc <pmc_switch_mainck_to_xtal+0x4c>)
  4007ac:	401a      	ands	r2, r3
  4007ae:	4b04      	ldr	r3, [pc, #16]	; (4007c0 <pmc_switch_mainck_to_xtal+0x50>)
  4007b0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007b2:	620b      	str	r3, [r1, #32]
  4007b4:	4770      	bx	lr
  4007b6:	bf00      	nop
  4007b8:	400e0400 	.word	0x400e0400
  4007bc:	fec8fffc 	.word	0xfec8fffc
  4007c0:	01370002 	.word	0x01370002

004007c4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4007c4:	4b02      	ldr	r3, [pc, #8]	; (4007d0 <pmc_osc_is_ready_mainck+0xc>)
  4007c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4007c8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4007cc:	4770      	bx	lr
  4007ce:	bf00      	nop
  4007d0:	400e0400 	.word	0x400e0400

004007d4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4007d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4007d8:	4b01      	ldr	r3, [pc, #4]	; (4007e0 <pmc_disable_pllack+0xc>)
  4007da:	629a      	str	r2, [r3, #40]	; 0x28
  4007dc:	4770      	bx	lr
  4007de:	bf00      	nop
  4007e0:	400e0400 	.word	0x400e0400

004007e4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4007e4:	4b02      	ldr	r3, [pc, #8]	; (4007f0 <pmc_is_locked_pllack+0xc>)
  4007e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4007e8:	f000 0002 	and.w	r0, r0, #2
  4007ec:	4770      	bx	lr
  4007ee:	bf00      	nop
  4007f0:	400e0400 	.word	0x400e0400

004007f4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4007f4:	2822      	cmp	r0, #34	; 0x22
  4007f6:	d81e      	bhi.n	400836 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4007f8:	281f      	cmp	r0, #31
  4007fa:	d80c      	bhi.n	400816 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4007fc:	4b11      	ldr	r3, [pc, #68]	; (400844 <pmc_enable_periph_clk+0x50>)
  4007fe:	699a      	ldr	r2, [r3, #24]
  400800:	2301      	movs	r3, #1
  400802:	4083      	lsls	r3, r0
  400804:	4393      	bics	r3, r2
  400806:	d018      	beq.n	40083a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400808:	2301      	movs	r3, #1
  40080a:	fa03 f000 	lsl.w	r0, r3, r0
  40080e:	4b0d      	ldr	r3, [pc, #52]	; (400844 <pmc_enable_periph_clk+0x50>)
  400810:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400812:	2000      	movs	r0, #0
  400814:	4770      	bx	lr
		ul_id -= 32;
  400816:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400818:	4b0a      	ldr	r3, [pc, #40]	; (400844 <pmc_enable_periph_clk+0x50>)
  40081a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40081e:	2301      	movs	r3, #1
  400820:	4083      	lsls	r3, r0
  400822:	4393      	bics	r3, r2
  400824:	d00b      	beq.n	40083e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400826:	2301      	movs	r3, #1
  400828:	fa03 f000 	lsl.w	r0, r3, r0
  40082c:	4b05      	ldr	r3, [pc, #20]	; (400844 <pmc_enable_periph_clk+0x50>)
  40082e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400832:	2000      	movs	r0, #0
  400834:	4770      	bx	lr
		return 1;
  400836:	2001      	movs	r0, #1
  400838:	4770      	bx	lr
	return 0;
  40083a:	2000      	movs	r0, #0
  40083c:	4770      	bx	lr
  40083e:	2000      	movs	r0, #0
}
  400840:	4770      	bx	lr
  400842:	bf00      	nop
  400844:	400e0400 	.word	0x400e0400

00400848 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  400848:	b4f0      	push	{r4, r5, r6, r7}
  40084a:	b08c      	sub	sp, #48	; 0x30
  40084c:	4607      	mov	r7, r0
  40084e:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  400850:	ac01      	add	r4, sp, #4
  400852:	4d11      	ldr	r5, [pc, #68]	; (400898 <pwm_clocks_generate+0x50>)
  400854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40085c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  400864:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  400866:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400868:	f852 0b04 	ldr.w	r0, [r2], #4
  40086c:	fbb6 f0f0 	udiv	r0, r6, r0
  400870:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400874:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  400878:	d907      	bls.n	40088a <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  40087a:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  40087c:	2b0b      	cmp	r3, #11
  40087e:	d1f3      	bne.n	400868 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  400880:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  400884:	b00c      	add	sp, #48	; 0x30
  400886:	bcf0      	pop	{r4, r5, r6, r7}
  400888:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  40088a:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  40088c:	bf94      	ite	ls
  40088e:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  400892:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  400896:	e7f5      	b.n	400884 <pwm_clocks_generate+0x3c>
  400898:	00404a14 	.word	0x00404a14

0040089c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  40089c:	b570      	push	{r4, r5, r6, lr}
  40089e:	4606      	mov	r6, r0
  4008a0:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4008a2:	680c      	ldr	r4, [r1, #0]
  4008a4:	b144      	cbz	r4, 4008b8 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4008a6:	6889      	ldr	r1, [r1, #8]
  4008a8:	4620      	mov	r0, r4
  4008aa:	4b0c      	ldr	r3, [pc, #48]	; (4008dc <pwm_init+0x40>)
  4008ac:	4798      	blx	r3
  4008ae:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  4008b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4008b4:	4298      	cmp	r0, r3
  4008b6:	d00c      	beq.n	4008d2 <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  4008b8:	6868      	ldr	r0, [r5, #4]
  4008ba:	b140      	cbz	r0, 4008ce <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  4008bc:	68a9      	ldr	r1, [r5, #8]
  4008be:	4b07      	ldr	r3, [pc, #28]	; (4008dc <pwm_init+0x40>)
  4008c0:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  4008c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4008c6:	4298      	cmp	r0, r3
  4008c8:	d005      	beq.n	4008d6 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  4008ca:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  4008ce:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  4008d0:	2400      	movs	r4, #0
}
  4008d2:	4620      	mov	r0, r4
  4008d4:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  4008d6:	4604      	mov	r4, r0
  4008d8:	e7fb      	b.n	4008d2 <pwm_init+0x36>
  4008da:	bf00      	nop
  4008dc:	00400849 	.word	0x00400849

004008e0 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  4008e0:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  4008e2:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4008e4:	684b      	ldr	r3, [r1, #4]
  4008e6:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  4008ea:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4008ec:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  4008ee:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4008f0:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  4008f2:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4008f4:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  4008f8:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4008fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  4008fe:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400900:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  400904:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400906:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  40090a:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  40090e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  400912:	68cb      	ldr	r3, [r1, #12]
  400914:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  400918:	690b      	ldr	r3, [r1, #16]
  40091a:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  40091e:	7d8b      	ldrb	r3, [r1, #22]
  400920:	b13b      	cbz	r3, 400932 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  400922:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  400924:	8b4b      	ldrh	r3, [r1, #26]
  400926:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  40092a:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  40092e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  400932:	6c85      	ldr	r5, [r0, #72]	; 0x48
  400934:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  400938:	4093      	lsls	r3, r2
  40093a:	43db      	mvns	r3, r3
  40093c:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  40093e:	7fcc      	ldrb	r4, [r1, #31]
  400940:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  400944:	7f8c      	ldrb	r4, [r1, #30]
  400946:	4094      	lsls	r4, r2
  400948:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  40094c:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  40094e:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  400950:	6c44      	ldr	r4, [r0, #68]	; 0x44
  400952:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  400954:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  400958:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40095c:	f891 4020 	ldrb.w	r4, [r1, #32]
  400960:	4094      	lsls	r4, r2
  400962:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400966:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  400968:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  40096a:	2301      	movs	r3, #1
  40096c:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  40096e:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  400972:	b31c      	cbz	r4, 4009bc <pwm_channel_init+0xdc>
		p_pwm->PWM_SCM |= channel;
  400974:	6a04      	ldr	r4, [r0, #32]
  400976:	431c      	orrs	r4, r3
  400978:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  40097a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  40097e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  400980:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400982:	bf0c      	ite	eq
  400984:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  400986:	439c      	bicne	r4, r3
  400988:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  40098a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  40098e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  400990:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400992:	bf0c      	ite	eq
  400994:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  400998:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
  40099c:	6683      	str	r3, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  40099e:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  4009a0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  4009a2:	23ff      	movs	r3, #255	; 0xff
  4009a4:	4093      	lsls	r3, r2
  4009a6:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  4009aa:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  4009ae:	fa03 f202 	lsl.w	r2, r3, r2
  4009b2:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  4009b4:	66c2      	str	r2, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  4009b6:	2000      	movs	r0, #0
  4009b8:	bc70      	pop	{r4, r5, r6}
  4009ba:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  4009bc:	6a04      	ldr	r4, [r0, #32]
  4009be:	ea24 0403 	bic.w	r4, r4, r3
  4009c2:	6204      	str	r4, [r0, #32]
  4009c4:	e7d9      	b.n	40097a <pwm_channel_init+0x9a>

004009c6 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  4009c6:	690b      	ldr	r3, [r1, #16]
  4009c8:	4293      	cmp	r3, r2
  4009ca:	d202      	bcs.n	4009d2 <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
  4009cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  4009d0:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
  4009d2:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
  4009d4:	60ca      	str	r2, [r1, #12]
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  4009d6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4009da:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
	return 0;
  4009de:	2000      	movs	r0, #0
  4009e0:	4770      	bx	lr

004009e2 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4009e2:	2301      	movs	r3, #1
  4009e4:	fa03 f101 	lsl.w	r1, r3, r1
  4009e8:	6041      	str	r1, [r0, #4]
  4009ea:	4770      	bx	lr

004009ec <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4009ec:	2301      	movs	r3, #1
  4009ee:	fa03 f101 	lsl.w	r1, r3, r1
  4009f2:	6081      	str	r1, [r0, #8]
  4009f4:	4770      	bx	lr

004009f6 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  4009f6:	3210      	adds	r2, #16
  4009f8:	2301      	movs	r3, #1
  4009fa:	fa03 f202 	lsl.w	r2, r3, r2
  4009fe:	fa03 f101 	lsl.w	r1, r3, r1
  400a02:	430a      	orrs	r2, r1
  400a04:	6142      	str	r2, [r0, #20]
  400a06:	4770      	bx	lr

00400a08 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400a08:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400a0a:	0189      	lsls	r1, r1, #6
  400a0c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400a0e:	2402      	movs	r4, #2
  400a10:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400a12:	f04f 31ff 	mov.w	r1, #4294967295
  400a16:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400a18:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400a1a:	605a      	str	r2, [r3, #4]
}
  400a1c:	bc10      	pop	{r4}
  400a1e:	4770      	bx	lr

00400a20 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400a20:	0189      	lsls	r1, r1, #6
  400a22:	2305      	movs	r3, #5
  400a24:	5043      	str	r3, [r0, r1]
  400a26:	4770      	bx	lr

00400a28 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400a28:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400a2c:	61ca      	str	r2, [r1, #28]
  400a2e:	4770      	bx	lr

00400a30 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400a30:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400a34:	624a      	str	r2, [r1, #36]	; 0x24
  400a36:	4770      	bx	lr

00400a38 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400a38:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400a3c:	6a08      	ldr	r0, [r1, #32]
}
  400a3e:	4770      	bx	lr

00400a40 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400a40:	b4f0      	push	{r4, r5, r6, r7}
  400a42:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400a44:	2402      	movs	r4, #2
  400a46:	9401      	str	r4, [sp, #4]
  400a48:	2408      	movs	r4, #8
  400a4a:	9402      	str	r4, [sp, #8]
  400a4c:	2420      	movs	r4, #32
  400a4e:	9403      	str	r4, [sp, #12]
  400a50:	2480      	movs	r4, #128	; 0x80
  400a52:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400a54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400a56:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400a58:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400a5a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400a5e:	d814      	bhi.n	400a8a <tc_find_mck_divisor+0x4a>
  400a60:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400a62:	42a0      	cmp	r0, r4
  400a64:	d217      	bcs.n	400a96 <tc_find_mck_divisor+0x56>
  400a66:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400a68:	af01      	add	r7, sp, #4
  400a6a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400a6e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400a72:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400a74:	4284      	cmp	r4, r0
  400a76:	d30a      	bcc.n	400a8e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400a78:	4286      	cmp	r6, r0
  400a7a:	d90d      	bls.n	400a98 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400a7c:	3501      	adds	r5, #1
	for (ul_index = 0;
  400a7e:	2d05      	cmp	r5, #5
  400a80:	d1f3      	bne.n	400a6a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400a82:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400a84:	b006      	add	sp, #24
  400a86:	bcf0      	pop	{r4, r5, r6, r7}
  400a88:	4770      	bx	lr
			return 0;
  400a8a:	2000      	movs	r0, #0
  400a8c:	e7fa      	b.n	400a84 <tc_find_mck_divisor+0x44>
  400a8e:	2000      	movs	r0, #0
  400a90:	e7f8      	b.n	400a84 <tc_find_mck_divisor+0x44>
	return 1;
  400a92:	2001      	movs	r0, #1
  400a94:	e7f6      	b.n	400a84 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400a96:	2500      	movs	r5, #0
	if (p_uldiv) {
  400a98:	b12a      	cbz	r2, 400aa6 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400a9a:	a906      	add	r1, sp, #24
  400a9c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400aa0:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400aa4:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400aa6:	2b00      	cmp	r3, #0
  400aa8:	d0f3      	beq.n	400a92 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400aaa:	601d      	str	r5, [r3, #0]
	return 1;
  400aac:	2001      	movs	r0, #1
  400aae:	e7e9      	b.n	400a84 <tc_find_mck_divisor+0x44>

00400ab0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400ab0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400ab2:	23ac      	movs	r3, #172	; 0xac
  400ab4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400ab6:	680b      	ldr	r3, [r1, #0]
  400ab8:	684a      	ldr	r2, [r1, #4]
  400aba:	fbb3 f3f2 	udiv	r3, r3, r2
  400abe:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400ac0:	1e5c      	subs	r4, r3, #1
  400ac2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400ac6:	4294      	cmp	r4, r2
  400ac8:	d80b      	bhi.n	400ae2 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  400aca:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400acc:	688b      	ldr	r3, [r1, #8]
  400ace:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400ad0:	f240 2302 	movw	r3, #514	; 0x202
  400ad4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400ad8:	2350      	movs	r3, #80	; 0x50
  400ada:	6003      	str	r3, [r0, #0]

	return 0;
  400adc:	2000      	movs	r0, #0
}
  400ade:	bc10      	pop	{r4}
  400ae0:	4770      	bx	lr
		return 1;
  400ae2:	2001      	movs	r0, #1
  400ae4:	e7fb      	b.n	400ade <uart_init+0x2e>

00400ae6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400ae6:	6943      	ldr	r3, [r0, #20]
  400ae8:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400aec:	bf1a      	itte	ne
  400aee:	61c1      	strne	r1, [r0, #28]
	return 0;
  400af0:	2000      	movne	r0, #0
		return 1;
  400af2:	2001      	moveq	r0, #1
}
  400af4:	4770      	bx	lr

00400af6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400af6:	6943      	ldr	r3, [r0, #20]
  400af8:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400afc:	bf1d      	ittte	ne
  400afe:	6983      	ldrne	r3, [r0, #24]
  400b00:	700b      	strbne	r3, [r1, #0]
	return 0;
  400b02:	2000      	movne	r0, #0
		return 1;
  400b04:	2001      	moveq	r0, #1
}
  400b06:	4770      	bx	lr

00400b08 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400b08:	6943      	ldr	r3, [r0, #20]
  400b0a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400b0e:	bf1d      	ittte	ne
  400b10:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400b14:	61c1      	strne	r1, [r0, #28]
	return 0;
  400b16:	2000      	movne	r0, #0
		return 1;
  400b18:	2001      	moveq	r0, #1
}
  400b1a:	4770      	bx	lr

00400b1c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b1c:	6943      	ldr	r3, [r0, #20]
  400b1e:	f013 0f01 	tst.w	r3, #1
  400b22:	d005      	beq.n	400b30 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b24:	6983      	ldr	r3, [r0, #24]
  400b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b2a:	600b      	str	r3, [r1, #0]

	return 0;
  400b2c:	2000      	movs	r0, #0
  400b2e:	4770      	bx	lr
		return 1;
  400b30:	2001      	movs	r0, #1
}
  400b32:	4770      	bx	lr

00400b34 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b34:	e7fe      	b.n	400b34 <Dummy_Handler>
	...

00400b38 <Reset_Handler>:
{
  400b38:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  400b3a:	4b21      	ldr	r3, [pc, #132]	; (400bc0 <Reset_Handler+0x88>)
  400b3c:	4a21      	ldr	r2, [pc, #132]	; (400bc4 <Reset_Handler+0x8c>)
  400b3e:	429a      	cmp	r2, r3
  400b40:	d928      	bls.n	400b94 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  400b42:	4b21      	ldr	r3, [pc, #132]	; (400bc8 <Reset_Handler+0x90>)
  400b44:	4a1e      	ldr	r2, [pc, #120]	; (400bc0 <Reset_Handler+0x88>)
  400b46:	429a      	cmp	r2, r3
  400b48:	d20c      	bcs.n	400b64 <Reset_Handler+0x2c>
  400b4a:	3b01      	subs	r3, #1
  400b4c:	1a9b      	subs	r3, r3, r2
  400b4e:	f023 0303 	bic.w	r3, r3, #3
  400b52:	3304      	adds	r3, #4
  400b54:	4413      	add	r3, r2
  400b56:	491b      	ldr	r1, [pc, #108]	; (400bc4 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  400b58:	f851 0b04 	ldr.w	r0, [r1], #4
  400b5c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400b60:	429a      	cmp	r2, r3
  400b62:	d1f9      	bne.n	400b58 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400b64:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  400b66:	4b19      	ldr	r3, [pc, #100]	; (400bcc <Reset_Handler+0x94>)
  400b68:	4a19      	ldr	r2, [pc, #100]	; (400bd0 <Reset_Handler+0x98>)
  400b6a:	429a      	cmp	r2, r3
  400b6c:	d20a      	bcs.n	400b84 <Reset_Handler+0x4c>
  400b6e:	3b01      	subs	r3, #1
  400b70:	1a9b      	subs	r3, r3, r2
  400b72:	f023 0303 	bic.w	r3, r3, #3
  400b76:	3304      	adds	r3, #4
  400b78:	4413      	add	r3, r2
		*pDest++ = 0;
  400b7a:	2100      	movs	r1, #0
  400b7c:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400b80:	429a      	cmp	r2, r3
  400b82:	d1fb      	bne.n	400b7c <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  400b84:	4b13      	ldr	r3, [pc, #76]	; (400bd4 <Reset_Handler+0x9c>)
  400b86:	4a14      	ldr	r2, [pc, #80]	; (400bd8 <Reset_Handler+0xa0>)
  400b88:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  400b8a:	4b14      	ldr	r3, [pc, #80]	; (400bdc <Reset_Handler+0xa4>)
  400b8c:	4798      	blx	r3
	main();
  400b8e:	4b14      	ldr	r3, [pc, #80]	; (400be0 <Reset_Handler+0xa8>)
  400b90:	4798      	blx	r3
  400b92:	e7fe      	b.n	400b92 <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  400b94:	4b0a      	ldr	r3, [pc, #40]	; (400bc0 <Reset_Handler+0x88>)
  400b96:	4a0b      	ldr	r2, [pc, #44]	; (400bc4 <Reset_Handler+0x8c>)
  400b98:	429a      	cmp	r2, r3
  400b9a:	d2e3      	bcs.n	400b64 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400b9c:	4b0a      	ldr	r3, [pc, #40]	; (400bc8 <Reset_Handler+0x90>)
  400b9e:	4808      	ldr	r0, [pc, #32]	; (400bc0 <Reset_Handler+0x88>)
  400ba0:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400ba2:	4611      	mov	r1, r2
  400ba4:	3a04      	subs	r2, #4
  400ba6:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  400ba8:	2800      	cmp	r0, #0
  400baa:	d0db      	beq.n	400b64 <Reset_Handler+0x2c>
  400bac:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  400bb0:	f852 0904 	ldr.w	r0, [r2], #-4
  400bb4:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  400bb8:	42ca      	cmn	r2, r1
  400bba:	d1f9      	bne.n	400bb0 <Reset_Handler+0x78>
  400bbc:	e7d2      	b.n	400b64 <Reset_Handler+0x2c>
  400bbe:	bf00      	nop
  400bc0:	20000000 	.word	0x20000000
  400bc4:	00404cdc 	.word	0x00404cdc
  400bc8:	200009cc 	.word	0x200009cc
  400bcc:	20000ad8 	.word	0x20000ad8
  400bd0:	200009cc 	.word	0x200009cc
  400bd4:	e000ed00 	.word	0xe000ed00
  400bd8:	00400000 	.word	0x00400000
  400bdc:	00401bc1 	.word	0x00401bc1
  400be0:	00401399 	.word	0x00401399

00400be4 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400be4:	4b3c      	ldr	r3, [pc, #240]	; (400cd8 <SystemCoreClockUpdate+0xf4>)
  400be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400be8:	f003 0303 	and.w	r3, r3, #3
  400bec:	2b03      	cmp	r3, #3
  400bee:	d80e      	bhi.n	400c0e <SystemCoreClockUpdate+0x2a>
  400bf0:	e8df f003 	tbb	[pc, r3]
  400bf4:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400bf8:	4b38      	ldr	r3, [pc, #224]	; (400cdc <SystemCoreClockUpdate+0xf8>)
  400bfa:	695b      	ldr	r3, [r3, #20]
  400bfc:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c00:	bf14      	ite	ne
  400c02:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c06:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c0a:	4b35      	ldr	r3, [pc, #212]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
  400c0c:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400c0e:	4b32      	ldr	r3, [pc, #200]	; (400cd8 <SystemCoreClockUpdate+0xf4>)
  400c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c16:	2b70      	cmp	r3, #112	; 0x70
  400c18:	d055      	beq.n	400cc6 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c1a:	4b2f      	ldr	r3, [pc, #188]	; (400cd8 <SystemCoreClockUpdate+0xf4>)
  400c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  400c1e:	4930      	ldr	r1, [pc, #192]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c20:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  400c24:	680b      	ldr	r3, [r1, #0]
  400c26:	40d3      	lsrs	r3, r2
  400c28:	600b      	str	r3, [r1, #0]
  400c2a:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c2c:	4b2a      	ldr	r3, [pc, #168]	; (400cd8 <SystemCoreClockUpdate+0xf4>)
  400c2e:	6a1b      	ldr	r3, [r3, #32]
  400c30:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c34:	d003      	beq.n	400c3e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400c36:	4a2b      	ldr	r2, [pc, #172]	; (400ce4 <SystemCoreClockUpdate+0x100>)
  400c38:	4b29      	ldr	r3, [pc, #164]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
  400c3a:	601a      	str	r2, [r3, #0]
  400c3c:	e7e7      	b.n	400c0e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c3e:	4a2a      	ldr	r2, [pc, #168]	; (400ce8 <SystemCoreClockUpdate+0x104>)
  400c40:	4b27      	ldr	r3, [pc, #156]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
  400c42:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400c44:	4b24      	ldr	r3, [pc, #144]	; (400cd8 <SystemCoreClockUpdate+0xf4>)
  400c46:	6a1b      	ldr	r3, [r3, #32]
  400c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c4c:	2b10      	cmp	r3, #16
  400c4e:	d005      	beq.n	400c5c <SystemCoreClockUpdate+0x78>
  400c50:	2b20      	cmp	r3, #32
  400c52:	d1dc      	bne.n	400c0e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400c54:	4a23      	ldr	r2, [pc, #140]	; (400ce4 <SystemCoreClockUpdate+0x100>)
  400c56:	4b22      	ldr	r3, [pc, #136]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
  400c58:	601a      	str	r2, [r3, #0]
			break;
  400c5a:	e7d8      	b.n	400c0e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400c5c:	4a23      	ldr	r2, [pc, #140]	; (400cec <SystemCoreClockUpdate+0x108>)
  400c5e:	4b20      	ldr	r3, [pc, #128]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
  400c60:	601a      	str	r2, [r3, #0]
			break;
  400c62:	e7d4      	b.n	400c0e <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c64:	4b1c      	ldr	r3, [pc, #112]	; (400cd8 <SystemCoreClockUpdate+0xf4>)
  400c66:	6a1b      	ldr	r3, [r3, #32]
  400c68:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c6c:	d018      	beq.n	400ca0 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400c6e:	4a1d      	ldr	r2, [pc, #116]	; (400ce4 <SystemCoreClockUpdate+0x100>)
  400c70:	4b1b      	ldr	r3, [pc, #108]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
  400c72:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400c74:	4b18      	ldr	r3, [pc, #96]	; (400cd8 <SystemCoreClockUpdate+0xf4>)
  400c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c78:	f003 0303 	and.w	r3, r3, #3
  400c7c:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400c7e:	4a16      	ldr	r2, [pc, #88]	; (400cd8 <SystemCoreClockUpdate+0xf4>)
  400c80:	bf07      	ittee	eq
  400c82:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400c84:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400c86:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400c88:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400c8a:	4815      	ldr	r0, [pc, #84]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400c8c:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400c90:	6803      	ldr	r3, [r0, #0]
  400c92:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  400c96:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400c98:	fbb3 f3f2 	udiv	r3, r3, r2
  400c9c:	6003      	str	r3, [r0, #0]
  400c9e:	e7b6      	b.n	400c0e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ca0:	4a11      	ldr	r2, [pc, #68]	; (400ce8 <SystemCoreClockUpdate+0x104>)
  400ca2:	4b0f      	ldr	r3, [pc, #60]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
  400ca4:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ca6:	4b0c      	ldr	r3, [pc, #48]	; (400cd8 <SystemCoreClockUpdate+0xf4>)
  400ca8:	6a1b      	ldr	r3, [r3, #32]
  400caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cae:	2b10      	cmp	r3, #16
  400cb0:	d005      	beq.n	400cbe <SystemCoreClockUpdate+0xda>
  400cb2:	2b20      	cmp	r3, #32
  400cb4:	d1de      	bne.n	400c74 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400cb6:	4a0b      	ldr	r2, [pc, #44]	; (400ce4 <SystemCoreClockUpdate+0x100>)
  400cb8:	4b09      	ldr	r3, [pc, #36]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
  400cba:	601a      	str	r2, [r3, #0]
					break;
  400cbc:	e7da      	b.n	400c74 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400cbe:	4a0b      	ldr	r2, [pc, #44]	; (400cec <SystemCoreClockUpdate+0x108>)
  400cc0:	4b07      	ldr	r3, [pc, #28]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
  400cc2:	601a      	str	r2, [r3, #0]
					break;
  400cc4:	e7d6      	b.n	400c74 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400cc6:	4a06      	ldr	r2, [pc, #24]	; (400ce0 <SystemCoreClockUpdate+0xfc>)
  400cc8:	6813      	ldr	r3, [r2, #0]
  400cca:	4909      	ldr	r1, [pc, #36]	; (400cf0 <SystemCoreClockUpdate+0x10c>)
  400ccc:	fba1 1303 	umull	r1, r3, r1, r3
  400cd0:	085b      	lsrs	r3, r3, #1
  400cd2:	6013      	str	r3, [r2, #0]
  400cd4:	4770      	bx	lr
  400cd6:	bf00      	nop
  400cd8:	400e0400 	.word	0x400e0400
  400cdc:	400e1410 	.word	0x400e1410
  400ce0:	2000000c 	.word	0x2000000c
  400ce4:	00b71b00 	.word	0x00b71b00
  400ce8:	003d0900 	.word	0x003d0900
  400cec:	007a1200 	.word	0x007a1200
  400cf0:	aaaaaaab 	.word	0xaaaaaaab

00400cf4 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400cf4:	4b1a      	ldr	r3, [pc, #104]	; (400d60 <system_init_flash+0x6c>)
  400cf6:	4298      	cmp	r0, r3
  400cf8:	d914      	bls.n	400d24 <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400cfa:	4b1a      	ldr	r3, [pc, #104]	; (400d64 <system_init_flash+0x70>)
  400cfc:	4298      	cmp	r0, r3
  400cfe:	d919      	bls.n	400d34 <system_init_flash+0x40>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400d00:	4b19      	ldr	r3, [pc, #100]	; (400d68 <system_init_flash+0x74>)
  400d02:	4298      	cmp	r0, r3
  400d04:	d91d      	bls.n	400d42 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400d06:	4b19      	ldr	r3, [pc, #100]	; (400d6c <system_init_flash+0x78>)
  400d08:	4298      	cmp	r0, r3
  400d0a:	d921      	bls.n	400d50 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400d0c:	4b18      	ldr	r3, [pc, #96]	; (400d70 <system_init_flash+0x7c>)
  400d0e:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400d10:	bf94      	ite	ls
  400d12:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d16:	4b17      	ldrhi	r3, [pc, #92]	; (400d74 <system_init_flash+0x80>)
  400d18:	4a17      	ldr	r2, [pc, #92]	; (400d78 <system_init_flash+0x84>)
  400d1a:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d1c:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d20:	6013      	str	r3, [r2, #0]
  400d22:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400d28:	4a13      	ldr	r2, [pc, #76]	; (400d78 <system_init_flash+0x84>)
  400d2a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d2c:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d30:	6013      	str	r3, [r2, #0]
  400d32:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d34:	4b11      	ldr	r3, [pc, #68]	; (400d7c <system_init_flash+0x88>)
  400d36:	4a10      	ldr	r2, [pc, #64]	; (400d78 <system_init_flash+0x84>)
  400d38:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d3a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d3e:	6013      	str	r3, [r2, #0]
  400d40:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d42:	4b0f      	ldr	r3, [pc, #60]	; (400d80 <system_init_flash+0x8c>)
  400d44:	4a0c      	ldr	r2, [pc, #48]	; (400d78 <system_init_flash+0x84>)
  400d46:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d48:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d4c:	6013      	str	r3, [r2, #0]
  400d4e:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d50:	4b0c      	ldr	r3, [pc, #48]	; (400d84 <system_init_flash+0x90>)
  400d52:	4a09      	ldr	r2, [pc, #36]	; (400d78 <system_init_flash+0x84>)
  400d54:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d56:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d5a:	6013      	str	r3, [r2, #0]
  400d5c:	4770      	bx	lr
  400d5e:	bf00      	nop
  400d60:	01312cff 	.word	0x01312cff
  400d64:	026259ff 	.word	0x026259ff
  400d68:	039386ff 	.word	0x039386ff
  400d6c:	04c4b3ff 	.word	0x04c4b3ff
  400d70:	05f5e0ff 	.word	0x05f5e0ff
  400d74:	04000500 	.word	0x04000500
  400d78:	400e0a00 	.word	0x400e0a00
  400d7c:	04000100 	.word	0x04000100
  400d80:	04000200 	.word	0x04000200
  400d84:	04000300 	.word	0x04000300

00400d88 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400d88:	4b0a      	ldr	r3, [pc, #40]	; (400db4 <_sbrk+0x2c>)
  400d8a:	681b      	ldr	r3, [r3, #0]
  400d8c:	b153      	cbz	r3, 400da4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400d8e:	4b09      	ldr	r3, [pc, #36]	; (400db4 <_sbrk+0x2c>)
  400d90:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400d92:	181a      	adds	r2, r3, r0
  400d94:	4908      	ldr	r1, [pc, #32]	; (400db8 <_sbrk+0x30>)
  400d96:	4291      	cmp	r1, r2
  400d98:	db08      	blt.n	400dac <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400d9a:	4610      	mov	r0, r2
  400d9c:	4a05      	ldr	r2, [pc, #20]	; (400db4 <_sbrk+0x2c>)
  400d9e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400da0:	4618      	mov	r0, r3
  400da2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400da4:	4a05      	ldr	r2, [pc, #20]	; (400dbc <_sbrk+0x34>)
  400da6:	4b03      	ldr	r3, [pc, #12]	; (400db4 <_sbrk+0x2c>)
  400da8:	601a      	str	r2, [r3, #0]
  400daa:	e7f0      	b.n	400d8e <_sbrk+0x6>
		return (caddr_t) -1;	
  400dac:	f04f 30ff 	mov.w	r0, #4294967295
}
  400db0:	4770      	bx	lr
  400db2:	bf00      	nop
  400db4:	20000a60 	.word	0x20000a60
  400db8:	20027ffc 	.word	0x20027ffc
  400dbc:	20003ad8 	.word	0x20003ad8

00400dc0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400dc0:	f04f 30ff 	mov.w	r0, #4294967295
  400dc4:	4770      	bx	lr

00400dc6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400dca:	604b      	str	r3, [r1, #4]

	return 0;
}
  400dcc:	2000      	movs	r0, #0
  400dce:	4770      	bx	lr

00400dd0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400dd0:	2001      	movs	r0, #1
  400dd2:	4770      	bx	lr

00400dd4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400dd4:	2000      	movs	r0, #0
  400dd6:	4770      	bx	lr

00400dd8 <vReadSensor>:

#include <asf.h>
#include "BeamBall.h"


void vReadSensor(void) {
  400dd8:	b508      	push	{r3, lr}
	//puts("Iniciando Leitura do Sensor\r\n");
	
	// clear timer
	tc_get_status(TC_SENSOR,CHANNEL_SENSOR);
  400dda:	2101      	movs	r1, #1
  400ddc:	4807      	ldr	r0, [pc, #28]	; (400dfc <vReadSensor+0x24>)
  400dde:	4b08      	ldr	r3, [pc, #32]	; (400e00 <vReadSensor+0x28>)
  400de0:	4798      	blx	r3
	vClearSensorCounter();
  400de2:	4b08      	ldr	r3, [pc, #32]	; (400e04 <vReadSensor+0x2c>)
  400de4:	4798      	blx	r3
	
	gpio_set_pin_high(PIO_TRIGGER);
  400de6:	2013      	movs	r0, #19
  400de8:	4b07      	ldr	r3, [pc, #28]	; (400e08 <vReadSensor+0x30>)
  400dea:	4798      	blx	r3
	delay_us(10);
  400dec:	2056      	movs	r0, #86	; 0x56
  400dee:	4b07      	ldr	r3, [pc, #28]	; (400e0c <vReadSensor+0x34>)
  400df0:	4798      	blx	r3
	gpio_set_pin_low(PIO_TRIGGER);
  400df2:	2013      	movs	r0, #19
  400df4:	4b06      	ldr	r3, [pc, #24]	; (400e10 <vReadSensor+0x38>)
  400df6:	4798      	blx	r3
  400df8:	bd08      	pop	{r3, pc}
  400dfa:	bf00      	nop
  400dfc:	40010000 	.word	0x40010000
  400e00:	00400a39 	.word	0x00400a39
  400e04:	00400ff9 	.word	0x00400ff9
  400e08:	004003cd 	.word	0x004003cd
  400e0c:	20000001 	.word	0x20000001
  400e10:	004003e7 	.word	0x004003e7

00400e14 <vMalhaControle>:
}

static int flag = 0;

void vMalhaControle(double distance) {
  400e14:	b538      	push	{r3, r4, r5, lr}
  400e16:	4604      	mov	r4, r0
  400e18:	460d      	mov	r5, r1
	puts("Executando Malha de Controle\r\n");
  400e1a:	4808      	ldr	r0, [pc, #32]	; (400e3c <vMalhaControle+0x28>)
  400e1c:	4b08      	ldr	r3, [pc, #32]	; (400e40 <vMalhaControle+0x2c>)
  400e1e:	4798      	blx	r3
	int motorPos = 8;

	int printVar = (int) (distance * 1000);
  400e20:	2200      	movs	r2, #0
  400e22:	4b08      	ldr	r3, [pc, #32]	; (400e44 <vMalhaControle+0x30>)
  400e24:	4620      	mov	r0, r4
  400e26:	4629      	mov	r1, r5
  400e28:	4c07      	ldr	r4, [pc, #28]	; (400e48 <vMalhaControle+0x34>)
  400e2a:	47a0      	blx	r4
  400e2c:	4b07      	ldr	r3, [pc, #28]	; (400e4c <vMalhaControle+0x38>)
  400e2e:	4798      	blx	r3
	printf("distance: %i / %f\r\n",printVar);
  400e30:	4601      	mov	r1, r0
  400e32:	4807      	ldr	r0, [pc, #28]	; (400e50 <vMalhaControle+0x3c>)
  400e34:	4b07      	ldr	r3, [pc, #28]	; (400e54 <vMalhaControle+0x40>)
  400e36:	4798      	blx	r3
  400e38:	bd38      	pop	{r3, r4, r5, pc}
  400e3a:	bf00      	nop
  400e3c:	00404a40 	.word	0x00404a40
  400e40:	00401d3d 	.word	0x00401d3d
  400e44:	408f4000 	.word	0x408f4000
  400e48:	0040174d 	.word	0x0040174d
  400e4c:	00401b71 	.word	0x00401b71
  400e50:	00404a60 	.word	0x00404a60
  400e54:	00401c11 	.word	0x00401c11

00400e58 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400e58:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e5a:	b083      	sub	sp, #12
  400e5c:	4605      	mov	r5, r0
  400e5e:	460c      	mov	r4, r1
	uint32_t val = 0;
  400e60:	2300      	movs	r3, #0
  400e62:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400e64:	4b18      	ldr	r3, [pc, #96]	; (400ec8 <usart_serial_getchar+0x70>)
  400e66:	4298      	cmp	r0, r3
  400e68:	d00a      	beq.n	400e80 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400e6a:	4b18      	ldr	r3, [pc, #96]	; (400ecc <usart_serial_getchar+0x74>)
  400e6c:	4298      	cmp	r0, r3
  400e6e:	d00f      	beq.n	400e90 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400e70:	4b17      	ldr	r3, [pc, #92]	; (400ed0 <usart_serial_getchar+0x78>)
  400e72:	4298      	cmp	r0, r3
  400e74:	d014      	beq.n	400ea0 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400e76:	4b17      	ldr	r3, [pc, #92]	; (400ed4 <usart_serial_getchar+0x7c>)
  400e78:	429d      	cmp	r5, r3
  400e7a:	d01b      	beq.n	400eb4 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400e7c:	b003      	add	sp, #12
  400e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400e80:	461f      	mov	r7, r3
  400e82:	4e15      	ldr	r6, [pc, #84]	; (400ed8 <usart_serial_getchar+0x80>)
  400e84:	4621      	mov	r1, r4
  400e86:	4638      	mov	r0, r7
  400e88:	47b0      	blx	r6
  400e8a:	2800      	cmp	r0, #0
  400e8c:	d1fa      	bne.n	400e84 <usart_serial_getchar+0x2c>
  400e8e:	e7f2      	b.n	400e76 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400e90:	461e      	mov	r6, r3
  400e92:	4d11      	ldr	r5, [pc, #68]	; (400ed8 <usart_serial_getchar+0x80>)
  400e94:	4621      	mov	r1, r4
  400e96:	4630      	mov	r0, r6
  400e98:	47a8      	blx	r5
  400e9a:	2800      	cmp	r0, #0
  400e9c:	d1fa      	bne.n	400e94 <usart_serial_getchar+0x3c>
  400e9e:	e7ed      	b.n	400e7c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400ea0:	461e      	mov	r6, r3
  400ea2:	4d0e      	ldr	r5, [pc, #56]	; (400edc <usart_serial_getchar+0x84>)
  400ea4:	a901      	add	r1, sp, #4
  400ea6:	4630      	mov	r0, r6
  400ea8:	47a8      	blx	r5
  400eaa:	2800      	cmp	r0, #0
  400eac:	d1fa      	bne.n	400ea4 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400eae:	9b01      	ldr	r3, [sp, #4]
  400eb0:	7023      	strb	r3, [r4, #0]
  400eb2:	e7e3      	b.n	400e7c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400eb4:	461e      	mov	r6, r3
  400eb6:	4d09      	ldr	r5, [pc, #36]	; (400edc <usart_serial_getchar+0x84>)
  400eb8:	a901      	add	r1, sp, #4
  400eba:	4630      	mov	r0, r6
  400ebc:	47a8      	blx	r5
  400ebe:	2800      	cmp	r0, #0
  400ec0:	d1fa      	bne.n	400eb8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400ec2:	9b01      	ldr	r3, [sp, #4]
  400ec4:	7023      	strb	r3, [r4, #0]
}
  400ec6:	e7d9      	b.n	400e7c <usart_serial_getchar+0x24>
  400ec8:	400e0600 	.word	0x400e0600
  400ecc:	400e0800 	.word	0x400e0800
  400ed0:	40024000 	.word	0x40024000
  400ed4:	40028000 	.word	0x40028000
  400ed8:	00400af7 	.word	0x00400af7
  400edc:	00400b1d 	.word	0x00400b1d

00400ee0 <usart_serial_putchar>:
{
  400ee0:	b570      	push	{r4, r5, r6, lr}
  400ee2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400ee4:	4b18      	ldr	r3, [pc, #96]	; (400f48 <usart_serial_putchar+0x68>)
  400ee6:	4298      	cmp	r0, r3
  400ee8:	d00a      	beq.n	400f00 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400eea:	4b18      	ldr	r3, [pc, #96]	; (400f4c <usart_serial_putchar+0x6c>)
  400eec:	4298      	cmp	r0, r3
  400eee:	d010      	beq.n	400f12 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400ef0:	4b17      	ldr	r3, [pc, #92]	; (400f50 <usart_serial_putchar+0x70>)
  400ef2:	4298      	cmp	r0, r3
  400ef4:	d016      	beq.n	400f24 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400ef6:	4b17      	ldr	r3, [pc, #92]	; (400f54 <usart_serial_putchar+0x74>)
  400ef8:	4298      	cmp	r0, r3
  400efa:	d01c      	beq.n	400f36 <usart_serial_putchar+0x56>
	return 0;
  400efc:	2000      	movs	r0, #0
}
  400efe:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400f00:	461e      	mov	r6, r3
  400f02:	4d15      	ldr	r5, [pc, #84]	; (400f58 <usart_serial_putchar+0x78>)
  400f04:	4621      	mov	r1, r4
  400f06:	4630      	mov	r0, r6
  400f08:	47a8      	blx	r5
  400f0a:	2800      	cmp	r0, #0
  400f0c:	d1fa      	bne.n	400f04 <usart_serial_putchar+0x24>
		return 1;
  400f0e:	2001      	movs	r0, #1
  400f10:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400f12:	461e      	mov	r6, r3
  400f14:	4d10      	ldr	r5, [pc, #64]	; (400f58 <usart_serial_putchar+0x78>)
  400f16:	4621      	mov	r1, r4
  400f18:	4630      	mov	r0, r6
  400f1a:	47a8      	blx	r5
  400f1c:	2800      	cmp	r0, #0
  400f1e:	d1fa      	bne.n	400f16 <usart_serial_putchar+0x36>
		return 1;
  400f20:	2001      	movs	r0, #1
  400f22:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400f24:	461e      	mov	r6, r3
  400f26:	4d0d      	ldr	r5, [pc, #52]	; (400f5c <usart_serial_putchar+0x7c>)
  400f28:	4621      	mov	r1, r4
  400f2a:	4630      	mov	r0, r6
  400f2c:	47a8      	blx	r5
  400f2e:	2800      	cmp	r0, #0
  400f30:	d1fa      	bne.n	400f28 <usart_serial_putchar+0x48>
		return 1;
  400f32:	2001      	movs	r0, #1
  400f34:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400f36:	461e      	mov	r6, r3
  400f38:	4d08      	ldr	r5, [pc, #32]	; (400f5c <usart_serial_putchar+0x7c>)
  400f3a:	4621      	mov	r1, r4
  400f3c:	4630      	mov	r0, r6
  400f3e:	47a8      	blx	r5
  400f40:	2800      	cmp	r0, #0
  400f42:	d1fa      	bne.n	400f3a <usart_serial_putchar+0x5a>
		return 1;
  400f44:	2001      	movs	r0, #1
  400f46:	bd70      	pop	{r4, r5, r6, pc}
  400f48:	400e0600 	.word	0x400e0600
  400f4c:	400e0800 	.word	0x400e0800
  400f50:	40024000 	.word	0x40024000
  400f54:	40028000 	.word	0x40028000
  400f58:	00400ae7 	.word	0x00400ae7
  400f5c:	00400b09 	.word	0x00400b09

00400f60 <vConfigureUART>:
#include "BeamBall.h"


/* UART Configuration */

void vConfigureUART(void) {
  400f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f64:	b084      	sub	sp, #16
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400f66:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400ff4 <vConfigureUART+0x94>
  400f6a:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400f6e:	4c16      	ldr	r4, [pc, #88]	; (400fc8 <vConfigureUART+0x68>)
  400f70:	6823      	ldr	r3, [r4, #0]
  400f72:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400f74:	68a3      	ldr	r3, [r4, #8]
  400f76:	9303      	str	r3, [sp, #12]
  400f78:	2008      	movs	r0, #8
  400f7a:	4f14      	ldr	r7, [pc, #80]	; (400fcc <vConfigureUART+0x6c>)
  400f7c:	47b8      	blx	r7
		uart_init((Uart*)p_usart, &uart_settings);
  400f7e:	4d14      	ldr	r5, [pc, #80]	; (400fd0 <vConfigureUART+0x70>)
  400f80:	a901      	add	r1, sp, #4
  400f82:	4628      	mov	r0, r5
  400f84:	4e13      	ldr	r6, [pc, #76]	; (400fd4 <vConfigureUART+0x74>)
  400f86:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400f88:	4b13      	ldr	r3, [pc, #76]	; (400fd8 <vConfigureUART+0x78>)
  400f8a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400f8c:	4a13      	ldr	r2, [pc, #76]	; (400fdc <vConfigureUART+0x7c>)
  400f8e:	4b14      	ldr	r3, [pc, #80]	; (400fe0 <vConfigureUART+0x80>)
  400f90:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400f92:	4a14      	ldr	r2, [pc, #80]	; (400fe4 <vConfigureUART+0x84>)
  400f94:	4b14      	ldr	r3, [pc, #80]	; (400fe8 <vConfigureUART+0x88>)
  400f96:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400f98:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400f9c:	6823      	ldr	r3, [r4, #0]
  400f9e:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400fa0:	68a3      	ldr	r3, [r4, #8]
  400fa2:	9303      	str	r3, [sp, #12]
  400fa4:	2008      	movs	r0, #8
  400fa6:	47b8      	blx	r7
		uart_init((Uart*)p_usart, &uart_settings);
  400fa8:	a901      	add	r1, sp, #4
  400faa:	4628      	mov	r0, r5
  400fac:	47b0      	blx	r6
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400fae:	4d0f      	ldr	r5, [pc, #60]	; (400fec <vConfigureUART+0x8c>)
  400fb0:	682b      	ldr	r3, [r5, #0]
  400fb2:	2100      	movs	r1, #0
  400fb4:	6898      	ldr	r0, [r3, #8]
  400fb6:	4c0e      	ldr	r4, [pc, #56]	; (400ff0 <vConfigureUART+0x90>)
  400fb8:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400fba:	682b      	ldr	r3, [r5, #0]
  400fbc:	2100      	movs	r1, #0
  400fbe:	6858      	ldr	r0, [r3, #4]
  400fc0:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY,
		.stopbits = CONF_UART_STOP_BITS
	};
	usart_serial_init(CONF_UART, &usart_options);
	stdio_serial_init((Usart *)CONF_UART, &usart_options);
}
  400fc2:	b004      	add	sp, #16
  400fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400fc8:	20000014 	.word	0x20000014
  400fcc:	004007f5 	.word	0x004007f5
  400fd0:	400e0600 	.word	0x400e0600
  400fd4:	00400ab1 	.word	0x00400ab1
  400fd8:	20000aa4 	.word	0x20000aa4
  400fdc:	00400ee1 	.word	0x00400ee1
  400fe0:	20000aa0 	.word	0x20000aa0
  400fe4:	00400e59 	.word	0x00400e59
  400fe8:	20000a9c 	.word	0x20000a9c
  400fec:	20000024 	.word	0x20000024
  400ff0:	00401d4d 	.word	0x00401d4d
  400ff4:	07270e00 	.word	0x07270e00

00400ff8 <vClearSensorCounter>:
/* Counter Configuration */

unsigned int sensor_counter = 0;

void vClearSensorCounter() {
	sensor_counter = 0;
  400ff8:	2200      	movs	r2, #0
  400ffa:	4b01      	ldr	r3, [pc, #4]	; (401000 <vClearSensorCounter+0x8>)
  400ffc:	601a      	str	r2, [r3, #0]
  400ffe:	4770      	bx	lr
  401000:	20000a64 	.word	0x20000a64

00401004 <vAddSensorCounter>:
int iGetSensorCounter() {
	return sensor_counter;
}

void vAddSensorCounter() {
	sensor_counter++;
  401004:	4a02      	ldr	r2, [pc, #8]	; (401010 <vAddSensorCounter+0xc>)
  401006:	6813      	ldr	r3, [r2, #0]
  401008:	3301      	adds	r3, #1
  40100a:	6013      	str	r3, [r2, #0]
  40100c:	4770      	bx	lr
  40100e:	bf00      	nop
  401010:	20000a64 	.word	0x20000a64

00401014 <dGetDistance>:
}

double dGetDistance() {
  401014:	b510      	push	{r4, lr}
	printf("sensor: %u\r\n",sensor_counter);
  401016:	4c06      	ldr	r4, [pc, #24]	; (401030 <dGetDistance+0x1c>)
  401018:	6821      	ldr	r1, [r4, #0]
  40101a:	4806      	ldr	r0, [pc, #24]	; (401034 <dGetDistance+0x20>)
  40101c:	4b06      	ldr	r3, [pc, #24]	; (401038 <dGetDistance+0x24>)
  40101e:	4798      	blx	r3
	return (sensor_counter/58);
  401020:	6820      	ldr	r0, [r4, #0]
  401022:	4b06      	ldr	r3, [pc, #24]	; (40103c <dGetDistance+0x28>)
  401024:	fba3 3000 	umull	r3, r0, r3, r0
  401028:	0940      	lsrs	r0, r0, #5
  40102a:	4b05      	ldr	r3, [pc, #20]	; (401040 <dGetDistance+0x2c>)
  40102c:	4798      	blx	r3
}
  40102e:	bd10      	pop	{r4, pc}
  401030:	20000a64 	.word	0x20000a64
  401034:	00404a74 	.word	0x00404a74
  401038:	00401c11 	.word	0x00401c11
  40103c:	8d3dcb09 	.word	0x8d3dcb09
  401040:	00401661 	.word	0x00401661

00401044 <vSensorISR>:
    tc_start(TC_SENSOR,CHANNEL_SENSOR);
}

/* ISR Configuration */

void vSensorISR(const uint32_t id, const uint32_t index) {
  401044:	b508      	push	{r3, lr}
	puts("Sensor ISR \r\n");
  401046:	4804      	ldr	r0, [pc, #16]	; (401058 <vSensorISR+0x14>)
  401048:	4b04      	ldr	r3, [pc, #16]	; (40105c <vSensorISR+0x18>)
  40104a:	4798      	blx	r3
	
	double distance = dGetDistance();
  40104c:	4b04      	ldr	r3, [pc, #16]	; (401060 <vSensorISR+0x1c>)
  40104e:	4798      	blx	r3
	vMalhaControle(distance);
  401050:	4b04      	ldr	r3, [pc, #16]	; (401064 <vSensorISR+0x20>)
  401052:	4798      	blx	r3
  401054:	bd08      	pop	{r3, pc}
  401056:	bf00      	nop
  401058:	00404b1c 	.word	0x00404b1c
  40105c:	00401d3d 	.word	0x00401d3d
  401060:	00401015 	.word	0x00401015
  401064:	00400e15 	.word	0x00400e15

00401068 <TC0_Handler>:
void TC0_Handler(void) {
  401068:	b508      	push	{r3, lr}
	tc_get_status(TC,CHANNEL);
  40106a:	2100      	movs	r1, #0
  40106c:	4802      	ldr	r0, [pc, #8]	; (401078 <TC0_Handler+0x10>)
  40106e:	4b03      	ldr	r3, [pc, #12]	; (40107c <TC0_Handler+0x14>)
  401070:	4798      	blx	r3
	vReadSensor();
  401072:	4b03      	ldr	r3, [pc, #12]	; (401080 <TC0_Handler+0x18>)
  401074:	4798      	blx	r3
  401076:	bd08      	pop	{r3, pc}
  401078:	40010000 	.word	0x40010000
  40107c:	00400a39 	.word	0x00400a39
  401080:	00400dd9 	.word	0x00400dd9

00401084 <TC1_Handler>:
void TC1_Handler(void) {
  401084:	b508      	push	{r3, lr}
	tc_get_status(TC_SENSOR,CHANNEL_SENSOR);
  401086:	2101      	movs	r1, #1
  401088:	4802      	ldr	r0, [pc, #8]	; (401094 <TC1_Handler+0x10>)
  40108a:	4b03      	ldr	r3, [pc, #12]	; (401098 <TC1_Handler+0x14>)
  40108c:	4798      	blx	r3
	vAddSensorCounter();
  40108e:	4b03      	ldr	r3, [pc, #12]	; (40109c <TC1_Handler+0x18>)
  401090:	4798      	blx	r3
  401092:	bd08      	pop	{r3, pc}
  401094:	40010000 	.word	0x40010000
  401098:	00400a39 	.word	0x00400a39
  40109c:	00401005 	.word	0x00401005

004010a0 <vConfigureTimer>:
void vConfigureTimer() {
  4010a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010a4:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_TC);
  4010a6:	2017      	movs	r0, #23
  4010a8:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 401194 <vConfigureTimer+0xf4>
  4010ac:	47d8      	blx	fp
	tc_find_mck_divisor(TC_FREQ,ul_sysclk,&ul_div,&ul_tcclk,ul_sysclk);
  4010ae:	4c2e      	ldr	r4, [pc, #184]	; (401168 <vConfigureTimer+0xc8>)
  4010b0:	9400      	str	r4, [sp, #0]
  4010b2:	ab03      	add	r3, sp, #12
  4010b4:	aa02      	add	r2, sp, #8
  4010b6:	4621      	mov	r1, r4
  4010b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4010bc:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 401198 <vConfigureTimer+0xf8>
  4010c0:	47d0      	blx	sl
	tc_init(TC,CHANNEL,TC_CMR_CPCTRG|ul_tcclk);
  4010c2:	9a03      	ldr	r2, [sp, #12]
  4010c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4010c8:	2100      	movs	r1, #0
  4010ca:	4828      	ldr	r0, [pc, #160]	; (40116c <vConfigureTimer+0xcc>)
  4010cc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40119c <vConfigureTimer+0xfc>
  4010d0:	47c8      	blx	r9
	RC = (ul_sysclk/ul_div)/TC_FREQ;
  4010d2:	9a02      	ldr	r2, [sp, #8]
  4010d4:	fbb4 f2f2 	udiv	r2, r4, r2
  4010d8:	4b25      	ldr	r3, [pc, #148]	; (401170 <vConfigureTimer+0xd0>)
  4010da:	fba3 3202 	umull	r3, r2, r3, r2
	tc_write_rc(TC,CHANNEL,RC);
  4010de:	0992      	lsrs	r2, r2, #6
  4010e0:	2100      	movs	r1, #0
  4010e2:	4822      	ldr	r0, [pc, #136]	; (40116c <vConfigureTimer+0xcc>)
  4010e4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4011a0 <vConfigureTimer+0x100>
  4010e8:	47c0      	blx	r8
	tc_enable_interrupt(TC,CHANNEL,TC_IER_CPCS);
  4010ea:	2210      	movs	r2, #16
  4010ec:	2100      	movs	r1, #0
  4010ee:	481f      	ldr	r0, [pc, #124]	; (40116c <vConfigureTimer+0xcc>)
  4010f0:	4f20      	ldr	r7, [pc, #128]	; (401174 <vConfigureTimer+0xd4>)
  4010f2:	47b8      	blx	r7
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4010f4:	4e20      	ldr	r6, [pc, #128]	; (401178 <vConfigureTimer+0xd8>)
  4010f6:	2330      	movs	r3, #48	; 0x30
  4010f8:	f886 3317 	strb.w	r3, [r6, #791]	; 0x317
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4010fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  401100:	6033      	str	r3, [r6, #0]
	puts("Timer 0 Configurado para 100ms\r\n");
  401102:	481e      	ldr	r0, [pc, #120]	; (40117c <vConfigureTimer+0xdc>)
  401104:	4d1e      	ldr	r5, [pc, #120]	; (401180 <vConfigureTimer+0xe0>)
  401106:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_TC_SENSOR);
  401108:	2018      	movs	r0, #24
  40110a:	47d8      	blx	fp
	tc_find_mck_divisor(TC_FREQ_SENSOR,ul_sysclk,&ul_div,&ul_tcclk,ul_sysclk);
  40110c:	9400      	str	r4, [sp, #0]
  40110e:	ab03      	add	r3, sp, #12
  401110:	aa02      	add	r2, sp, #8
  401112:	4621      	mov	r1, r4
  401114:	481b      	ldr	r0, [pc, #108]	; (401184 <vConfigureTimer+0xe4>)
  401116:	47d0      	blx	sl
	tc_init(TC_SENSOR,CHANNEL_SENSOR,TC_CMR_CPCTRG|ul_tcclk);
  401118:	9a03      	ldr	r2, [sp, #12]
  40111a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40111e:	2101      	movs	r1, #1
  401120:	4812      	ldr	r0, [pc, #72]	; (40116c <vConfigureTimer+0xcc>)
  401122:	47c8      	blx	r9
	RC = (ul_sysclk/ul_div)/TC_FREQ_SENSOR;
  401124:	9a02      	ldr	r2, [sp, #8]
  401126:	fbb4 f2f2 	udiv	r2, r4, r2
  40112a:	0952      	lsrs	r2, r2, #5
  40112c:	4c16      	ldr	r4, [pc, #88]	; (401188 <vConfigureTimer+0xe8>)
  40112e:	fba4 3202 	umull	r3, r2, r4, r2
	tc_write_rc(TC_SENSOR,CHANNEL_SENSOR,RC);
  401132:	09d2      	lsrs	r2, r2, #7
  401134:	2101      	movs	r1, #1
  401136:	480d      	ldr	r0, [pc, #52]	; (40116c <vConfigureTimer+0xcc>)
  401138:	47c0      	blx	r8
	tc_enable_interrupt(TC_SENSOR,CHANNEL_SENSOR,TC_IER_CPCS);
  40113a:	2210      	movs	r2, #16
  40113c:	2101      	movs	r1, #1
  40113e:	480b      	ldr	r0, [pc, #44]	; (40116c <vConfigureTimer+0xcc>)
  401140:	47b8      	blx	r7
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401142:	2340      	movs	r3, #64	; 0x40
  401144:	f886 3318 	strb.w	r3, [r6, #792]	; 0x318
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40114c:	6033      	str	r3, [r6, #0]
	puts("Timer 1 Configurado para 10us\r\n");
  40114e:	480f      	ldr	r0, [pc, #60]	; (40118c <vConfigureTimer+0xec>)
  401150:	47a8      	blx	r5
	tc_start(TC,CHANNEL);
  401152:	2100      	movs	r1, #0
  401154:	4805      	ldr	r0, [pc, #20]	; (40116c <vConfigureTimer+0xcc>)
  401156:	4c0e      	ldr	r4, [pc, #56]	; (401190 <vConfigureTimer+0xf0>)
  401158:	47a0      	blx	r4
    tc_start(TC_SENSOR,CHANNEL_SENSOR);
  40115a:	2101      	movs	r1, #1
  40115c:	4803      	ldr	r0, [pc, #12]	; (40116c <vConfigureTimer+0xcc>)
  40115e:	47a0      	blx	r4
}
  401160:	b005      	add	sp, #20
  401162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401166:	bf00      	nop
  401168:	07270e00 	.word	0x07270e00
  40116c:	40010000 	.word	0x40010000
  401170:	10624dd3 	.word	0x10624dd3
  401174:	00400a31 	.word	0x00400a31
  401178:	e000e100 	.word	0xe000e100
  40117c:	00404ac8 	.word	0x00404ac8
  401180:	00401d3d 	.word	0x00401d3d
  401184:	000186a0 	.word	0x000186a0
  401188:	0a7c5ac5 	.word	0x0a7c5ac5
  40118c:	00404aec 	.word	0x00404aec
  401190:	00400a21 	.word	0x00400a21
  401194:	004007f5 	.word	0x004007f5
  401198:	00400a41 	.word	0x00400a41
  40119c:	00400a09 	.word	0x00400a09
  4011a0:	00400a29 	.word	0x00400a29

004011a4 <vConfigureISR>:
	vPWMUpdateDuty(btn_duty);
	
	puts("Button Right ISR \r\n");
}

void vConfigureISR() {
  4011a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4011a8:	b082      	sub	sp, #8
	puts("Configuracao Sensor ISR \r\n");
  4011aa:	482a      	ldr	r0, [pc, #168]	; (401254 <vConfigureISR+0xb0>)
  4011ac:	4b2a      	ldr	r3, [pc, #168]	; (401258 <vConfigureISR+0xb4>)
  4011ae:	4798      	blx	r3
	
	/* Configuracao da ISR no PIO_ECHO do Sensor */
	pio_set_input(PIOA, PIO_ECHO, PIO_DEBOUNCE);
  4011b0:	4c2a      	ldr	r4, [pc, #168]	; (40125c <vConfigureISR+0xb8>)
  4011b2:	2208      	movs	r2, #8
  4011b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4011b8:	4620      	mov	r0, r4
  4011ba:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 401280 <vConfigureISR+0xdc>
  4011be:	47c8      	blx	r9
	pio_pull_down(PIOA,PIO_ECHO,1);
  4011c0:	2201      	movs	r2, #1
  4011c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4011c6:	4620      	mov	r0, r4
  4011c8:	4b25      	ldr	r3, [pc, #148]	; (401260 <vConfigureISR+0xbc>)
  4011ca:	4798      	blx	r3
	pio_handler_set(PIOA,ID_PIOA,PIO_ECHO,PIO_IT_RISE_EDGE,vSensorISR);
  4011cc:	4b25      	ldr	r3, [pc, #148]	; (401264 <vConfigureISR+0xc0>)
  4011ce:	9300      	str	r3, [sp, #0]
  4011d0:	2370      	movs	r3, #112	; 0x70
  4011d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4011d6:	210b      	movs	r1, #11
  4011d8:	4620      	mov	r0, r4
  4011da:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 401284 <vConfigureISR+0xe0>
  4011de:	47c0      	blx	r8
	pio_enable_interrupt(PIOA,PIO_ECHO);
  4011e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4011e4:	4620      	mov	r0, r4
  4011e6:	4e20      	ldr	r6, [pc, #128]	; (401268 <vConfigureISR+0xc4>)
  4011e8:	47b0      	blx	r6
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4011ea:	4c20      	ldr	r4, [pc, #128]	; (40126c <vConfigureISR+0xc8>)
  4011ec:	2310      	movs	r3, #16
  4011ee:	f884 330b 	strb.w	r3, [r4, #779]	; 0x30b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4011f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011f6:	6023      	str	r3, [r4, #0]
	NVIC_SetPriority(PIOA_IRQn, SENSOR_PRIORITY);
	NVIC_EnableIRQ(PIOA_IRQn);
	
	/* ISR no Botao */
	pio_set_input(PIOB, PIO_BUTTON_LEFT, PIO_PULLUP | PIO_DEBOUNCE);
  4011f8:	4d1d      	ldr	r5, [pc, #116]	; (401270 <vConfigureISR+0xcc>)
  4011fa:	2209      	movs	r2, #9
  4011fc:	2108      	movs	r1, #8
  4011fe:	4628      	mov	r0, r5
  401200:	47c8      	blx	r9
	pio_handler_set(PIOB,ID_PIOB,PIO_BUTTON_LEFT,PIO_IT_RISE_EDGE,vButtonLeftISR);
  401202:	4b1c      	ldr	r3, [pc, #112]	; (401274 <vConfigureISR+0xd0>)
  401204:	9300      	str	r3, [sp, #0]
  401206:	2370      	movs	r3, #112	; 0x70
  401208:	2208      	movs	r2, #8
  40120a:	210c      	movs	r1, #12
  40120c:	4628      	mov	r0, r5
  40120e:	47c0      	blx	r8
	pio_enable_interrupt(PIOB,PIO_BUTTON_LEFT);
  401210:	2108      	movs	r1, #8
  401212:	4628      	mov	r0, r5
  401214:	47b0      	blx	r6
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401216:	f04f 0a20 	mov.w	sl, #32
  40121a:	f884 a30c 	strb.w	sl, [r4, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40121e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  401222:	6025      	str	r5, [r4, #0]
	NVIC_SetPriority(PIOB_IRQn, BUTTON_PRIORITY);
	NVIC_EnableIRQ(PIOB_IRQn);
	
	pio_set_input(PIOC, PIO_BUTTON_RIGTH, PIO_PULLUP | PIO_DEBOUNCE);
  401224:	4f14      	ldr	r7, [pc, #80]	; (401278 <vConfigureISR+0xd4>)
  401226:	2209      	movs	r2, #9
  401228:	4629      	mov	r1, r5
  40122a:	4638      	mov	r0, r7
  40122c:	47c8      	blx	r9
	pio_handler_set(PIOC,ID_PIOC,PIO_BUTTON_RIGTH,PIO_IT_RISE_EDGE,vButtonRightISR);
  40122e:	4b13      	ldr	r3, [pc, #76]	; (40127c <vConfigureISR+0xd8>)
  401230:	9300      	str	r3, [sp, #0]
  401232:	2370      	movs	r3, #112	; 0x70
  401234:	462a      	mov	r2, r5
  401236:	210d      	movs	r1, #13
  401238:	4638      	mov	r0, r7
  40123a:	47c0      	blx	r8
	pio_enable_interrupt(PIOC,PIO_BUTTON_RIGTH);
  40123c:	4629      	mov	r1, r5
  40123e:	4638      	mov	r0, r7
  401240:	47b0      	blx	r6
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401242:	f884 a30d 	strb.w	sl, [r4, #781]	; 0x30d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40124a:	6023      	str	r3, [r4, #0]
	NVIC_SetPriority(PIOC_IRQn, BUTTON_PRIORITY);
	NVIC_EnableIRQ(PIOC_IRQn);
}
  40124c:	b002      	add	sp, #8
  40124e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401252:	bf00      	nop
  401254:	00404aac 	.word	0x00404aac
  401258:	00401d3d 	.word	0x00401d3d
  40125c:	400e0e00 	.word	0x400e0e00
  401260:	00400385 	.word	0x00400385
  401264:	00401045 	.word	0x00401045
  401268:	004003c1 	.word	0x004003c1
  40126c:	e000e100 	.word	0xe000e100
  401270:	400e1000 	.word	0x400e1000
  401274:	00401339 	.word	0x00401339
  401278:	400e1200 	.word	0x400e1200
  40127c:	00401369 	.word	0x00401369
  401280:	0040032d 	.word	0x0040032d
  401284:	00400661 	.word	0x00400661

00401288 <vConfigurePWM>:

/* PWM Configuration */
void vConfigurePWM() {
  401288:	b570      	push	{r4, r5, r6, lr}
  40128a:	b084      	sub	sp, #16
	pmc_enable_periph_clk(ID_PWM);
  40128c:	201f      	movs	r0, #31
  40128e:	4b15      	ldr	r3, [pc, #84]	; (4012e4 <vConfigurePWM+0x5c>)
  401290:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL);
  401292:	4c15      	ldr	r4, [pc, #84]	; (4012e8 <vConfigurePWM+0x60>)
  401294:	2101      	movs	r1, #1
  401296:	4620      	mov	r0, r4
  401298:	4b14      	ldr	r3, [pc, #80]	; (4012ec <vConfigurePWM+0x64>)
  40129a:	4798      	blx	r3
	pwm_clock_t clock_setting = {
  40129c:	f242 7310 	movw	r3, #10000	; 0x2710
  4012a0:	9301      	str	r3, [sp, #4]
  4012a2:	2500      	movs	r5, #0
  4012a4:	9502      	str	r5, [sp, #8]
  4012a6:	4b12      	ldr	r3, [pc, #72]	; (4012f0 <vConfigurePWM+0x68>)
  4012a8:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
  4012aa:	a901      	add	r1, sp, #4
  4012ac:	4620      	mov	r0, r4
  4012ae:	4b11      	ldr	r3, [pc, #68]	; (4012f4 <vConfigurePWM+0x6c>)
  4012b0:	4798      	blx	r3
	g_pwm_channel.alignment = PWM_ALIGN_LEFT;
  4012b2:	4911      	ldr	r1, [pc, #68]	; (4012f8 <vConfigurePWM+0x70>)
  4012b4:	810d      	strh	r5, [r1, #8]
	g_pwm_channel.polarity = PWM_LOW;
  4012b6:	728d      	strb	r5, [r1, #10]
	g_pwm_channel.ul_prescaler = PWM_CMR_CPRE_CLKA;
  4012b8:	230b      	movs	r3, #11
  4012ba:	604b      	str	r3, [r1, #4]
	g_pwm_channel.ul_period = PERIOD_VALUE;
  4012bc:	23c8      	movs	r3, #200	; 0xc8
  4012be:	610b      	str	r3, [r1, #16]
	g_pwm_channel.ul_duty = INIT_DUTY_VALUE;
  4012c0:	2305      	movs	r3, #5
  4012c2:	60cb      	str	r3, [r1, #12]
	g_pwm_channel.channel = PWM_CHANNEL;
  4012c4:	2601      	movs	r6, #1
  4012c6:	600e      	str	r6, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel);
  4012c8:	4620      	mov	r0, r4
  4012ca:	4b0c      	ldr	r3, [pc, #48]	; (4012fc <vConfigurePWM+0x74>)
  4012cc:	4798      	blx	r3
	pwm_channel_disable_interrupt(PWM, PWM_CHANNEL, 0);
  4012ce:	462a      	mov	r2, r5
  4012d0:	4631      	mov	r1, r6
  4012d2:	4620      	mov	r0, r4
  4012d4:	4b0a      	ldr	r3, [pc, #40]	; (401300 <vConfigurePWM+0x78>)
  4012d6:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL);
  4012d8:	4631      	mov	r1, r6
  4012da:	4620      	mov	r0, r4
  4012dc:	4b09      	ldr	r3, [pc, #36]	; (401304 <vConfigurePWM+0x7c>)
  4012de:	4798      	blx	r3
}
  4012e0:	b004      	add	sp, #16
  4012e2:	bd70      	pop	{r4, r5, r6, pc}
  4012e4:	004007f5 	.word	0x004007f5
  4012e8:	40020000 	.word	0x40020000
  4012ec:	004009ed 	.word	0x004009ed
  4012f0:	07270e00 	.word	0x07270e00
  4012f4:	0040089d 	.word	0x0040089d
  4012f8:	20000aac 	.word	0x20000aac
  4012fc:	004008e1 	.word	0x004008e1
  401300:	004009f7 	.word	0x004009f7
  401304:	004009e3 	.word	0x004009e3

00401308 <vPWMUpdateDuty>:

void vPWMUpdateDuty (uint32_t duty) {
  401308:	b510      	push	{r4, lr}
  40130a:	4604      	mov	r4, r0
	puts("Update Duty!\r\n");
  40130c:	4805      	ldr	r0, [pc, #20]	; (401324 <vPWMUpdateDuty+0x1c>)
  40130e:	4b06      	ldr	r3, [pc, #24]	; (401328 <vPWMUpdateDuty+0x20>)
  401310:	4798      	blx	r3
	g_pwm_channel.channel = PWM_CHANNEL;
  401312:	4906      	ldr	r1, [pc, #24]	; (40132c <vPWMUpdateDuty+0x24>)
  401314:	2301      	movs	r3, #1
  401316:	600b      	str	r3, [r1, #0]
	pwm_channel_update_duty(PWM, &g_pwm_channel, duty);
  401318:	4622      	mov	r2, r4
  40131a:	4805      	ldr	r0, [pc, #20]	; (401330 <vPWMUpdateDuty+0x28>)
  40131c:	4b05      	ldr	r3, [pc, #20]	; (401334 <vPWMUpdateDuty+0x2c>)
  40131e:	4798      	blx	r3
  401320:	bd10      	pop	{r4, pc}
  401322:	bf00      	nop
  401324:	00404b0c 	.word	0x00404b0c
  401328:	00401d3d 	.word	0x00401d3d
  40132c:	20000aac 	.word	0x20000aac
  401330:	40020000 	.word	0x40020000
  401334:	004009c7 	.word	0x004009c7

00401338 <vButtonLeftISR>:
void vButtonLeftISR(const uint32_t id, const uint32_t index) {
  401338:	b508      	push	{r3, lr}
	if (btn_duty < MAX_DUTY_VALUE) btn_duty++;
  40133a:	4b07      	ldr	r3, [pc, #28]	; (401358 <vButtonLeftISR+0x20>)
  40133c:	681b      	ldr	r3, [r3, #0]
  40133e:	2b13      	cmp	r3, #19
  401340:	d802      	bhi.n	401348 <vButtonLeftISR+0x10>
  401342:	3301      	adds	r3, #1
  401344:	4a04      	ldr	r2, [pc, #16]	; (401358 <vButtonLeftISR+0x20>)
  401346:	6013      	str	r3, [r2, #0]
	vPWMUpdateDuty(btn_duty);
  401348:	4b03      	ldr	r3, [pc, #12]	; (401358 <vButtonLeftISR+0x20>)
  40134a:	6818      	ldr	r0, [r3, #0]
  40134c:	4b03      	ldr	r3, [pc, #12]	; (40135c <vButtonLeftISR+0x24>)
  40134e:	4798      	blx	r3
	puts("Button Left ISR \r\n");
  401350:	4803      	ldr	r0, [pc, #12]	; (401360 <vButtonLeftISR+0x28>)
  401352:	4b04      	ldr	r3, [pc, #16]	; (401364 <vButtonLeftISR+0x2c>)
  401354:	4798      	blx	r3
  401356:	bd08      	pop	{r3, pc}
  401358:	20000010 	.word	0x20000010
  40135c:	00401309 	.word	0x00401309
  401360:	00404a84 	.word	0x00404a84
  401364:	00401d3d 	.word	0x00401d3d

00401368 <vButtonRightISR>:
void vButtonRightISR(const uint32_t id, const uint32_t index) {
  401368:	b508      	push	{r3, lr}
	if (btn_duty > MIN_DUTY_VALUE) btn_duty--;
  40136a:	4b07      	ldr	r3, [pc, #28]	; (401388 <vButtonRightISR+0x20>)
  40136c:	681b      	ldr	r3, [r3, #0]
  40136e:	2b0a      	cmp	r3, #10
  401370:	d902      	bls.n	401378 <vButtonRightISR+0x10>
  401372:	3b01      	subs	r3, #1
  401374:	4a04      	ldr	r2, [pc, #16]	; (401388 <vButtonRightISR+0x20>)
  401376:	6013      	str	r3, [r2, #0]
	vPWMUpdateDuty(btn_duty);
  401378:	4b03      	ldr	r3, [pc, #12]	; (401388 <vButtonRightISR+0x20>)
  40137a:	6818      	ldr	r0, [r3, #0]
  40137c:	4b03      	ldr	r3, [pc, #12]	; (40138c <vButtonRightISR+0x24>)
  40137e:	4798      	blx	r3
	puts("Button Right ISR \r\n");
  401380:	4803      	ldr	r0, [pc, #12]	; (401390 <vButtonRightISR+0x28>)
  401382:	4b04      	ldr	r3, [pc, #16]	; (401394 <vButtonRightISR+0x2c>)
  401384:	4798      	blx	r3
  401386:	bd08      	pop	{r3, pc}
  401388:	20000010 	.word	0x20000010
  40138c:	00401309 	.word	0x00401309
  401390:	00404a98 	.word	0x00404a98
  401394:	00401d3d 	.word	0x00401d3d

00401398 <main>:
#include <asf.h>
#include "BeamBall.h"


int main (void)
{
  401398:	b508      	push	{r3, lr}
	sysclk_init();
  40139a:	4b08      	ldr	r3, [pc, #32]	; (4013bc <main+0x24>)
  40139c:	4798      	blx	r3
	board_init();
  40139e:	4b08      	ldr	r3, [pc, #32]	; (4013c0 <main+0x28>)
  4013a0:	4798      	blx	r3
	vConfigureUART();
  4013a2:	4b08      	ldr	r3, [pc, #32]	; (4013c4 <main+0x2c>)
  4013a4:	4798      	blx	r3

	puts("Inicializing Beam Ball\r\n");
  4013a6:	4808      	ldr	r0, [pc, #32]	; (4013c8 <main+0x30>)
  4013a8:	4b08      	ldr	r3, [pc, #32]	; (4013cc <main+0x34>)
  4013aa:	4798      	blx	r3

	vConfigurePWM();
  4013ac:	4b08      	ldr	r3, [pc, #32]	; (4013d0 <main+0x38>)
  4013ae:	4798      	blx	r3
	vConfigureISR();
  4013b0:	4b08      	ldr	r3, [pc, #32]	; (4013d4 <main+0x3c>)
  4013b2:	4798      	blx	r3
	vConfigureTimer();
  4013b4:	4b08      	ldr	r3, [pc, #32]	; (4013d8 <main+0x40>)
  4013b6:	4798      	blx	r3
  4013b8:	e7fe      	b.n	4013b8 <main+0x20>
  4013ba:	bf00      	nop
  4013bc:	00400139 	.word	0x00400139
  4013c0:	00400229 	.word	0x00400229
  4013c4:	00400f61 	.word	0x00400f61
  4013c8:	00404b2c 	.word	0x00404b2c
  4013cc:	00401d3d 	.word	0x00401d3d
  4013d0:	00401289 	.word	0x00401289
  4013d4:	004011a5 	.word	0x004011a5
  4013d8:	004010a1 	.word	0x004010a1

004013dc <__aeabi_drsub>:
  4013dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4013e0:	e002      	b.n	4013e8 <__adddf3>
  4013e2:	bf00      	nop

004013e4 <__aeabi_dsub>:
  4013e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004013e8 <__adddf3>:
  4013e8:	b530      	push	{r4, r5, lr}
  4013ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4013ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4013f2:	ea94 0f05 	teq	r4, r5
  4013f6:	bf08      	it	eq
  4013f8:	ea90 0f02 	teqeq	r0, r2
  4013fc:	bf1f      	itttt	ne
  4013fe:	ea54 0c00 	orrsne.w	ip, r4, r0
  401402:	ea55 0c02 	orrsne.w	ip, r5, r2
  401406:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40140a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40140e:	f000 80e2 	beq.w	4015d6 <__adddf3+0x1ee>
  401412:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401416:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40141a:	bfb8      	it	lt
  40141c:	426d      	neglt	r5, r5
  40141e:	dd0c      	ble.n	40143a <__adddf3+0x52>
  401420:	442c      	add	r4, r5
  401422:	ea80 0202 	eor.w	r2, r0, r2
  401426:	ea81 0303 	eor.w	r3, r1, r3
  40142a:	ea82 0000 	eor.w	r0, r2, r0
  40142e:	ea83 0101 	eor.w	r1, r3, r1
  401432:	ea80 0202 	eor.w	r2, r0, r2
  401436:	ea81 0303 	eor.w	r3, r1, r3
  40143a:	2d36      	cmp	r5, #54	; 0x36
  40143c:	bf88      	it	hi
  40143e:	bd30      	pophi	{r4, r5, pc}
  401440:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401444:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401448:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40144c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401450:	d002      	beq.n	401458 <__adddf3+0x70>
  401452:	4240      	negs	r0, r0
  401454:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401458:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40145c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401460:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401464:	d002      	beq.n	40146c <__adddf3+0x84>
  401466:	4252      	negs	r2, r2
  401468:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40146c:	ea94 0f05 	teq	r4, r5
  401470:	f000 80a7 	beq.w	4015c2 <__adddf3+0x1da>
  401474:	f1a4 0401 	sub.w	r4, r4, #1
  401478:	f1d5 0e20 	rsbs	lr, r5, #32
  40147c:	db0d      	blt.n	40149a <__adddf3+0xb2>
  40147e:	fa02 fc0e 	lsl.w	ip, r2, lr
  401482:	fa22 f205 	lsr.w	r2, r2, r5
  401486:	1880      	adds	r0, r0, r2
  401488:	f141 0100 	adc.w	r1, r1, #0
  40148c:	fa03 f20e 	lsl.w	r2, r3, lr
  401490:	1880      	adds	r0, r0, r2
  401492:	fa43 f305 	asr.w	r3, r3, r5
  401496:	4159      	adcs	r1, r3
  401498:	e00e      	b.n	4014b8 <__adddf3+0xd0>
  40149a:	f1a5 0520 	sub.w	r5, r5, #32
  40149e:	f10e 0e20 	add.w	lr, lr, #32
  4014a2:	2a01      	cmp	r2, #1
  4014a4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4014a8:	bf28      	it	cs
  4014aa:	f04c 0c02 	orrcs.w	ip, ip, #2
  4014ae:	fa43 f305 	asr.w	r3, r3, r5
  4014b2:	18c0      	adds	r0, r0, r3
  4014b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4014b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4014bc:	d507      	bpl.n	4014ce <__adddf3+0xe6>
  4014be:	f04f 0e00 	mov.w	lr, #0
  4014c2:	f1dc 0c00 	rsbs	ip, ip, #0
  4014c6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4014ca:	eb6e 0101 	sbc.w	r1, lr, r1
  4014ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4014d2:	d31b      	bcc.n	40150c <__adddf3+0x124>
  4014d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4014d8:	d30c      	bcc.n	4014f4 <__adddf3+0x10c>
  4014da:	0849      	lsrs	r1, r1, #1
  4014dc:	ea5f 0030 	movs.w	r0, r0, rrx
  4014e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4014e4:	f104 0401 	add.w	r4, r4, #1
  4014e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4014ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4014f0:	f080 809a 	bcs.w	401628 <__adddf3+0x240>
  4014f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4014f8:	bf08      	it	eq
  4014fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4014fe:	f150 0000 	adcs.w	r0, r0, #0
  401502:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401506:	ea41 0105 	orr.w	r1, r1, r5
  40150a:	bd30      	pop	{r4, r5, pc}
  40150c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401510:	4140      	adcs	r0, r0
  401512:	eb41 0101 	adc.w	r1, r1, r1
  401516:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40151a:	f1a4 0401 	sub.w	r4, r4, #1
  40151e:	d1e9      	bne.n	4014f4 <__adddf3+0x10c>
  401520:	f091 0f00 	teq	r1, #0
  401524:	bf04      	itt	eq
  401526:	4601      	moveq	r1, r0
  401528:	2000      	moveq	r0, #0
  40152a:	fab1 f381 	clz	r3, r1
  40152e:	bf08      	it	eq
  401530:	3320      	addeq	r3, #32
  401532:	f1a3 030b 	sub.w	r3, r3, #11
  401536:	f1b3 0220 	subs.w	r2, r3, #32
  40153a:	da0c      	bge.n	401556 <__adddf3+0x16e>
  40153c:	320c      	adds	r2, #12
  40153e:	dd08      	ble.n	401552 <__adddf3+0x16a>
  401540:	f102 0c14 	add.w	ip, r2, #20
  401544:	f1c2 020c 	rsb	r2, r2, #12
  401548:	fa01 f00c 	lsl.w	r0, r1, ip
  40154c:	fa21 f102 	lsr.w	r1, r1, r2
  401550:	e00c      	b.n	40156c <__adddf3+0x184>
  401552:	f102 0214 	add.w	r2, r2, #20
  401556:	bfd8      	it	le
  401558:	f1c2 0c20 	rsble	ip, r2, #32
  40155c:	fa01 f102 	lsl.w	r1, r1, r2
  401560:	fa20 fc0c 	lsr.w	ip, r0, ip
  401564:	bfdc      	itt	le
  401566:	ea41 010c 	orrle.w	r1, r1, ip
  40156a:	4090      	lslle	r0, r2
  40156c:	1ae4      	subs	r4, r4, r3
  40156e:	bfa2      	ittt	ge
  401570:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401574:	4329      	orrge	r1, r5
  401576:	bd30      	popge	{r4, r5, pc}
  401578:	ea6f 0404 	mvn.w	r4, r4
  40157c:	3c1f      	subs	r4, #31
  40157e:	da1c      	bge.n	4015ba <__adddf3+0x1d2>
  401580:	340c      	adds	r4, #12
  401582:	dc0e      	bgt.n	4015a2 <__adddf3+0x1ba>
  401584:	f104 0414 	add.w	r4, r4, #20
  401588:	f1c4 0220 	rsb	r2, r4, #32
  40158c:	fa20 f004 	lsr.w	r0, r0, r4
  401590:	fa01 f302 	lsl.w	r3, r1, r2
  401594:	ea40 0003 	orr.w	r0, r0, r3
  401598:	fa21 f304 	lsr.w	r3, r1, r4
  40159c:	ea45 0103 	orr.w	r1, r5, r3
  4015a0:	bd30      	pop	{r4, r5, pc}
  4015a2:	f1c4 040c 	rsb	r4, r4, #12
  4015a6:	f1c4 0220 	rsb	r2, r4, #32
  4015aa:	fa20 f002 	lsr.w	r0, r0, r2
  4015ae:	fa01 f304 	lsl.w	r3, r1, r4
  4015b2:	ea40 0003 	orr.w	r0, r0, r3
  4015b6:	4629      	mov	r1, r5
  4015b8:	bd30      	pop	{r4, r5, pc}
  4015ba:	fa21 f004 	lsr.w	r0, r1, r4
  4015be:	4629      	mov	r1, r5
  4015c0:	bd30      	pop	{r4, r5, pc}
  4015c2:	f094 0f00 	teq	r4, #0
  4015c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4015ca:	bf06      	itte	eq
  4015cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4015d0:	3401      	addeq	r4, #1
  4015d2:	3d01      	subne	r5, #1
  4015d4:	e74e      	b.n	401474 <__adddf3+0x8c>
  4015d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4015da:	bf18      	it	ne
  4015dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4015e0:	d029      	beq.n	401636 <__adddf3+0x24e>
  4015e2:	ea94 0f05 	teq	r4, r5
  4015e6:	bf08      	it	eq
  4015e8:	ea90 0f02 	teqeq	r0, r2
  4015ec:	d005      	beq.n	4015fa <__adddf3+0x212>
  4015ee:	ea54 0c00 	orrs.w	ip, r4, r0
  4015f2:	bf04      	itt	eq
  4015f4:	4619      	moveq	r1, r3
  4015f6:	4610      	moveq	r0, r2
  4015f8:	bd30      	pop	{r4, r5, pc}
  4015fa:	ea91 0f03 	teq	r1, r3
  4015fe:	bf1e      	ittt	ne
  401600:	2100      	movne	r1, #0
  401602:	2000      	movne	r0, #0
  401604:	bd30      	popne	{r4, r5, pc}
  401606:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40160a:	d105      	bne.n	401618 <__adddf3+0x230>
  40160c:	0040      	lsls	r0, r0, #1
  40160e:	4149      	adcs	r1, r1
  401610:	bf28      	it	cs
  401612:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401616:	bd30      	pop	{r4, r5, pc}
  401618:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40161c:	bf3c      	itt	cc
  40161e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401622:	bd30      	popcc	{r4, r5, pc}
  401624:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401628:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40162c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401630:	f04f 0000 	mov.w	r0, #0
  401634:	bd30      	pop	{r4, r5, pc}
  401636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40163a:	bf1a      	itte	ne
  40163c:	4619      	movne	r1, r3
  40163e:	4610      	movne	r0, r2
  401640:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401644:	bf1c      	itt	ne
  401646:	460b      	movne	r3, r1
  401648:	4602      	movne	r2, r0
  40164a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40164e:	bf06      	itte	eq
  401650:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401654:	ea91 0f03 	teqeq	r1, r3
  401658:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40165c:	bd30      	pop	{r4, r5, pc}
  40165e:	bf00      	nop

00401660 <__aeabi_ui2d>:
  401660:	f090 0f00 	teq	r0, #0
  401664:	bf04      	itt	eq
  401666:	2100      	moveq	r1, #0
  401668:	4770      	bxeq	lr
  40166a:	b530      	push	{r4, r5, lr}
  40166c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401670:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401674:	f04f 0500 	mov.w	r5, #0
  401678:	f04f 0100 	mov.w	r1, #0
  40167c:	e750      	b.n	401520 <__adddf3+0x138>
  40167e:	bf00      	nop

00401680 <__aeabi_i2d>:
  401680:	f090 0f00 	teq	r0, #0
  401684:	bf04      	itt	eq
  401686:	2100      	moveq	r1, #0
  401688:	4770      	bxeq	lr
  40168a:	b530      	push	{r4, r5, lr}
  40168c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401690:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401694:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401698:	bf48      	it	mi
  40169a:	4240      	negmi	r0, r0
  40169c:	f04f 0100 	mov.w	r1, #0
  4016a0:	e73e      	b.n	401520 <__adddf3+0x138>
  4016a2:	bf00      	nop

004016a4 <__aeabi_f2d>:
  4016a4:	0042      	lsls	r2, r0, #1
  4016a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4016aa:	ea4f 0131 	mov.w	r1, r1, rrx
  4016ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4016b2:	bf1f      	itttt	ne
  4016b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4016b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4016bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4016c0:	4770      	bxne	lr
  4016c2:	f092 0f00 	teq	r2, #0
  4016c6:	bf14      	ite	ne
  4016c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4016cc:	4770      	bxeq	lr
  4016ce:	b530      	push	{r4, r5, lr}
  4016d0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4016d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4016d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4016dc:	e720      	b.n	401520 <__adddf3+0x138>
  4016de:	bf00      	nop

004016e0 <__aeabi_ul2d>:
  4016e0:	ea50 0201 	orrs.w	r2, r0, r1
  4016e4:	bf08      	it	eq
  4016e6:	4770      	bxeq	lr
  4016e8:	b530      	push	{r4, r5, lr}
  4016ea:	f04f 0500 	mov.w	r5, #0
  4016ee:	e00a      	b.n	401706 <__aeabi_l2d+0x16>

004016f0 <__aeabi_l2d>:
  4016f0:	ea50 0201 	orrs.w	r2, r0, r1
  4016f4:	bf08      	it	eq
  4016f6:	4770      	bxeq	lr
  4016f8:	b530      	push	{r4, r5, lr}
  4016fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4016fe:	d502      	bpl.n	401706 <__aeabi_l2d+0x16>
  401700:	4240      	negs	r0, r0
  401702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401706:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40170a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40170e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401712:	f43f aedc 	beq.w	4014ce <__adddf3+0xe6>
  401716:	f04f 0203 	mov.w	r2, #3
  40171a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40171e:	bf18      	it	ne
  401720:	3203      	addne	r2, #3
  401722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401726:	bf18      	it	ne
  401728:	3203      	addne	r2, #3
  40172a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40172e:	f1c2 0320 	rsb	r3, r2, #32
  401732:	fa00 fc03 	lsl.w	ip, r0, r3
  401736:	fa20 f002 	lsr.w	r0, r0, r2
  40173a:	fa01 fe03 	lsl.w	lr, r1, r3
  40173e:	ea40 000e 	orr.w	r0, r0, lr
  401742:	fa21 f102 	lsr.w	r1, r1, r2
  401746:	4414      	add	r4, r2
  401748:	e6c1      	b.n	4014ce <__adddf3+0xe6>
  40174a:	bf00      	nop

0040174c <__aeabi_dmul>:
  40174c:	b570      	push	{r4, r5, r6, lr}
  40174e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40175a:	bf1d      	ittte	ne
  40175c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401760:	ea94 0f0c 	teqne	r4, ip
  401764:	ea95 0f0c 	teqne	r5, ip
  401768:	f000 f8de 	bleq	401928 <__aeabi_dmul+0x1dc>
  40176c:	442c      	add	r4, r5
  40176e:	ea81 0603 	eor.w	r6, r1, r3
  401772:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401776:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40177a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40177e:	bf18      	it	ne
  401780:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40178c:	d038      	beq.n	401800 <__aeabi_dmul+0xb4>
  40178e:	fba0 ce02 	umull	ip, lr, r0, r2
  401792:	f04f 0500 	mov.w	r5, #0
  401796:	fbe1 e502 	umlal	lr, r5, r1, r2
  40179a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40179e:	fbe0 e503 	umlal	lr, r5, r0, r3
  4017a2:	f04f 0600 	mov.w	r6, #0
  4017a6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4017aa:	f09c 0f00 	teq	ip, #0
  4017ae:	bf18      	it	ne
  4017b0:	f04e 0e01 	orrne.w	lr, lr, #1
  4017b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4017b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4017bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4017c0:	d204      	bcs.n	4017cc <__aeabi_dmul+0x80>
  4017c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4017c6:	416d      	adcs	r5, r5
  4017c8:	eb46 0606 	adc.w	r6, r6, r6
  4017cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4017d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4017d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4017d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4017dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4017e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4017e4:	bf88      	it	hi
  4017e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4017ea:	d81e      	bhi.n	40182a <__aeabi_dmul+0xde>
  4017ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4017f0:	bf08      	it	eq
  4017f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4017f6:	f150 0000 	adcs.w	r0, r0, #0
  4017fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4017fe:	bd70      	pop	{r4, r5, r6, pc}
  401800:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401804:	ea46 0101 	orr.w	r1, r6, r1
  401808:	ea40 0002 	orr.w	r0, r0, r2
  40180c:	ea81 0103 	eor.w	r1, r1, r3
  401810:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401814:	bfc2      	ittt	gt
  401816:	ebd4 050c 	rsbsgt	r5, r4, ip
  40181a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40181e:	bd70      	popgt	{r4, r5, r6, pc}
  401820:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401824:	f04f 0e00 	mov.w	lr, #0
  401828:	3c01      	subs	r4, #1
  40182a:	f300 80ab 	bgt.w	401984 <__aeabi_dmul+0x238>
  40182e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  401832:	bfde      	ittt	le
  401834:	2000      	movle	r0, #0
  401836:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40183a:	bd70      	pople	{r4, r5, r6, pc}
  40183c:	f1c4 0400 	rsb	r4, r4, #0
  401840:	3c20      	subs	r4, #32
  401842:	da35      	bge.n	4018b0 <__aeabi_dmul+0x164>
  401844:	340c      	adds	r4, #12
  401846:	dc1b      	bgt.n	401880 <__aeabi_dmul+0x134>
  401848:	f104 0414 	add.w	r4, r4, #20
  40184c:	f1c4 0520 	rsb	r5, r4, #32
  401850:	fa00 f305 	lsl.w	r3, r0, r5
  401854:	fa20 f004 	lsr.w	r0, r0, r4
  401858:	fa01 f205 	lsl.w	r2, r1, r5
  40185c:	ea40 0002 	orr.w	r0, r0, r2
  401860:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401864:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40186c:	fa21 f604 	lsr.w	r6, r1, r4
  401870:	eb42 0106 	adc.w	r1, r2, r6
  401874:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401878:	bf08      	it	eq
  40187a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40187e:	bd70      	pop	{r4, r5, r6, pc}
  401880:	f1c4 040c 	rsb	r4, r4, #12
  401884:	f1c4 0520 	rsb	r5, r4, #32
  401888:	fa00 f304 	lsl.w	r3, r0, r4
  40188c:	fa20 f005 	lsr.w	r0, r0, r5
  401890:	fa01 f204 	lsl.w	r2, r1, r4
  401894:	ea40 0002 	orr.w	r0, r0, r2
  401898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40189c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4018a0:	f141 0100 	adc.w	r1, r1, #0
  4018a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4018a8:	bf08      	it	eq
  4018aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4018ae:	bd70      	pop	{r4, r5, r6, pc}
  4018b0:	f1c4 0520 	rsb	r5, r4, #32
  4018b4:	fa00 f205 	lsl.w	r2, r0, r5
  4018b8:	ea4e 0e02 	orr.w	lr, lr, r2
  4018bc:	fa20 f304 	lsr.w	r3, r0, r4
  4018c0:	fa01 f205 	lsl.w	r2, r1, r5
  4018c4:	ea43 0302 	orr.w	r3, r3, r2
  4018c8:	fa21 f004 	lsr.w	r0, r1, r4
  4018cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4018d0:	fa21 f204 	lsr.w	r2, r1, r4
  4018d4:	ea20 0002 	bic.w	r0, r0, r2
  4018d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4018dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4018e0:	bf08      	it	eq
  4018e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4018e6:	bd70      	pop	{r4, r5, r6, pc}
  4018e8:	f094 0f00 	teq	r4, #0
  4018ec:	d10f      	bne.n	40190e <__aeabi_dmul+0x1c2>
  4018ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4018f2:	0040      	lsls	r0, r0, #1
  4018f4:	eb41 0101 	adc.w	r1, r1, r1
  4018f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4018fc:	bf08      	it	eq
  4018fe:	3c01      	subeq	r4, #1
  401900:	d0f7      	beq.n	4018f2 <__aeabi_dmul+0x1a6>
  401902:	ea41 0106 	orr.w	r1, r1, r6
  401906:	f095 0f00 	teq	r5, #0
  40190a:	bf18      	it	ne
  40190c:	4770      	bxne	lr
  40190e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  401912:	0052      	lsls	r2, r2, #1
  401914:	eb43 0303 	adc.w	r3, r3, r3
  401918:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40191c:	bf08      	it	eq
  40191e:	3d01      	subeq	r5, #1
  401920:	d0f7      	beq.n	401912 <__aeabi_dmul+0x1c6>
  401922:	ea43 0306 	orr.w	r3, r3, r6
  401926:	4770      	bx	lr
  401928:	ea94 0f0c 	teq	r4, ip
  40192c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401930:	bf18      	it	ne
  401932:	ea95 0f0c 	teqne	r5, ip
  401936:	d00c      	beq.n	401952 <__aeabi_dmul+0x206>
  401938:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40193c:	bf18      	it	ne
  40193e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401942:	d1d1      	bne.n	4018e8 <__aeabi_dmul+0x19c>
  401944:	ea81 0103 	eor.w	r1, r1, r3
  401948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40194c:	f04f 0000 	mov.w	r0, #0
  401950:	bd70      	pop	{r4, r5, r6, pc}
  401952:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401956:	bf06      	itte	eq
  401958:	4610      	moveq	r0, r2
  40195a:	4619      	moveq	r1, r3
  40195c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401960:	d019      	beq.n	401996 <__aeabi_dmul+0x24a>
  401962:	ea94 0f0c 	teq	r4, ip
  401966:	d102      	bne.n	40196e <__aeabi_dmul+0x222>
  401968:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40196c:	d113      	bne.n	401996 <__aeabi_dmul+0x24a>
  40196e:	ea95 0f0c 	teq	r5, ip
  401972:	d105      	bne.n	401980 <__aeabi_dmul+0x234>
  401974:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401978:	bf1c      	itt	ne
  40197a:	4610      	movne	r0, r2
  40197c:	4619      	movne	r1, r3
  40197e:	d10a      	bne.n	401996 <__aeabi_dmul+0x24a>
  401980:	ea81 0103 	eor.w	r1, r1, r3
  401984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401988:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40198c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401990:	f04f 0000 	mov.w	r0, #0
  401994:	bd70      	pop	{r4, r5, r6, pc}
  401996:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40199a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40199e:	bd70      	pop	{r4, r5, r6, pc}

004019a0 <__aeabi_ddiv>:
  4019a0:	b570      	push	{r4, r5, r6, lr}
  4019a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4019a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4019aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4019ae:	bf1d      	ittte	ne
  4019b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4019b4:	ea94 0f0c 	teqne	r4, ip
  4019b8:	ea95 0f0c 	teqne	r5, ip
  4019bc:	f000 f8a7 	bleq	401b0e <__aeabi_ddiv+0x16e>
  4019c0:	eba4 0405 	sub.w	r4, r4, r5
  4019c4:	ea81 0e03 	eor.w	lr, r1, r3
  4019c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4019cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4019d0:	f000 8088 	beq.w	401ae4 <__aeabi_ddiv+0x144>
  4019d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4019d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4019dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4019e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4019e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4019e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4019ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4019f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4019f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4019f8:	429d      	cmp	r5, r3
  4019fa:	bf08      	it	eq
  4019fc:	4296      	cmpeq	r6, r2
  4019fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  401a02:	f504 7440 	add.w	r4, r4, #768	; 0x300
  401a06:	d202      	bcs.n	401a0e <__aeabi_ddiv+0x6e>
  401a08:	085b      	lsrs	r3, r3, #1
  401a0a:	ea4f 0232 	mov.w	r2, r2, rrx
  401a0e:	1ab6      	subs	r6, r6, r2
  401a10:	eb65 0503 	sbc.w	r5, r5, r3
  401a14:	085b      	lsrs	r3, r3, #1
  401a16:	ea4f 0232 	mov.w	r2, r2, rrx
  401a1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  401a1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  401a22:	ebb6 0e02 	subs.w	lr, r6, r2
  401a26:	eb75 0e03 	sbcs.w	lr, r5, r3
  401a2a:	bf22      	ittt	cs
  401a2c:	1ab6      	subcs	r6, r6, r2
  401a2e:	4675      	movcs	r5, lr
  401a30:	ea40 000c 	orrcs.w	r0, r0, ip
  401a34:	085b      	lsrs	r3, r3, #1
  401a36:	ea4f 0232 	mov.w	r2, r2, rrx
  401a3a:	ebb6 0e02 	subs.w	lr, r6, r2
  401a3e:	eb75 0e03 	sbcs.w	lr, r5, r3
  401a42:	bf22      	ittt	cs
  401a44:	1ab6      	subcs	r6, r6, r2
  401a46:	4675      	movcs	r5, lr
  401a48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  401a4c:	085b      	lsrs	r3, r3, #1
  401a4e:	ea4f 0232 	mov.w	r2, r2, rrx
  401a52:	ebb6 0e02 	subs.w	lr, r6, r2
  401a56:	eb75 0e03 	sbcs.w	lr, r5, r3
  401a5a:	bf22      	ittt	cs
  401a5c:	1ab6      	subcs	r6, r6, r2
  401a5e:	4675      	movcs	r5, lr
  401a60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  401a64:	085b      	lsrs	r3, r3, #1
  401a66:	ea4f 0232 	mov.w	r2, r2, rrx
  401a6a:	ebb6 0e02 	subs.w	lr, r6, r2
  401a6e:	eb75 0e03 	sbcs.w	lr, r5, r3
  401a72:	bf22      	ittt	cs
  401a74:	1ab6      	subcs	r6, r6, r2
  401a76:	4675      	movcs	r5, lr
  401a78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401a7c:	ea55 0e06 	orrs.w	lr, r5, r6
  401a80:	d018      	beq.n	401ab4 <__aeabi_ddiv+0x114>
  401a82:	ea4f 1505 	mov.w	r5, r5, lsl #4
  401a86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  401a8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401a8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  401a92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  401a96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  401a9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401a9e:	d1c0      	bne.n	401a22 <__aeabi_ddiv+0x82>
  401aa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401aa4:	d10b      	bne.n	401abe <__aeabi_ddiv+0x11e>
  401aa6:	ea41 0100 	orr.w	r1, r1, r0
  401aaa:	f04f 0000 	mov.w	r0, #0
  401aae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  401ab2:	e7b6      	b.n	401a22 <__aeabi_ddiv+0x82>
  401ab4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401ab8:	bf04      	itt	eq
  401aba:	4301      	orreq	r1, r0
  401abc:	2000      	moveq	r0, #0
  401abe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401ac2:	bf88      	it	hi
  401ac4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401ac8:	f63f aeaf 	bhi.w	40182a <__aeabi_dmul+0xde>
  401acc:	ebb5 0c03 	subs.w	ip, r5, r3
  401ad0:	bf04      	itt	eq
  401ad2:	ebb6 0c02 	subseq.w	ip, r6, r2
  401ad6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401ada:	f150 0000 	adcs.w	r0, r0, #0
  401ade:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401ae2:	bd70      	pop	{r4, r5, r6, pc}
  401ae4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401ae8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401aec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  401af0:	bfc2      	ittt	gt
  401af2:	ebd4 050c 	rsbsgt	r5, r4, ip
  401af6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401afa:	bd70      	popgt	{r4, r5, r6, pc}
  401afc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401b00:	f04f 0e00 	mov.w	lr, #0
  401b04:	3c01      	subs	r4, #1
  401b06:	e690      	b.n	40182a <__aeabi_dmul+0xde>
  401b08:	ea45 0e06 	orr.w	lr, r5, r6
  401b0c:	e68d      	b.n	40182a <__aeabi_dmul+0xde>
  401b0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401b12:	ea94 0f0c 	teq	r4, ip
  401b16:	bf08      	it	eq
  401b18:	ea95 0f0c 	teqeq	r5, ip
  401b1c:	f43f af3b 	beq.w	401996 <__aeabi_dmul+0x24a>
  401b20:	ea94 0f0c 	teq	r4, ip
  401b24:	d10a      	bne.n	401b3c <__aeabi_ddiv+0x19c>
  401b26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401b2a:	f47f af34 	bne.w	401996 <__aeabi_dmul+0x24a>
  401b2e:	ea95 0f0c 	teq	r5, ip
  401b32:	f47f af25 	bne.w	401980 <__aeabi_dmul+0x234>
  401b36:	4610      	mov	r0, r2
  401b38:	4619      	mov	r1, r3
  401b3a:	e72c      	b.n	401996 <__aeabi_dmul+0x24a>
  401b3c:	ea95 0f0c 	teq	r5, ip
  401b40:	d106      	bne.n	401b50 <__aeabi_ddiv+0x1b0>
  401b42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401b46:	f43f aefd 	beq.w	401944 <__aeabi_dmul+0x1f8>
  401b4a:	4610      	mov	r0, r2
  401b4c:	4619      	mov	r1, r3
  401b4e:	e722      	b.n	401996 <__aeabi_dmul+0x24a>
  401b50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401b54:	bf18      	it	ne
  401b56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401b5a:	f47f aec5 	bne.w	4018e8 <__aeabi_dmul+0x19c>
  401b5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  401b62:	f47f af0d 	bne.w	401980 <__aeabi_dmul+0x234>
  401b66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  401b6a:	f47f aeeb 	bne.w	401944 <__aeabi_dmul+0x1f8>
  401b6e:	e712      	b.n	401996 <__aeabi_dmul+0x24a>

00401b70 <__aeabi_d2iz>:
  401b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
  401b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  401b78:	d215      	bcs.n	401ba6 <__aeabi_d2iz+0x36>
  401b7a:	d511      	bpl.n	401ba0 <__aeabi_d2iz+0x30>
  401b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  401b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  401b84:	d912      	bls.n	401bac <__aeabi_d2iz+0x3c>
  401b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  401b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  401b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  401b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401b96:	fa23 f002 	lsr.w	r0, r3, r2
  401b9a:	bf18      	it	ne
  401b9c:	4240      	negne	r0, r0
  401b9e:	4770      	bx	lr
  401ba0:	f04f 0000 	mov.w	r0, #0
  401ba4:	4770      	bx	lr
  401ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  401baa:	d105      	bne.n	401bb8 <__aeabi_d2iz+0x48>
  401bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  401bb0:	bf08      	it	eq
  401bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  401bb6:	4770      	bx	lr
  401bb8:	f04f 0000 	mov.w	r0, #0
  401bbc:	4770      	bx	lr
  401bbe:	bf00      	nop

00401bc0 <__libc_init_array>:
  401bc0:	b570      	push	{r4, r5, r6, lr}
  401bc2:	4e0f      	ldr	r6, [pc, #60]	; (401c00 <__libc_init_array+0x40>)
  401bc4:	4d0f      	ldr	r5, [pc, #60]	; (401c04 <__libc_init_array+0x44>)
  401bc6:	1b76      	subs	r6, r6, r5
  401bc8:	10b6      	asrs	r6, r6, #2
  401bca:	bf18      	it	ne
  401bcc:	2400      	movne	r4, #0
  401bce:	d005      	beq.n	401bdc <__libc_init_array+0x1c>
  401bd0:	3401      	adds	r4, #1
  401bd2:	f855 3b04 	ldr.w	r3, [r5], #4
  401bd6:	4798      	blx	r3
  401bd8:	42a6      	cmp	r6, r4
  401bda:	d1f9      	bne.n	401bd0 <__libc_init_array+0x10>
  401bdc:	4e0a      	ldr	r6, [pc, #40]	; (401c08 <__libc_init_array+0x48>)
  401bde:	4d0b      	ldr	r5, [pc, #44]	; (401c0c <__libc_init_array+0x4c>)
  401be0:	1b76      	subs	r6, r6, r5
  401be2:	f003 f865 	bl	404cb0 <_init>
  401be6:	10b6      	asrs	r6, r6, #2
  401be8:	bf18      	it	ne
  401bea:	2400      	movne	r4, #0
  401bec:	d006      	beq.n	401bfc <__libc_init_array+0x3c>
  401bee:	3401      	adds	r4, #1
  401bf0:	f855 3b04 	ldr.w	r3, [r5], #4
  401bf4:	4798      	blx	r3
  401bf6:	42a6      	cmp	r6, r4
  401bf8:	d1f9      	bne.n	401bee <__libc_init_array+0x2e>
  401bfa:	bd70      	pop	{r4, r5, r6, pc}
  401bfc:	bd70      	pop	{r4, r5, r6, pc}
  401bfe:	bf00      	nop
  401c00:	00404cbc 	.word	0x00404cbc
  401c04:	00404cbc 	.word	0x00404cbc
  401c08:	00404cc4 	.word	0x00404cc4
  401c0c:	00404cbc 	.word	0x00404cbc

00401c10 <iprintf>:
  401c10:	b40f      	push	{r0, r1, r2, r3}
  401c12:	b500      	push	{lr}
  401c14:	4907      	ldr	r1, [pc, #28]	; (401c34 <iprintf+0x24>)
  401c16:	b083      	sub	sp, #12
  401c18:	ab04      	add	r3, sp, #16
  401c1a:	6808      	ldr	r0, [r1, #0]
  401c1c:	f853 2b04 	ldr.w	r2, [r3], #4
  401c20:	6881      	ldr	r1, [r0, #8]
  401c22:	9301      	str	r3, [sp, #4]
  401c24:	f000 f9fa 	bl	40201c <_vfiprintf_r>
  401c28:	b003      	add	sp, #12
  401c2a:	f85d eb04 	ldr.w	lr, [sp], #4
  401c2e:	b004      	add	sp, #16
  401c30:	4770      	bx	lr
  401c32:	bf00      	nop
  401c34:	20000024 	.word	0x20000024

00401c38 <memset>:
  401c38:	b470      	push	{r4, r5, r6}
  401c3a:	0786      	lsls	r6, r0, #30
  401c3c:	d046      	beq.n	401ccc <memset+0x94>
  401c3e:	1e54      	subs	r4, r2, #1
  401c40:	2a00      	cmp	r2, #0
  401c42:	d041      	beq.n	401cc8 <memset+0x90>
  401c44:	b2ca      	uxtb	r2, r1
  401c46:	4603      	mov	r3, r0
  401c48:	e002      	b.n	401c50 <memset+0x18>
  401c4a:	f114 34ff 	adds.w	r4, r4, #4294967295
  401c4e:	d33b      	bcc.n	401cc8 <memset+0x90>
  401c50:	f803 2b01 	strb.w	r2, [r3], #1
  401c54:	079d      	lsls	r5, r3, #30
  401c56:	d1f8      	bne.n	401c4a <memset+0x12>
  401c58:	2c03      	cmp	r4, #3
  401c5a:	d92e      	bls.n	401cba <memset+0x82>
  401c5c:	b2cd      	uxtb	r5, r1
  401c5e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401c62:	2c0f      	cmp	r4, #15
  401c64:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401c68:	d919      	bls.n	401c9e <memset+0x66>
  401c6a:	f103 0210 	add.w	r2, r3, #16
  401c6e:	4626      	mov	r6, r4
  401c70:	3e10      	subs	r6, #16
  401c72:	2e0f      	cmp	r6, #15
  401c74:	f842 5c10 	str.w	r5, [r2, #-16]
  401c78:	f842 5c0c 	str.w	r5, [r2, #-12]
  401c7c:	f842 5c08 	str.w	r5, [r2, #-8]
  401c80:	f842 5c04 	str.w	r5, [r2, #-4]
  401c84:	f102 0210 	add.w	r2, r2, #16
  401c88:	d8f2      	bhi.n	401c70 <memset+0x38>
  401c8a:	f1a4 0210 	sub.w	r2, r4, #16
  401c8e:	f022 020f 	bic.w	r2, r2, #15
  401c92:	f004 040f 	and.w	r4, r4, #15
  401c96:	3210      	adds	r2, #16
  401c98:	2c03      	cmp	r4, #3
  401c9a:	4413      	add	r3, r2
  401c9c:	d90d      	bls.n	401cba <memset+0x82>
  401c9e:	461e      	mov	r6, r3
  401ca0:	4622      	mov	r2, r4
  401ca2:	3a04      	subs	r2, #4
  401ca4:	2a03      	cmp	r2, #3
  401ca6:	f846 5b04 	str.w	r5, [r6], #4
  401caa:	d8fa      	bhi.n	401ca2 <memset+0x6a>
  401cac:	1f22      	subs	r2, r4, #4
  401cae:	f022 0203 	bic.w	r2, r2, #3
  401cb2:	3204      	adds	r2, #4
  401cb4:	4413      	add	r3, r2
  401cb6:	f004 0403 	and.w	r4, r4, #3
  401cba:	b12c      	cbz	r4, 401cc8 <memset+0x90>
  401cbc:	b2c9      	uxtb	r1, r1
  401cbe:	441c      	add	r4, r3
  401cc0:	f803 1b01 	strb.w	r1, [r3], #1
  401cc4:	429c      	cmp	r4, r3
  401cc6:	d1fb      	bne.n	401cc0 <memset+0x88>
  401cc8:	bc70      	pop	{r4, r5, r6}
  401cca:	4770      	bx	lr
  401ccc:	4614      	mov	r4, r2
  401cce:	4603      	mov	r3, r0
  401cd0:	e7c2      	b.n	401c58 <memset+0x20>
  401cd2:	bf00      	nop

00401cd4 <_puts_r>:
  401cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  401cd6:	4605      	mov	r5, r0
  401cd8:	b089      	sub	sp, #36	; 0x24
  401cda:	4608      	mov	r0, r1
  401cdc:	460c      	mov	r4, r1
  401cde:	f000 f8ef 	bl	401ec0 <strlen>
  401ce2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401ce4:	4f14      	ldr	r7, [pc, #80]	; (401d38 <_puts_r+0x64>)
  401ce6:	9404      	str	r4, [sp, #16]
  401ce8:	2601      	movs	r6, #1
  401cea:	1c44      	adds	r4, r0, #1
  401cec:	a904      	add	r1, sp, #16
  401cee:	2202      	movs	r2, #2
  401cf0:	9403      	str	r4, [sp, #12]
  401cf2:	9005      	str	r0, [sp, #20]
  401cf4:	68ac      	ldr	r4, [r5, #8]
  401cf6:	9706      	str	r7, [sp, #24]
  401cf8:	9607      	str	r6, [sp, #28]
  401cfa:	9101      	str	r1, [sp, #4]
  401cfc:	9202      	str	r2, [sp, #8]
  401cfe:	b1b3      	cbz	r3, 401d2e <_puts_r+0x5a>
  401d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401d04:	049a      	lsls	r2, r3, #18
  401d06:	d406      	bmi.n	401d16 <_puts_r+0x42>
  401d08:	6e62      	ldr	r2, [r4, #100]	; 0x64
  401d0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401d12:	81a3      	strh	r3, [r4, #12]
  401d14:	6662      	str	r2, [r4, #100]	; 0x64
  401d16:	4621      	mov	r1, r4
  401d18:	4628      	mov	r0, r5
  401d1a:	aa01      	add	r2, sp, #4
  401d1c:	f001 fb18 	bl	403350 <__sfvwrite_r>
  401d20:	2800      	cmp	r0, #0
  401d22:	bf14      	ite	ne
  401d24:	f04f 30ff 	movne.w	r0, #4294967295
  401d28:	200a      	moveq	r0, #10
  401d2a:	b009      	add	sp, #36	; 0x24
  401d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401d2e:	4628      	mov	r0, r5
  401d30:	f001 f952 	bl	402fd8 <__sinit>
  401d34:	e7e4      	b.n	401d00 <_puts_r+0x2c>
  401d36:	bf00      	nop
  401d38:	00404b28 	.word	0x00404b28

00401d3c <puts>:
  401d3c:	4b02      	ldr	r3, [pc, #8]	; (401d48 <puts+0xc>)
  401d3e:	4601      	mov	r1, r0
  401d40:	6818      	ldr	r0, [r3, #0]
  401d42:	f7ff bfc7 	b.w	401cd4 <_puts_r>
  401d46:	bf00      	nop
  401d48:	20000024 	.word	0x20000024

00401d4c <setbuf>:
  401d4c:	2900      	cmp	r1, #0
  401d4e:	bf0c      	ite	eq
  401d50:	2202      	moveq	r2, #2
  401d52:	2200      	movne	r2, #0
  401d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401d58:	f000 b800 	b.w	401d5c <setvbuf>

00401d5c <setvbuf>:
  401d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401d60:	4c50      	ldr	r4, [pc, #320]	; (401ea4 <setvbuf+0x148>)
  401d62:	6825      	ldr	r5, [r4, #0]
  401d64:	b083      	sub	sp, #12
  401d66:	4604      	mov	r4, r0
  401d68:	460f      	mov	r7, r1
  401d6a:	4690      	mov	r8, r2
  401d6c:	461e      	mov	r6, r3
  401d6e:	b115      	cbz	r5, 401d76 <setvbuf+0x1a>
  401d70:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401d72:	2b00      	cmp	r3, #0
  401d74:	d077      	beq.n	401e66 <setvbuf+0x10a>
  401d76:	f1b8 0f02 	cmp.w	r8, #2
  401d7a:	d004      	beq.n	401d86 <setvbuf+0x2a>
  401d7c:	f1b8 0f01 	cmp.w	r8, #1
  401d80:	d87d      	bhi.n	401e7e <setvbuf+0x122>
  401d82:	2e00      	cmp	r6, #0
  401d84:	db7b      	blt.n	401e7e <setvbuf+0x122>
  401d86:	4621      	mov	r1, r4
  401d88:	4628      	mov	r0, r5
  401d8a:	f001 f891 	bl	402eb0 <_fflush_r>
  401d8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401d90:	b141      	cbz	r1, 401da4 <setvbuf+0x48>
  401d92:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401d96:	4299      	cmp	r1, r3
  401d98:	d002      	beq.n	401da0 <setvbuf+0x44>
  401d9a:	4628      	mov	r0, r5
  401d9c:	f001 f9f2 	bl	403184 <_free_r>
  401da0:	2300      	movs	r3, #0
  401da2:	6323      	str	r3, [r4, #48]	; 0x30
  401da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401da8:	2200      	movs	r2, #0
  401daa:	61a2      	str	r2, [r4, #24]
  401dac:	6062      	str	r2, [r4, #4]
  401dae:	061a      	lsls	r2, r3, #24
  401db0:	d452      	bmi.n	401e58 <setvbuf+0xfc>
  401db2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401db6:	f023 0303 	bic.w	r3, r3, #3
  401dba:	f1b8 0f02 	cmp.w	r8, #2
  401dbe:	81a3      	strh	r3, [r4, #12]
  401dc0:	d037      	beq.n	401e32 <setvbuf+0xd6>
  401dc2:	ab01      	add	r3, sp, #4
  401dc4:	466a      	mov	r2, sp
  401dc6:	4621      	mov	r1, r4
  401dc8:	4628      	mov	r0, r5
  401dca:	f001 fc71 	bl	4036b0 <__swhatbuf_r>
  401dce:	89a3      	ldrh	r3, [r4, #12]
  401dd0:	4318      	orrs	r0, r3
  401dd2:	81a0      	strh	r0, [r4, #12]
  401dd4:	b316      	cbz	r6, 401e1c <setvbuf+0xc0>
  401dd6:	b317      	cbz	r7, 401e1e <setvbuf+0xc2>
  401dd8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401dda:	2b00      	cmp	r3, #0
  401ddc:	d04b      	beq.n	401e76 <setvbuf+0x11a>
  401dde:	9b00      	ldr	r3, [sp, #0]
  401de0:	6027      	str	r7, [r4, #0]
  401de2:	429e      	cmp	r6, r3
  401de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401de8:	6127      	str	r7, [r4, #16]
  401dea:	bf1c      	itt	ne
  401dec:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  401df0:	81a3      	strhne	r3, [r4, #12]
  401df2:	f1b8 0f01 	cmp.w	r8, #1
  401df6:	bf04      	itt	eq
  401df8:	f043 0301 	orreq.w	r3, r3, #1
  401dfc:	81a3      	strheq	r3, [r4, #12]
  401dfe:	b29b      	uxth	r3, r3
  401e00:	f013 0008 	ands.w	r0, r3, #8
  401e04:	6166      	str	r6, [r4, #20]
  401e06:	d023      	beq.n	401e50 <setvbuf+0xf4>
  401e08:	f013 0001 	ands.w	r0, r3, #1
  401e0c:	d02f      	beq.n	401e6e <setvbuf+0x112>
  401e0e:	2000      	movs	r0, #0
  401e10:	4276      	negs	r6, r6
  401e12:	61a6      	str	r6, [r4, #24]
  401e14:	60a0      	str	r0, [r4, #8]
  401e16:	b003      	add	sp, #12
  401e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e1c:	9e00      	ldr	r6, [sp, #0]
  401e1e:	4630      	mov	r0, r6
  401e20:	f001 fcb8 	bl	403794 <malloc>
  401e24:	4607      	mov	r7, r0
  401e26:	b368      	cbz	r0, 401e84 <setvbuf+0x128>
  401e28:	89a3      	ldrh	r3, [r4, #12]
  401e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401e2e:	81a3      	strh	r3, [r4, #12]
  401e30:	e7d2      	b.n	401dd8 <setvbuf+0x7c>
  401e32:	2000      	movs	r0, #0
  401e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401e38:	f043 0302 	orr.w	r3, r3, #2
  401e3c:	2500      	movs	r5, #0
  401e3e:	2101      	movs	r1, #1
  401e40:	81a3      	strh	r3, [r4, #12]
  401e42:	60a5      	str	r5, [r4, #8]
  401e44:	6022      	str	r2, [r4, #0]
  401e46:	6122      	str	r2, [r4, #16]
  401e48:	6161      	str	r1, [r4, #20]
  401e4a:	b003      	add	sp, #12
  401e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e50:	60a0      	str	r0, [r4, #8]
  401e52:	b003      	add	sp, #12
  401e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e58:	6921      	ldr	r1, [r4, #16]
  401e5a:	4628      	mov	r0, r5
  401e5c:	f001 f992 	bl	403184 <_free_r>
  401e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e64:	e7a5      	b.n	401db2 <setvbuf+0x56>
  401e66:	4628      	mov	r0, r5
  401e68:	f001 f8b6 	bl	402fd8 <__sinit>
  401e6c:	e783      	b.n	401d76 <setvbuf+0x1a>
  401e6e:	60a6      	str	r6, [r4, #8]
  401e70:	b003      	add	sp, #12
  401e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e76:	4628      	mov	r0, r5
  401e78:	f001 f8ae 	bl	402fd8 <__sinit>
  401e7c:	e7af      	b.n	401dde <setvbuf+0x82>
  401e7e:	f04f 30ff 	mov.w	r0, #4294967295
  401e82:	e7e2      	b.n	401e4a <setvbuf+0xee>
  401e84:	f8dd 9000 	ldr.w	r9, [sp]
  401e88:	45b1      	cmp	r9, r6
  401e8a:	d006      	beq.n	401e9a <setvbuf+0x13e>
  401e8c:	4648      	mov	r0, r9
  401e8e:	f001 fc81 	bl	403794 <malloc>
  401e92:	4607      	mov	r7, r0
  401e94:	b108      	cbz	r0, 401e9a <setvbuf+0x13e>
  401e96:	464e      	mov	r6, r9
  401e98:	e7c6      	b.n	401e28 <setvbuf+0xcc>
  401e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e9e:	f04f 30ff 	mov.w	r0, #4294967295
  401ea2:	e7c7      	b.n	401e34 <setvbuf+0xd8>
  401ea4:	20000024 	.word	0x20000024
	...

00401ec0 <strlen>:
  401ec0:	f890 f000 	pld	[r0]
  401ec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401ec8:	f020 0107 	bic.w	r1, r0, #7
  401ecc:	f06f 0c00 	mvn.w	ip, #0
  401ed0:	f010 0407 	ands.w	r4, r0, #7
  401ed4:	f891 f020 	pld	[r1, #32]
  401ed8:	f040 8049 	bne.w	401f6e <strlen+0xae>
  401edc:	f04f 0400 	mov.w	r4, #0
  401ee0:	f06f 0007 	mvn.w	r0, #7
  401ee4:	e9d1 2300 	ldrd	r2, r3, [r1]
  401ee8:	f891 f040 	pld	[r1, #64]	; 0x40
  401eec:	f100 0008 	add.w	r0, r0, #8
  401ef0:	fa82 f24c 	uadd8	r2, r2, ip
  401ef4:	faa4 f28c 	sel	r2, r4, ip
  401ef8:	fa83 f34c 	uadd8	r3, r3, ip
  401efc:	faa2 f38c 	sel	r3, r2, ip
  401f00:	bb4b      	cbnz	r3, 401f56 <strlen+0x96>
  401f02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401f06:	fa82 f24c 	uadd8	r2, r2, ip
  401f0a:	f100 0008 	add.w	r0, r0, #8
  401f0e:	faa4 f28c 	sel	r2, r4, ip
  401f12:	fa83 f34c 	uadd8	r3, r3, ip
  401f16:	faa2 f38c 	sel	r3, r2, ip
  401f1a:	b9e3      	cbnz	r3, 401f56 <strlen+0x96>
  401f1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401f20:	fa82 f24c 	uadd8	r2, r2, ip
  401f24:	f100 0008 	add.w	r0, r0, #8
  401f28:	faa4 f28c 	sel	r2, r4, ip
  401f2c:	fa83 f34c 	uadd8	r3, r3, ip
  401f30:	faa2 f38c 	sel	r3, r2, ip
  401f34:	b97b      	cbnz	r3, 401f56 <strlen+0x96>
  401f36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  401f3a:	f101 0120 	add.w	r1, r1, #32
  401f3e:	fa82 f24c 	uadd8	r2, r2, ip
  401f42:	f100 0008 	add.w	r0, r0, #8
  401f46:	faa4 f28c 	sel	r2, r4, ip
  401f4a:	fa83 f34c 	uadd8	r3, r3, ip
  401f4e:	faa2 f38c 	sel	r3, r2, ip
  401f52:	2b00      	cmp	r3, #0
  401f54:	d0c6      	beq.n	401ee4 <strlen+0x24>
  401f56:	2a00      	cmp	r2, #0
  401f58:	bf04      	itt	eq
  401f5a:	3004      	addeq	r0, #4
  401f5c:	461a      	moveq	r2, r3
  401f5e:	ba12      	rev	r2, r2
  401f60:	fab2 f282 	clz	r2, r2
  401f64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401f68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401f6c:	4770      	bx	lr
  401f6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401f72:	f004 0503 	and.w	r5, r4, #3
  401f76:	f1c4 0000 	rsb	r0, r4, #0
  401f7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  401f7e:	f014 0f04 	tst.w	r4, #4
  401f82:	f891 f040 	pld	[r1, #64]	; 0x40
  401f86:	fa0c f505 	lsl.w	r5, ip, r5
  401f8a:	ea62 0205 	orn	r2, r2, r5
  401f8e:	bf1c      	itt	ne
  401f90:	ea63 0305 	ornne	r3, r3, r5
  401f94:	4662      	movne	r2, ip
  401f96:	f04f 0400 	mov.w	r4, #0
  401f9a:	e7a9      	b.n	401ef0 <strlen+0x30>

00401f9c <__sprint_r.part.0>:
  401f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fa0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401fa2:	049c      	lsls	r4, r3, #18
  401fa4:	4693      	mov	fp, r2
  401fa6:	d52f      	bpl.n	402008 <__sprint_r.part.0+0x6c>
  401fa8:	6893      	ldr	r3, [r2, #8]
  401faa:	6812      	ldr	r2, [r2, #0]
  401fac:	b353      	cbz	r3, 402004 <__sprint_r.part.0+0x68>
  401fae:	460e      	mov	r6, r1
  401fb0:	4607      	mov	r7, r0
  401fb2:	f102 0908 	add.w	r9, r2, #8
  401fb6:	e919 0420 	ldmdb	r9, {r5, sl}
  401fba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401fbe:	d017      	beq.n	401ff0 <__sprint_r.part.0+0x54>
  401fc0:	3d04      	subs	r5, #4
  401fc2:	2400      	movs	r4, #0
  401fc4:	e001      	b.n	401fca <__sprint_r.part.0+0x2e>
  401fc6:	45a0      	cmp	r8, r4
  401fc8:	d010      	beq.n	401fec <__sprint_r.part.0+0x50>
  401fca:	4632      	mov	r2, r6
  401fcc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401fd0:	4638      	mov	r0, r7
  401fd2:	f001 f875 	bl	4030c0 <_fputwc_r>
  401fd6:	1c43      	adds	r3, r0, #1
  401fd8:	f104 0401 	add.w	r4, r4, #1
  401fdc:	d1f3      	bne.n	401fc6 <__sprint_r.part.0+0x2a>
  401fde:	2300      	movs	r3, #0
  401fe0:	f8cb 3008 	str.w	r3, [fp, #8]
  401fe4:	f8cb 3004 	str.w	r3, [fp, #4]
  401fe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fec:	f8db 3008 	ldr.w	r3, [fp, #8]
  401ff0:	f02a 0a03 	bic.w	sl, sl, #3
  401ff4:	eba3 030a 	sub.w	r3, r3, sl
  401ff8:	f8cb 3008 	str.w	r3, [fp, #8]
  401ffc:	f109 0908 	add.w	r9, r9, #8
  402000:	2b00      	cmp	r3, #0
  402002:	d1d8      	bne.n	401fb6 <__sprint_r.part.0+0x1a>
  402004:	2000      	movs	r0, #0
  402006:	e7ea      	b.n	401fde <__sprint_r.part.0+0x42>
  402008:	f001 f9a2 	bl	403350 <__sfvwrite_r>
  40200c:	2300      	movs	r3, #0
  40200e:	f8cb 3008 	str.w	r3, [fp, #8]
  402012:	f8cb 3004 	str.w	r3, [fp, #4]
  402016:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40201a:	bf00      	nop

0040201c <_vfiprintf_r>:
  40201c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402020:	b0ad      	sub	sp, #180	; 0xb4
  402022:	461d      	mov	r5, r3
  402024:	9101      	str	r1, [sp, #4]
  402026:	4691      	mov	r9, r2
  402028:	9308      	str	r3, [sp, #32]
  40202a:	9006      	str	r0, [sp, #24]
  40202c:	b118      	cbz	r0, 402036 <_vfiprintf_r+0x1a>
  40202e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402030:	2b00      	cmp	r3, #0
  402032:	f000 80e0 	beq.w	4021f6 <_vfiprintf_r+0x1da>
  402036:	9c01      	ldr	r4, [sp, #4]
  402038:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  40203c:	b281      	uxth	r1, r0
  40203e:	048b      	lsls	r3, r1, #18
  402040:	d407      	bmi.n	402052 <_vfiprintf_r+0x36>
  402042:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402044:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40204c:	81a1      	strh	r1, [r4, #12]
  40204e:	6663      	str	r3, [r4, #100]	; 0x64
  402050:	b289      	uxth	r1, r1
  402052:	070f      	lsls	r7, r1, #28
  402054:	f140 80b1 	bpl.w	4021ba <_vfiprintf_r+0x19e>
  402058:	9b01      	ldr	r3, [sp, #4]
  40205a:	691b      	ldr	r3, [r3, #16]
  40205c:	2b00      	cmp	r3, #0
  40205e:	f000 80ac 	beq.w	4021ba <_vfiprintf_r+0x19e>
  402062:	f001 011a 	and.w	r1, r1, #26
  402066:	290a      	cmp	r1, #10
  402068:	f000 80b5 	beq.w	4021d6 <_vfiprintf_r+0x1ba>
  40206c:	2300      	movs	r3, #0
  40206e:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  402072:	930b      	str	r3, [sp, #44]	; 0x2c
  402074:	9311      	str	r3, [sp, #68]	; 0x44
  402076:	9310      	str	r3, [sp, #64]	; 0x40
  402078:	9304      	str	r3, [sp, #16]
  40207a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40207e:	46da      	mov	sl, fp
  402080:	f899 3000 	ldrb.w	r3, [r9]
  402084:	464c      	mov	r4, r9
  402086:	b1fb      	cbz	r3, 4020c8 <_vfiprintf_r+0xac>
  402088:	2b25      	cmp	r3, #37	; 0x25
  40208a:	d102      	bne.n	402092 <_vfiprintf_r+0x76>
  40208c:	e01c      	b.n	4020c8 <_vfiprintf_r+0xac>
  40208e:	2b25      	cmp	r3, #37	; 0x25
  402090:	d003      	beq.n	40209a <_vfiprintf_r+0x7e>
  402092:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402096:	2b00      	cmp	r3, #0
  402098:	d1f9      	bne.n	40208e <_vfiprintf_r+0x72>
  40209a:	eba4 0509 	sub.w	r5, r4, r9
  40209e:	b19d      	cbz	r5, 4020c8 <_vfiprintf_r+0xac>
  4020a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4020a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020a4:	f8ca 9000 	str.w	r9, [sl]
  4020a8:	3301      	adds	r3, #1
  4020aa:	442a      	add	r2, r5
  4020ac:	2b07      	cmp	r3, #7
  4020ae:	f8ca 5004 	str.w	r5, [sl, #4]
  4020b2:	9211      	str	r2, [sp, #68]	; 0x44
  4020b4:	9310      	str	r3, [sp, #64]	; 0x40
  4020b6:	dd7a      	ble.n	4021ae <_vfiprintf_r+0x192>
  4020b8:	2a00      	cmp	r2, #0
  4020ba:	f040 848f 	bne.w	4029dc <_vfiprintf_r+0x9c0>
  4020be:	9b04      	ldr	r3, [sp, #16]
  4020c0:	9210      	str	r2, [sp, #64]	; 0x40
  4020c2:	442b      	add	r3, r5
  4020c4:	46da      	mov	sl, fp
  4020c6:	9304      	str	r3, [sp, #16]
  4020c8:	7823      	ldrb	r3, [r4, #0]
  4020ca:	2b00      	cmp	r3, #0
  4020cc:	f000 83b1 	beq.w	402832 <_vfiprintf_r+0x816>
  4020d0:	2000      	movs	r0, #0
  4020d2:	f04f 0300 	mov.w	r3, #0
  4020d6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4020da:	f104 0901 	add.w	r9, r4, #1
  4020de:	7862      	ldrb	r2, [r4, #1]
  4020e0:	4605      	mov	r5, r0
  4020e2:	4606      	mov	r6, r0
  4020e4:	4603      	mov	r3, r0
  4020e6:	f04f 34ff 	mov.w	r4, #4294967295
  4020ea:	f109 0901 	add.w	r9, r9, #1
  4020ee:	f1a2 0120 	sub.w	r1, r2, #32
  4020f2:	2958      	cmp	r1, #88	; 0x58
  4020f4:	f200 830e 	bhi.w	402714 <_vfiprintf_r+0x6f8>
  4020f8:	e8df f011 	tbh	[pc, r1, lsl #1]
  4020fc:	030c0237 	.word	0x030c0237
  402100:	02eb030c 	.word	0x02eb030c
  402104:	030c030c 	.word	0x030c030c
  402108:	030c030c 	.word	0x030c030c
  40210c:	030c030c 	.word	0x030c030c
  402110:	02f0029e 	.word	0x02f0029e
  402114:	0082030c 	.word	0x0082030c
  402118:	030c0277 	.word	0x030c0277
  40211c:	01d401cf 	.word	0x01d401cf
  402120:	01d401d4 	.word	0x01d401d4
  402124:	01d401d4 	.word	0x01d401d4
  402128:	01d401d4 	.word	0x01d401d4
  40212c:	01d401d4 	.word	0x01d401d4
  402130:	030c030c 	.word	0x030c030c
  402134:	030c030c 	.word	0x030c030c
  402138:	030c030c 	.word	0x030c030c
  40213c:	030c030c 	.word	0x030c030c
  402140:	030c030c 	.word	0x030c030c
  402144:	030c023f 	.word	0x030c023f
  402148:	030c030c 	.word	0x030c030c
  40214c:	030c030c 	.word	0x030c030c
  402150:	030c030c 	.word	0x030c030c
  402154:	030c030c 	.word	0x030c030c
  402158:	0246030c 	.word	0x0246030c
  40215c:	030c030c 	.word	0x030c030c
  402160:	030c030c 	.word	0x030c030c
  402164:	024a030c 	.word	0x024a030c
  402168:	030c030c 	.word	0x030c030c
  40216c:	030c0252 	.word	0x030c0252
  402170:	030c030c 	.word	0x030c030c
  402174:	030c030c 	.word	0x030c030c
  402178:	030c030c 	.word	0x030c030c
  40217c:	030c030c 	.word	0x030c030c
  402180:	01e2030c 	.word	0x01e2030c
  402184:	030c01f6 	.word	0x030c01f6
  402188:	030c030c 	.word	0x030c030c
  40218c:	01f60307 	.word	0x01f60307
  402190:	030c030c 	.word	0x030c030c
  402194:	030c0291 	.word	0x030c0291
  402198:	008702f5 	.word	0x008702f5
  40219c:	02c302b1 	.word	0x02c302b1
  4021a0:	02c8030c 	.word	0x02c8030c
  4021a4:	01bd030c 	.word	0x01bd030c
  4021a8:	030c030c 	.word	0x030c030c
  4021ac:	02aa      	.short	0x02aa
  4021ae:	f10a 0a08 	add.w	sl, sl, #8
  4021b2:	9b04      	ldr	r3, [sp, #16]
  4021b4:	442b      	add	r3, r5
  4021b6:	9304      	str	r3, [sp, #16]
  4021b8:	e786      	b.n	4020c8 <_vfiprintf_r+0xac>
  4021ba:	9c01      	ldr	r4, [sp, #4]
  4021bc:	9806      	ldr	r0, [sp, #24]
  4021be:	4621      	mov	r1, r4
  4021c0:	f000 fd62 	bl	402c88 <__swsetup_r>
  4021c4:	2800      	cmp	r0, #0
  4021c6:	f040 8340 	bne.w	40284a <_vfiprintf_r+0x82e>
  4021ca:	89a1      	ldrh	r1, [r4, #12]
  4021cc:	f001 011a 	and.w	r1, r1, #26
  4021d0:	290a      	cmp	r1, #10
  4021d2:	f47f af4b 	bne.w	40206c <_vfiprintf_r+0x50>
  4021d6:	9901      	ldr	r1, [sp, #4]
  4021d8:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4021dc:	2b00      	cmp	r3, #0
  4021de:	f6ff af45 	blt.w	40206c <_vfiprintf_r+0x50>
  4021e2:	462b      	mov	r3, r5
  4021e4:	464a      	mov	r2, r9
  4021e6:	9806      	ldr	r0, [sp, #24]
  4021e8:	f000 fd18 	bl	402c1c <__sbprintf>
  4021ec:	9004      	str	r0, [sp, #16]
  4021ee:	9804      	ldr	r0, [sp, #16]
  4021f0:	b02d      	add	sp, #180	; 0xb4
  4021f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021f6:	f000 feef 	bl	402fd8 <__sinit>
  4021fa:	e71c      	b.n	402036 <_vfiprintf_r+0x1a>
  4021fc:	4276      	negs	r6, r6
  4021fe:	9208      	str	r2, [sp, #32]
  402200:	f043 0304 	orr.w	r3, r3, #4
  402204:	f899 2000 	ldrb.w	r2, [r9]
  402208:	e76f      	b.n	4020ea <_vfiprintf_r+0xce>
  40220a:	9607      	str	r6, [sp, #28]
  40220c:	f013 0220 	ands.w	r2, r3, #32
  402210:	f040 845a 	bne.w	402ac8 <_vfiprintf_r+0xaac>
  402214:	f013 0110 	ands.w	r1, r3, #16
  402218:	f040 83f1 	bne.w	4029fe <_vfiprintf_r+0x9e2>
  40221c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  402220:	f000 83ed 	beq.w	4029fe <_vfiprintf_r+0x9e2>
  402224:	9808      	ldr	r0, [sp, #32]
  402226:	460a      	mov	r2, r1
  402228:	4601      	mov	r1, r0
  40222a:	3104      	adds	r1, #4
  40222c:	8806      	ldrh	r6, [r0, #0]
  40222e:	9108      	str	r1, [sp, #32]
  402230:	2700      	movs	r7, #0
  402232:	f04f 0100 	mov.w	r1, #0
  402236:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40223a:	2500      	movs	r5, #0
  40223c:	1c61      	adds	r1, r4, #1
  40223e:	f000 8175 	beq.w	40252c <_vfiprintf_r+0x510>
  402242:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402246:	9103      	str	r1, [sp, #12]
  402248:	ea56 0107 	orrs.w	r1, r6, r7
  40224c:	f040 8173 	bne.w	402536 <_vfiprintf_r+0x51a>
  402250:	2c00      	cmp	r4, #0
  402252:	f040 8356 	bne.w	402902 <_vfiprintf_r+0x8e6>
  402256:	2a00      	cmp	r2, #0
  402258:	f040 83b2 	bne.w	4029c0 <_vfiprintf_r+0x9a4>
  40225c:	f013 0301 	ands.w	r3, r3, #1
  402260:	9305      	str	r3, [sp, #20]
  402262:	f000 8447 	beq.w	402af4 <_vfiprintf_r+0xad8>
  402266:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  40226a:	2330      	movs	r3, #48	; 0x30
  40226c:	f808 3d41 	strb.w	r3, [r8, #-65]!
  402270:	9b05      	ldr	r3, [sp, #20]
  402272:	42a3      	cmp	r3, r4
  402274:	bfb8      	it	lt
  402276:	4623      	movlt	r3, r4
  402278:	9302      	str	r3, [sp, #8]
  40227a:	b10d      	cbz	r5, 402280 <_vfiprintf_r+0x264>
  40227c:	3301      	adds	r3, #1
  40227e:	9302      	str	r3, [sp, #8]
  402280:	9b03      	ldr	r3, [sp, #12]
  402282:	f013 0302 	ands.w	r3, r3, #2
  402286:	9309      	str	r3, [sp, #36]	; 0x24
  402288:	d002      	beq.n	402290 <_vfiprintf_r+0x274>
  40228a:	9b02      	ldr	r3, [sp, #8]
  40228c:	3302      	adds	r3, #2
  40228e:	9302      	str	r3, [sp, #8]
  402290:	9b03      	ldr	r3, [sp, #12]
  402292:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402296:	930a      	str	r3, [sp, #40]	; 0x28
  402298:	f040 8263 	bne.w	402762 <_vfiprintf_r+0x746>
  40229c:	9b07      	ldr	r3, [sp, #28]
  40229e:	9a02      	ldr	r2, [sp, #8]
  4022a0:	1a9d      	subs	r5, r3, r2
  4022a2:	2d00      	cmp	r5, #0
  4022a4:	f340 825d 	ble.w	402762 <_vfiprintf_r+0x746>
  4022a8:	2d10      	cmp	r5, #16
  4022aa:	f340 8477 	ble.w	402b9c <_vfiprintf_r+0xb80>
  4022ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4022b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022b2:	4eb9      	ldr	r6, [pc, #740]	; (402598 <_vfiprintf_r+0x57c>)
  4022b4:	46d6      	mov	lr, sl
  4022b6:	2710      	movs	r7, #16
  4022b8:	46a2      	mov	sl, r4
  4022ba:	4619      	mov	r1, r3
  4022bc:	9c06      	ldr	r4, [sp, #24]
  4022be:	e007      	b.n	4022d0 <_vfiprintf_r+0x2b4>
  4022c0:	f101 0c02 	add.w	ip, r1, #2
  4022c4:	f10e 0e08 	add.w	lr, lr, #8
  4022c8:	4601      	mov	r1, r0
  4022ca:	3d10      	subs	r5, #16
  4022cc:	2d10      	cmp	r5, #16
  4022ce:	dd11      	ble.n	4022f4 <_vfiprintf_r+0x2d8>
  4022d0:	1c48      	adds	r0, r1, #1
  4022d2:	3210      	adds	r2, #16
  4022d4:	2807      	cmp	r0, #7
  4022d6:	9211      	str	r2, [sp, #68]	; 0x44
  4022d8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4022dc:	9010      	str	r0, [sp, #64]	; 0x40
  4022de:	ddef      	ble.n	4022c0 <_vfiprintf_r+0x2a4>
  4022e0:	2a00      	cmp	r2, #0
  4022e2:	f040 8231 	bne.w	402748 <_vfiprintf_r+0x72c>
  4022e6:	3d10      	subs	r5, #16
  4022e8:	2d10      	cmp	r5, #16
  4022ea:	4611      	mov	r1, r2
  4022ec:	f04f 0c01 	mov.w	ip, #1
  4022f0:	46de      	mov	lr, fp
  4022f2:	dced      	bgt.n	4022d0 <_vfiprintf_r+0x2b4>
  4022f4:	4654      	mov	r4, sl
  4022f6:	4661      	mov	r1, ip
  4022f8:	46f2      	mov	sl, lr
  4022fa:	442a      	add	r2, r5
  4022fc:	2907      	cmp	r1, #7
  4022fe:	9211      	str	r2, [sp, #68]	; 0x44
  402300:	f8ca 6000 	str.w	r6, [sl]
  402304:	f8ca 5004 	str.w	r5, [sl, #4]
  402308:	9110      	str	r1, [sp, #64]	; 0x40
  40230a:	f300 82e6 	bgt.w	4028da <_vfiprintf_r+0x8be>
  40230e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402312:	f10a 0a08 	add.w	sl, sl, #8
  402316:	1c48      	adds	r0, r1, #1
  402318:	2d00      	cmp	r5, #0
  40231a:	f040 822a 	bne.w	402772 <_vfiprintf_r+0x756>
  40231e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402320:	2b00      	cmp	r3, #0
  402322:	f000 8244 	beq.w	4027ae <_vfiprintf_r+0x792>
  402326:	3202      	adds	r2, #2
  402328:	a90e      	add	r1, sp, #56	; 0x38
  40232a:	2302      	movs	r3, #2
  40232c:	2807      	cmp	r0, #7
  40232e:	9211      	str	r2, [sp, #68]	; 0x44
  402330:	9010      	str	r0, [sp, #64]	; 0x40
  402332:	e88a 000a 	stmia.w	sl, {r1, r3}
  402336:	f340 8236 	ble.w	4027a6 <_vfiprintf_r+0x78a>
  40233a:	2a00      	cmp	r2, #0
  40233c:	f040 838b 	bne.w	402a56 <_vfiprintf_r+0xa3a>
  402340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402342:	2b80      	cmp	r3, #128	; 0x80
  402344:	f04f 0001 	mov.w	r0, #1
  402348:	4611      	mov	r1, r2
  40234a:	46da      	mov	sl, fp
  40234c:	f040 8233 	bne.w	4027b6 <_vfiprintf_r+0x79a>
  402350:	9b07      	ldr	r3, [sp, #28]
  402352:	9d02      	ldr	r5, [sp, #8]
  402354:	1b5e      	subs	r6, r3, r5
  402356:	2e00      	cmp	r6, #0
  402358:	f340 822d 	ble.w	4027b6 <_vfiprintf_r+0x79a>
  40235c:	2e10      	cmp	r6, #16
  40235e:	4d8f      	ldr	r5, [pc, #572]	; (40259c <_vfiprintf_r+0x580>)
  402360:	f340 842f 	ble.w	402bc2 <_vfiprintf_r+0xba6>
  402364:	46d4      	mov	ip, sl
  402366:	2710      	movs	r7, #16
  402368:	46a2      	mov	sl, r4
  40236a:	9c06      	ldr	r4, [sp, #24]
  40236c:	e007      	b.n	40237e <_vfiprintf_r+0x362>
  40236e:	f101 0e02 	add.w	lr, r1, #2
  402372:	f10c 0c08 	add.w	ip, ip, #8
  402376:	4601      	mov	r1, r0
  402378:	3e10      	subs	r6, #16
  40237a:	2e10      	cmp	r6, #16
  40237c:	dd11      	ble.n	4023a2 <_vfiprintf_r+0x386>
  40237e:	1c48      	adds	r0, r1, #1
  402380:	3210      	adds	r2, #16
  402382:	2807      	cmp	r0, #7
  402384:	9211      	str	r2, [sp, #68]	; 0x44
  402386:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40238a:	9010      	str	r0, [sp, #64]	; 0x40
  40238c:	ddef      	ble.n	40236e <_vfiprintf_r+0x352>
  40238e:	2a00      	cmp	r2, #0
  402390:	f040 8296 	bne.w	4028c0 <_vfiprintf_r+0x8a4>
  402394:	3e10      	subs	r6, #16
  402396:	2e10      	cmp	r6, #16
  402398:	f04f 0e01 	mov.w	lr, #1
  40239c:	4611      	mov	r1, r2
  40239e:	46dc      	mov	ip, fp
  4023a0:	dced      	bgt.n	40237e <_vfiprintf_r+0x362>
  4023a2:	4654      	mov	r4, sl
  4023a4:	46e2      	mov	sl, ip
  4023a6:	4432      	add	r2, r6
  4023a8:	f1be 0f07 	cmp.w	lr, #7
  4023ac:	9211      	str	r2, [sp, #68]	; 0x44
  4023ae:	e88a 0060 	stmia.w	sl, {r5, r6}
  4023b2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4023b6:	f300 835b 	bgt.w	402a70 <_vfiprintf_r+0xa54>
  4023ba:	9b05      	ldr	r3, [sp, #20]
  4023bc:	1ae4      	subs	r4, r4, r3
  4023be:	2c00      	cmp	r4, #0
  4023c0:	f10a 0a08 	add.w	sl, sl, #8
  4023c4:	f10e 0001 	add.w	r0, lr, #1
  4023c8:	4671      	mov	r1, lr
  4023ca:	f300 81f9 	bgt.w	4027c0 <_vfiprintf_r+0x7a4>
  4023ce:	9905      	ldr	r1, [sp, #20]
  4023d0:	f8ca 8000 	str.w	r8, [sl]
  4023d4:	440a      	add	r2, r1
  4023d6:	2807      	cmp	r0, #7
  4023d8:	9211      	str	r2, [sp, #68]	; 0x44
  4023da:	f8ca 1004 	str.w	r1, [sl, #4]
  4023de:	9010      	str	r0, [sp, #64]	; 0x40
  4023e0:	f340 8255 	ble.w	40288e <_vfiprintf_r+0x872>
  4023e4:	2a00      	cmp	r2, #0
  4023e6:	f040 82ee 	bne.w	4029c6 <_vfiprintf_r+0x9aa>
  4023ea:	9b03      	ldr	r3, [sp, #12]
  4023ec:	9210      	str	r2, [sp, #64]	; 0x40
  4023ee:	0758      	lsls	r0, r3, #29
  4023f0:	d538      	bpl.n	402464 <_vfiprintf_r+0x448>
  4023f2:	9b07      	ldr	r3, [sp, #28]
  4023f4:	9902      	ldr	r1, [sp, #8]
  4023f6:	1a5c      	subs	r4, r3, r1
  4023f8:	2c00      	cmp	r4, #0
  4023fa:	f340 82ba 	ble.w	402972 <_vfiprintf_r+0x956>
  4023fe:	46da      	mov	sl, fp
  402400:	2c10      	cmp	r4, #16
  402402:	f340 83da 	ble.w	402bba <_vfiprintf_r+0xb9e>
  402406:	9910      	ldr	r1, [sp, #64]	; 0x40
  402408:	4e63      	ldr	r6, [pc, #396]	; (402598 <_vfiprintf_r+0x57c>)
  40240a:	9f06      	ldr	r7, [sp, #24]
  40240c:	f8dd 8004 	ldr.w	r8, [sp, #4]
  402410:	2510      	movs	r5, #16
  402412:	e006      	b.n	402422 <_vfiprintf_r+0x406>
  402414:	1c88      	adds	r0, r1, #2
  402416:	f10a 0a08 	add.w	sl, sl, #8
  40241a:	4619      	mov	r1, r3
  40241c:	3c10      	subs	r4, #16
  40241e:	2c10      	cmp	r4, #16
  402420:	dd13      	ble.n	40244a <_vfiprintf_r+0x42e>
  402422:	1c4b      	adds	r3, r1, #1
  402424:	3210      	adds	r2, #16
  402426:	2b07      	cmp	r3, #7
  402428:	9211      	str	r2, [sp, #68]	; 0x44
  40242a:	f8ca 6000 	str.w	r6, [sl]
  40242e:	f8ca 5004 	str.w	r5, [sl, #4]
  402432:	9310      	str	r3, [sp, #64]	; 0x40
  402434:	ddee      	ble.n	402414 <_vfiprintf_r+0x3f8>
  402436:	2a00      	cmp	r2, #0
  402438:	f040 820b 	bne.w	402852 <_vfiprintf_r+0x836>
  40243c:	3c10      	subs	r4, #16
  40243e:	2c10      	cmp	r4, #16
  402440:	f04f 0001 	mov.w	r0, #1
  402444:	4611      	mov	r1, r2
  402446:	46da      	mov	sl, fp
  402448:	dceb      	bgt.n	402422 <_vfiprintf_r+0x406>
  40244a:	4422      	add	r2, r4
  40244c:	2807      	cmp	r0, #7
  40244e:	9211      	str	r2, [sp, #68]	; 0x44
  402450:	f8ca 6000 	str.w	r6, [sl]
  402454:	f8ca 4004 	str.w	r4, [sl, #4]
  402458:	9010      	str	r0, [sp, #64]	; 0x40
  40245a:	f340 8223 	ble.w	4028a4 <_vfiprintf_r+0x888>
  40245e:	2a00      	cmp	r2, #0
  402460:	f040 8367 	bne.w	402b32 <_vfiprintf_r+0xb16>
  402464:	9b04      	ldr	r3, [sp, #16]
  402466:	9a07      	ldr	r2, [sp, #28]
  402468:	9902      	ldr	r1, [sp, #8]
  40246a:	428a      	cmp	r2, r1
  40246c:	bfac      	ite	ge
  40246e:	189b      	addge	r3, r3, r2
  402470:	185b      	addlt	r3, r3, r1
  402472:	9304      	str	r3, [sp, #16]
  402474:	e21f      	b.n	4028b6 <_vfiprintf_r+0x89a>
  402476:	9607      	str	r6, [sp, #28]
  402478:	069e      	lsls	r6, r3, #26
  40247a:	f100 8319 	bmi.w	402ab0 <_vfiprintf_r+0xa94>
  40247e:	9908      	ldr	r1, [sp, #32]
  402480:	06dd      	lsls	r5, r3, #27
  402482:	460a      	mov	r2, r1
  402484:	f100 82b5 	bmi.w	4029f2 <_vfiprintf_r+0x9d6>
  402488:	0658      	lsls	r0, r3, #25
  40248a:	f140 82b2 	bpl.w	4029f2 <_vfiprintf_r+0x9d6>
  40248e:	880e      	ldrh	r6, [r1, #0]
  402490:	3104      	adds	r1, #4
  402492:	2700      	movs	r7, #0
  402494:	2201      	movs	r2, #1
  402496:	9108      	str	r1, [sp, #32]
  402498:	e6cb      	b.n	402232 <_vfiprintf_r+0x216>
  40249a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40249e:	f899 2000 	ldrb.w	r2, [r9]
  4024a2:	e622      	b.n	4020ea <_vfiprintf_r+0xce>
  4024a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4024a8:	2600      	movs	r6, #0
  4024aa:	f819 2b01 	ldrb.w	r2, [r9], #1
  4024ae:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4024b2:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4024b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4024ba:	2909      	cmp	r1, #9
  4024bc:	d9f5      	bls.n	4024aa <_vfiprintf_r+0x48e>
  4024be:	e616      	b.n	4020ee <_vfiprintf_r+0xd2>
  4024c0:	9908      	ldr	r1, [sp, #32]
  4024c2:	9607      	str	r6, [sp, #28]
  4024c4:	680a      	ldr	r2, [r1, #0]
  4024c6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4024ca:	f04f 0000 	mov.w	r0, #0
  4024ce:	460a      	mov	r2, r1
  4024d0:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4024d4:	3204      	adds	r2, #4
  4024d6:	2001      	movs	r0, #1
  4024d8:	9002      	str	r0, [sp, #8]
  4024da:	9208      	str	r2, [sp, #32]
  4024dc:	9005      	str	r0, [sp, #20]
  4024de:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  4024e2:	9303      	str	r3, [sp, #12]
  4024e4:	2400      	movs	r4, #0
  4024e6:	e6cb      	b.n	402280 <_vfiprintf_r+0x264>
  4024e8:	9607      	str	r6, [sp, #28]
  4024ea:	2800      	cmp	r0, #0
  4024ec:	f040 8382 	bne.w	402bf4 <_vfiprintf_r+0xbd8>
  4024f0:	069e      	lsls	r6, r3, #26
  4024f2:	f100 82d1 	bmi.w	402a98 <_vfiprintf_r+0xa7c>
  4024f6:	06dd      	lsls	r5, r3, #27
  4024f8:	f100 828d 	bmi.w	402a16 <_vfiprintf_r+0x9fa>
  4024fc:	0658      	lsls	r0, r3, #25
  4024fe:	f140 828a 	bpl.w	402a16 <_vfiprintf_r+0x9fa>
  402502:	9d08      	ldr	r5, [sp, #32]
  402504:	f9b5 6000 	ldrsh.w	r6, [r5]
  402508:	462a      	mov	r2, r5
  40250a:	17f7      	asrs	r7, r6, #31
  40250c:	3204      	adds	r2, #4
  40250e:	4630      	mov	r0, r6
  402510:	4639      	mov	r1, r7
  402512:	9208      	str	r2, [sp, #32]
  402514:	2800      	cmp	r0, #0
  402516:	f171 0200 	sbcs.w	r2, r1, #0
  40251a:	f2c0 82ee 	blt.w	402afa <_vfiprintf_r+0xade>
  40251e:	1c61      	adds	r1, r4, #1
  402520:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402524:	f04f 0201 	mov.w	r2, #1
  402528:	f47f ae8b 	bne.w	402242 <_vfiprintf_r+0x226>
  40252c:	ea56 0107 	orrs.w	r1, r6, r7
  402530:	f000 81e8 	beq.w	402904 <_vfiprintf_r+0x8e8>
  402534:	9303      	str	r3, [sp, #12]
  402536:	2a01      	cmp	r2, #1
  402538:	f000 8225 	beq.w	402986 <_vfiprintf_r+0x96a>
  40253c:	2a02      	cmp	r2, #2
  40253e:	f040 81f5 	bne.w	40292c <_vfiprintf_r+0x910>
  402542:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402544:	46d8      	mov	r8, fp
  402546:	0933      	lsrs	r3, r6, #4
  402548:	f006 010f 	and.w	r1, r6, #15
  40254c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402550:	093a      	lsrs	r2, r7, #4
  402552:	461e      	mov	r6, r3
  402554:	4617      	mov	r7, r2
  402556:	5c43      	ldrb	r3, [r0, r1]
  402558:	f808 3d01 	strb.w	r3, [r8, #-1]!
  40255c:	ea56 0307 	orrs.w	r3, r6, r7
  402560:	d1f1      	bne.n	402546 <_vfiprintf_r+0x52a>
  402562:	ebab 0308 	sub.w	r3, fp, r8
  402566:	9305      	str	r3, [sp, #20]
  402568:	e682      	b.n	402270 <_vfiprintf_r+0x254>
  40256a:	f899 2000 	ldrb.w	r2, [r9]
  40256e:	2d00      	cmp	r5, #0
  402570:	f47f adbb 	bne.w	4020ea <_vfiprintf_r+0xce>
  402574:	2001      	movs	r0, #1
  402576:	2520      	movs	r5, #32
  402578:	e5b7      	b.n	4020ea <_vfiprintf_r+0xce>
  40257a:	9607      	str	r6, [sp, #28]
  40257c:	2800      	cmp	r0, #0
  40257e:	f040 8336 	bne.w	402bee <_vfiprintf_r+0xbd2>
  402582:	f043 0310 	orr.w	r3, r3, #16
  402586:	e7b3      	b.n	4024f0 <_vfiprintf_r+0x4d4>
  402588:	9607      	str	r6, [sp, #28]
  40258a:	f043 0310 	orr.w	r3, r3, #16
  40258e:	e63d      	b.n	40220c <_vfiprintf_r+0x1f0>
  402590:	9607      	str	r6, [sp, #28]
  402592:	f043 0310 	orr.w	r3, r3, #16
  402596:	e76f      	b.n	402478 <_vfiprintf_r+0x45c>
  402598:	00404b7c 	.word	0x00404b7c
  40259c:	00404b8c 	.word	0x00404b8c
  4025a0:	9607      	str	r6, [sp, #28]
  4025a2:	2800      	cmp	r0, #0
  4025a4:	f040 832c 	bne.w	402c00 <_vfiprintf_r+0xbe4>
  4025a8:	49b0      	ldr	r1, [pc, #704]	; (40286c <_vfiprintf_r+0x850>)
  4025aa:	910b      	str	r1, [sp, #44]	; 0x2c
  4025ac:	069f      	lsls	r7, r3, #26
  4025ae:	f100 8297 	bmi.w	402ae0 <_vfiprintf_r+0xac4>
  4025b2:	9808      	ldr	r0, [sp, #32]
  4025b4:	06de      	lsls	r6, r3, #27
  4025b6:	4601      	mov	r1, r0
  4025b8:	f100 8228 	bmi.w	402a0c <_vfiprintf_r+0x9f0>
  4025bc:	065d      	lsls	r5, r3, #25
  4025be:	f140 8225 	bpl.w	402a0c <_vfiprintf_r+0x9f0>
  4025c2:	3104      	adds	r1, #4
  4025c4:	8806      	ldrh	r6, [r0, #0]
  4025c6:	9108      	str	r1, [sp, #32]
  4025c8:	2700      	movs	r7, #0
  4025ca:	07d8      	lsls	r0, r3, #31
  4025cc:	f140 81d9 	bpl.w	402982 <_vfiprintf_r+0x966>
  4025d0:	ea56 0107 	orrs.w	r1, r6, r7
  4025d4:	f000 81d5 	beq.w	402982 <_vfiprintf_r+0x966>
  4025d8:	2130      	movs	r1, #48	; 0x30
  4025da:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4025de:	f043 0302 	orr.w	r3, r3, #2
  4025e2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4025e6:	2202      	movs	r2, #2
  4025e8:	e623      	b.n	402232 <_vfiprintf_r+0x216>
  4025ea:	f899 2000 	ldrb.w	r2, [r9]
  4025ee:	2a2a      	cmp	r2, #42	; 0x2a
  4025f0:	f109 0701 	add.w	r7, r9, #1
  4025f4:	f000 82f0 	beq.w	402bd8 <_vfiprintf_r+0xbbc>
  4025f8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4025fc:	2909      	cmp	r1, #9
  4025fe:	46b9      	mov	r9, r7
  402600:	f04f 0400 	mov.w	r4, #0
  402604:	f63f ad73 	bhi.w	4020ee <_vfiprintf_r+0xd2>
  402608:	f819 2b01 	ldrb.w	r2, [r9], #1
  40260c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402610:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  402614:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402618:	2909      	cmp	r1, #9
  40261a:	d9f5      	bls.n	402608 <_vfiprintf_r+0x5ec>
  40261c:	e567      	b.n	4020ee <_vfiprintf_r+0xd2>
  40261e:	f899 2000 	ldrb.w	r2, [r9]
  402622:	2a6c      	cmp	r2, #108	; 0x6c
  402624:	bf03      	ittte	eq
  402626:	f899 2001 	ldrbeq.w	r2, [r9, #1]
  40262a:	f043 0320 	orreq.w	r3, r3, #32
  40262e:	f109 0901 	addeq.w	r9, r9, #1
  402632:	f043 0310 	orrne.w	r3, r3, #16
  402636:	e558      	b.n	4020ea <_vfiprintf_r+0xce>
  402638:	9908      	ldr	r1, [sp, #32]
  40263a:	680e      	ldr	r6, [r1, #0]
  40263c:	460a      	mov	r2, r1
  40263e:	2e00      	cmp	r6, #0
  402640:	f102 0204 	add.w	r2, r2, #4
  402644:	f6ff adda 	blt.w	4021fc <_vfiprintf_r+0x1e0>
  402648:	9208      	str	r2, [sp, #32]
  40264a:	f899 2000 	ldrb.w	r2, [r9]
  40264e:	e54c      	b.n	4020ea <_vfiprintf_r+0xce>
  402650:	9607      	str	r6, [sp, #28]
  402652:	2800      	cmp	r0, #0
  402654:	f040 82da 	bne.w	402c0c <_vfiprintf_r+0xbf0>
  402658:	4985      	ldr	r1, [pc, #532]	; (402870 <_vfiprintf_r+0x854>)
  40265a:	910b      	str	r1, [sp, #44]	; 0x2c
  40265c:	e7a6      	b.n	4025ac <_vfiprintf_r+0x590>
  40265e:	9808      	ldr	r0, [sp, #32]
  402660:	4a83      	ldr	r2, [pc, #524]	; (402870 <_vfiprintf_r+0x854>)
  402662:	9607      	str	r6, [sp, #28]
  402664:	920b      	str	r2, [sp, #44]	; 0x2c
  402666:	6806      	ldr	r6, [r0, #0]
  402668:	2278      	movs	r2, #120	; 0x78
  40266a:	2130      	movs	r1, #48	; 0x30
  40266c:	3004      	adds	r0, #4
  40266e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402672:	f043 0302 	orr.w	r3, r3, #2
  402676:	9008      	str	r0, [sp, #32]
  402678:	2700      	movs	r7, #0
  40267a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40267e:	2202      	movs	r2, #2
  402680:	e5d7      	b.n	402232 <_vfiprintf_r+0x216>
  402682:	f043 0320 	orr.w	r3, r3, #32
  402686:	f899 2000 	ldrb.w	r2, [r9]
  40268a:	e52e      	b.n	4020ea <_vfiprintf_r+0xce>
  40268c:	9908      	ldr	r1, [sp, #32]
  40268e:	9607      	str	r6, [sp, #28]
  402690:	f8d1 8000 	ldr.w	r8, [r1]
  402694:	f04f 0200 	mov.w	r2, #0
  402698:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40269c:	1d0e      	adds	r6, r1, #4
  40269e:	f1b8 0f00 	cmp.w	r8, #0
  4026a2:	f000 8281 	beq.w	402ba8 <_vfiprintf_r+0xb8c>
  4026a6:	1c67      	adds	r7, r4, #1
  4026a8:	f000 8260 	beq.w	402b6c <_vfiprintf_r+0xb50>
  4026ac:	4622      	mov	r2, r4
  4026ae:	2100      	movs	r1, #0
  4026b0:	4640      	mov	r0, r8
  4026b2:	9302      	str	r3, [sp, #8]
  4026b4:	f001 fb3c 	bl	403d30 <memchr>
  4026b8:	9b02      	ldr	r3, [sp, #8]
  4026ba:	2800      	cmp	r0, #0
  4026bc:	f000 8284 	beq.w	402bc8 <_vfiprintf_r+0xbac>
  4026c0:	eba0 0208 	sub.w	r2, r0, r8
  4026c4:	9205      	str	r2, [sp, #20]
  4026c6:	9608      	str	r6, [sp, #32]
  4026c8:	9303      	str	r3, [sp, #12]
  4026ca:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4026ce:	2400      	movs	r4, #0
  4026d0:	e5ce      	b.n	402270 <_vfiprintf_r+0x254>
  4026d2:	f043 0301 	orr.w	r3, r3, #1
  4026d6:	f899 2000 	ldrb.w	r2, [r9]
  4026da:	e506      	b.n	4020ea <_vfiprintf_r+0xce>
  4026dc:	f899 2000 	ldrb.w	r2, [r9]
  4026e0:	2001      	movs	r0, #1
  4026e2:	252b      	movs	r5, #43	; 0x2b
  4026e4:	e501      	b.n	4020ea <_vfiprintf_r+0xce>
  4026e6:	2800      	cmp	r0, #0
  4026e8:	f040 8287 	bne.w	402bfa <_vfiprintf_r+0xbde>
  4026ec:	0699      	lsls	r1, r3, #26
  4026ee:	f100 8231 	bmi.w	402b54 <_vfiprintf_r+0xb38>
  4026f2:	06da      	lsls	r2, r3, #27
  4026f4:	d421      	bmi.n	40273a <_vfiprintf_r+0x71e>
  4026f6:	065b      	lsls	r3, r3, #25
  4026f8:	d51f      	bpl.n	40273a <_vfiprintf_r+0x71e>
  4026fa:	9a08      	ldr	r2, [sp, #32]
  4026fc:	6813      	ldr	r3, [r2, #0]
  4026fe:	3204      	adds	r2, #4
  402700:	9208      	str	r2, [sp, #32]
  402702:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  402706:	801a      	strh	r2, [r3, #0]
  402708:	e4ba      	b.n	402080 <_vfiprintf_r+0x64>
  40270a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40270e:	f899 2000 	ldrb.w	r2, [r9]
  402712:	e4ea      	b.n	4020ea <_vfiprintf_r+0xce>
  402714:	9607      	str	r6, [sp, #28]
  402716:	2800      	cmp	r0, #0
  402718:	f040 8275 	bne.w	402c06 <_vfiprintf_r+0xbea>
  40271c:	2a00      	cmp	r2, #0
  40271e:	f000 8088 	beq.w	402832 <_vfiprintf_r+0x816>
  402722:	2101      	movs	r1, #1
  402724:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402728:	f04f 0200 	mov.w	r2, #0
  40272c:	9102      	str	r1, [sp, #8]
  40272e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402732:	9105      	str	r1, [sp, #20]
  402734:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  402738:	e6d3      	b.n	4024e2 <_vfiprintf_r+0x4c6>
  40273a:	9a08      	ldr	r2, [sp, #32]
  40273c:	6813      	ldr	r3, [r2, #0]
  40273e:	3204      	adds	r2, #4
  402740:	9208      	str	r2, [sp, #32]
  402742:	9a04      	ldr	r2, [sp, #16]
  402744:	601a      	str	r2, [r3, #0]
  402746:	e49b      	b.n	402080 <_vfiprintf_r+0x64>
  402748:	aa0f      	add	r2, sp, #60	; 0x3c
  40274a:	9901      	ldr	r1, [sp, #4]
  40274c:	4620      	mov	r0, r4
  40274e:	f7ff fc25 	bl	401f9c <__sprint_r.part.0>
  402752:	2800      	cmp	r0, #0
  402754:	d174      	bne.n	402840 <_vfiprintf_r+0x824>
  402756:	9910      	ldr	r1, [sp, #64]	; 0x40
  402758:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40275a:	f101 0c01 	add.w	ip, r1, #1
  40275e:	46de      	mov	lr, fp
  402760:	e5b3      	b.n	4022ca <_vfiprintf_r+0x2ae>
  402762:	9910      	ldr	r1, [sp, #64]	; 0x40
  402764:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402766:	1c48      	adds	r0, r1, #1
  402768:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40276c:	2d00      	cmp	r5, #0
  40276e:	f43f add6 	beq.w	40231e <_vfiprintf_r+0x302>
  402772:	3201      	adds	r2, #1
  402774:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402778:	2101      	movs	r1, #1
  40277a:	2807      	cmp	r0, #7
  40277c:	9211      	str	r2, [sp, #68]	; 0x44
  40277e:	9010      	str	r0, [sp, #64]	; 0x40
  402780:	f8ca 5000 	str.w	r5, [sl]
  402784:	f8ca 1004 	str.w	r1, [sl, #4]
  402788:	f340 80b6 	ble.w	4028f8 <_vfiprintf_r+0x8dc>
  40278c:	2a00      	cmp	r2, #0
  40278e:	f040 8155 	bne.w	402a3c <_vfiprintf_r+0xa20>
  402792:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402794:	2b00      	cmp	r3, #0
  402796:	f43f add3 	beq.w	402340 <_vfiprintf_r+0x324>
  40279a:	ab0e      	add	r3, sp, #56	; 0x38
  40279c:	2202      	movs	r2, #2
  40279e:	4608      	mov	r0, r1
  4027a0:	931c      	str	r3, [sp, #112]	; 0x70
  4027a2:	921d      	str	r2, [sp, #116]	; 0x74
  4027a4:	46da      	mov	sl, fp
  4027a6:	4601      	mov	r1, r0
  4027a8:	f10a 0a08 	add.w	sl, sl, #8
  4027ac:	3001      	adds	r0, #1
  4027ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4027b0:	2b80      	cmp	r3, #128	; 0x80
  4027b2:	f43f adcd 	beq.w	402350 <_vfiprintf_r+0x334>
  4027b6:	9b05      	ldr	r3, [sp, #20]
  4027b8:	1ae4      	subs	r4, r4, r3
  4027ba:	2c00      	cmp	r4, #0
  4027bc:	f77f ae07 	ble.w	4023ce <_vfiprintf_r+0x3b2>
  4027c0:	2c10      	cmp	r4, #16
  4027c2:	4d2c      	ldr	r5, [pc, #176]	; (402874 <_vfiprintf_r+0x858>)
  4027c4:	dd1d      	ble.n	402802 <_vfiprintf_r+0x7e6>
  4027c6:	46d6      	mov	lr, sl
  4027c8:	2610      	movs	r6, #16
  4027ca:	9f06      	ldr	r7, [sp, #24]
  4027cc:	f8dd a004 	ldr.w	sl, [sp, #4]
  4027d0:	e006      	b.n	4027e0 <_vfiprintf_r+0x7c4>
  4027d2:	1c88      	adds	r0, r1, #2
  4027d4:	f10e 0e08 	add.w	lr, lr, #8
  4027d8:	4619      	mov	r1, r3
  4027da:	3c10      	subs	r4, #16
  4027dc:	2c10      	cmp	r4, #16
  4027de:	dd0f      	ble.n	402800 <_vfiprintf_r+0x7e4>
  4027e0:	1c4b      	adds	r3, r1, #1
  4027e2:	3210      	adds	r2, #16
  4027e4:	2b07      	cmp	r3, #7
  4027e6:	9211      	str	r2, [sp, #68]	; 0x44
  4027e8:	e88e 0060 	stmia.w	lr, {r5, r6}
  4027ec:	9310      	str	r3, [sp, #64]	; 0x40
  4027ee:	ddf0      	ble.n	4027d2 <_vfiprintf_r+0x7b6>
  4027f0:	b9a2      	cbnz	r2, 40281c <_vfiprintf_r+0x800>
  4027f2:	3c10      	subs	r4, #16
  4027f4:	2c10      	cmp	r4, #16
  4027f6:	f04f 0001 	mov.w	r0, #1
  4027fa:	4611      	mov	r1, r2
  4027fc:	46de      	mov	lr, fp
  4027fe:	dcef      	bgt.n	4027e0 <_vfiprintf_r+0x7c4>
  402800:	46f2      	mov	sl, lr
  402802:	4422      	add	r2, r4
  402804:	2807      	cmp	r0, #7
  402806:	9211      	str	r2, [sp, #68]	; 0x44
  402808:	f8ca 5000 	str.w	r5, [sl]
  40280c:	f8ca 4004 	str.w	r4, [sl, #4]
  402810:	9010      	str	r0, [sp, #64]	; 0x40
  402812:	dc31      	bgt.n	402878 <_vfiprintf_r+0x85c>
  402814:	f10a 0a08 	add.w	sl, sl, #8
  402818:	3001      	adds	r0, #1
  40281a:	e5d8      	b.n	4023ce <_vfiprintf_r+0x3b2>
  40281c:	aa0f      	add	r2, sp, #60	; 0x3c
  40281e:	4651      	mov	r1, sl
  402820:	4638      	mov	r0, r7
  402822:	f7ff fbbb 	bl	401f9c <__sprint_r.part.0>
  402826:	b958      	cbnz	r0, 402840 <_vfiprintf_r+0x824>
  402828:	9910      	ldr	r1, [sp, #64]	; 0x40
  40282a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40282c:	1c48      	adds	r0, r1, #1
  40282e:	46de      	mov	lr, fp
  402830:	e7d3      	b.n	4027da <_vfiprintf_r+0x7be>
  402832:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402834:	b123      	cbz	r3, 402840 <_vfiprintf_r+0x824>
  402836:	9806      	ldr	r0, [sp, #24]
  402838:	9901      	ldr	r1, [sp, #4]
  40283a:	aa0f      	add	r2, sp, #60	; 0x3c
  40283c:	f7ff fbae 	bl	401f9c <__sprint_r.part.0>
  402840:	9b01      	ldr	r3, [sp, #4]
  402842:	899b      	ldrh	r3, [r3, #12]
  402844:	065b      	lsls	r3, r3, #25
  402846:	f57f acd2 	bpl.w	4021ee <_vfiprintf_r+0x1d2>
  40284a:	f04f 33ff 	mov.w	r3, #4294967295
  40284e:	9304      	str	r3, [sp, #16]
  402850:	e4cd      	b.n	4021ee <_vfiprintf_r+0x1d2>
  402852:	aa0f      	add	r2, sp, #60	; 0x3c
  402854:	4641      	mov	r1, r8
  402856:	4638      	mov	r0, r7
  402858:	f7ff fba0 	bl	401f9c <__sprint_r.part.0>
  40285c:	2800      	cmp	r0, #0
  40285e:	d1ef      	bne.n	402840 <_vfiprintf_r+0x824>
  402860:	9910      	ldr	r1, [sp, #64]	; 0x40
  402862:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402864:	1c48      	adds	r0, r1, #1
  402866:	46da      	mov	sl, fp
  402868:	e5d8      	b.n	40241c <_vfiprintf_r+0x400>
  40286a:	bf00      	nop
  40286c:	00404b4c 	.word	0x00404b4c
  402870:	00404b60 	.word	0x00404b60
  402874:	00404b8c 	.word	0x00404b8c
  402878:	2a00      	cmp	r2, #0
  40287a:	f040 8100 	bne.w	402a7e <_vfiprintf_r+0xa62>
  40287e:	9a05      	ldr	r2, [sp, #20]
  402880:	921d      	str	r2, [sp, #116]	; 0x74
  402882:	2301      	movs	r3, #1
  402884:	9211      	str	r2, [sp, #68]	; 0x44
  402886:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  40288a:	9310      	str	r3, [sp, #64]	; 0x40
  40288c:	46da      	mov	sl, fp
  40288e:	f10a 0a08 	add.w	sl, sl, #8
  402892:	9b03      	ldr	r3, [sp, #12]
  402894:	0759      	lsls	r1, r3, #29
  402896:	d505      	bpl.n	4028a4 <_vfiprintf_r+0x888>
  402898:	9b07      	ldr	r3, [sp, #28]
  40289a:	9902      	ldr	r1, [sp, #8]
  40289c:	1a5c      	subs	r4, r3, r1
  40289e:	2c00      	cmp	r4, #0
  4028a0:	f73f adae 	bgt.w	402400 <_vfiprintf_r+0x3e4>
  4028a4:	9b04      	ldr	r3, [sp, #16]
  4028a6:	9907      	ldr	r1, [sp, #28]
  4028a8:	9802      	ldr	r0, [sp, #8]
  4028aa:	4281      	cmp	r1, r0
  4028ac:	bfac      	ite	ge
  4028ae:	185b      	addge	r3, r3, r1
  4028b0:	181b      	addlt	r3, r3, r0
  4028b2:	9304      	str	r3, [sp, #16]
  4028b4:	bb7a      	cbnz	r2, 402916 <_vfiprintf_r+0x8fa>
  4028b6:	2300      	movs	r3, #0
  4028b8:	9310      	str	r3, [sp, #64]	; 0x40
  4028ba:	46da      	mov	sl, fp
  4028bc:	f7ff bbe0 	b.w	402080 <_vfiprintf_r+0x64>
  4028c0:	aa0f      	add	r2, sp, #60	; 0x3c
  4028c2:	9901      	ldr	r1, [sp, #4]
  4028c4:	4620      	mov	r0, r4
  4028c6:	f7ff fb69 	bl	401f9c <__sprint_r.part.0>
  4028ca:	2800      	cmp	r0, #0
  4028cc:	d1b8      	bne.n	402840 <_vfiprintf_r+0x824>
  4028ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4028d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4028d2:	f101 0e01 	add.w	lr, r1, #1
  4028d6:	46dc      	mov	ip, fp
  4028d8:	e54e      	b.n	402378 <_vfiprintf_r+0x35c>
  4028da:	2a00      	cmp	r2, #0
  4028dc:	f040 811c 	bne.w	402b18 <_vfiprintf_r+0xafc>
  4028e0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4028e4:	2900      	cmp	r1, #0
  4028e6:	f000 8111 	beq.w	402b0c <_vfiprintf_r+0xaf0>
  4028ea:	2201      	movs	r2, #1
  4028ec:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4028f0:	4610      	mov	r0, r2
  4028f2:	921d      	str	r2, [sp, #116]	; 0x74
  4028f4:	911c      	str	r1, [sp, #112]	; 0x70
  4028f6:	46da      	mov	sl, fp
  4028f8:	4601      	mov	r1, r0
  4028fa:	f10a 0a08 	add.w	sl, sl, #8
  4028fe:	3001      	adds	r0, #1
  402900:	e50d      	b.n	40231e <_vfiprintf_r+0x302>
  402902:	9b03      	ldr	r3, [sp, #12]
  402904:	2a01      	cmp	r2, #1
  402906:	f000 8090 	beq.w	402a2a <_vfiprintf_r+0xa0e>
  40290a:	2a02      	cmp	r2, #2
  40290c:	d10b      	bne.n	402926 <_vfiprintf_r+0x90a>
  40290e:	9303      	str	r3, [sp, #12]
  402910:	2600      	movs	r6, #0
  402912:	2700      	movs	r7, #0
  402914:	e615      	b.n	402542 <_vfiprintf_r+0x526>
  402916:	aa0f      	add	r2, sp, #60	; 0x3c
  402918:	9901      	ldr	r1, [sp, #4]
  40291a:	9806      	ldr	r0, [sp, #24]
  40291c:	f7ff fb3e 	bl	401f9c <__sprint_r.part.0>
  402920:	2800      	cmp	r0, #0
  402922:	d0c8      	beq.n	4028b6 <_vfiprintf_r+0x89a>
  402924:	e78c      	b.n	402840 <_vfiprintf_r+0x824>
  402926:	9303      	str	r3, [sp, #12]
  402928:	2600      	movs	r6, #0
  40292a:	2700      	movs	r7, #0
  40292c:	4659      	mov	r1, fp
  40292e:	e000      	b.n	402932 <_vfiprintf_r+0x916>
  402930:	4641      	mov	r1, r8
  402932:	08f2      	lsrs	r2, r6, #3
  402934:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402938:	08f8      	lsrs	r0, r7, #3
  40293a:	f006 0307 	and.w	r3, r6, #7
  40293e:	4607      	mov	r7, r0
  402940:	4616      	mov	r6, r2
  402942:	3330      	adds	r3, #48	; 0x30
  402944:	ea56 0207 	orrs.w	r2, r6, r7
  402948:	f801 3c01 	strb.w	r3, [r1, #-1]
  40294c:	f101 38ff 	add.w	r8, r1, #4294967295
  402950:	d1ee      	bne.n	402930 <_vfiprintf_r+0x914>
  402952:	9a03      	ldr	r2, [sp, #12]
  402954:	07d6      	lsls	r6, r2, #31
  402956:	f57f ae04 	bpl.w	402562 <_vfiprintf_r+0x546>
  40295a:	2b30      	cmp	r3, #48	; 0x30
  40295c:	f43f ae01 	beq.w	402562 <_vfiprintf_r+0x546>
  402960:	3902      	subs	r1, #2
  402962:	2330      	movs	r3, #48	; 0x30
  402964:	f808 3c01 	strb.w	r3, [r8, #-1]
  402968:	ebab 0301 	sub.w	r3, fp, r1
  40296c:	9305      	str	r3, [sp, #20]
  40296e:	4688      	mov	r8, r1
  402970:	e47e      	b.n	402270 <_vfiprintf_r+0x254>
  402972:	9b04      	ldr	r3, [sp, #16]
  402974:	9a07      	ldr	r2, [sp, #28]
  402976:	428a      	cmp	r2, r1
  402978:	bfac      	ite	ge
  40297a:	189b      	addge	r3, r3, r2
  40297c:	185b      	addlt	r3, r3, r1
  40297e:	9304      	str	r3, [sp, #16]
  402980:	e799      	b.n	4028b6 <_vfiprintf_r+0x89a>
  402982:	2202      	movs	r2, #2
  402984:	e455      	b.n	402232 <_vfiprintf_r+0x216>
  402986:	2f00      	cmp	r7, #0
  402988:	bf08      	it	eq
  40298a:	2e0a      	cmpeq	r6, #10
  40298c:	d34c      	bcc.n	402a28 <_vfiprintf_r+0xa0c>
  40298e:	46d8      	mov	r8, fp
  402990:	4630      	mov	r0, r6
  402992:	4639      	mov	r1, r7
  402994:	220a      	movs	r2, #10
  402996:	2300      	movs	r3, #0
  402998:	f001 feb4 	bl	404704 <__aeabi_uldivmod>
  40299c:	3230      	adds	r2, #48	; 0x30
  40299e:	f808 2d01 	strb.w	r2, [r8, #-1]!
  4029a2:	4630      	mov	r0, r6
  4029a4:	4639      	mov	r1, r7
  4029a6:	2300      	movs	r3, #0
  4029a8:	220a      	movs	r2, #10
  4029aa:	f001 feab 	bl	404704 <__aeabi_uldivmod>
  4029ae:	4606      	mov	r6, r0
  4029b0:	460f      	mov	r7, r1
  4029b2:	ea56 0307 	orrs.w	r3, r6, r7
  4029b6:	d1eb      	bne.n	402990 <_vfiprintf_r+0x974>
  4029b8:	ebab 0308 	sub.w	r3, fp, r8
  4029bc:	9305      	str	r3, [sp, #20]
  4029be:	e457      	b.n	402270 <_vfiprintf_r+0x254>
  4029c0:	9405      	str	r4, [sp, #20]
  4029c2:	46d8      	mov	r8, fp
  4029c4:	e454      	b.n	402270 <_vfiprintf_r+0x254>
  4029c6:	aa0f      	add	r2, sp, #60	; 0x3c
  4029c8:	9901      	ldr	r1, [sp, #4]
  4029ca:	9806      	ldr	r0, [sp, #24]
  4029cc:	f7ff fae6 	bl	401f9c <__sprint_r.part.0>
  4029d0:	2800      	cmp	r0, #0
  4029d2:	f47f af35 	bne.w	402840 <_vfiprintf_r+0x824>
  4029d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4029d8:	46da      	mov	sl, fp
  4029da:	e75a      	b.n	402892 <_vfiprintf_r+0x876>
  4029dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4029de:	9901      	ldr	r1, [sp, #4]
  4029e0:	9806      	ldr	r0, [sp, #24]
  4029e2:	f7ff fadb 	bl	401f9c <__sprint_r.part.0>
  4029e6:	2800      	cmp	r0, #0
  4029e8:	f47f af2a 	bne.w	402840 <_vfiprintf_r+0x824>
  4029ec:	46da      	mov	sl, fp
  4029ee:	f7ff bbe0 	b.w	4021b2 <_vfiprintf_r+0x196>
  4029f2:	3104      	adds	r1, #4
  4029f4:	6816      	ldr	r6, [r2, #0]
  4029f6:	9108      	str	r1, [sp, #32]
  4029f8:	2201      	movs	r2, #1
  4029fa:	2700      	movs	r7, #0
  4029fc:	e419      	b.n	402232 <_vfiprintf_r+0x216>
  4029fe:	9808      	ldr	r0, [sp, #32]
  402a00:	4601      	mov	r1, r0
  402a02:	3104      	adds	r1, #4
  402a04:	6806      	ldr	r6, [r0, #0]
  402a06:	9108      	str	r1, [sp, #32]
  402a08:	2700      	movs	r7, #0
  402a0a:	e412      	b.n	402232 <_vfiprintf_r+0x216>
  402a0c:	680e      	ldr	r6, [r1, #0]
  402a0e:	3104      	adds	r1, #4
  402a10:	9108      	str	r1, [sp, #32]
  402a12:	2700      	movs	r7, #0
  402a14:	e5d9      	b.n	4025ca <_vfiprintf_r+0x5ae>
  402a16:	9908      	ldr	r1, [sp, #32]
  402a18:	680e      	ldr	r6, [r1, #0]
  402a1a:	460a      	mov	r2, r1
  402a1c:	17f7      	asrs	r7, r6, #31
  402a1e:	3204      	adds	r2, #4
  402a20:	9208      	str	r2, [sp, #32]
  402a22:	4630      	mov	r0, r6
  402a24:	4639      	mov	r1, r7
  402a26:	e575      	b.n	402514 <_vfiprintf_r+0x4f8>
  402a28:	9b03      	ldr	r3, [sp, #12]
  402a2a:	9303      	str	r3, [sp, #12]
  402a2c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  402a30:	3630      	adds	r6, #48	; 0x30
  402a32:	2301      	movs	r3, #1
  402a34:	f808 6d41 	strb.w	r6, [r8, #-65]!
  402a38:	9305      	str	r3, [sp, #20]
  402a3a:	e419      	b.n	402270 <_vfiprintf_r+0x254>
  402a3c:	aa0f      	add	r2, sp, #60	; 0x3c
  402a3e:	9901      	ldr	r1, [sp, #4]
  402a40:	9806      	ldr	r0, [sp, #24]
  402a42:	f7ff faab 	bl	401f9c <__sprint_r.part.0>
  402a46:	2800      	cmp	r0, #0
  402a48:	f47f aefa 	bne.w	402840 <_vfiprintf_r+0x824>
  402a4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a50:	1c48      	adds	r0, r1, #1
  402a52:	46da      	mov	sl, fp
  402a54:	e463      	b.n	40231e <_vfiprintf_r+0x302>
  402a56:	aa0f      	add	r2, sp, #60	; 0x3c
  402a58:	9901      	ldr	r1, [sp, #4]
  402a5a:	9806      	ldr	r0, [sp, #24]
  402a5c:	f7ff fa9e 	bl	401f9c <__sprint_r.part.0>
  402a60:	2800      	cmp	r0, #0
  402a62:	f47f aeed 	bne.w	402840 <_vfiprintf_r+0x824>
  402a66:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a68:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a6a:	1c48      	adds	r0, r1, #1
  402a6c:	46da      	mov	sl, fp
  402a6e:	e69e      	b.n	4027ae <_vfiprintf_r+0x792>
  402a70:	2a00      	cmp	r2, #0
  402a72:	f040 8086 	bne.w	402b82 <_vfiprintf_r+0xb66>
  402a76:	2001      	movs	r0, #1
  402a78:	4611      	mov	r1, r2
  402a7a:	46da      	mov	sl, fp
  402a7c:	e69b      	b.n	4027b6 <_vfiprintf_r+0x79a>
  402a7e:	aa0f      	add	r2, sp, #60	; 0x3c
  402a80:	9901      	ldr	r1, [sp, #4]
  402a82:	9806      	ldr	r0, [sp, #24]
  402a84:	f7ff fa8a 	bl	401f9c <__sprint_r.part.0>
  402a88:	2800      	cmp	r0, #0
  402a8a:	f47f aed9 	bne.w	402840 <_vfiprintf_r+0x824>
  402a8e:	9810      	ldr	r0, [sp, #64]	; 0x40
  402a90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a92:	3001      	adds	r0, #1
  402a94:	46da      	mov	sl, fp
  402a96:	e49a      	b.n	4023ce <_vfiprintf_r+0x3b2>
  402a98:	9e08      	ldr	r6, [sp, #32]
  402a9a:	3607      	adds	r6, #7
  402a9c:	f026 0607 	bic.w	r6, r6, #7
  402aa0:	e9d6 0100 	ldrd	r0, r1, [r6]
  402aa4:	f106 0208 	add.w	r2, r6, #8
  402aa8:	9208      	str	r2, [sp, #32]
  402aaa:	4606      	mov	r6, r0
  402aac:	460f      	mov	r7, r1
  402aae:	e531      	b.n	402514 <_vfiprintf_r+0x4f8>
  402ab0:	9e08      	ldr	r6, [sp, #32]
  402ab2:	3607      	adds	r6, #7
  402ab4:	f026 0207 	bic.w	r2, r6, #7
  402ab8:	f102 0108 	add.w	r1, r2, #8
  402abc:	e9d2 6700 	ldrd	r6, r7, [r2]
  402ac0:	9108      	str	r1, [sp, #32]
  402ac2:	2201      	movs	r2, #1
  402ac4:	f7ff bbb5 	b.w	402232 <_vfiprintf_r+0x216>
  402ac8:	9e08      	ldr	r6, [sp, #32]
  402aca:	3607      	adds	r6, #7
  402acc:	f026 0207 	bic.w	r2, r6, #7
  402ad0:	f102 0108 	add.w	r1, r2, #8
  402ad4:	e9d2 6700 	ldrd	r6, r7, [r2]
  402ad8:	9108      	str	r1, [sp, #32]
  402ada:	2200      	movs	r2, #0
  402adc:	f7ff bba9 	b.w	402232 <_vfiprintf_r+0x216>
  402ae0:	9e08      	ldr	r6, [sp, #32]
  402ae2:	3607      	adds	r6, #7
  402ae4:	f026 0107 	bic.w	r1, r6, #7
  402ae8:	f101 0008 	add.w	r0, r1, #8
  402aec:	9008      	str	r0, [sp, #32]
  402aee:	e9d1 6700 	ldrd	r6, r7, [r1]
  402af2:	e56a      	b.n	4025ca <_vfiprintf_r+0x5ae>
  402af4:	46d8      	mov	r8, fp
  402af6:	f7ff bbbb 	b.w	402270 <_vfiprintf_r+0x254>
  402afa:	252d      	movs	r5, #45	; 0x2d
  402afc:	4276      	negs	r6, r6
  402afe:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402b02:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b06:	2201      	movs	r2, #1
  402b08:	f7ff bb98 	b.w	40223c <_vfiprintf_r+0x220>
  402b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402b0e:	b9d3      	cbnz	r3, 402b46 <_vfiprintf_r+0xb2a>
  402b10:	4611      	mov	r1, r2
  402b12:	2001      	movs	r0, #1
  402b14:	46da      	mov	sl, fp
  402b16:	e64e      	b.n	4027b6 <_vfiprintf_r+0x79a>
  402b18:	aa0f      	add	r2, sp, #60	; 0x3c
  402b1a:	9901      	ldr	r1, [sp, #4]
  402b1c:	9806      	ldr	r0, [sp, #24]
  402b1e:	f7ff fa3d 	bl	401f9c <__sprint_r.part.0>
  402b22:	2800      	cmp	r0, #0
  402b24:	f47f ae8c 	bne.w	402840 <_vfiprintf_r+0x824>
  402b28:	9910      	ldr	r1, [sp, #64]	; 0x40
  402b2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b2c:	1c48      	adds	r0, r1, #1
  402b2e:	46da      	mov	sl, fp
  402b30:	e61a      	b.n	402768 <_vfiprintf_r+0x74c>
  402b32:	aa0f      	add	r2, sp, #60	; 0x3c
  402b34:	9901      	ldr	r1, [sp, #4]
  402b36:	9806      	ldr	r0, [sp, #24]
  402b38:	f7ff fa30 	bl	401f9c <__sprint_r.part.0>
  402b3c:	2800      	cmp	r0, #0
  402b3e:	f47f ae7f 	bne.w	402840 <_vfiprintf_r+0x824>
  402b42:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b44:	e6ae      	b.n	4028a4 <_vfiprintf_r+0x888>
  402b46:	ab0e      	add	r3, sp, #56	; 0x38
  402b48:	2202      	movs	r2, #2
  402b4a:	931c      	str	r3, [sp, #112]	; 0x70
  402b4c:	921d      	str	r2, [sp, #116]	; 0x74
  402b4e:	2001      	movs	r0, #1
  402b50:	46da      	mov	sl, fp
  402b52:	e628      	b.n	4027a6 <_vfiprintf_r+0x78a>
  402b54:	9a08      	ldr	r2, [sp, #32]
  402b56:	9904      	ldr	r1, [sp, #16]
  402b58:	6813      	ldr	r3, [r2, #0]
  402b5a:	17cd      	asrs	r5, r1, #31
  402b5c:	4608      	mov	r0, r1
  402b5e:	3204      	adds	r2, #4
  402b60:	4629      	mov	r1, r5
  402b62:	9208      	str	r2, [sp, #32]
  402b64:	e9c3 0100 	strd	r0, r1, [r3]
  402b68:	f7ff ba8a 	b.w	402080 <_vfiprintf_r+0x64>
  402b6c:	4640      	mov	r0, r8
  402b6e:	9608      	str	r6, [sp, #32]
  402b70:	9303      	str	r3, [sp, #12]
  402b72:	f7ff f9a5 	bl	401ec0 <strlen>
  402b76:	2400      	movs	r4, #0
  402b78:	9005      	str	r0, [sp, #20]
  402b7a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402b7e:	f7ff bb77 	b.w	402270 <_vfiprintf_r+0x254>
  402b82:	aa0f      	add	r2, sp, #60	; 0x3c
  402b84:	9901      	ldr	r1, [sp, #4]
  402b86:	9806      	ldr	r0, [sp, #24]
  402b88:	f7ff fa08 	bl	401f9c <__sprint_r.part.0>
  402b8c:	2800      	cmp	r0, #0
  402b8e:	f47f ae57 	bne.w	402840 <_vfiprintf_r+0x824>
  402b92:	9910      	ldr	r1, [sp, #64]	; 0x40
  402b94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b96:	1c48      	adds	r0, r1, #1
  402b98:	46da      	mov	sl, fp
  402b9a:	e60c      	b.n	4027b6 <_vfiprintf_r+0x79a>
  402b9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  402b9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402ba0:	4e1c      	ldr	r6, [pc, #112]	; (402c14 <_vfiprintf_r+0xbf8>)
  402ba2:	3101      	adds	r1, #1
  402ba4:	f7ff bba9 	b.w	4022fa <_vfiprintf_r+0x2de>
  402ba8:	2c06      	cmp	r4, #6
  402baa:	bf28      	it	cs
  402bac:	2406      	movcs	r4, #6
  402bae:	9405      	str	r4, [sp, #20]
  402bb0:	9608      	str	r6, [sp, #32]
  402bb2:	9402      	str	r4, [sp, #8]
  402bb4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 402c18 <_vfiprintf_r+0xbfc>
  402bb8:	e493      	b.n	4024e2 <_vfiprintf_r+0x4c6>
  402bba:	9810      	ldr	r0, [sp, #64]	; 0x40
  402bbc:	4e15      	ldr	r6, [pc, #84]	; (402c14 <_vfiprintf_r+0xbf8>)
  402bbe:	3001      	adds	r0, #1
  402bc0:	e443      	b.n	40244a <_vfiprintf_r+0x42e>
  402bc2:	4686      	mov	lr, r0
  402bc4:	f7ff bbef 	b.w	4023a6 <_vfiprintf_r+0x38a>
  402bc8:	9405      	str	r4, [sp, #20]
  402bca:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402bce:	9608      	str	r6, [sp, #32]
  402bd0:	9303      	str	r3, [sp, #12]
  402bd2:	4604      	mov	r4, r0
  402bd4:	f7ff bb4c 	b.w	402270 <_vfiprintf_r+0x254>
  402bd8:	9908      	ldr	r1, [sp, #32]
  402bda:	f899 2001 	ldrb.w	r2, [r9, #1]
  402bde:	680c      	ldr	r4, [r1, #0]
  402be0:	3104      	adds	r1, #4
  402be2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402be6:	46b9      	mov	r9, r7
  402be8:	9108      	str	r1, [sp, #32]
  402bea:	f7ff ba7e 	b.w	4020ea <_vfiprintf_r+0xce>
  402bee:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402bf2:	e4c6      	b.n	402582 <_vfiprintf_r+0x566>
  402bf4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402bf8:	e47a      	b.n	4024f0 <_vfiprintf_r+0x4d4>
  402bfa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402bfe:	e575      	b.n	4026ec <_vfiprintf_r+0x6d0>
  402c00:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402c04:	e4d0      	b.n	4025a8 <_vfiprintf_r+0x58c>
  402c06:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402c0a:	e587      	b.n	40271c <_vfiprintf_r+0x700>
  402c0c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402c10:	e522      	b.n	402658 <_vfiprintf_r+0x63c>
  402c12:	bf00      	nop
  402c14:	00404b7c 	.word	0x00404b7c
  402c18:	00404b74 	.word	0x00404b74

00402c1c <__sbprintf>:
  402c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  402c1e:	460c      	mov	r4, r1
  402c20:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  402c24:	8989      	ldrh	r1, [r1, #12]
  402c26:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402c28:	89e5      	ldrh	r5, [r4, #14]
  402c2a:	9619      	str	r6, [sp, #100]	; 0x64
  402c2c:	f021 0102 	bic.w	r1, r1, #2
  402c30:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402c32:	f8ad 500e 	strh.w	r5, [sp, #14]
  402c36:	2500      	movs	r5, #0
  402c38:	69e7      	ldr	r7, [r4, #28]
  402c3a:	f8ad 100c 	strh.w	r1, [sp, #12]
  402c3e:	9609      	str	r6, [sp, #36]	; 0x24
  402c40:	9506      	str	r5, [sp, #24]
  402c42:	ae1a      	add	r6, sp, #104	; 0x68
  402c44:	f44f 6580 	mov.w	r5, #1024	; 0x400
  402c48:	4669      	mov	r1, sp
  402c4a:	9600      	str	r6, [sp, #0]
  402c4c:	9604      	str	r6, [sp, #16]
  402c4e:	9502      	str	r5, [sp, #8]
  402c50:	9505      	str	r5, [sp, #20]
  402c52:	9707      	str	r7, [sp, #28]
  402c54:	4606      	mov	r6, r0
  402c56:	f7ff f9e1 	bl	40201c <_vfiprintf_r>
  402c5a:	1e05      	subs	r5, r0, #0
  402c5c:	db07      	blt.n	402c6e <__sbprintf+0x52>
  402c5e:	4630      	mov	r0, r6
  402c60:	4669      	mov	r1, sp
  402c62:	f000 f925 	bl	402eb0 <_fflush_r>
  402c66:	2800      	cmp	r0, #0
  402c68:	bf18      	it	ne
  402c6a:	f04f 35ff 	movne.w	r5, #4294967295
  402c6e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402c72:	065b      	lsls	r3, r3, #25
  402c74:	d503      	bpl.n	402c7e <__sbprintf+0x62>
  402c76:	89a3      	ldrh	r3, [r4, #12]
  402c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c7c:	81a3      	strh	r3, [r4, #12]
  402c7e:	4628      	mov	r0, r5
  402c80:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  402c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c86:	bf00      	nop

00402c88 <__swsetup_r>:
  402c88:	b538      	push	{r3, r4, r5, lr}
  402c8a:	4b30      	ldr	r3, [pc, #192]	; (402d4c <__swsetup_r+0xc4>)
  402c8c:	681b      	ldr	r3, [r3, #0]
  402c8e:	4605      	mov	r5, r0
  402c90:	460c      	mov	r4, r1
  402c92:	b113      	cbz	r3, 402c9a <__swsetup_r+0x12>
  402c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402c96:	2a00      	cmp	r2, #0
  402c98:	d038      	beq.n	402d0c <__swsetup_r+0x84>
  402c9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402c9e:	b293      	uxth	r3, r2
  402ca0:	0718      	lsls	r0, r3, #28
  402ca2:	d50c      	bpl.n	402cbe <__swsetup_r+0x36>
  402ca4:	6920      	ldr	r0, [r4, #16]
  402ca6:	b1a8      	cbz	r0, 402cd4 <__swsetup_r+0x4c>
  402ca8:	f013 0201 	ands.w	r2, r3, #1
  402cac:	d01e      	beq.n	402cec <__swsetup_r+0x64>
  402cae:	6963      	ldr	r3, [r4, #20]
  402cb0:	2200      	movs	r2, #0
  402cb2:	425b      	negs	r3, r3
  402cb4:	61a3      	str	r3, [r4, #24]
  402cb6:	60a2      	str	r2, [r4, #8]
  402cb8:	b1f0      	cbz	r0, 402cf8 <__swsetup_r+0x70>
  402cba:	2000      	movs	r0, #0
  402cbc:	bd38      	pop	{r3, r4, r5, pc}
  402cbe:	06d9      	lsls	r1, r3, #27
  402cc0:	d53c      	bpl.n	402d3c <__swsetup_r+0xb4>
  402cc2:	0758      	lsls	r0, r3, #29
  402cc4:	d426      	bmi.n	402d14 <__swsetup_r+0x8c>
  402cc6:	6920      	ldr	r0, [r4, #16]
  402cc8:	f042 0308 	orr.w	r3, r2, #8
  402ccc:	81a3      	strh	r3, [r4, #12]
  402cce:	b29b      	uxth	r3, r3
  402cd0:	2800      	cmp	r0, #0
  402cd2:	d1e9      	bne.n	402ca8 <__swsetup_r+0x20>
  402cd4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402cd8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402cdc:	d0e4      	beq.n	402ca8 <__swsetup_r+0x20>
  402cde:	4628      	mov	r0, r5
  402ce0:	4621      	mov	r1, r4
  402ce2:	f000 fd13 	bl	40370c <__smakebuf_r>
  402ce6:	89a3      	ldrh	r3, [r4, #12]
  402ce8:	6920      	ldr	r0, [r4, #16]
  402cea:	e7dd      	b.n	402ca8 <__swsetup_r+0x20>
  402cec:	0799      	lsls	r1, r3, #30
  402cee:	bf58      	it	pl
  402cf0:	6962      	ldrpl	r2, [r4, #20]
  402cf2:	60a2      	str	r2, [r4, #8]
  402cf4:	2800      	cmp	r0, #0
  402cf6:	d1e0      	bne.n	402cba <__swsetup_r+0x32>
  402cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402cfc:	061a      	lsls	r2, r3, #24
  402cfe:	d5dd      	bpl.n	402cbc <__swsetup_r+0x34>
  402d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402d04:	81a3      	strh	r3, [r4, #12]
  402d06:	f04f 30ff 	mov.w	r0, #4294967295
  402d0a:	bd38      	pop	{r3, r4, r5, pc}
  402d0c:	4618      	mov	r0, r3
  402d0e:	f000 f963 	bl	402fd8 <__sinit>
  402d12:	e7c2      	b.n	402c9a <__swsetup_r+0x12>
  402d14:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402d16:	b151      	cbz	r1, 402d2e <__swsetup_r+0xa6>
  402d18:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402d1c:	4299      	cmp	r1, r3
  402d1e:	d004      	beq.n	402d2a <__swsetup_r+0xa2>
  402d20:	4628      	mov	r0, r5
  402d22:	f000 fa2f 	bl	403184 <_free_r>
  402d26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402d2a:	2300      	movs	r3, #0
  402d2c:	6323      	str	r3, [r4, #48]	; 0x30
  402d2e:	2300      	movs	r3, #0
  402d30:	6920      	ldr	r0, [r4, #16]
  402d32:	6063      	str	r3, [r4, #4]
  402d34:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402d38:	6020      	str	r0, [r4, #0]
  402d3a:	e7c5      	b.n	402cc8 <__swsetup_r+0x40>
  402d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402d40:	2309      	movs	r3, #9
  402d42:	602b      	str	r3, [r5, #0]
  402d44:	f04f 30ff 	mov.w	r0, #4294967295
  402d48:	81a2      	strh	r2, [r4, #12]
  402d4a:	bd38      	pop	{r3, r4, r5, pc}
  402d4c:	20000024 	.word	0x20000024

00402d50 <register_fini>:
  402d50:	4b02      	ldr	r3, [pc, #8]	; (402d5c <register_fini+0xc>)
  402d52:	b113      	cbz	r3, 402d5a <register_fini+0xa>
  402d54:	4802      	ldr	r0, [pc, #8]	; (402d60 <register_fini+0x10>)
  402d56:	f000 b805 	b.w	402d64 <atexit>
  402d5a:	4770      	bx	lr
  402d5c:	00000000 	.word	0x00000000
  402d60:	00402fed 	.word	0x00402fed

00402d64 <atexit>:
  402d64:	2300      	movs	r3, #0
  402d66:	4601      	mov	r1, r0
  402d68:	461a      	mov	r2, r3
  402d6a:	4618      	mov	r0, r3
  402d6c:	f001 bbd4 	b.w	404518 <__register_exitproc>

00402d70 <__sflush_r>:
  402d70:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402d74:	b29a      	uxth	r2, r3
  402d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402d7a:	460d      	mov	r5, r1
  402d7c:	0711      	lsls	r1, r2, #28
  402d7e:	4680      	mov	r8, r0
  402d80:	d43a      	bmi.n	402df8 <__sflush_r+0x88>
  402d82:	686a      	ldr	r2, [r5, #4]
  402d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402d88:	2a00      	cmp	r2, #0
  402d8a:	81ab      	strh	r3, [r5, #12]
  402d8c:	dd6f      	ble.n	402e6e <__sflush_r+0xfe>
  402d8e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402d90:	2c00      	cmp	r4, #0
  402d92:	d049      	beq.n	402e28 <__sflush_r+0xb8>
  402d94:	2200      	movs	r2, #0
  402d96:	b29b      	uxth	r3, r3
  402d98:	f8d8 6000 	ldr.w	r6, [r8]
  402d9c:	f8c8 2000 	str.w	r2, [r8]
  402da0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402da4:	d067      	beq.n	402e76 <__sflush_r+0x106>
  402da6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402da8:	075f      	lsls	r7, r3, #29
  402daa:	d505      	bpl.n	402db8 <__sflush_r+0x48>
  402dac:	6869      	ldr	r1, [r5, #4]
  402dae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402db0:	1a52      	subs	r2, r2, r1
  402db2:	b10b      	cbz	r3, 402db8 <__sflush_r+0x48>
  402db4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402db6:	1ad2      	subs	r2, r2, r3
  402db8:	2300      	movs	r3, #0
  402dba:	69e9      	ldr	r1, [r5, #28]
  402dbc:	4640      	mov	r0, r8
  402dbe:	47a0      	blx	r4
  402dc0:	1c44      	adds	r4, r0, #1
  402dc2:	d03c      	beq.n	402e3e <__sflush_r+0xce>
  402dc4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402dc8:	692a      	ldr	r2, [r5, #16]
  402dca:	602a      	str	r2, [r5, #0]
  402dcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402dd0:	2200      	movs	r2, #0
  402dd2:	81ab      	strh	r3, [r5, #12]
  402dd4:	04db      	lsls	r3, r3, #19
  402dd6:	606a      	str	r2, [r5, #4]
  402dd8:	d447      	bmi.n	402e6a <__sflush_r+0xfa>
  402dda:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402ddc:	f8c8 6000 	str.w	r6, [r8]
  402de0:	b311      	cbz	r1, 402e28 <__sflush_r+0xb8>
  402de2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402de6:	4299      	cmp	r1, r3
  402de8:	d002      	beq.n	402df0 <__sflush_r+0x80>
  402dea:	4640      	mov	r0, r8
  402dec:	f000 f9ca 	bl	403184 <_free_r>
  402df0:	2000      	movs	r0, #0
  402df2:	6328      	str	r0, [r5, #48]	; 0x30
  402df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402df8:	692e      	ldr	r6, [r5, #16]
  402dfa:	b1ae      	cbz	r6, 402e28 <__sflush_r+0xb8>
  402dfc:	682c      	ldr	r4, [r5, #0]
  402dfe:	602e      	str	r6, [r5, #0]
  402e00:	0791      	lsls	r1, r2, #30
  402e02:	bf0c      	ite	eq
  402e04:	696b      	ldreq	r3, [r5, #20]
  402e06:	2300      	movne	r3, #0
  402e08:	1ba4      	subs	r4, r4, r6
  402e0a:	60ab      	str	r3, [r5, #8]
  402e0c:	e00a      	b.n	402e24 <__sflush_r+0xb4>
  402e0e:	4623      	mov	r3, r4
  402e10:	4632      	mov	r2, r6
  402e12:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402e14:	69e9      	ldr	r1, [r5, #28]
  402e16:	4640      	mov	r0, r8
  402e18:	47b8      	blx	r7
  402e1a:	2800      	cmp	r0, #0
  402e1c:	eba4 0400 	sub.w	r4, r4, r0
  402e20:	4406      	add	r6, r0
  402e22:	dd04      	ble.n	402e2e <__sflush_r+0xbe>
  402e24:	2c00      	cmp	r4, #0
  402e26:	dcf2      	bgt.n	402e0e <__sflush_r+0x9e>
  402e28:	2000      	movs	r0, #0
  402e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e2e:	89ab      	ldrh	r3, [r5, #12]
  402e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402e34:	81ab      	strh	r3, [r5, #12]
  402e36:	f04f 30ff 	mov.w	r0, #4294967295
  402e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e3e:	f8d8 4000 	ldr.w	r4, [r8]
  402e42:	2c1d      	cmp	r4, #29
  402e44:	d8f3      	bhi.n	402e2e <__sflush_r+0xbe>
  402e46:	4b19      	ldr	r3, [pc, #100]	; (402eac <__sflush_r+0x13c>)
  402e48:	40e3      	lsrs	r3, r4
  402e4a:	43db      	mvns	r3, r3
  402e4c:	f013 0301 	ands.w	r3, r3, #1
  402e50:	d1ed      	bne.n	402e2e <__sflush_r+0xbe>
  402e52:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402e56:	606b      	str	r3, [r5, #4]
  402e58:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402e5c:	6929      	ldr	r1, [r5, #16]
  402e5e:	81ab      	strh	r3, [r5, #12]
  402e60:	04da      	lsls	r2, r3, #19
  402e62:	6029      	str	r1, [r5, #0]
  402e64:	d5b9      	bpl.n	402dda <__sflush_r+0x6a>
  402e66:	2c00      	cmp	r4, #0
  402e68:	d1b7      	bne.n	402dda <__sflush_r+0x6a>
  402e6a:	6528      	str	r0, [r5, #80]	; 0x50
  402e6c:	e7b5      	b.n	402dda <__sflush_r+0x6a>
  402e6e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402e70:	2a00      	cmp	r2, #0
  402e72:	dc8c      	bgt.n	402d8e <__sflush_r+0x1e>
  402e74:	e7d8      	b.n	402e28 <__sflush_r+0xb8>
  402e76:	2301      	movs	r3, #1
  402e78:	69e9      	ldr	r1, [r5, #28]
  402e7a:	4640      	mov	r0, r8
  402e7c:	47a0      	blx	r4
  402e7e:	1c43      	adds	r3, r0, #1
  402e80:	4602      	mov	r2, r0
  402e82:	d002      	beq.n	402e8a <__sflush_r+0x11a>
  402e84:	89ab      	ldrh	r3, [r5, #12]
  402e86:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402e88:	e78e      	b.n	402da8 <__sflush_r+0x38>
  402e8a:	f8d8 3000 	ldr.w	r3, [r8]
  402e8e:	2b00      	cmp	r3, #0
  402e90:	d0f8      	beq.n	402e84 <__sflush_r+0x114>
  402e92:	2b1d      	cmp	r3, #29
  402e94:	d001      	beq.n	402e9a <__sflush_r+0x12a>
  402e96:	2b16      	cmp	r3, #22
  402e98:	d102      	bne.n	402ea0 <__sflush_r+0x130>
  402e9a:	f8c8 6000 	str.w	r6, [r8]
  402e9e:	e7c3      	b.n	402e28 <__sflush_r+0xb8>
  402ea0:	89ab      	ldrh	r3, [r5, #12]
  402ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402ea6:	81ab      	strh	r3, [r5, #12]
  402ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402eac:	20400001 	.word	0x20400001

00402eb0 <_fflush_r>:
  402eb0:	b510      	push	{r4, lr}
  402eb2:	4604      	mov	r4, r0
  402eb4:	b082      	sub	sp, #8
  402eb6:	b108      	cbz	r0, 402ebc <_fflush_r+0xc>
  402eb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402eba:	b153      	cbz	r3, 402ed2 <_fflush_r+0x22>
  402ebc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  402ec0:	b908      	cbnz	r0, 402ec6 <_fflush_r+0x16>
  402ec2:	b002      	add	sp, #8
  402ec4:	bd10      	pop	{r4, pc}
  402ec6:	4620      	mov	r0, r4
  402ec8:	b002      	add	sp, #8
  402eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402ece:	f7ff bf4f 	b.w	402d70 <__sflush_r>
  402ed2:	9101      	str	r1, [sp, #4]
  402ed4:	f000 f880 	bl	402fd8 <__sinit>
  402ed8:	9901      	ldr	r1, [sp, #4]
  402eda:	e7ef      	b.n	402ebc <_fflush_r+0xc>

00402edc <_cleanup_r>:
  402edc:	4901      	ldr	r1, [pc, #4]	; (402ee4 <_cleanup_r+0x8>)
  402ede:	f000 bbaf 	b.w	403640 <_fwalk_reent>
  402ee2:	bf00      	nop
  402ee4:	004045e1 	.word	0x004045e1

00402ee8 <__sinit.part.1>:
  402ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402eec:	4b35      	ldr	r3, [pc, #212]	; (402fc4 <__sinit.part.1+0xdc>)
  402eee:	6845      	ldr	r5, [r0, #4]
  402ef0:	63c3      	str	r3, [r0, #60]	; 0x3c
  402ef2:	2400      	movs	r4, #0
  402ef4:	4607      	mov	r7, r0
  402ef6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  402efa:	2304      	movs	r3, #4
  402efc:	2103      	movs	r1, #3
  402efe:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  402f02:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402f06:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  402f0a:	b083      	sub	sp, #12
  402f0c:	602c      	str	r4, [r5, #0]
  402f0e:	606c      	str	r4, [r5, #4]
  402f10:	60ac      	str	r4, [r5, #8]
  402f12:	666c      	str	r4, [r5, #100]	; 0x64
  402f14:	81ec      	strh	r4, [r5, #14]
  402f16:	612c      	str	r4, [r5, #16]
  402f18:	616c      	str	r4, [r5, #20]
  402f1a:	61ac      	str	r4, [r5, #24]
  402f1c:	81ab      	strh	r3, [r5, #12]
  402f1e:	4621      	mov	r1, r4
  402f20:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402f24:	2208      	movs	r2, #8
  402f26:	f7fe fe87 	bl	401c38 <memset>
  402f2a:	68be      	ldr	r6, [r7, #8]
  402f2c:	f8df b098 	ldr.w	fp, [pc, #152]	; 402fc8 <__sinit.part.1+0xe0>
  402f30:	f8df a098 	ldr.w	sl, [pc, #152]	; 402fcc <__sinit.part.1+0xe4>
  402f34:	f8df 9098 	ldr.w	r9, [pc, #152]	; 402fd0 <__sinit.part.1+0xe8>
  402f38:	f8df 8098 	ldr.w	r8, [pc, #152]	; 402fd4 <__sinit.part.1+0xec>
  402f3c:	f8c5 b020 	str.w	fp, [r5, #32]
  402f40:	2301      	movs	r3, #1
  402f42:	2209      	movs	r2, #9
  402f44:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402f48:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402f4c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402f50:	61ed      	str	r5, [r5, #28]
  402f52:	4621      	mov	r1, r4
  402f54:	81f3      	strh	r3, [r6, #14]
  402f56:	81b2      	strh	r2, [r6, #12]
  402f58:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  402f5c:	6034      	str	r4, [r6, #0]
  402f5e:	6074      	str	r4, [r6, #4]
  402f60:	60b4      	str	r4, [r6, #8]
  402f62:	6674      	str	r4, [r6, #100]	; 0x64
  402f64:	6134      	str	r4, [r6, #16]
  402f66:	6174      	str	r4, [r6, #20]
  402f68:	61b4      	str	r4, [r6, #24]
  402f6a:	2208      	movs	r2, #8
  402f6c:	9301      	str	r3, [sp, #4]
  402f6e:	f7fe fe63 	bl	401c38 <memset>
  402f72:	68fd      	ldr	r5, [r7, #12]
  402f74:	61f6      	str	r6, [r6, #28]
  402f76:	2012      	movs	r0, #18
  402f78:	2202      	movs	r2, #2
  402f7a:	f8c6 b020 	str.w	fp, [r6, #32]
  402f7e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  402f82:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402f86:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  402f8a:	4621      	mov	r1, r4
  402f8c:	81a8      	strh	r0, [r5, #12]
  402f8e:	81ea      	strh	r2, [r5, #14]
  402f90:	602c      	str	r4, [r5, #0]
  402f92:	606c      	str	r4, [r5, #4]
  402f94:	60ac      	str	r4, [r5, #8]
  402f96:	666c      	str	r4, [r5, #100]	; 0x64
  402f98:	612c      	str	r4, [r5, #16]
  402f9a:	616c      	str	r4, [r5, #20]
  402f9c:	61ac      	str	r4, [r5, #24]
  402f9e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402fa2:	2208      	movs	r2, #8
  402fa4:	f7fe fe48 	bl	401c38 <memset>
  402fa8:	9b01      	ldr	r3, [sp, #4]
  402faa:	61ed      	str	r5, [r5, #28]
  402fac:	f8c5 b020 	str.w	fp, [r5, #32]
  402fb0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402fb4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402fb8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  402fbe:	b003      	add	sp, #12
  402fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fc4:	00402edd 	.word	0x00402edd
  402fc8:	00404345 	.word	0x00404345
  402fcc:	00404369 	.word	0x00404369
  402fd0:	004043a5 	.word	0x004043a5
  402fd4:	004043c5 	.word	0x004043c5

00402fd8 <__sinit>:
  402fd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402fda:	b103      	cbz	r3, 402fde <__sinit+0x6>
  402fdc:	4770      	bx	lr
  402fde:	f7ff bf83 	b.w	402ee8 <__sinit.part.1>
  402fe2:	bf00      	nop

00402fe4 <__sfp_lock_acquire>:
  402fe4:	4770      	bx	lr
  402fe6:	bf00      	nop

00402fe8 <__sfp_lock_release>:
  402fe8:	4770      	bx	lr
  402fea:	bf00      	nop

00402fec <__libc_fini_array>:
  402fec:	b538      	push	{r3, r4, r5, lr}
  402fee:	4c0a      	ldr	r4, [pc, #40]	; (403018 <__libc_fini_array+0x2c>)
  402ff0:	4d0a      	ldr	r5, [pc, #40]	; (40301c <__libc_fini_array+0x30>)
  402ff2:	1b64      	subs	r4, r4, r5
  402ff4:	10a4      	asrs	r4, r4, #2
  402ff6:	d00a      	beq.n	40300e <__libc_fini_array+0x22>
  402ff8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402ffc:	3b01      	subs	r3, #1
  402ffe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403002:	3c01      	subs	r4, #1
  403004:	f855 3904 	ldr.w	r3, [r5], #-4
  403008:	4798      	blx	r3
  40300a:	2c00      	cmp	r4, #0
  40300c:	d1f9      	bne.n	403002 <__libc_fini_array+0x16>
  40300e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403012:	f001 be57 	b.w	404cc4 <_fini>
  403016:	bf00      	nop
  403018:	00404cd4 	.word	0x00404cd4
  40301c:	00404cd0 	.word	0x00404cd0

00403020 <__fputwc>:
  403020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403024:	b082      	sub	sp, #8
  403026:	4680      	mov	r8, r0
  403028:	4689      	mov	r9, r1
  40302a:	4614      	mov	r4, r2
  40302c:	f000 fb32 	bl	403694 <__locale_mb_cur_max>
  403030:	2801      	cmp	r0, #1
  403032:	d036      	beq.n	4030a2 <__fputwc+0x82>
  403034:	464a      	mov	r2, r9
  403036:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40303a:	a901      	add	r1, sp, #4
  40303c:	4640      	mov	r0, r8
  40303e:	f001 fa1d 	bl	40447c <_wcrtomb_r>
  403042:	1c42      	adds	r2, r0, #1
  403044:	4606      	mov	r6, r0
  403046:	d025      	beq.n	403094 <__fputwc+0x74>
  403048:	b3a8      	cbz	r0, 4030b6 <__fputwc+0x96>
  40304a:	f89d e004 	ldrb.w	lr, [sp, #4]
  40304e:	2500      	movs	r5, #0
  403050:	f10d 0a04 	add.w	sl, sp, #4
  403054:	e009      	b.n	40306a <__fputwc+0x4a>
  403056:	6823      	ldr	r3, [r4, #0]
  403058:	1c5a      	adds	r2, r3, #1
  40305a:	6022      	str	r2, [r4, #0]
  40305c:	f883 e000 	strb.w	lr, [r3]
  403060:	3501      	adds	r5, #1
  403062:	42b5      	cmp	r5, r6
  403064:	d227      	bcs.n	4030b6 <__fputwc+0x96>
  403066:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40306a:	68a3      	ldr	r3, [r4, #8]
  40306c:	3b01      	subs	r3, #1
  40306e:	2b00      	cmp	r3, #0
  403070:	60a3      	str	r3, [r4, #8]
  403072:	daf0      	bge.n	403056 <__fputwc+0x36>
  403074:	69a7      	ldr	r7, [r4, #24]
  403076:	42bb      	cmp	r3, r7
  403078:	4671      	mov	r1, lr
  40307a:	4622      	mov	r2, r4
  40307c:	4640      	mov	r0, r8
  40307e:	db02      	blt.n	403086 <__fputwc+0x66>
  403080:	f1be 0f0a 	cmp.w	lr, #10
  403084:	d1e7      	bne.n	403056 <__fputwc+0x36>
  403086:	f001 f9a1 	bl	4043cc <__swbuf_r>
  40308a:	1c43      	adds	r3, r0, #1
  40308c:	d1e8      	bne.n	403060 <__fputwc+0x40>
  40308e:	b002      	add	sp, #8
  403090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403094:	89a3      	ldrh	r3, [r4, #12]
  403096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40309a:	81a3      	strh	r3, [r4, #12]
  40309c:	b002      	add	sp, #8
  40309e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4030a2:	f109 33ff 	add.w	r3, r9, #4294967295
  4030a6:	2bfe      	cmp	r3, #254	; 0xfe
  4030a8:	d8c4      	bhi.n	403034 <__fputwc+0x14>
  4030aa:	fa5f fe89 	uxtb.w	lr, r9
  4030ae:	4606      	mov	r6, r0
  4030b0:	f88d e004 	strb.w	lr, [sp, #4]
  4030b4:	e7cb      	b.n	40304e <__fputwc+0x2e>
  4030b6:	4648      	mov	r0, r9
  4030b8:	b002      	add	sp, #8
  4030ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4030be:	bf00      	nop

004030c0 <_fputwc_r>:
  4030c0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4030c4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4030c8:	d10a      	bne.n	4030e0 <_fputwc_r+0x20>
  4030ca:	b410      	push	{r4}
  4030cc:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4030ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4030d2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4030d6:	6654      	str	r4, [r2, #100]	; 0x64
  4030d8:	8193      	strh	r3, [r2, #12]
  4030da:	bc10      	pop	{r4}
  4030dc:	f7ff bfa0 	b.w	403020 <__fputwc>
  4030e0:	f7ff bf9e 	b.w	403020 <__fputwc>

004030e4 <_malloc_trim_r>:
  4030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4030e6:	4f24      	ldr	r7, [pc, #144]	; (403178 <_malloc_trim_r+0x94>)
  4030e8:	460c      	mov	r4, r1
  4030ea:	4606      	mov	r6, r0
  4030ec:	f000 ff6e 	bl	403fcc <__malloc_lock>
  4030f0:	68bb      	ldr	r3, [r7, #8]
  4030f2:	685d      	ldr	r5, [r3, #4]
  4030f4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4030f8:	310f      	adds	r1, #15
  4030fa:	f025 0503 	bic.w	r5, r5, #3
  4030fe:	4429      	add	r1, r5
  403100:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403104:	f021 010f 	bic.w	r1, r1, #15
  403108:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40310c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403110:	db07      	blt.n	403122 <_malloc_trim_r+0x3e>
  403112:	2100      	movs	r1, #0
  403114:	4630      	mov	r0, r6
  403116:	f001 f903 	bl	404320 <_sbrk_r>
  40311a:	68bb      	ldr	r3, [r7, #8]
  40311c:	442b      	add	r3, r5
  40311e:	4298      	cmp	r0, r3
  403120:	d004      	beq.n	40312c <_malloc_trim_r+0x48>
  403122:	4630      	mov	r0, r6
  403124:	f000 ff54 	bl	403fd0 <__malloc_unlock>
  403128:	2000      	movs	r0, #0
  40312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40312c:	4261      	negs	r1, r4
  40312e:	4630      	mov	r0, r6
  403130:	f001 f8f6 	bl	404320 <_sbrk_r>
  403134:	3001      	adds	r0, #1
  403136:	d00d      	beq.n	403154 <_malloc_trim_r+0x70>
  403138:	4b10      	ldr	r3, [pc, #64]	; (40317c <_malloc_trim_r+0x98>)
  40313a:	68ba      	ldr	r2, [r7, #8]
  40313c:	6819      	ldr	r1, [r3, #0]
  40313e:	1b2d      	subs	r5, r5, r4
  403140:	f045 0501 	orr.w	r5, r5, #1
  403144:	4630      	mov	r0, r6
  403146:	1b09      	subs	r1, r1, r4
  403148:	6055      	str	r5, [r2, #4]
  40314a:	6019      	str	r1, [r3, #0]
  40314c:	f000 ff40 	bl	403fd0 <__malloc_unlock>
  403150:	2001      	movs	r0, #1
  403152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403154:	2100      	movs	r1, #0
  403156:	4630      	mov	r0, r6
  403158:	f001 f8e2 	bl	404320 <_sbrk_r>
  40315c:	68ba      	ldr	r2, [r7, #8]
  40315e:	1a83      	subs	r3, r0, r2
  403160:	2b0f      	cmp	r3, #15
  403162:	ddde      	ble.n	403122 <_malloc_trim_r+0x3e>
  403164:	4c06      	ldr	r4, [pc, #24]	; (403180 <_malloc_trim_r+0x9c>)
  403166:	4905      	ldr	r1, [pc, #20]	; (40317c <_malloc_trim_r+0x98>)
  403168:	6824      	ldr	r4, [r4, #0]
  40316a:	f043 0301 	orr.w	r3, r3, #1
  40316e:	1b00      	subs	r0, r0, r4
  403170:	6053      	str	r3, [r2, #4]
  403172:	6008      	str	r0, [r1, #0]
  403174:	e7d5      	b.n	403122 <_malloc_trim_r+0x3e>
  403176:	bf00      	nop
  403178:	200005bc 	.word	0x200005bc
  40317c:	20000a68 	.word	0x20000a68
  403180:	200009c4 	.word	0x200009c4

00403184 <_free_r>:
  403184:	2900      	cmp	r1, #0
  403186:	d044      	beq.n	403212 <_free_r+0x8e>
  403188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40318c:	460d      	mov	r5, r1
  40318e:	4680      	mov	r8, r0
  403190:	f000 ff1c 	bl	403fcc <__malloc_lock>
  403194:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403198:	4969      	ldr	r1, [pc, #420]	; (403340 <_free_r+0x1bc>)
  40319a:	f027 0301 	bic.w	r3, r7, #1
  40319e:	f1a5 0408 	sub.w	r4, r5, #8
  4031a2:	18e2      	adds	r2, r4, r3
  4031a4:	688e      	ldr	r6, [r1, #8]
  4031a6:	6850      	ldr	r0, [r2, #4]
  4031a8:	42b2      	cmp	r2, r6
  4031aa:	f020 0003 	bic.w	r0, r0, #3
  4031ae:	d05e      	beq.n	40326e <_free_r+0xea>
  4031b0:	07fe      	lsls	r6, r7, #31
  4031b2:	6050      	str	r0, [r2, #4]
  4031b4:	d40b      	bmi.n	4031ce <_free_r+0x4a>
  4031b6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4031ba:	1be4      	subs	r4, r4, r7
  4031bc:	f101 0e08 	add.w	lr, r1, #8
  4031c0:	68a5      	ldr	r5, [r4, #8]
  4031c2:	4575      	cmp	r5, lr
  4031c4:	443b      	add	r3, r7
  4031c6:	d06d      	beq.n	4032a4 <_free_r+0x120>
  4031c8:	68e7      	ldr	r7, [r4, #12]
  4031ca:	60ef      	str	r7, [r5, #12]
  4031cc:	60bd      	str	r5, [r7, #8]
  4031ce:	1815      	adds	r5, r2, r0
  4031d0:	686d      	ldr	r5, [r5, #4]
  4031d2:	07ed      	lsls	r5, r5, #31
  4031d4:	d53e      	bpl.n	403254 <_free_r+0xd0>
  4031d6:	f043 0201 	orr.w	r2, r3, #1
  4031da:	6062      	str	r2, [r4, #4]
  4031dc:	50e3      	str	r3, [r4, r3]
  4031de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4031e2:	d217      	bcs.n	403214 <_free_r+0x90>
  4031e4:	08db      	lsrs	r3, r3, #3
  4031e6:	1c58      	adds	r0, r3, #1
  4031e8:	109a      	asrs	r2, r3, #2
  4031ea:	684d      	ldr	r5, [r1, #4]
  4031ec:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4031f0:	60a7      	str	r7, [r4, #8]
  4031f2:	2301      	movs	r3, #1
  4031f4:	4093      	lsls	r3, r2
  4031f6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4031fa:	432b      	orrs	r3, r5
  4031fc:	3a08      	subs	r2, #8
  4031fe:	60e2      	str	r2, [r4, #12]
  403200:	604b      	str	r3, [r1, #4]
  403202:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403206:	60fc      	str	r4, [r7, #12]
  403208:	4640      	mov	r0, r8
  40320a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40320e:	f000 bedf 	b.w	403fd0 <__malloc_unlock>
  403212:	4770      	bx	lr
  403214:	0a5a      	lsrs	r2, r3, #9
  403216:	2a04      	cmp	r2, #4
  403218:	d852      	bhi.n	4032c0 <_free_r+0x13c>
  40321a:	099a      	lsrs	r2, r3, #6
  40321c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403220:	00ff      	lsls	r7, r7, #3
  403222:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403226:	19c8      	adds	r0, r1, r7
  403228:	59ca      	ldr	r2, [r1, r7]
  40322a:	3808      	subs	r0, #8
  40322c:	4290      	cmp	r0, r2
  40322e:	d04f      	beq.n	4032d0 <_free_r+0x14c>
  403230:	6851      	ldr	r1, [r2, #4]
  403232:	f021 0103 	bic.w	r1, r1, #3
  403236:	428b      	cmp	r3, r1
  403238:	d232      	bcs.n	4032a0 <_free_r+0x11c>
  40323a:	6892      	ldr	r2, [r2, #8]
  40323c:	4290      	cmp	r0, r2
  40323e:	d1f7      	bne.n	403230 <_free_r+0xac>
  403240:	68c3      	ldr	r3, [r0, #12]
  403242:	60a0      	str	r0, [r4, #8]
  403244:	60e3      	str	r3, [r4, #12]
  403246:	609c      	str	r4, [r3, #8]
  403248:	60c4      	str	r4, [r0, #12]
  40324a:	4640      	mov	r0, r8
  40324c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403250:	f000 bebe 	b.w	403fd0 <__malloc_unlock>
  403254:	6895      	ldr	r5, [r2, #8]
  403256:	4f3b      	ldr	r7, [pc, #236]	; (403344 <_free_r+0x1c0>)
  403258:	42bd      	cmp	r5, r7
  40325a:	4403      	add	r3, r0
  40325c:	d040      	beq.n	4032e0 <_free_r+0x15c>
  40325e:	68d0      	ldr	r0, [r2, #12]
  403260:	60e8      	str	r0, [r5, #12]
  403262:	f043 0201 	orr.w	r2, r3, #1
  403266:	6085      	str	r5, [r0, #8]
  403268:	6062      	str	r2, [r4, #4]
  40326a:	50e3      	str	r3, [r4, r3]
  40326c:	e7b7      	b.n	4031de <_free_r+0x5a>
  40326e:	07ff      	lsls	r7, r7, #31
  403270:	4403      	add	r3, r0
  403272:	d407      	bmi.n	403284 <_free_r+0x100>
  403274:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403278:	1aa4      	subs	r4, r4, r2
  40327a:	4413      	add	r3, r2
  40327c:	68a0      	ldr	r0, [r4, #8]
  40327e:	68e2      	ldr	r2, [r4, #12]
  403280:	60c2      	str	r2, [r0, #12]
  403282:	6090      	str	r0, [r2, #8]
  403284:	4a30      	ldr	r2, [pc, #192]	; (403348 <_free_r+0x1c4>)
  403286:	6812      	ldr	r2, [r2, #0]
  403288:	f043 0001 	orr.w	r0, r3, #1
  40328c:	4293      	cmp	r3, r2
  40328e:	6060      	str	r0, [r4, #4]
  403290:	608c      	str	r4, [r1, #8]
  403292:	d3b9      	bcc.n	403208 <_free_r+0x84>
  403294:	4b2d      	ldr	r3, [pc, #180]	; (40334c <_free_r+0x1c8>)
  403296:	4640      	mov	r0, r8
  403298:	6819      	ldr	r1, [r3, #0]
  40329a:	f7ff ff23 	bl	4030e4 <_malloc_trim_r>
  40329e:	e7b3      	b.n	403208 <_free_r+0x84>
  4032a0:	4610      	mov	r0, r2
  4032a2:	e7cd      	b.n	403240 <_free_r+0xbc>
  4032a4:	1811      	adds	r1, r2, r0
  4032a6:	6849      	ldr	r1, [r1, #4]
  4032a8:	07c9      	lsls	r1, r1, #31
  4032aa:	d444      	bmi.n	403336 <_free_r+0x1b2>
  4032ac:	6891      	ldr	r1, [r2, #8]
  4032ae:	68d2      	ldr	r2, [r2, #12]
  4032b0:	60ca      	str	r2, [r1, #12]
  4032b2:	4403      	add	r3, r0
  4032b4:	f043 0001 	orr.w	r0, r3, #1
  4032b8:	6091      	str	r1, [r2, #8]
  4032ba:	6060      	str	r0, [r4, #4]
  4032bc:	50e3      	str	r3, [r4, r3]
  4032be:	e7a3      	b.n	403208 <_free_r+0x84>
  4032c0:	2a14      	cmp	r2, #20
  4032c2:	d816      	bhi.n	4032f2 <_free_r+0x16e>
  4032c4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4032c8:	00ff      	lsls	r7, r7, #3
  4032ca:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4032ce:	e7aa      	b.n	403226 <_free_r+0xa2>
  4032d0:	10aa      	asrs	r2, r5, #2
  4032d2:	2301      	movs	r3, #1
  4032d4:	684d      	ldr	r5, [r1, #4]
  4032d6:	4093      	lsls	r3, r2
  4032d8:	432b      	orrs	r3, r5
  4032da:	604b      	str	r3, [r1, #4]
  4032dc:	4603      	mov	r3, r0
  4032de:	e7b0      	b.n	403242 <_free_r+0xbe>
  4032e0:	f043 0201 	orr.w	r2, r3, #1
  4032e4:	614c      	str	r4, [r1, #20]
  4032e6:	610c      	str	r4, [r1, #16]
  4032e8:	60e5      	str	r5, [r4, #12]
  4032ea:	60a5      	str	r5, [r4, #8]
  4032ec:	6062      	str	r2, [r4, #4]
  4032ee:	50e3      	str	r3, [r4, r3]
  4032f0:	e78a      	b.n	403208 <_free_r+0x84>
  4032f2:	2a54      	cmp	r2, #84	; 0x54
  4032f4:	d806      	bhi.n	403304 <_free_r+0x180>
  4032f6:	0b1a      	lsrs	r2, r3, #12
  4032f8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4032fc:	00ff      	lsls	r7, r7, #3
  4032fe:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403302:	e790      	b.n	403226 <_free_r+0xa2>
  403304:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403308:	d806      	bhi.n	403318 <_free_r+0x194>
  40330a:	0bda      	lsrs	r2, r3, #15
  40330c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403310:	00ff      	lsls	r7, r7, #3
  403312:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403316:	e786      	b.n	403226 <_free_r+0xa2>
  403318:	f240 5054 	movw	r0, #1364	; 0x554
  40331c:	4282      	cmp	r2, r0
  40331e:	d806      	bhi.n	40332e <_free_r+0x1aa>
  403320:	0c9a      	lsrs	r2, r3, #18
  403322:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403326:	00ff      	lsls	r7, r7, #3
  403328:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40332c:	e77b      	b.n	403226 <_free_r+0xa2>
  40332e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403332:	257e      	movs	r5, #126	; 0x7e
  403334:	e777      	b.n	403226 <_free_r+0xa2>
  403336:	f043 0101 	orr.w	r1, r3, #1
  40333a:	6061      	str	r1, [r4, #4]
  40333c:	6013      	str	r3, [r2, #0]
  40333e:	e763      	b.n	403208 <_free_r+0x84>
  403340:	200005bc 	.word	0x200005bc
  403344:	200005c4 	.word	0x200005c4
  403348:	200009c8 	.word	0x200009c8
  40334c:	20000a98 	.word	0x20000a98

00403350 <__sfvwrite_r>:
  403350:	6893      	ldr	r3, [r2, #8]
  403352:	2b00      	cmp	r3, #0
  403354:	d073      	beq.n	40343e <__sfvwrite_r+0xee>
  403356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40335a:	898b      	ldrh	r3, [r1, #12]
  40335c:	b083      	sub	sp, #12
  40335e:	460c      	mov	r4, r1
  403360:	0719      	lsls	r1, r3, #28
  403362:	9000      	str	r0, [sp, #0]
  403364:	4616      	mov	r6, r2
  403366:	d526      	bpl.n	4033b6 <__sfvwrite_r+0x66>
  403368:	6922      	ldr	r2, [r4, #16]
  40336a:	b322      	cbz	r2, 4033b6 <__sfvwrite_r+0x66>
  40336c:	f013 0002 	ands.w	r0, r3, #2
  403370:	6835      	ldr	r5, [r6, #0]
  403372:	d02c      	beq.n	4033ce <__sfvwrite_r+0x7e>
  403374:	f04f 0900 	mov.w	r9, #0
  403378:	4fb0      	ldr	r7, [pc, #704]	; (40363c <__sfvwrite_r+0x2ec>)
  40337a:	46c8      	mov	r8, r9
  40337c:	46b2      	mov	sl, r6
  40337e:	45b8      	cmp	r8, r7
  403380:	4643      	mov	r3, r8
  403382:	464a      	mov	r2, r9
  403384:	bf28      	it	cs
  403386:	463b      	movcs	r3, r7
  403388:	9800      	ldr	r0, [sp, #0]
  40338a:	f1b8 0f00 	cmp.w	r8, #0
  40338e:	d050      	beq.n	403432 <__sfvwrite_r+0xe2>
  403390:	69e1      	ldr	r1, [r4, #28]
  403392:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403394:	47b0      	blx	r6
  403396:	2800      	cmp	r0, #0
  403398:	dd58      	ble.n	40344c <__sfvwrite_r+0xfc>
  40339a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40339e:	1a1b      	subs	r3, r3, r0
  4033a0:	4481      	add	r9, r0
  4033a2:	eba8 0800 	sub.w	r8, r8, r0
  4033a6:	f8ca 3008 	str.w	r3, [sl, #8]
  4033aa:	2b00      	cmp	r3, #0
  4033ac:	d1e7      	bne.n	40337e <__sfvwrite_r+0x2e>
  4033ae:	2000      	movs	r0, #0
  4033b0:	b003      	add	sp, #12
  4033b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033b6:	4621      	mov	r1, r4
  4033b8:	9800      	ldr	r0, [sp, #0]
  4033ba:	f7ff fc65 	bl	402c88 <__swsetup_r>
  4033be:	2800      	cmp	r0, #0
  4033c0:	f040 8133 	bne.w	40362a <__sfvwrite_r+0x2da>
  4033c4:	89a3      	ldrh	r3, [r4, #12]
  4033c6:	6835      	ldr	r5, [r6, #0]
  4033c8:	f013 0002 	ands.w	r0, r3, #2
  4033cc:	d1d2      	bne.n	403374 <__sfvwrite_r+0x24>
  4033ce:	f013 0901 	ands.w	r9, r3, #1
  4033d2:	d145      	bne.n	403460 <__sfvwrite_r+0x110>
  4033d4:	464f      	mov	r7, r9
  4033d6:	9601      	str	r6, [sp, #4]
  4033d8:	b337      	cbz	r7, 403428 <__sfvwrite_r+0xd8>
  4033da:	059a      	lsls	r2, r3, #22
  4033dc:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4033e0:	f140 8083 	bpl.w	4034ea <__sfvwrite_r+0x19a>
  4033e4:	4547      	cmp	r7, r8
  4033e6:	46c3      	mov	fp, r8
  4033e8:	f0c0 80ab 	bcc.w	403542 <__sfvwrite_r+0x1f2>
  4033ec:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4033f0:	f040 80ac 	bne.w	40354c <__sfvwrite_r+0x1fc>
  4033f4:	6820      	ldr	r0, [r4, #0]
  4033f6:	46ba      	mov	sl, r7
  4033f8:	465a      	mov	r2, fp
  4033fa:	4649      	mov	r1, r9
  4033fc:	f000 fd82 	bl	403f04 <memmove>
  403400:	68a2      	ldr	r2, [r4, #8]
  403402:	6823      	ldr	r3, [r4, #0]
  403404:	eba2 0208 	sub.w	r2, r2, r8
  403408:	445b      	add	r3, fp
  40340a:	60a2      	str	r2, [r4, #8]
  40340c:	6023      	str	r3, [r4, #0]
  40340e:	9a01      	ldr	r2, [sp, #4]
  403410:	6893      	ldr	r3, [r2, #8]
  403412:	eba3 030a 	sub.w	r3, r3, sl
  403416:	44d1      	add	r9, sl
  403418:	eba7 070a 	sub.w	r7, r7, sl
  40341c:	6093      	str	r3, [r2, #8]
  40341e:	2b00      	cmp	r3, #0
  403420:	d0c5      	beq.n	4033ae <__sfvwrite_r+0x5e>
  403422:	89a3      	ldrh	r3, [r4, #12]
  403424:	2f00      	cmp	r7, #0
  403426:	d1d8      	bne.n	4033da <__sfvwrite_r+0x8a>
  403428:	f8d5 9000 	ldr.w	r9, [r5]
  40342c:	686f      	ldr	r7, [r5, #4]
  40342e:	3508      	adds	r5, #8
  403430:	e7d2      	b.n	4033d8 <__sfvwrite_r+0x88>
  403432:	f8d5 9000 	ldr.w	r9, [r5]
  403436:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40343a:	3508      	adds	r5, #8
  40343c:	e79f      	b.n	40337e <__sfvwrite_r+0x2e>
  40343e:	2000      	movs	r0, #0
  403440:	4770      	bx	lr
  403442:	4621      	mov	r1, r4
  403444:	9800      	ldr	r0, [sp, #0]
  403446:	f7ff fd33 	bl	402eb0 <_fflush_r>
  40344a:	b370      	cbz	r0, 4034aa <__sfvwrite_r+0x15a>
  40344c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403454:	f04f 30ff 	mov.w	r0, #4294967295
  403458:	81a3      	strh	r3, [r4, #12]
  40345a:	b003      	add	sp, #12
  40345c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403460:	4681      	mov	r9, r0
  403462:	4633      	mov	r3, r6
  403464:	464e      	mov	r6, r9
  403466:	46a8      	mov	r8, r5
  403468:	469a      	mov	sl, r3
  40346a:	464d      	mov	r5, r9
  40346c:	b34e      	cbz	r6, 4034c2 <__sfvwrite_r+0x172>
  40346e:	b380      	cbz	r0, 4034d2 <__sfvwrite_r+0x182>
  403470:	6820      	ldr	r0, [r4, #0]
  403472:	6923      	ldr	r3, [r4, #16]
  403474:	6962      	ldr	r2, [r4, #20]
  403476:	45b1      	cmp	r9, r6
  403478:	46cb      	mov	fp, r9
  40347a:	bf28      	it	cs
  40347c:	46b3      	movcs	fp, r6
  40347e:	4298      	cmp	r0, r3
  403480:	465f      	mov	r7, fp
  403482:	d904      	bls.n	40348e <__sfvwrite_r+0x13e>
  403484:	68a3      	ldr	r3, [r4, #8]
  403486:	4413      	add	r3, r2
  403488:	459b      	cmp	fp, r3
  40348a:	f300 80a6 	bgt.w	4035da <__sfvwrite_r+0x28a>
  40348e:	4593      	cmp	fp, r2
  403490:	db4b      	blt.n	40352a <__sfvwrite_r+0x1da>
  403492:	4613      	mov	r3, r2
  403494:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403496:	69e1      	ldr	r1, [r4, #28]
  403498:	9800      	ldr	r0, [sp, #0]
  40349a:	462a      	mov	r2, r5
  40349c:	47b8      	blx	r7
  40349e:	1e07      	subs	r7, r0, #0
  4034a0:	ddd4      	ble.n	40344c <__sfvwrite_r+0xfc>
  4034a2:	ebb9 0907 	subs.w	r9, r9, r7
  4034a6:	d0cc      	beq.n	403442 <__sfvwrite_r+0xf2>
  4034a8:	2001      	movs	r0, #1
  4034aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4034ae:	1bdb      	subs	r3, r3, r7
  4034b0:	443d      	add	r5, r7
  4034b2:	1bf6      	subs	r6, r6, r7
  4034b4:	f8ca 3008 	str.w	r3, [sl, #8]
  4034b8:	2b00      	cmp	r3, #0
  4034ba:	f43f af78 	beq.w	4033ae <__sfvwrite_r+0x5e>
  4034be:	2e00      	cmp	r6, #0
  4034c0:	d1d5      	bne.n	40346e <__sfvwrite_r+0x11e>
  4034c2:	f108 0308 	add.w	r3, r8, #8
  4034c6:	e913 0060 	ldmdb	r3, {r5, r6}
  4034ca:	4698      	mov	r8, r3
  4034cc:	3308      	adds	r3, #8
  4034ce:	2e00      	cmp	r6, #0
  4034d0:	d0f9      	beq.n	4034c6 <__sfvwrite_r+0x176>
  4034d2:	4632      	mov	r2, r6
  4034d4:	210a      	movs	r1, #10
  4034d6:	4628      	mov	r0, r5
  4034d8:	f000 fc2a 	bl	403d30 <memchr>
  4034dc:	2800      	cmp	r0, #0
  4034de:	f000 80a1 	beq.w	403624 <__sfvwrite_r+0x2d4>
  4034e2:	3001      	adds	r0, #1
  4034e4:	eba0 0905 	sub.w	r9, r0, r5
  4034e8:	e7c2      	b.n	403470 <__sfvwrite_r+0x120>
  4034ea:	6820      	ldr	r0, [r4, #0]
  4034ec:	6923      	ldr	r3, [r4, #16]
  4034ee:	4298      	cmp	r0, r3
  4034f0:	d802      	bhi.n	4034f8 <__sfvwrite_r+0x1a8>
  4034f2:	6963      	ldr	r3, [r4, #20]
  4034f4:	429f      	cmp	r7, r3
  4034f6:	d25d      	bcs.n	4035b4 <__sfvwrite_r+0x264>
  4034f8:	45b8      	cmp	r8, r7
  4034fa:	bf28      	it	cs
  4034fc:	46b8      	movcs	r8, r7
  4034fe:	4642      	mov	r2, r8
  403500:	4649      	mov	r1, r9
  403502:	f000 fcff 	bl	403f04 <memmove>
  403506:	68a3      	ldr	r3, [r4, #8]
  403508:	6822      	ldr	r2, [r4, #0]
  40350a:	eba3 0308 	sub.w	r3, r3, r8
  40350e:	4442      	add	r2, r8
  403510:	60a3      	str	r3, [r4, #8]
  403512:	6022      	str	r2, [r4, #0]
  403514:	b10b      	cbz	r3, 40351a <__sfvwrite_r+0x1ca>
  403516:	46c2      	mov	sl, r8
  403518:	e779      	b.n	40340e <__sfvwrite_r+0xbe>
  40351a:	4621      	mov	r1, r4
  40351c:	9800      	ldr	r0, [sp, #0]
  40351e:	f7ff fcc7 	bl	402eb0 <_fflush_r>
  403522:	2800      	cmp	r0, #0
  403524:	d192      	bne.n	40344c <__sfvwrite_r+0xfc>
  403526:	46c2      	mov	sl, r8
  403528:	e771      	b.n	40340e <__sfvwrite_r+0xbe>
  40352a:	465a      	mov	r2, fp
  40352c:	4629      	mov	r1, r5
  40352e:	f000 fce9 	bl	403f04 <memmove>
  403532:	68a2      	ldr	r2, [r4, #8]
  403534:	6823      	ldr	r3, [r4, #0]
  403536:	eba2 020b 	sub.w	r2, r2, fp
  40353a:	445b      	add	r3, fp
  40353c:	60a2      	str	r2, [r4, #8]
  40353e:	6023      	str	r3, [r4, #0]
  403540:	e7af      	b.n	4034a2 <__sfvwrite_r+0x152>
  403542:	6820      	ldr	r0, [r4, #0]
  403544:	46b8      	mov	r8, r7
  403546:	46ba      	mov	sl, r7
  403548:	46bb      	mov	fp, r7
  40354a:	e755      	b.n	4033f8 <__sfvwrite_r+0xa8>
  40354c:	6962      	ldr	r2, [r4, #20]
  40354e:	6820      	ldr	r0, [r4, #0]
  403550:	6921      	ldr	r1, [r4, #16]
  403552:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403556:	eba0 0a01 	sub.w	sl, r0, r1
  40355a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40355e:	f10a 0001 	add.w	r0, sl, #1
  403562:	ea4f 0868 	mov.w	r8, r8, asr #1
  403566:	4438      	add	r0, r7
  403568:	4540      	cmp	r0, r8
  40356a:	4642      	mov	r2, r8
  40356c:	bf84      	itt	hi
  40356e:	4680      	movhi	r8, r0
  403570:	4642      	movhi	r2, r8
  403572:	055b      	lsls	r3, r3, #21
  403574:	d544      	bpl.n	403600 <__sfvwrite_r+0x2b0>
  403576:	4611      	mov	r1, r2
  403578:	9800      	ldr	r0, [sp, #0]
  40357a:	f000 f913 	bl	4037a4 <_malloc_r>
  40357e:	4683      	mov	fp, r0
  403580:	2800      	cmp	r0, #0
  403582:	d055      	beq.n	403630 <__sfvwrite_r+0x2e0>
  403584:	4652      	mov	r2, sl
  403586:	6921      	ldr	r1, [r4, #16]
  403588:	f000 fc22 	bl	403dd0 <memcpy>
  40358c:	89a3      	ldrh	r3, [r4, #12]
  40358e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403596:	81a3      	strh	r3, [r4, #12]
  403598:	eb0b 000a 	add.w	r0, fp, sl
  40359c:	eba8 030a 	sub.w	r3, r8, sl
  4035a0:	f8c4 b010 	str.w	fp, [r4, #16]
  4035a4:	f8c4 8014 	str.w	r8, [r4, #20]
  4035a8:	6020      	str	r0, [r4, #0]
  4035aa:	60a3      	str	r3, [r4, #8]
  4035ac:	46b8      	mov	r8, r7
  4035ae:	46ba      	mov	sl, r7
  4035b0:	46bb      	mov	fp, r7
  4035b2:	e721      	b.n	4033f8 <__sfvwrite_r+0xa8>
  4035b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4035b8:	42b9      	cmp	r1, r7
  4035ba:	bf28      	it	cs
  4035bc:	4639      	movcs	r1, r7
  4035be:	464a      	mov	r2, r9
  4035c0:	fb91 f1f3 	sdiv	r1, r1, r3
  4035c4:	9800      	ldr	r0, [sp, #0]
  4035c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4035c8:	fb03 f301 	mul.w	r3, r3, r1
  4035cc:	69e1      	ldr	r1, [r4, #28]
  4035ce:	47b0      	blx	r6
  4035d0:	f1b0 0a00 	subs.w	sl, r0, #0
  4035d4:	f73f af1b 	bgt.w	40340e <__sfvwrite_r+0xbe>
  4035d8:	e738      	b.n	40344c <__sfvwrite_r+0xfc>
  4035da:	461a      	mov	r2, r3
  4035dc:	4629      	mov	r1, r5
  4035de:	9301      	str	r3, [sp, #4]
  4035e0:	f000 fc90 	bl	403f04 <memmove>
  4035e4:	6822      	ldr	r2, [r4, #0]
  4035e6:	9b01      	ldr	r3, [sp, #4]
  4035e8:	9800      	ldr	r0, [sp, #0]
  4035ea:	441a      	add	r2, r3
  4035ec:	6022      	str	r2, [r4, #0]
  4035ee:	4621      	mov	r1, r4
  4035f0:	f7ff fc5e 	bl	402eb0 <_fflush_r>
  4035f4:	9b01      	ldr	r3, [sp, #4]
  4035f6:	2800      	cmp	r0, #0
  4035f8:	f47f af28 	bne.w	40344c <__sfvwrite_r+0xfc>
  4035fc:	461f      	mov	r7, r3
  4035fe:	e750      	b.n	4034a2 <__sfvwrite_r+0x152>
  403600:	9800      	ldr	r0, [sp, #0]
  403602:	f000 fce7 	bl	403fd4 <_realloc_r>
  403606:	4683      	mov	fp, r0
  403608:	2800      	cmp	r0, #0
  40360a:	d1c5      	bne.n	403598 <__sfvwrite_r+0x248>
  40360c:	9d00      	ldr	r5, [sp, #0]
  40360e:	6921      	ldr	r1, [r4, #16]
  403610:	4628      	mov	r0, r5
  403612:	f7ff fdb7 	bl	403184 <_free_r>
  403616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40361a:	220c      	movs	r2, #12
  40361c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403620:	602a      	str	r2, [r5, #0]
  403622:	e715      	b.n	403450 <__sfvwrite_r+0x100>
  403624:	f106 0901 	add.w	r9, r6, #1
  403628:	e722      	b.n	403470 <__sfvwrite_r+0x120>
  40362a:	f04f 30ff 	mov.w	r0, #4294967295
  40362e:	e6bf      	b.n	4033b0 <__sfvwrite_r+0x60>
  403630:	9a00      	ldr	r2, [sp, #0]
  403632:	230c      	movs	r3, #12
  403634:	6013      	str	r3, [r2, #0]
  403636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40363a:	e709      	b.n	403450 <__sfvwrite_r+0x100>
  40363c:	7ffffc00 	.word	0x7ffffc00

00403640 <_fwalk_reent>:
  403640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403644:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403648:	d01f      	beq.n	40368a <_fwalk_reent+0x4a>
  40364a:	4688      	mov	r8, r1
  40364c:	4606      	mov	r6, r0
  40364e:	f04f 0900 	mov.w	r9, #0
  403652:	687d      	ldr	r5, [r7, #4]
  403654:	68bc      	ldr	r4, [r7, #8]
  403656:	3d01      	subs	r5, #1
  403658:	d411      	bmi.n	40367e <_fwalk_reent+0x3e>
  40365a:	89a3      	ldrh	r3, [r4, #12]
  40365c:	2b01      	cmp	r3, #1
  40365e:	f105 35ff 	add.w	r5, r5, #4294967295
  403662:	d908      	bls.n	403676 <_fwalk_reent+0x36>
  403664:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403668:	3301      	adds	r3, #1
  40366a:	4621      	mov	r1, r4
  40366c:	4630      	mov	r0, r6
  40366e:	d002      	beq.n	403676 <_fwalk_reent+0x36>
  403670:	47c0      	blx	r8
  403672:	ea49 0900 	orr.w	r9, r9, r0
  403676:	1c6b      	adds	r3, r5, #1
  403678:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40367c:	d1ed      	bne.n	40365a <_fwalk_reent+0x1a>
  40367e:	683f      	ldr	r7, [r7, #0]
  403680:	2f00      	cmp	r7, #0
  403682:	d1e6      	bne.n	403652 <_fwalk_reent+0x12>
  403684:	4648      	mov	r0, r9
  403686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40368a:	46b9      	mov	r9, r7
  40368c:	4648      	mov	r0, r9
  40368e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403692:	bf00      	nop

00403694 <__locale_mb_cur_max>:
  403694:	4b04      	ldr	r3, [pc, #16]	; (4036a8 <__locale_mb_cur_max+0x14>)
  403696:	4a05      	ldr	r2, [pc, #20]	; (4036ac <__locale_mb_cur_max+0x18>)
  403698:	681b      	ldr	r3, [r3, #0]
  40369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40369c:	2b00      	cmp	r3, #0
  40369e:	bf08      	it	eq
  4036a0:	4613      	moveq	r3, r2
  4036a2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4036a6:	4770      	bx	lr
  4036a8:	20000024 	.word	0x20000024
  4036ac:	20000450 	.word	0x20000450

004036b0 <__swhatbuf_r>:
  4036b0:	b570      	push	{r4, r5, r6, lr}
  4036b2:	460c      	mov	r4, r1
  4036b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4036b8:	2900      	cmp	r1, #0
  4036ba:	b090      	sub	sp, #64	; 0x40
  4036bc:	4615      	mov	r5, r2
  4036be:	461e      	mov	r6, r3
  4036c0:	db14      	blt.n	4036ec <__swhatbuf_r+0x3c>
  4036c2:	aa01      	add	r2, sp, #4
  4036c4:	f000 ffcc 	bl	404660 <_fstat_r>
  4036c8:	2800      	cmp	r0, #0
  4036ca:	db0f      	blt.n	4036ec <__swhatbuf_r+0x3c>
  4036cc:	9a02      	ldr	r2, [sp, #8]
  4036ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4036d2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4036d6:	fab2 f282 	clz	r2, r2
  4036da:	0952      	lsrs	r2, r2, #5
  4036dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4036e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4036e4:	6032      	str	r2, [r6, #0]
  4036e6:	602b      	str	r3, [r5, #0]
  4036e8:	b010      	add	sp, #64	; 0x40
  4036ea:	bd70      	pop	{r4, r5, r6, pc}
  4036ec:	89a2      	ldrh	r2, [r4, #12]
  4036ee:	2300      	movs	r3, #0
  4036f0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4036f4:	6033      	str	r3, [r6, #0]
  4036f6:	d004      	beq.n	403702 <__swhatbuf_r+0x52>
  4036f8:	2240      	movs	r2, #64	; 0x40
  4036fa:	4618      	mov	r0, r3
  4036fc:	602a      	str	r2, [r5, #0]
  4036fe:	b010      	add	sp, #64	; 0x40
  403700:	bd70      	pop	{r4, r5, r6, pc}
  403702:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403706:	602b      	str	r3, [r5, #0]
  403708:	b010      	add	sp, #64	; 0x40
  40370a:	bd70      	pop	{r4, r5, r6, pc}

0040370c <__smakebuf_r>:
  40370c:	898a      	ldrh	r2, [r1, #12]
  40370e:	0792      	lsls	r2, r2, #30
  403710:	460b      	mov	r3, r1
  403712:	d506      	bpl.n	403722 <__smakebuf_r+0x16>
  403714:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403718:	2101      	movs	r1, #1
  40371a:	601a      	str	r2, [r3, #0]
  40371c:	611a      	str	r2, [r3, #16]
  40371e:	6159      	str	r1, [r3, #20]
  403720:	4770      	bx	lr
  403722:	b5f0      	push	{r4, r5, r6, r7, lr}
  403724:	b083      	sub	sp, #12
  403726:	ab01      	add	r3, sp, #4
  403728:	466a      	mov	r2, sp
  40372a:	460c      	mov	r4, r1
  40372c:	4605      	mov	r5, r0
  40372e:	f7ff ffbf 	bl	4036b0 <__swhatbuf_r>
  403732:	9900      	ldr	r1, [sp, #0]
  403734:	4606      	mov	r6, r0
  403736:	4628      	mov	r0, r5
  403738:	f000 f834 	bl	4037a4 <_malloc_r>
  40373c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403740:	b1d0      	cbz	r0, 403778 <__smakebuf_r+0x6c>
  403742:	9a01      	ldr	r2, [sp, #4]
  403744:	4f12      	ldr	r7, [pc, #72]	; (403790 <__smakebuf_r+0x84>)
  403746:	9900      	ldr	r1, [sp, #0]
  403748:	63ef      	str	r7, [r5, #60]	; 0x3c
  40374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40374e:	81a3      	strh	r3, [r4, #12]
  403750:	6020      	str	r0, [r4, #0]
  403752:	6120      	str	r0, [r4, #16]
  403754:	6161      	str	r1, [r4, #20]
  403756:	b91a      	cbnz	r2, 403760 <__smakebuf_r+0x54>
  403758:	4333      	orrs	r3, r6
  40375a:	81a3      	strh	r3, [r4, #12]
  40375c:	b003      	add	sp, #12
  40375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403760:	4628      	mov	r0, r5
  403762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403766:	f000 ff8f 	bl	404688 <_isatty_r>
  40376a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40376e:	2800      	cmp	r0, #0
  403770:	d0f2      	beq.n	403758 <__smakebuf_r+0x4c>
  403772:	f043 0301 	orr.w	r3, r3, #1
  403776:	e7ef      	b.n	403758 <__smakebuf_r+0x4c>
  403778:	059a      	lsls	r2, r3, #22
  40377a:	d4ef      	bmi.n	40375c <__smakebuf_r+0x50>
  40377c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403780:	f043 0302 	orr.w	r3, r3, #2
  403784:	2101      	movs	r1, #1
  403786:	81a3      	strh	r3, [r4, #12]
  403788:	6022      	str	r2, [r4, #0]
  40378a:	6122      	str	r2, [r4, #16]
  40378c:	6161      	str	r1, [r4, #20]
  40378e:	e7e5      	b.n	40375c <__smakebuf_r+0x50>
  403790:	00402edd 	.word	0x00402edd

00403794 <malloc>:
  403794:	4b02      	ldr	r3, [pc, #8]	; (4037a0 <malloc+0xc>)
  403796:	4601      	mov	r1, r0
  403798:	6818      	ldr	r0, [r3, #0]
  40379a:	f000 b803 	b.w	4037a4 <_malloc_r>
  40379e:	bf00      	nop
  4037a0:	20000024 	.word	0x20000024

004037a4 <_malloc_r>:
  4037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4037a8:	f101 060b 	add.w	r6, r1, #11
  4037ac:	2e16      	cmp	r6, #22
  4037ae:	b083      	sub	sp, #12
  4037b0:	4605      	mov	r5, r0
  4037b2:	f240 809e 	bls.w	4038f2 <_malloc_r+0x14e>
  4037b6:	f036 0607 	bics.w	r6, r6, #7
  4037ba:	f100 80bd 	bmi.w	403938 <_malloc_r+0x194>
  4037be:	42b1      	cmp	r1, r6
  4037c0:	f200 80ba 	bhi.w	403938 <_malloc_r+0x194>
  4037c4:	f000 fc02 	bl	403fcc <__malloc_lock>
  4037c8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4037cc:	f0c0 8293 	bcc.w	403cf6 <_malloc_r+0x552>
  4037d0:	0a73      	lsrs	r3, r6, #9
  4037d2:	f000 80b8 	beq.w	403946 <_malloc_r+0x1a2>
  4037d6:	2b04      	cmp	r3, #4
  4037d8:	f200 8179 	bhi.w	403ace <_malloc_r+0x32a>
  4037dc:	09b3      	lsrs	r3, r6, #6
  4037de:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4037e2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4037e6:	00c3      	lsls	r3, r0, #3
  4037e8:	4fbf      	ldr	r7, [pc, #764]	; (403ae8 <_malloc_r+0x344>)
  4037ea:	443b      	add	r3, r7
  4037ec:	f1a3 0108 	sub.w	r1, r3, #8
  4037f0:	685c      	ldr	r4, [r3, #4]
  4037f2:	42a1      	cmp	r1, r4
  4037f4:	d106      	bne.n	403804 <_malloc_r+0x60>
  4037f6:	e00c      	b.n	403812 <_malloc_r+0x6e>
  4037f8:	2a00      	cmp	r2, #0
  4037fa:	f280 80aa 	bge.w	403952 <_malloc_r+0x1ae>
  4037fe:	68e4      	ldr	r4, [r4, #12]
  403800:	42a1      	cmp	r1, r4
  403802:	d006      	beq.n	403812 <_malloc_r+0x6e>
  403804:	6863      	ldr	r3, [r4, #4]
  403806:	f023 0303 	bic.w	r3, r3, #3
  40380a:	1b9a      	subs	r2, r3, r6
  40380c:	2a0f      	cmp	r2, #15
  40380e:	ddf3      	ble.n	4037f8 <_malloc_r+0x54>
  403810:	4670      	mov	r0, lr
  403812:	693c      	ldr	r4, [r7, #16]
  403814:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403afc <_malloc_r+0x358>
  403818:	4574      	cmp	r4, lr
  40381a:	f000 81ab 	beq.w	403b74 <_malloc_r+0x3d0>
  40381e:	6863      	ldr	r3, [r4, #4]
  403820:	f023 0303 	bic.w	r3, r3, #3
  403824:	1b9a      	subs	r2, r3, r6
  403826:	2a0f      	cmp	r2, #15
  403828:	f300 8190 	bgt.w	403b4c <_malloc_r+0x3a8>
  40382c:	2a00      	cmp	r2, #0
  40382e:	f8c7 e014 	str.w	lr, [r7, #20]
  403832:	f8c7 e010 	str.w	lr, [r7, #16]
  403836:	f280 809d 	bge.w	403974 <_malloc_r+0x1d0>
  40383a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40383e:	f080 8161 	bcs.w	403b04 <_malloc_r+0x360>
  403842:	08db      	lsrs	r3, r3, #3
  403844:	f103 0c01 	add.w	ip, r3, #1
  403848:	1099      	asrs	r1, r3, #2
  40384a:	687a      	ldr	r2, [r7, #4]
  40384c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403850:	f8c4 8008 	str.w	r8, [r4, #8]
  403854:	2301      	movs	r3, #1
  403856:	408b      	lsls	r3, r1
  403858:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40385c:	4313      	orrs	r3, r2
  40385e:	3908      	subs	r1, #8
  403860:	60e1      	str	r1, [r4, #12]
  403862:	607b      	str	r3, [r7, #4]
  403864:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403868:	f8c8 400c 	str.w	r4, [r8, #12]
  40386c:	1082      	asrs	r2, r0, #2
  40386e:	2401      	movs	r4, #1
  403870:	4094      	lsls	r4, r2
  403872:	429c      	cmp	r4, r3
  403874:	f200 808b 	bhi.w	40398e <_malloc_r+0x1ea>
  403878:	421c      	tst	r4, r3
  40387a:	d106      	bne.n	40388a <_malloc_r+0xe6>
  40387c:	f020 0003 	bic.w	r0, r0, #3
  403880:	0064      	lsls	r4, r4, #1
  403882:	421c      	tst	r4, r3
  403884:	f100 0004 	add.w	r0, r0, #4
  403888:	d0fa      	beq.n	403880 <_malloc_r+0xdc>
  40388a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40388e:	46cc      	mov	ip, r9
  403890:	4680      	mov	r8, r0
  403892:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403896:	459c      	cmp	ip, r3
  403898:	d107      	bne.n	4038aa <_malloc_r+0x106>
  40389a:	e16d      	b.n	403b78 <_malloc_r+0x3d4>
  40389c:	2a00      	cmp	r2, #0
  40389e:	f280 817b 	bge.w	403b98 <_malloc_r+0x3f4>
  4038a2:	68db      	ldr	r3, [r3, #12]
  4038a4:	459c      	cmp	ip, r3
  4038a6:	f000 8167 	beq.w	403b78 <_malloc_r+0x3d4>
  4038aa:	6859      	ldr	r1, [r3, #4]
  4038ac:	f021 0103 	bic.w	r1, r1, #3
  4038b0:	1b8a      	subs	r2, r1, r6
  4038b2:	2a0f      	cmp	r2, #15
  4038b4:	ddf2      	ble.n	40389c <_malloc_r+0xf8>
  4038b6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4038ba:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4038be:	9300      	str	r3, [sp, #0]
  4038c0:	199c      	adds	r4, r3, r6
  4038c2:	4628      	mov	r0, r5
  4038c4:	f046 0601 	orr.w	r6, r6, #1
  4038c8:	f042 0501 	orr.w	r5, r2, #1
  4038cc:	605e      	str	r6, [r3, #4]
  4038ce:	f8c8 c00c 	str.w	ip, [r8, #12]
  4038d2:	f8cc 8008 	str.w	r8, [ip, #8]
  4038d6:	617c      	str	r4, [r7, #20]
  4038d8:	613c      	str	r4, [r7, #16]
  4038da:	f8c4 e00c 	str.w	lr, [r4, #12]
  4038de:	f8c4 e008 	str.w	lr, [r4, #8]
  4038e2:	6065      	str	r5, [r4, #4]
  4038e4:	505a      	str	r2, [r3, r1]
  4038e6:	f000 fb73 	bl	403fd0 <__malloc_unlock>
  4038ea:	9b00      	ldr	r3, [sp, #0]
  4038ec:	f103 0408 	add.w	r4, r3, #8
  4038f0:	e01e      	b.n	403930 <_malloc_r+0x18c>
  4038f2:	2910      	cmp	r1, #16
  4038f4:	d820      	bhi.n	403938 <_malloc_r+0x194>
  4038f6:	f000 fb69 	bl	403fcc <__malloc_lock>
  4038fa:	2610      	movs	r6, #16
  4038fc:	2318      	movs	r3, #24
  4038fe:	2002      	movs	r0, #2
  403900:	4f79      	ldr	r7, [pc, #484]	; (403ae8 <_malloc_r+0x344>)
  403902:	443b      	add	r3, r7
  403904:	f1a3 0208 	sub.w	r2, r3, #8
  403908:	685c      	ldr	r4, [r3, #4]
  40390a:	4294      	cmp	r4, r2
  40390c:	f000 813d 	beq.w	403b8a <_malloc_r+0x3e6>
  403910:	6863      	ldr	r3, [r4, #4]
  403912:	68e1      	ldr	r1, [r4, #12]
  403914:	68a6      	ldr	r6, [r4, #8]
  403916:	f023 0303 	bic.w	r3, r3, #3
  40391a:	4423      	add	r3, r4
  40391c:	4628      	mov	r0, r5
  40391e:	685a      	ldr	r2, [r3, #4]
  403920:	60f1      	str	r1, [r6, #12]
  403922:	f042 0201 	orr.w	r2, r2, #1
  403926:	608e      	str	r6, [r1, #8]
  403928:	605a      	str	r2, [r3, #4]
  40392a:	f000 fb51 	bl	403fd0 <__malloc_unlock>
  40392e:	3408      	adds	r4, #8
  403930:	4620      	mov	r0, r4
  403932:	b003      	add	sp, #12
  403934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403938:	2400      	movs	r4, #0
  40393a:	230c      	movs	r3, #12
  40393c:	4620      	mov	r0, r4
  40393e:	602b      	str	r3, [r5, #0]
  403940:	b003      	add	sp, #12
  403942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403946:	2040      	movs	r0, #64	; 0x40
  403948:	f44f 7300 	mov.w	r3, #512	; 0x200
  40394c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403950:	e74a      	b.n	4037e8 <_malloc_r+0x44>
  403952:	4423      	add	r3, r4
  403954:	68e1      	ldr	r1, [r4, #12]
  403956:	685a      	ldr	r2, [r3, #4]
  403958:	68a6      	ldr	r6, [r4, #8]
  40395a:	f042 0201 	orr.w	r2, r2, #1
  40395e:	60f1      	str	r1, [r6, #12]
  403960:	4628      	mov	r0, r5
  403962:	608e      	str	r6, [r1, #8]
  403964:	605a      	str	r2, [r3, #4]
  403966:	f000 fb33 	bl	403fd0 <__malloc_unlock>
  40396a:	3408      	adds	r4, #8
  40396c:	4620      	mov	r0, r4
  40396e:	b003      	add	sp, #12
  403970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403974:	4423      	add	r3, r4
  403976:	4628      	mov	r0, r5
  403978:	685a      	ldr	r2, [r3, #4]
  40397a:	f042 0201 	orr.w	r2, r2, #1
  40397e:	605a      	str	r2, [r3, #4]
  403980:	f000 fb26 	bl	403fd0 <__malloc_unlock>
  403984:	3408      	adds	r4, #8
  403986:	4620      	mov	r0, r4
  403988:	b003      	add	sp, #12
  40398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40398e:	68bc      	ldr	r4, [r7, #8]
  403990:	6863      	ldr	r3, [r4, #4]
  403992:	f023 0803 	bic.w	r8, r3, #3
  403996:	45b0      	cmp	r8, r6
  403998:	d304      	bcc.n	4039a4 <_malloc_r+0x200>
  40399a:	eba8 0306 	sub.w	r3, r8, r6
  40399e:	2b0f      	cmp	r3, #15
  4039a0:	f300 8085 	bgt.w	403aae <_malloc_r+0x30a>
  4039a4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403b00 <_malloc_r+0x35c>
  4039a8:	4b50      	ldr	r3, [pc, #320]	; (403aec <_malloc_r+0x348>)
  4039aa:	f8d9 2000 	ldr.w	r2, [r9]
  4039ae:	681b      	ldr	r3, [r3, #0]
  4039b0:	3201      	adds	r2, #1
  4039b2:	4433      	add	r3, r6
  4039b4:	eb04 0a08 	add.w	sl, r4, r8
  4039b8:	f000 8155 	beq.w	403c66 <_malloc_r+0x4c2>
  4039bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4039c0:	330f      	adds	r3, #15
  4039c2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4039c6:	f02b 0b0f 	bic.w	fp, fp, #15
  4039ca:	4659      	mov	r1, fp
  4039cc:	4628      	mov	r0, r5
  4039ce:	f000 fca7 	bl	404320 <_sbrk_r>
  4039d2:	1c41      	adds	r1, r0, #1
  4039d4:	4602      	mov	r2, r0
  4039d6:	f000 80fc 	beq.w	403bd2 <_malloc_r+0x42e>
  4039da:	4582      	cmp	sl, r0
  4039dc:	f200 80f7 	bhi.w	403bce <_malloc_r+0x42a>
  4039e0:	4b43      	ldr	r3, [pc, #268]	; (403af0 <_malloc_r+0x34c>)
  4039e2:	6819      	ldr	r1, [r3, #0]
  4039e4:	4459      	add	r1, fp
  4039e6:	6019      	str	r1, [r3, #0]
  4039e8:	f000 814d 	beq.w	403c86 <_malloc_r+0x4e2>
  4039ec:	f8d9 0000 	ldr.w	r0, [r9]
  4039f0:	3001      	adds	r0, #1
  4039f2:	bf1b      	ittet	ne
  4039f4:	eba2 0a0a 	subne.w	sl, r2, sl
  4039f8:	4451      	addne	r1, sl
  4039fa:	f8c9 2000 	streq.w	r2, [r9]
  4039fe:	6019      	strne	r1, [r3, #0]
  403a00:	f012 0107 	ands.w	r1, r2, #7
  403a04:	f000 8115 	beq.w	403c32 <_malloc_r+0x48e>
  403a08:	f1c1 0008 	rsb	r0, r1, #8
  403a0c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403a10:	4402      	add	r2, r0
  403a12:	3108      	adds	r1, #8
  403a14:	eb02 090b 	add.w	r9, r2, fp
  403a18:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403a1c:	eba1 0909 	sub.w	r9, r1, r9
  403a20:	4649      	mov	r1, r9
  403a22:	4628      	mov	r0, r5
  403a24:	9301      	str	r3, [sp, #4]
  403a26:	9200      	str	r2, [sp, #0]
  403a28:	f000 fc7a 	bl	404320 <_sbrk_r>
  403a2c:	1c43      	adds	r3, r0, #1
  403a2e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403a32:	f000 8143 	beq.w	403cbc <_malloc_r+0x518>
  403a36:	1a80      	subs	r0, r0, r2
  403a38:	4448      	add	r0, r9
  403a3a:	f040 0001 	orr.w	r0, r0, #1
  403a3e:	6819      	ldr	r1, [r3, #0]
  403a40:	60ba      	str	r2, [r7, #8]
  403a42:	4449      	add	r1, r9
  403a44:	42bc      	cmp	r4, r7
  403a46:	6050      	str	r0, [r2, #4]
  403a48:	6019      	str	r1, [r3, #0]
  403a4a:	d017      	beq.n	403a7c <_malloc_r+0x2d8>
  403a4c:	f1b8 0f0f 	cmp.w	r8, #15
  403a50:	f240 80fb 	bls.w	403c4a <_malloc_r+0x4a6>
  403a54:	6860      	ldr	r0, [r4, #4]
  403a56:	f1a8 020c 	sub.w	r2, r8, #12
  403a5a:	f022 0207 	bic.w	r2, r2, #7
  403a5e:	eb04 0e02 	add.w	lr, r4, r2
  403a62:	f000 0001 	and.w	r0, r0, #1
  403a66:	f04f 0c05 	mov.w	ip, #5
  403a6a:	4310      	orrs	r0, r2
  403a6c:	2a0f      	cmp	r2, #15
  403a6e:	6060      	str	r0, [r4, #4]
  403a70:	f8ce c004 	str.w	ip, [lr, #4]
  403a74:	f8ce c008 	str.w	ip, [lr, #8]
  403a78:	f200 8117 	bhi.w	403caa <_malloc_r+0x506>
  403a7c:	4b1d      	ldr	r3, [pc, #116]	; (403af4 <_malloc_r+0x350>)
  403a7e:	68bc      	ldr	r4, [r7, #8]
  403a80:	681a      	ldr	r2, [r3, #0]
  403a82:	4291      	cmp	r1, r2
  403a84:	bf88      	it	hi
  403a86:	6019      	strhi	r1, [r3, #0]
  403a88:	4b1b      	ldr	r3, [pc, #108]	; (403af8 <_malloc_r+0x354>)
  403a8a:	681a      	ldr	r2, [r3, #0]
  403a8c:	4291      	cmp	r1, r2
  403a8e:	6862      	ldr	r2, [r4, #4]
  403a90:	bf88      	it	hi
  403a92:	6019      	strhi	r1, [r3, #0]
  403a94:	f022 0203 	bic.w	r2, r2, #3
  403a98:	4296      	cmp	r6, r2
  403a9a:	eba2 0306 	sub.w	r3, r2, r6
  403a9e:	d801      	bhi.n	403aa4 <_malloc_r+0x300>
  403aa0:	2b0f      	cmp	r3, #15
  403aa2:	dc04      	bgt.n	403aae <_malloc_r+0x30a>
  403aa4:	4628      	mov	r0, r5
  403aa6:	f000 fa93 	bl	403fd0 <__malloc_unlock>
  403aaa:	2400      	movs	r4, #0
  403aac:	e740      	b.n	403930 <_malloc_r+0x18c>
  403aae:	19a2      	adds	r2, r4, r6
  403ab0:	f043 0301 	orr.w	r3, r3, #1
  403ab4:	f046 0601 	orr.w	r6, r6, #1
  403ab8:	6066      	str	r6, [r4, #4]
  403aba:	4628      	mov	r0, r5
  403abc:	60ba      	str	r2, [r7, #8]
  403abe:	6053      	str	r3, [r2, #4]
  403ac0:	f000 fa86 	bl	403fd0 <__malloc_unlock>
  403ac4:	3408      	adds	r4, #8
  403ac6:	4620      	mov	r0, r4
  403ac8:	b003      	add	sp, #12
  403aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ace:	2b14      	cmp	r3, #20
  403ad0:	d971      	bls.n	403bb6 <_malloc_r+0x412>
  403ad2:	2b54      	cmp	r3, #84	; 0x54
  403ad4:	f200 80a3 	bhi.w	403c1e <_malloc_r+0x47a>
  403ad8:	0b33      	lsrs	r3, r6, #12
  403ada:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403ade:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403ae2:	00c3      	lsls	r3, r0, #3
  403ae4:	e680      	b.n	4037e8 <_malloc_r+0x44>
  403ae6:	bf00      	nop
  403ae8:	200005bc 	.word	0x200005bc
  403aec:	20000a98 	.word	0x20000a98
  403af0:	20000a68 	.word	0x20000a68
  403af4:	20000a90 	.word	0x20000a90
  403af8:	20000a94 	.word	0x20000a94
  403afc:	200005c4 	.word	0x200005c4
  403b00:	200009c4 	.word	0x200009c4
  403b04:	0a5a      	lsrs	r2, r3, #9
  403b06:	2a04      	cmp	r2, #4
  403b08:	d95b      	bls.n	403bc2 <_malloc_r+0x41e>
  403b0a:	2a14      	cmp	r2, #20
  403b0c:	f200 80ae 	bhi.w	403c6c <_malloc_r+0x4c8>
  403b10:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403b14:	00c9      	lsls	r1, r1, #3
  403b16:	325b      	adds	r2, #91	; 0x5b
  403b18:	eb07 0c01 	add.w	ip, r7, r1
  403b1c:	5879      	ldr	r1, [r7, r1]
  403b1e:	f1ac 0c08 	sub.w	ip, ip, #8
  403b22:	458c      	cmp	ip, r1
  403b24:	f000 8088 	beq.w	403c38 <_malloc_r+0x494>
  403b28:	684a      	ldr	r2, [r1, #4]
  403b2a:	f022 0203 	bic.w	r2, r2, #3
  403b2e:	4293      	cmp	r3, r2
  403b30:	d273      	bcs.n	403c1a <_malloc_r+0x476>
  403b32:	6889      	ldr	r1, [r1, #8]
  403b34:	458c      	cmp	ip, r1
  403b36:	d1f7      	bne.n	403b28 <_malloc_r+0x384>
  403b38:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403b3c:	687b      	ldr	r3, [r7, #4]
  403b3e:	60e2      	str	r2, [r4, #12]
  403b40:	f8c4 c008 	str.w	ip, [r4, #8]
  403b44:	6094      	str	r4, [r2, #8]
  403b46:	f8cc 400c 	str.w	r4, [ip, #12]
  403b4a:	e68f      	b.n	40386c <_malloc_r+0xc8>
  403b4c:	19a1      	adds	r1, r4, r6
  403b4e:	f046 0c01 	orr.w	ip, r6, #1
  403b52:	f042 0601 	orr.w	r6, r2, #1
  403b56:	f8c4 c004 	str.w	ip, [r4, #4]
  403b5a:	4628      	mov	r0, r5
  403b5c:	6179      	str	r1, [r7, #20]
  403b5e:	6139      	str	r1, [r7, #16]
  403b60:	f8c1 e00c 	str.w	lr, [r1, #12]
  403b64:	f8c1 e008 	str.w	lr, [r1, #8]
  403b68:	604e      	str	r6, [r1, #4]
  403b6a:	50e2      	str	r2, [r4, r3]
  403b6c:	f000 fa30 	bl	403fd0 <__malloc_unlock>
  403b70:	3408      	adds	r4, #8
  403b72:	e6dd      	b.n	403930 <_malloc_r+0x18c>
  403b74:	687b      	ldr	r3, [r7, #4]
  403b76:	e679      	b.n	40386c <_malloc_r+0xc8>
  403b78:	f108 0801 	add.w	r8, r8, #1
  403b7c:	f018 0f03 	tst.w	r8, #3
  403b80:	f10c 0c08 	add.w	ip, ip, #8
  403b84:	f47f ae85 	bne.w	403892 <_malloc_r+0xee>
  403b88:	e02d      	b.n	403be6 <_malloc_r+0x442>
  403b8a:	68dc      	ldr	r4, [r3, #12]
  403b8c:	42a3      	cmp	r3, r4
  403b8e:	bf08      	it	eq
  403b90:	3002      	addeq	r0, #2
  403b92:	f43f ae3e 	beq.w	403812 <_malloc_r+0x6e>
  403b96:	e6bb      	b.n	403910 <_malloc_r+0x16c>
  403b98:	4419      	add	r1, r3
  403b9a:	461c      	mov	r4, r3
  403b9c:	684a      	ldr	r2, [r1, #4]
  403b9e:	68db      	ldr	r3, [r3, #12]
  403ba0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403ba4:	f042 0201 	orr.w	r2, r2, #1
  403ba8:	604a      	str	r2, [r1, #4]
  403baa:	4628      	mov	r0, r5
  403bac:	60f3      	str	r3, [r6, #12]
  403bae:	609e      	str	r6, [r3, #8]
  403bb0:	f000 fa0e 	bl	403fd0 <__malloc_unlock>
  403bb4:	e6bc      	b.n	403930 <_malloc_r+0x18c>
  403bb6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403bba:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403bbe:	00c3      	lsls	r3, r0, #3
  403bc0:	e612      	b.n	4037e8 <_malloc_r+0x44>
  403bc2:	099a      	lsrs	r2, r3, #6
  403bc4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403bc8:	00c9      	lsls	r1, r1, #3
  403bca:	3238      	adds	r2, #56	; 0x38
  403bcc:	e7a4      	b.n	403b18 <_malloc_r+0x374>
  403bce:	42bc      	cmp	r4, r7
  403bd0:	d054      	beq.n	403c7c <_malloc_r+0x4d8>
  403bd2:	68bc      	ldr	r4, [r7, #8]
  403bd4:	6862      	ldr	r2, [r4, #4]
  403bd6:	f022 0203 	bic.w	r2, r2, #3
  403bda:	e75d      	b.n	403a98 <_malloc_r+0x2f4>
  403bdc:	f859 3908 	ldr.w	r3, [r9], #-8
  403be0:	4599      	cmp	r9, r3
  403be2:	f040 8086 	bne.w	403cf2 <_malloc_r+0x54e>
  403be6:	f010 0f03 	tst.w	r0, #3
  403bea:	f100 30ff 	add.w	r0, r0, #4294967295
  403bee:	d1f5      	bne.n	403bdc <_malloc_r+0x438>
  403bf0:	687b      	ldr	r3, [r7, #4]
  403bf2:	ea23 0304 	bic.w	r3, r3, r4
  403bf6:	607b      	str	r3, [r7, #4]
  403bf8:	0064      	lsls	r4, r4, #1
  403bfa:	429c      	cmp	r4, r3
  403bfc:	f63f aec7 	bhi.w	40398e <_malloc_r+0x1ea>
  403c00:	2c00      	cmp	r4, #0
  403c02:	f43f aec4 	beq.w	40398e <_malloc_r+0x1ea>
  403c06:	421c      	tst	r4, r3
  403c08:	4640      	mov	r0, r8
  403c0a:	f47f ae3e 	bne.w	40388a <_malloc_r+0xe6>
  403c0e:	0064      	lsls	r4, r4, #1
  403c10:	421c      	tst	r4, r3
  403c12:	f100 0004 	add.w	r0, r0, #4
  403c16:	d0fa      	beq.n	403c0e <_malloc_r+0x46a>
  403c18:	e637      	b.n	40388a <_malloc_r+0xe6>
  403c1a:	468c      	mov	ip, r1
  403c1c:	e78c      	b.n	403b38 <_malloc_r+0x394>
  403c1e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403c22:	d815      	bhi.n	403c50 <_malloc_r+0x4ac>
  403c24:	0bf3      	lsrs	r3, r6, #15
  403c26:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403c2a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403c2e:	00c3      	lsls	r3, r0, #3
  403c30:	e5da      	b.n	4037e8 <_malloc_r+0x44>
  403c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403c36:	e6ed      	b.n	403a14 <_malloc_r+0x270>
  403c38:	687b      	ldr	r3, [r7, #4]
  403c3a:	1092      	asrs	r2, r2, #2
  403c3c:	2101      	movs	r1, #1
  403c3e:	fa01 f202 	lsl.w	r2, r1, r2
  403c42:	4313      	orrs	r3, r2
  403c44:	607b      	str	r3, [r7, #4]
  403c46:	4662      	mov	r2, ip
  403c48:	e779      	b.n	403b3e <_malloc_r+0x39a>
  403c4a:	2301      	movs	r3, #1
  403c4c:	6053      	str	r3, [r2, #4]
  403c4e:	e729      	b.n	403aa4 <_malloc_r+0x300>
  403c50:	f240 5254 	movw	r2, #1364	; 0x554
  403c54:	4293      	cmp	r3, r2
  403c56:	d822      	bhi.n	403c9e <_malloc_r+0x4fa>
  403c58:	0cb3      	lsrs	r3, r6, #18
  403c5a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403c5e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403c62:	00c3      	lsls	r3, r0, #3
  403c64:	e5c0      	b.n	4037e8 <_malloc_r+0x44>
  403c66:	f103 0b10 	add.w	fp, r3, #16
  403c6a:	e6ae      	b.n	4039ca <_malloc_r+0x226>
  403c6c:	2a54      	cmp	r2, #84	; 0x54
  403c6e:	d829      	bhi.n	403cc4 <_malloc_r+0x520>
  403c70:	0b1a      	lsrs	r2, r3, #12
  403c72:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403c76:	00c9      	lsls	r1, r1, #3
  403c78:	326e      	adds	r2, #110	; 0x6e
  403c7a:	e74d      	b.n	403b18 <_malloc_r+0x374>
  403c7c:	4b20      	ldr	r3, [pc, #128]	; (403d00 <_malloc_r+0x55c>)
  403c7e:	6819      	ldr	r1, [r3, #0]
  403c80:	4459      	add	r1, fp
  403c82:	6019      	str	r1, [r3, #0]
  403c84:	e6b2      	b.n	4039ec <_malloc_r+0x248>
  403c86:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403c8a:	2800      	cmp	r0, #0
  403c8c:	f47f aeae 	bne.w	4039ec <_malloc_r+0x248>
  403c90:	eb08 030b 	add.w	r3, r8, fp
  403c94:	68ba      	ldr	r2, [r7, #8]
  403c96:	f043 0301 	orr.w	r3, r3, #1
  403c9a:	6053      	str	r3, [r2, #4]
  403c9c:	e6ee      	b.n	403a7c <_malloc_r+0x2d8>
  403c9e:	207f      	movs	r0, #127	; 0x7f
  403ca0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403ca4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403ca8:	e59e      	b.n	4037e8 <_malloc_r+0x44>
  403caa:	f104 0108 	add.w	r1, r4, #8
  403cae:	4628      	mov	r0, r5
  403cb0:	9300      	str	r3, [sp, #0]
  403cb2:	f7ff fa67 	bl	403184 <_free_r>
  403cb6:	9b00      	ldr	r3, [sp, #0]
  403cb8:	6819      	ldr	r1, [r3, #0]
  403cba:	e6df      	b.n	403a7c <_malloc_r+0x2d8>
  403cbc:	2001      	movs	r0, #1
  403cbe:	f04f 0900 	mov.w	r9, #0
  403cc2:	e6bc      	b.n	403a3e <_malloc_r+0x29a>
  403cc4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403cc8:	d805      	bhi.n	403cd6 <_malloc_r+0x532>
  403cca:	0bda      	lsrs	r2, r3, #15
  403ccc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403cd0:	00c9      	lsls	r1, r1, #3
  403cd2:	3277      	adds	r2, #119	; 0x77
  403cd4:	e720      	b.n	403b18 <_malloc_r+0x374>
  403cd6:	f240 5154 	movw	r1, #1364	; 0x554
  403cda:	428a      	cmp	r2, r1
  403cdc:	d805      	bhi.n	403cea <_malloc_r+0x546>
  403cde:	0c9a      	lsrs	r2, r3, #18
  403ce0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403ce4:	00c9      	lsls	r1, r1, #3
  403ce6:	327c      	adds	r2, #124	; 0x7c
  403ce8:	e716      	b.n	403b18 <_malloc_r+0x374>
  403cea:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403cee:	227e      	movs	r2, #126	; 0x7e
  403cf0:	e712      	b.n	403b18 <_malloc_r+0x374>
  403cf2:	687b      	ldr	r3, [r7, #4]
  403cf4:	e780      	b.n	403bf8 <_malloc_r+0x454>
  403cf6:	08f0      	lsrs	r0, r6, #3
  403cf8:	f106 0308 	add.w	r3, r6, #8
  403cfc:	e600      	b.n	403900 <_malloc_r+0x15c>
  403cfe:	bf00      	nop
  403d00:	20000a68 	.word	0x20000a68

00403d04 <__ascii_mbtowc>:
  403d04:	b082      	sub	sp, #8
  403d06:	b149      	cbz	r1, 403d1c <__ascii_mbtowc+0x18>
  403d08:	b15a      	cbz	r2, 403d22 <__ascii_mbtowc+0x1e>
  403d0a:	b16b      	cbz	r3, 403d28 <__ascii_mbtowc+0x24>
  403d0c:	7813      	ldrb	r3, [r2, #0]
  403d0e:	600b      	str	r3, [r1, #0]
  403d10:	7812      	ldrb	r2, [r2, #0]
  403d12:	1c10      	adds	r0, r2, #0
  403d14:	bf18      	it	ne
  403d16:	2001      	movne	r0, #1
  403d18:	b002      	add	sp, #8
  403d1a:	4770      	bx	lr
  403d1c:	a901      	add	r1, sp, #4
  403d1e:	2a00      	cmp	r2, #0
  403d20:	d1f3      	bne.n	403d0a <__ascii_mbtowc+0x6>
  403d22:	4610      	mov	r0, r2
  403d24:	b002      	add	sp, #8
  403d26:	4770      	bx	lr
  403d28:	f06f 0001 	mvn.w	r0, #1
  403d2c:	e7f4      	b.n	403d18 <__ascii_mbtowc+0x14>
  403d2e:	bf00      	nop

00403d30 <memchr>:
  403d30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403d34:	2a10      	cmp	r2, #16
  403d36:	db2b      	blt.n	403d90 <memchr+0x60>
  403d38:	f010 0f07 	tst.w	r0, #7
  403d3c:	d008      	beq.n	403d50 <memchr+0x20>
  403d3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403d42:	3a01      	subs	r2, #1
  403d44:	428b      	cmp	r3, r1
  403d46:	d02d      	beq.n	403da4 <memchr+0x74>
  403d48:	f010 0f07 	tst.w	r0, #7
  403d4c:	b342      	cbz	r2, 403da0 <memchr+0x70>
  403d4e:	d1f6      	bne.n	403d3e <memchr+0xe>
  403d50:	b4f0      	push	{r4, r5, r6, r7}
  403d52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403d56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403d5a:	f022 0407 	bic.w	r4, r2, #7
  403d5e:	f07f 0700 	mvns.w	r7, #0
  403d62:	2300      	movs	r3, #0
  403d64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403d68:	3c08      	subs	r4, #8
  403d6a:	ea85 0501 	eor.w	r5, r5, r1
  403d6e:	ea86 0601 	eor.w	r6, r6, r1
  403d72:	fa85 f547 	uadd8	r5, r5, r7
  403d76:	faa3 f587 	sel	r5, r3, r7
  403d7a:	fa86 f647 	uadd8	r6, r6, r7
  403d7e:	faa5 f687 	sel	r6, r5, r7
  403d82:	b98e      	cbnz	r6, 403da8 <memchr+0x78>
  403d84:	d1ee      	bne.n	403d64 <memchr+0x34>
  403d86:	bcf0      	pop	{r4, r5, r6, r7}
  403d88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403d8c:	f002 0207 	and.w	r2, r2, #7
  403d90:	b132      	cbz	r2, 403da0 <memchr+0x70>
  403d92:	f810 3b01 	ldrb.w	r3, [r0], #1
  403d96:	3a01      	subs	r2, #1
  403d98:	ea83 0301 	eor.w	r3, r3, r1
  403d9c:	b113      	cbz	r3, 403da4 <memchr+0x74>
  403d9e:	d1f8      	bne.n	403d92 <memchr+0x62>
  403da0:	2000      	movs	r0, #0
  403da2:	4770      	bx	lr
  403da4:	3801      	subs	r0, #1
  403da6:	4770      	bx	lr
  403da8:	2d00      	cmp	r5, #0
  403daa:	bf06      	itte	eq
  403dac:	4635      	moveq	r5, r6
  403dae:	3803      	subeq	r0, #3
  403db0:	3807      	subne	r0, #7
  403db2:	f015 0f01 	tst.w	r5, #1
  403db6:	d107      	bne.n	403dc8 <memchr+0x98>
  403db8:	3001      	adds	r0, #1
  403dba:	f415 7f80 	tst.w	r5, #256	; 0x100
  403dbe:	bf02      	ittt	eq
  403dc0:	3001      	addeq	r0, #1
  403dc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403dc6:	3001      	addeq	r0, #1
  403dc8:	bcf0      	pop	{r4, r5, r6, r7}
  403dca:	3801      	subs	r0, #1
  403dcc:	4770      	bx	lr
  403dce:	bf00      	nop

00403dd0 <memcpy>:
  403dd0:	4684      	mov	ip, r0
  403dd2:	ea41 0300 	orr.w	r3, r1, r0
  403dd6:	f013 0303 	ands.w	r3, r3, #3
  403dda:	d16d      	bne.n	403eb8 <memcpy+0xe8>
  403ddc:	3a40      	subs	r2, #64	; 0x40
  403dde:	d341      	bcc.n	403e64 <memcpy+0x94>
  403de0:	f851 3b04 	ldr.w	r3, [r1], #4
  403de4:	f840 3b04 	str.w	r3, [r0], #4
  403de8:	f851 3b04 	ldr.w	r3, [r1], #4
  403dec:	f840 3b04 	str.w	r3, [r0], #4
  403df0:	f851 3b04 	ldr.w	r3, [r1], #4
  403df4:	f840 3b04 	str.w	r3, [r0], #4
  403df8:	f851 3b04 	ldr.w	r3, [r1], #4
  403dfc:	f840 3b04 	str.w	r3, [r0], #4
  403e00:	f851 3b04 	ldr.w	r3, [r1], #4
  403e04:	f840 3b04 	str.w	r3, [r0], #4
  403e08:	f851 3b04 	ldr.w	r3, [r1], #4
  403e0c:	f840 3b04 	str.w	r3, [r0], #4
  403e10:	f851 3b04 	ldr.w	r3, [r1], #4
  403e14:	f840 3b04 	str.w	r3, [r0], #4
  403e18:	f851 3b04 	ldr.w	r3, [r1], #4
  403e1c:	f840 3b04 	str.w	r3, [r0], #4
  403e20:	f851 3b04 	ldr.w	r3, [r1], #4
  403e24:	f840 3b04 	str.w	r3, [r0], #4
  403e28:	f851 3b04 	ldr.w	r3, [r1], #4
  403e2c:	f840 3b04 	str.w	r3, [r0], #4
  403e30:	f851 3b04 	ldr.w	r3, [r1], #4
  403e34:	f840 3b04 	str.w	r3, [r0], #4
  403e38:	f851 3b04 	ldr.w	r3, [r1], #4
  403e3c:	f840 3b04 	str.w	r3, [r0], #4
  403e40:	f851 3b04 	ldr.w	r3, [r1], #4
  403e44:	f840 3b04 	str.w	r3, [r0], #4
  403e48:	f851 3b04 	ldr.w	r3, [r1], #4
  403e4c:	f840 3b04 	str.w	r3, [r0], #4
  403e50:	f851 3b04 	ldr.w	r3, [r1], #4
  403e54:	f840 3b04 	str.w	r3, [r0], #4
  403e58:	f851 3b04 	ldr.w	r3, [r1], #4
  403e5c:	f840 3b04 	str.w	r3, [r0], #4
  403e60:	3a40      	subs	r2, #64	; 0x40
  403e62:	d2bd      	bcs.n	403de0 <memcpy+0x10>
  403e64:	3230      	adds	r2, #48	; 0x30
  403e66:	d311      	bcc.n	403e8c <memcpy+0xbc>
  403e68:	f851 3b04 	ldr.w	r3, [r1], #4
  403e6c:	f840 3b04 	str.w	r3, [r0], #4
  403e70:	f851 3b04 	ldr.w	r3, [r1], #4
  403e74:	f840 3b04 	str.w	r3, [r0], #4
  403e78:	f851 3b04 	ldr.w	r3, [r1], #4
  403e7c:	f840 3b04 	str.w	r3, [r0], #4
  403e80:	f851 3b04 	ldr.w	r3, [r1], #4
  403e84:	f840 3b04 	str.w	r3, [r0], #4
  403e88:	3a10      	subs	r2, #16
  403e8a:	d2ed      	bcs.n	403e68 <memcpy+0x98>
  403e8c:	320c      	adds	r2, #12
  403e8e:	d305      	bcc.n	403e9c <memcpy+0xcc>
  403e90:	f851 3b04 	ldr.w	r3, [r1], #4
  403e94:	f840 3b04 	str.w	r3, [r0], #4
  403e98:	3a04      	subs	r2, #4
  403e9a:	d2f9      	bcs.n	403e90 <memcpy+0xc0>
  403e9c:	3204      	adds	r2, #4
  403e9e:	d008      	beq.n	403eb2 <memcpy+0xe2>
  403ea0:	07d2      	lsls	r2, r2, #31
  403ea2:	bf1c      	itt	ne
  403ea4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403ea8:	f800 3b01 	strbne.w	r3, [r0], #1
  403eac:	d301      	bcc.n	403eb2 <memcpy+0xe2>
  403eae:	880b      	ldrh	r3, [r1, #0]
  403eb0:	8003      	strh	r3, [r0, #0]
  403eb2:	4660      	mov	r0, ip
  403eb4:	4770      	bx	lr
  403eb6:	bf00      	nop
  403eb8:	2a08      	cmp	r2, #8
  403eba:	d313      	bcc.n	403ee4 <memcpy+0x114>
  403ebc:	078b      	lsls	r3, r1, #30
  403ebe:	d08d      	beq.n	403ddc <memcpy+0xc>
  403ec0:	f010 0303 	ands.w	r3, r0, #3
  403ec4:	d08a      	beq.n	403ddc <memcpy+0xc>
  403ec6:	f1c3 0304 	rsb	r3, r3, #4
  403eca:	1ad2      	subs	r2, r2, r3
  403ecc:	07db      	lsls	r3, r3, #31
  403ece:	bf1c      	itt	ne
  403ed0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403ed4:	f800 3b01 	strbne.w	r3, [r0], #1
  403ed8:	d380      	bcc.n	403ddc <memcpy+0xc>
  403eda:	f831 3b02 	ldrh.w	r3, [r1], #2
  403ede:	f820 3b02 	strh.w	r3, [r0], #2
  403ee2:	e77b      	b.n	403ddc <memcpy+0xc>
  403ee4:	3a04      	subs	r2, #4
  403ee6:	d3d9      	bcc.n	403e9c <memcpy+0xcc>
  403ee8:	3a01      	subs	r2, #1
  403eea:	f811 3b01 	ldrb.w	r3, [r1], #1
  403eee:	f800 3b01 	strb.w	r3, [r0], #1
  403ef2:	d2f9      	bcs.n	403ee8 <memcpy+0x118>
  403ef4:	780b      	ldrb	r3, [r1, #0]
  403ef6:	7003      	strb	r3, [r0, #0]
  403ef8:	784b      	ldrb	r3, [r1, #1]
  403efa:	7043      	strb	r3, [r0, #1]
  403efc:	788b      	ldrb	r3, [r1, #2]
  403efe:	7083      	strb	r3, [r0, #2]
  403f00:	4660      	mov	r0, ip
  403f02:	4770      	bx	lr

00403f04 <memmove>:
  403f04:	4288      	cmp	r0, r1
  403f06:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f08:	d90d      	bls.n	403f26 <memmove+0x22>
  403f0a:	188b      	adds	r3, r1, r2
  403f0c:	4298      	cmp	r0, r3
  403f0e:	d20a      	bcs.n	403f26 <memmove+0x22>
  403f10:	1884      	adds	r4, r0, r2
  403f12:	2a00      	cmp	r2, #0
  403f14:	d051      	beq.n	403fba <memmove+0xb6>
  403f16:	4622      	mov	r2, r4
  403f18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403f1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403f20:	4299      	cmp	r1, r3
  403f22:	d1f9      	bne.n	403f18 <memmove+0x14>
  403f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403f26:	2a0f      	cmp	r2, #15
  403f28:	d948      	bls.n	403fbc <memmove+0xb8>
  403f2a:	ea41 0300 	orr.w	r3, r1, r0
  403f2e:	079b      	lsls	r3, r3, #30
  403f30:	d146      	bne.n	403fc0 <memmove+0xbc>
  403f32:	f100 0410 	add.w	r4, r0, #16
  403f36:	f101 0310 	add.w	r3, r1, #16
  403f3a:	4615      	mov	r5, r2
  403f3c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403f40:	f844 6c10 	str.w	r6, [r4, #-16]
  403f44:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403f48:	f844 6c0c 	str.w	r6, [r4, #-12]
  403f4c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403f50:	f844 6c08 	str.w	r6, [r4, #-8]
  403f54:	3d10      	subs	r5, #16
  403f56:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403f5a:	f844 6c04 	str.w	r6, [r4, #-4]
  403f5e:	2d0f      	cmp	r5, #15
  403f60:	f103 0310 	add.w	r3, r3, #16
  403f64:	f104 0410 	add.w	r4, r4, #16
  403f68:	d8e8      	bhi.n	403f3c <memmove+0x38>
  403f6a:	f1a2 0310 	sub.w	r3, r2, #16
  403f6e:	f023 030f 	bic.w	r3, r3, #15
  403f72:	f002 0e0f 	and.w	lr, r2, #15
  403f76:	3310      	adds	r3, #16
  403f78:	f1be 0f03 	cmp.w	lr, #3
  403f7c:	4419      	add	r1, r3
  403f7e:	4403      	add	r3, r0
  403f80:	d921      	bls.n	403fc6 <memmove+0xc2>
  403f82:	1f1e      	subs	r6, r3, #4
  403f84:	460d      	mov	r5, r1
  403f86:	4674      	mov	r4, lr
  403f88:	3c04      	subs	r4, #4
  403f8a:	f855 7b04 	ldr.w	r7, [r5], #4
  403f8e:	f846 7f04 	str.w	r7, [r6, #4]!
  403f92:	2c03      	cmp	r4, #3
  403f94:	d8f8      	bhi.n	403f88 <memmove+0x84>
  403f96:	f1ae 0404 	sub.w	r4, lr, #4
  403f9a:	f024 0403 	bic.w	r4, r4, #3
  403f9e:	3404      	adds	r4, #4
  403fa0:	4421      	add	r1, r4
  403fa2:	4423      	add	r3, r4
  403fa4:	f002 0203 	and.w	r2, r2, #3
  403fa8:	b162      	cbz	r2, 403fc4 <memmove+0xc0>
  403faa:	3b01      	subs	r3, #1
  403fac:	440a      	add	r2, r1
  403fae:	f811 4b01 	ldrb.w	r4, [r1], #1
  403fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
  403fb6:	428a      	cmp	r2, r1
  403fb8:	d1f9      	bne.n	403fae <memmove+0xaa>
  403fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403fbc:	4603      	mov	r3, r0
  403fbe:	e7f3      	b.n	403fa8 <memmove+0xa4>
  403fc0:	4603      	mov	r3, r0
  403fc2:	e7f2      	b.n	403faa <memmove+0xa6>
  403fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403fc6:	4672      	mov	r2, lr
  403fc8:	e7ee      	b.n	403fa8 <memmove+0xa4>
  403fca:	bf00      	nop

00403fcc <__malloc_lock>:
  403fcc:	4770      	bx	lr
  403fce:	bf00      	nop

00403fd0 <__malloc_unlock>:
  403fd0:	4770      	bx	lr
  403fd2:	bf00      	nop

00403fd4 <_realloc_r>:
  403fd4:	2900      	cmp	r1, #0
  403fd6:	f000 8095 	beq.w	404104 <_realloc_r+0x130>
  403fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403fde:	460d      	mov	r5, r1
  403fe0:	4616      	mov	r6, r2
  403fe2:	b083      	sub	sp, #12
  403fe4:	4680      	mov	r8, r0
  403fe6:	f106 070b 	add.w	r7, r6, #11
  403fea:	f7ff ffef 	bl	403fcc <__malloc_lock>
  403fee:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403ff2:	2f16      	cmp	r7, #22
  403ff4:	f02e 0403 	bic.w	r4, lr, #3
  403ff8:	f1a5 0908 	sub.w	r9, r5, #8
  403ffc:	d83c      	bhi.n	404078 <_realloc_r+0xa4>
  403ffe:	2210      	movs	r2, #16
  404000:	4617      	mov	r7, r2
  404002:	42be      	cmp	r6, r7
  404004:	d83d      	bhi.n	404082 <_realloc_r+0xae>
  404006:	4294      	cmp	r4, r2
  404008:	da43      	bge.n	404092 <_realloc_r+0xbe>
  40400a:	4bc4      	ldr	r3, [pc, #784]	; (40431c <_realloc_r+0x348>)
  40400c:	6899      	ldr	r1, [r3, #8]
  40400e:	eb09 0004 	add.w	r0, r9, r4
  404012:	4288      	cmp	r0, r1
  404014:	f000 80b4 	beq.w	404180 <_realloc_r+0x1ac>
  404018:	6843      	ldr	r3, [r0, #4]
  40401a:	f023 0101 	bic.w	r1, r3, #1
  40401e:	4401      	add	r1, r0
  404020:	6849      	ldr	r1, [r1, #4]
  404022:	07c9      	lsls	r1, r1, #31
  404024:	d54c      	bpl.n	4040c0 <_realloc_r+0xec>
  404026:	f01e 0f01 	tst.w	lr, #1
  40402a:	f000 809b 	beq.w	404164 <_realloc_r+0x190>
  40402e:	4631      	mov	r1, r6
  404030:	4640      	mov	r0, r8
  404032:	f7ff fbb7 	bl	4037a4 <_malloc_r>
  404036:	4606      	mov	r6, r0
  404038:	2800      	cmp	r0, #0
  40403a:	d03a      	beq.n	4040b2 <_realloc_r+0xde>
  40403c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404040:	f023 0301 	bic.w	r3, r3, #1
  404044:	444b      	add	r3, r9
  404046:	f1a0 0208 	sub.w	r2, r0, #8
  40404a:	429a      	cmp	r2, r3
  40404c:	f000 8121 	beq.w	404292 <_realloc_r+0x2be>
  404050:	1f22      	subs	r2, r4, #4
  404052:	2a24      	cmp	r2, #36	; 0x24
  404054:	f200 8107 	bhi.w	404266 <_realloc_r+0x292>
  404058:	2a13      	cmp	r2, #19
  40405a:	f200 80db 	bhi.w	404214 <_realloc_r+0x240>
  40405e:	4603      	mov	r3, r0
  404060:	462a      	mov	r2, r5
  404062:	6811      	ldr	r1, [r2, #0]
  404064:	6019      	str	r1, [r3, #0]
  404066:	6851      	ldr	r1, [r2, #4]
  404068:	6059      	str	r1, [r3, #4]
  40406a:	6892      	ldr	r2, [r2, #8]
  40406c:	609a      	str	r2, [r3, #8]
  40406e:	4629      	mov	r1, r5
  404070:	4640      	mov	r0, r8
  404072:	f7ff f887 	bl	403184 <_free_r>
  404076:	e01c      	b.n	4040b2 <_realloc_r+0xde>
  404078:	f027 0707 	bic.w	r7, r7, #7
  40407c:	2f00      	cmp	r7, #0
  40407e:	463a      	mov	r2, r7
  404080:	dabf      	bge.n	404002 <_realloc_r+0x2e>
  404082:	2600      	movs	r6, #0
  404084:	230c      	movs	r3, #12
  404086:	4630      	mov	r0, r6
  404088:	f8c8 3000 	str.w	r3, [r8]
  40408c:	b003      	add	sp, #12
  40408e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404092:	462e      	mov	r6, r5
  404094:	1be3      	subs	r3, r4, r7
  404096:	2b0f      	cmp	r3, #15
  404098:	d81e      	bhi.n	4040d8 <_realloc_r+0x104>
  40409a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40409e:	f003 0301 	and.w	r3, r3, #1
  4040a2:	4323      	orrs	r3, r4
  4040a4:	444c      	add	r4, r9
  4040a6:	f8c9 3004 	str.w	r3, [r9, #4]
  4040aa:	6863      	ldr	r3, [r4, #4]
  4040ac:	f043 0301 	orr.w	r3, r3, #1
  4040b0:	6063      	str	r3, [r4, #4]
  4040b2:	4640      	mov	r0, r8
  4040b4:	f7ff ff8c 	bl	403fd0 <__malloc_unlock>
  4040b8:	4630      	mov	r0, r6
  4040ba:	b003      	add	sp, #12
  4040bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040c0:	f023 0303 	bic.w	r3, r3, #3
  4040c4:	18e1      	adds	r1, r4, r3
  4040c6:	4291      	cmp	r1, r2
  4040c8:	db1f      	blt.n	40410a <_realloc_r+0x136>
  4040ca:	68c3      	ldr	r3, [r0, #12]
  4040cc:	6882      	ldr	r2, [r0, #8]
  4040ce:	462e      	mov	r6, r5
  4040d0:	60d3      	str	r3, [r2, #12]
  4040d2:	460c      	mov	r4, r1
  4040d4:	609a      	str	r2, [r3, #8]
  4040d6:	e7dd      	b.n	404094 <_realloc_r+0xc0>
  4040d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4040dc:	eb09 0107 	add.w	r1, r9, r7
  4040e0:	f002 0201 	and.w	r2, r2, #1
  4040e4:	444c      	add	r4, r9
  4040e6:	f043 0301 	orr.w	r3, r3, #1
  4040ea:	4317      	orrs	r7, r2
  4040ec:	f8c9 7004 	str.w	r7, [r9, #4]
  4040f0:	604b      	str	r3, [r1, #4]
  4040f2:	6863      	ldr	r3, [r4, #4]
  4040f4:	f043 0301 	orr.w	r3, r3, #1
  4040f8:	3108      	adds	r1, #8
  4040fa:	6063      	str	r3, [r4, #4]
  4040fc:	4640      	mov	r0, r8
  4040fe:	f7ff f841 	bl	403184 <_free_r>
  404102:	e7d6      	b.n	4040b2 <_realloc_r+0xde>
  404104:	4611      	mov	r1, r2
  404106:	f7ff bb4d 	b.w	4037a4 <_malloc_r>
  40410a:	f01e 0f01 	tst.w	lr, #1
  40410e:	d18e      	bne.n	40402e <_realloc_r+0x5a>
  404110:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404114:	eba9 0a01 	sub.w	sl, r9, r1
  404118:	f8da 1004 	ldr.w	r1, [sl, #4]
  40411c:	f021 0103 	bic.w	r1, r1, #3
  404120:	440b      	add	r3, r1
  404122:	4423      	add	r3, r4
  404124:	4293      	cmp	r3, r2
  404126:	db25      	blt.n	404174 <_realloc_r+0x1a0>
  404128:	68c2      	ldr	r2, [r0, #12]
  40412a:	6881      	ldr	r1, [r0, #8]
  40412c:	4656      	mov	r6, sl
  40412e:	60ca      	str	r2, [r1, #12]
  404130:	6091      	str	r1, [r2, #8]
  404132:	f8da 100c 	ldr.w	r1, [sl, #12]
  404136:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40413a:	1f22      	subs	r2, r4, #4
  40413c:	2a24      	cmp	r2, #36	; 0x24
  40413e:	60c1      	str	r1, [r0, #12]
  404140:	6088      	str	r0, [r1, #8]
  404142:	f200 8094 	bhi.w	40426e <_realloc_r+0x29a>
  404146:	2a13      	cmp	r2, #19
  404148:	d96f      	bls.n	40422a <_realloc_r+0x256>
  40414a:	6829      	ldr	r1, [r5, #0]
  40414c:	f8ca 1008 	str.w	r1, [sl, #8]
  404150:	6869      	ldr	r1, [r5, #4]
  404152:	f8ca 100c 	str.w	r1, [sl, #12]
  404156:	2a1b      	cmp	r2, #27
  404158:	f200 80a2 	bhi.w	4042a0 <_realloc_r+0x2cc>
  40415c:	3508      	adds	r5, #8
  40415e:	f10a 0210 	add.w	r2, sl, #16
  404162:	e063      	b.n	40422c <_realloc_r+0x258>
  404164:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404168:	eba9 0a03 	sub.w	sl, r9, r3
  40416c:	f8da 1004 	ldr.w	r1, [sl, #4]
  404170:	f021 0103 	bic.w	r1, r1, #3
  404174:	1863      	adds	r3, r4, r1
  404176:	4293      	cmp	r3, r2
  404178:	f6ff af59 	blt.w	40402e <_realloc_r+0x5a>
  40417c:	4656      	mov	r6, sl
  40417e:	e7d8      	b.n	404132 <_realloc_r+0x15e>
  404180:	6841      	ldr	r1, [r0, #4]
  404182:	f021 0b03 	bic.w	fp, r1, #3
  404186:	44a3      	add	fp, r4
  404188:	f107 0010 	add.w	r0, r7, #16
  40418c:	4583      	cmp	fp, r0
  40418e:	da56      	bge.n	40423e <_realloc_r+0x26a>
  404190:	f01e 0f01 	tst.w	lr, #1
  404194:	f47f af4b 	bne.w	40402e <_realloc_r+0x5a>
  404198:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40419c:	eba9 0a01 	sub.w	sl, r9, r1
  4041a0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4041a4:	f021 0103 	bic.w	r1, r1, #3
  4041a8:	448b      	add	fp, r1
  4041aa:	4558      	cmp	r0, fp
  4041ac:	dce2      	bgt.n	404174 <_realloc_r+0x1a0>
  4041ae:	4656      	mov	r6, sl
  4041b0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4041b4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4041b8:	1f22      	subs	r2, r4, #4
  4041ba:	2a24      	cmp	r2, #36	; 0x24
  4041bc:	60c1      	str	r1, [r0, #12]
  4041be:	6088      	str	r0, [r1, #8]
  4041c0:	f200 808f 	bhi.w	4042e2 <_realloc_r+0x30e>
  4041c4:	2a13      	cmp	r2, #19
  4041c6:	f240 808a 	bls.w	4042de <_realloc_r+0x30a>
  4041ca:	6829      	ldr	r1, [r5, #0]
  4041cc:	f8ca 1008 	str.w	r1, [sl, #8]
  4041d0:	6869      	ldr	r1, [r5, #4]
  4041d2:	f8ca 100c 	str.w	r1, [sl, #12]
  4041d6:	2a1b      	cmp	r2, #27
  4041d8:	f200 808a 	bhi.w	4042f0 <_realloc_r+0x31c>
  4041dc:	3508      	adds	r5, #8
  4041de:	f10a 0210 	add.w	r2, sl, #16
  4041e2:	6829      	ldr	r1, [r5, #0]
  4041e4:	6011      	str	r1, [r2, #0]
  4041e6:	6869      	ldr	r1, [r5, #4]
  4041e8:	6051      	str	r1, [r2, #4]
  4041ea:	68a9      	ldr	r1, [r5, #8]
  4041ec:	6091      	str	r1, [r2, #8]
  4041ee:	eb0a 0107 	add.w	r1, sl, r7
  4041f2:	ebab 0207 	sub.w	r2, fp, r7
  4041f6:	f042 0201 	orr.w	r2, r2, #1
  4041fa:	6099      	str	r1, [r3, #8]
  4041fc:	604a      	str	r2, [r1, #4]
  4041fe:	f8da 3004 	ldr.w	r3, [sl, #4]
  404202:	f003 0301 	and.w	r3, r3, #1
  404206:	431f      	orrs	r7, r3
  404208:	4640      	mov	r0, r8
  40420a:	f8ca 7004 	str.w	r7, [sl, #4]
  40420e:	f7ff fedf 	bl	403fd0 <__malloc_unlock>
  404212:	e751      	b.n	4040b8 <_realloc_r+0xe4>
  404214:	682b      	ldr	r3, [r5, #0]
  404216:	6003      	str	r3, [r0, #0]
  404218:	686b      	ldr	r3, [r5, #4]
  40421a:	6043      	str	r3, [r0, #4]
  40421c:	2a1b      	cmp	r2, #27
  40421e:	d82d      	bhi.n	40427c <_realloc_r+0x2a8>
  404220:	f100 0308 	add.w	r3, r0, #8
  404224:	f105 0208 	add.w	r2, r5, #8
  404228:	e71b      	b.n	404062 <_realloc_r+0x8e>
  40422a:	4632      	mov	r2, r6
  40422c:	6829      	ldr	r1, [r5, #0]
  40422e:	6011      	str	r1, [r2, #0]
  404230:	6869      	ldr	r1, [r5, #4]
  404232:	6051      	str	r1, [r2, #4]
  404234:	68a9      	ldr	r1, [r5, #8]
  404236:	6091      	str	r1, [r2, #8]
  404238:	461c      	mov	r4, r3
  40423a:	46d1      	mov	r9, sl
  40423c:	e72a      	b.n	404094 <_realloc_r+0xc0>
  40423e:	eb09 0107 	add.w	r1, r9, r7
  404242:	ebab 0b07 	sub.w	fp, fp, r7
  404246:	f04b 0201 	orr.w	r2, fp, #1
  40424a:	6099      	str	r1, [r3, #8]
  40424c:	604a      	str	r2, [r1, #4]
  40424e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404252:	f003 0301 	and.w	r3, r3, #1
  404256:	431f      	orrs	r7, r3
  404258:	4640      	mov	r0, r8
  40425a:	f845 7c04 	str.w	r7, [r5, #-4]
  40425e:	f7ff feb7 	bl	403fd0 <__malloc_unlock>
  404262:	462e      	mov	r6, r5
  404264:	e728      	b.n	4040b8 <_realloc_r+0xe4>
  404266:	4629      	mov	r1, r5
  404268:	f7ff fe4c 	bl	403f04 <memmove>
  40426c:	e6ff      	b.n	40406e <_realloc_r+0x9a>
  40426e:	4629      	mov	r1, r5
  404270:	4630      	mov	r0, r6
  404272:	461c      	mov	r4, r3
  404274:	46d1      	mov	r9, sl
  404276:	f7ff fe45 	bl	403f04 <memmove>
  40427a:	e70b      	b.n	404094 <_realloc_r+0xc0>
  40427c:	68ab      	ldr	r3, [r5, #8]
  40427e:	6083      	str	r3, [r0, #8]
  404280:	68eb      	ldr	r3, [r5, #12]
  404282:	60c3      	str	r3, [r0, #12]
  404284:	2a24      	cmp	r2, #36	; 0x24
  404286:	d017      	beq.n	4042b8 <_realloc_r+0x2e4>
  404288:	f100 0310 	add.w	r3, r0, #16
  40428c:	f105 0210 	add.w	r2, r5, #16
  404290:	e6e7      	b.n	404062 <_realloc_r+0x8e>
  404292:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404296:	f023 0303 	bic.w	r3, r3, #3
  40429a:	441c      	add	r4, r3
  40429c:	462e      	mov	r6, r5
  40429e:	e6f9      	b.n	404094 <_realloc_r+0xc0>
  4042a0:	68a9      	ldr	r1, [r5, #8]
  4042a2:	f8ca 1010 	str.w	r1, [sl, #16]
  4042a6:	68e9      	ldr	r1, [r5, #12]
  4042a8:	f8ca 1014 	str.w	r1, [sl, #20]
  4042ac:	2a24      	cmp	r2, #36	; 0x24
  4042ae:	d00c      	beq.n	4042ca <_realloc_r+0x2f6>
  4042b0:	3510      	adds	r5, #16
  4042b2:	f10a 0218 	add.w	r2, sl, #24
  4042b6:	e7b9      	b.n	40422c <_realloc_r+0x258>
  4042b8:	692b      	ldr	r3, [r5, #16]
  4042ba:	6103      	str	r3, [r0, #16]
  4042bc:	696b      	ldr	r3, [r5, #20]
  4042be:	6143      	str	r3, [r0, #20]
  4042c0:	f105 0218 	add.w	r2, r5, #24
  4042c4:	f100 0318 	add.w	r3, r0, #24
  4042c8:	e6cb      	b.n	404062 <_realloc_r+0x8e>
  4042ca:	692a      	ldr	r2, [r5, #16]
  4042cc:	f8ca 2018 	str.w	r2, [sl, #24]
  4042d0:	696a      	ldr	r2, [r5, #20]
  4042d2:	f8ca 201c 	str.w	r2, [sl, #28]
  4042d6:	3518      	adds	r5, #24
  4042d8:	f10a 0220 	add.w	r2, sl, #32
  4042dc:	e7a6      	b.n	40422c <_realloc_r+0x258>
  4042de:	4632      	mov	r2, r6
  4042e0:	e77f      	b.n	4041e2 <_realloc_r+0x20e>
  4042e2:	4629      	mov	r1, r5
  4042e4:	4630      	mov	r0, r6
  4042e6:	9301      	str	r3, [sp, #4]
  4042e8:	f7ff fe0c 	bl	403f04 <memmove>
  4042ec:	9b01      	ldr	r3, [sp, #4]
  4042ee:	e77e      	b.n	4041ee <_realloc_r+0x21a>
  4042f0:	68a9      	ldr	r1, [r5, #8]
  4042f2:	f8ca 1010 	str.w	r1, [sl, #16]
  4042f6:	68e9      	ldr	r1, [r5, #12]
  4042f8:	f8ca 1014 	str.w	r1, [sl, #20]
  4042fc:	2a24      	cmp	r2, #36	; 0x24
  4042fe:	d003      	beq.n	404308 <_realloc_r+0x334>
  404300:	3510      	adds	r5, #16
  404302:	f10a 0218 	add.w	r2, sl, #24
  404306:	e76c      	b.n	4041e2 <_realloc_r+0x20e>
  404308:	692a      	ldr	r2, [r5, #16]
  40430a:	f8ca 2018 	str.w	r2, [sl, #24]
  40430e:	696a      	ldr	r2, [r5, #20]
  404310:	f8ca 201c 	str.w	r2, [sl, #28]
  404314:	3518      	adds	r5, #24
  404316:	f10a 0220 	add.w	r2, sl, #32
  40431a:	e762      	b.n	4041e2 <_realloc_r+0x20e>
  40431c:	200005bc 	.word	0x200005bc

00404320 <_sbrk_r>:
  404320:	b538      	push	{r3, r4, r5, lr}
  404322:	4c07      	ldr	r4, [pc, #28]	; (404340 <_sbrk_r+0x20>)
  404324:	2300      	movs	r3, #0
  404326:	4605      	mov	r5, r0
  404328:	4608      	mov	r0, r1
  40432a:	6023      	str	r3, [r4, #0]
  40432c:	f7fc fd2c 	bl	400d88 <_sbrk>
  404330:	1c43      	adds	r3, r0, #1
  404332:	d000      	beq.n	404336 <_sbrk_r+0x16>
  404334:	bd38      	pop	{r3, r4, r5, pc}
  404336:	6823      	ldr	r3, [r4, #0]
  404338:	2b00      	cmp	r3, #0
  40433a:	d0fb      	beq.n	404334 <_sbrk_r+0x14>
  40433c:	602b      	str	r3, [r5, #0]
  40433e:	bd38      	pop	{r3, r4, r5, pc}
  404340:	20000ad4 	.word	0x20000ad4

00404344 <__sread>:
  404344:	b510      	push	{r4, lr}
  404346:	460c      	mov	r4, r1
  404348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40434c:	f000 f9c4 	bl	4046d8 <_read_r>
  404350:	2800      	cmp	r0, #0
  404352:	db03      	blt.n	40435c <__sread+0x18>
  404354:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404356:	4403      	add	r3, r0
  404358:	6523      	str	r3, [r4, #80]	; 0x50
  40435a:	bd10      	pop	{r4, pc}
  40435c:	89a3      	ldrh	r3, [r4, #12]
  40435e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404362:	81a3      	strh	r3, [r4, #12]
  404364:	bd10      	pop	{r4, pc}
  404366:	bf00      	nop

00404368 <__swrite>:
  404368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40436c:	4616      	mov	r6, r2
  40436e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404372:	461f      	mov	r7, r3
  404374:	05d3      	lsls	r3, r2, #23
  404376:	460c      	mov	r4, r1
  404378:	4605      	mov	r5, r0
  40437a:	d507      	bpl.n	40438c <__swrite+0x24>
  40437c:	2200      	movs	r2, #0
  40437e:	2302      	movs	r3, #2
  404380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404384:	f000 f992 	bl	4046ac <_lseek_r>
  404388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40438c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404390:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404394:	81a2      	strh	r2, [r4, #12]
  404396:	463b      	mov	r3, r7
  404398:	4632      	mov	r2, r6
  40439a:	4628      	mov	r0, r5
  40439c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4043a0:	f000 b8a4 	b.w	4044ec <_write_r>

004043a4 <__sseek>:
  4043a4:	b510      	push	{r4, lr}
  4043a6:	460c      	mov	r4, r1
  4043a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4043ac:	f000 f97e 	bl	4046ac <_lseek_r>
  4043b0:	89a3      	ldrh	r3, [r4, #12]
  4043b2:	1c42      	adds	r2, r0, #1
  4043b4:	bf0e      	itee	eq
  4043b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4043ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4043be:	6520      	strne	r0, [r4, #80]	; 0x50
  4043c0:	81a3      	strh	r3, [r4, #12]
  4043c2:	bd10      	pop	{r4, pc}

004043c4 <__sclose>:
  4043c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4043c8:	f000 b8f8 	b.w	4045bc <_close_r>

004043cc <__swbuf_r>:
  4043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4043ce:	460d      	mov	r5, r1
  4043d0:	4614      	mov	r4, r2
  4043d2:	4606      	mov	r6, r0
  4043d4:	b110      	cbz	r0, 4043dc <__swbuf_r+0x10>
  4043d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4043d8:	2b00      	cmp	r3, #0
  4043da:	d04b      	beq.n	404474 <__swbuf_r+0xa8>
  4043dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4043e0:	69a3      	ldr	r3, [r4, #24]
  4043e2:	60a3      	str	r3, [r4, #8]
  4043e4:	b291      	uxth	r1, r2
  4043e6:	0708      	lsls	r0, r1, #28
  4043e8:	d539      	bpl.n	40445e <__swbuf_r+0x92>
  4043ea:	6923      	ldr	r3, [r4, #16]
  4043ec:	2b00      	cmp	r3, #0
  4043ee:	d036      	beq.n	40445e <__swbuf_r+0x92>
  4043f0:	b2ed      	uxtb	r5, r5
  4043f2:	0489      	lsls	r1, r1, #18
  4043f4:	462f      	mov	r7, r5
  4043f6:	d515      	bpl.n	404424 <__swbuf_r+0x58>
  4043f8:	6822      	ldr	r2, [r4, #0]
  4043fa:	6961      	ldr	r1, [r4, #20]
  4043fc:	1ad3      	subs	r3, r2, r3
  4043fe:	428b      	cmp	r3, r1
  404400:	da1c      	bge.n	40443c <__swbuf_r+0x70>
  404402:	3301      	adds	r3, #1
  404404:	68a1      	ldr	r1, [r4, #8]
  404406:	1c50      	adds	r0, r2, #1
  404408:	3901      	subs	r1, #1
  40440a:	60a1      	str	r1, [r4, #8]
  40440c:	6020      	str	r0, [r4, #0]
  40440e:	7015      	strb	r5, [r2, #0]
  404410:	6962      	ldr	r2, [r4, #20]
  404412:	429a      	cmp	r2, r3
  404414:	d01a      	beq.n	40444c <__swbuf_r+0x80>
  404416:	89a3      	ldrh	r3, [r4, #12]
  404418:	07db      	lsls	r3, r3, #31
  40441a:	d501      	bpl.n	404420 <__swbuf_r+0x54>
  40441c:	2d0a      	cmp	r5, #10
  40441e:	d015      	beq.n	40444c <__swbuf_r+0x80>
  404420:	4638      	mov	r0, r7
  404422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404424:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404426:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40442a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40442e:	81a2      	strh	r2, [r4, #12]
  404430:	6822      	ldr	r2, [r4, #0]
  404432:	6661      	str	r1, [r4, #100]	; 0x64
  404434:	6961      	ldr	r1, [r4, #20]
  404436:	1ad3      	subs	r3, r2, r3
  404438:	428b      	cmp	r3, r1
  40443a:	dbe2      	blt.n	404402 <__swbuf_r+0x36>
  40443c:	4621      	mov	r1, r4
  40443e:	4630      	mov	r0, r6
  404440:	f7fe fd36 	bl	402eb0 <_fflush_r>
  404444:	b940      	cbnz	r0, 404458 <__swbuf_r+0x8c>
  404446:	6822      	ldr	r2, [r4, #0]
  404448:	2301      	movs	r3, #1
  40444a:	e7db      	b.n	404404 <__swbuf_r+0x38>
  40444c:	4621      	mov	r1, r4
  40444e:	4630      	mov	r0, r6
  404450:	f7fe fd2e 	bl	402eb0 <_fflush_r>
  404454:	2800      	cmp	r0, #0
  404456:	d0e3      	beq.n	404420 <__swbuf_r+0x54>
  404458:	f04f 37ff 	mov.w	r7, #4294967295
  40445c:	e7e0      	b.n	404420 <__swbuf_r+0x54>
  40445e:	4621      	mov	r1, r4
  404460:	4630      	mov	r0, r6
  404462:	f7fe fc11 	bl	402c88 <__swsetup_r>
  404466:	2800      	cmp	r0, #0
  404468:	d1f6      	bne.n	404458 <__swbuf_r+0x8c>
  40446a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40446e:	6923      	ldr	r3, [r4, #16]
  404470:	b291      	uxth	r1, r2
  404472:	e7bd      	b.n	4043f0 <__swbuf_r+0x24>
  404474:	f7fe fdb0 	bl	402fd8 <__sinit>
  404478:	e7b0      	b.n	4043dc <__swbuf_r+0x10>
  40447a:	bf00      	nop

0040447c <_wcrtomb_r>:
  40447c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40447e:	4606      	mov	r6, r0
  404480:	b085      	sub	sp, #20
  404482:	461f      	mov	r7, r3
  404484:	b189      	cbz	r1, 4044aa <_wcrtomb_r+0x2e>
  404486:	4c10      	ldr	r4, [pc, #64]	; (4044c8 <_wcrtomb_r+0x4c>)
  404488:	4d10      	ldr	r5, [pc, #64]	; (4044cc <_wcrtomb_r+0x50>)
  40448a:	6824      	ldr	r4, [r4, #0]
  40448c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40448e:	2c00      	cmp	r4, #0
  404490:	bf08      	it	eq
  404492:	462c      	moveq	r4, r5
  404494:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404498:	47a0      	blx	r4
  40449a:	1c43      	adds	r3, r0, #1
  40449c:	d103      	bne.n	4044a6 <_wcrtomb_r+0x2a>
  40449e:	2200      	movs	r2, #0
  4044a0:	238a      	movs	r3, #138	; 0x8a
  4044a2:	603a      	str	r2, [r7, #0]
  4044a4:	6033      	str	r3, [r6, #0]
  4044a6:	b005      	add	sp, #20
  4044a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4044aa:	460c      	mov	r4, r1
  4044ac:	4906      	ldr	r1, [pc, #24]	; (4044c8 <_wcrtomb_r+0x4c>)
  4044ae:	4a07      	ldr	r2, [pc, #28]	; (4044cc <_wcrtomb_r+0x50>)
  4044b0:	6809      	ldr	r1, [r1, #0]
  4044b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4044b4:	2900      	cmp	r1, #0
  4044b6:	bf08      	it	eq
  4044b8:	4611      	moveq	r1, r2
  4044ba:	4622      	mov	r2, r4
  4044bc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4044c0:	a901      	add	r1, sp, #4
  4044c2:	47a0      	blx	r4
  4044c4:	e7e9      	b.n	40449a <_wcrtomb_r+0x1e>
  4044c6:	bf00      	nop
  4044c8:	20000024 	.word	0x20000024
  4044cc:	20000450 	.word	0x20000450

004044d0 <__ascii_wctomb>:
  4044d0:	b121      	cbz	r1, 4044dc <__ascii_wctomb+0xc>
  4044d2:	2aff      	cmp	r2, #255	; 0xff
  4044d4:	d804      	bhi.n	4044e0 <__ascii_wctomb+0x10>
  4044d6:	700a      	strb	r2, [r1, #0]
  4044d8:	2001      	movs	r0, #1
  4044da:	4770      	bx	lr
  4044dc:	4608      	mov	r0, r1
  4044de:	4770      	bx	lr
  4044e0:	238a      	movs	r3, #138	; 0x8a
  4044e2:	6003      	str	r3, [r0, #0]
  4044e4:	f04f 30ff 	mov.w	r0, #4294967295
  4044e8:	4770      	bx	lr
  4044ea:	bf00      	nop

004044ec <_write_r>:
  4044ec:	b570      	push	{r4, r5, r6, lr}
  4044ee:	460d      	mov	r5, r1
  4044f0:	4c08      	ldr	r4, [pc, #32]	; (404514 <_write_r+0x28>)
  4044f2:	4611      	mov	r1, r2
  4044f4:	4606      	mov	r6, r0
  4044f6:	461a      	mov	r2, r3
  4044f8:	4628      	mov	r0, r5
  4044fa:	2300      	movs	r3, #0
  4044fc:	6023      	str	r3, [r4, #0]
  4044fe:	f7fb fe6b 	bl	4001d8 <_write>
  404502:	1c43      	adds	r3, r0, #1
  404504:	d000      	beq.n	404508 <_write_r+0x1c>
  404506:	bd70      	pop	{r4, r5, r6, pc}
  404508:	6823      	ldr	r3, [r4, #0]
  40450a:	2b00      	cmp	r3, #0
  40450c:	d0fb      	beq.n	404506 <_write_r+0x1a>
  40450e:	6033      	str	r3, [r6, #0]
  404510:	bd70      	pop	{r4, r5, r6, pc}
  404512:	bf00      	nop
  404514:	20000ad4 	.word	0x20000ad4

00404518 <__register_exitproc>:
  404518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40451c:	4c25      	ldr	r4, [pc, #148]	; (4045b4 <__register_exitproc+0x9c>)
  40451e:	6825      	ldr	r5, [r4, #0]
  404520:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  404524:	4606      	mov	r6, r0
  404526:	4688      	mov	r8, r1
  404528:	4692      	mov	sl, r2
  40452a:	4699      	mov	r9, r3
  40452c:	b3c4      	cbz	r4, 4045a0 <__register_exitproc+0x88>
  40452e:	6860      	ldr	r0, [r4, #4]
  404530:	281f      	cmp	r0, #31
  404532:	dc17      	bgt.n	404564 <__register_exitproc+0x4c>
  404534:	1c43      	adds	r3, r0, #1
  404536:	b176      	cbz	r6, 404556 <__register_exitproc+0x3e>
  404538:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40453c:	2201      	movs	r2, #1
  40453e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  404542:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  404546:	4082      	lsls	r2, r0
  404548:	4311      	orrs	r1, r2
  40454a:	2e02      	cmp	r6, #2
  40454c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  404550:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  404554:	d01e      	beq.n	404594 <__register_exitproc+0x7c>
  404556:	3002      	adds	r0, #2
  404558:	6063      	str	r3, [r4, #4]
  40455a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40455e:	2000      	movs	r0, #0
  404560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404564:	4b14      	ldr	r3, [pc, #80]	; (4045b8 <__register_exitproc+0xa0>)
  404566:	b303      	cbz	r3, 4045aa <__register_exitproc+0x92>
  404568:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40456c:	f7ff f912 	bl	403794 <malloc>
  404570:	4604      	mov	r4, r0
  404572:	b1d0      	cbz	r0, 4045aa <__register_exitproc+0x92>
  404574:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  404578:	2700      	movs	r7, #0
  40457a:	e880 0088 	stmia.w	r0, {r3, r7}
  40457e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404582:	4638      	mov	r0, r7
  404584:	2301      	movs	r3, #1
  404586:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40458a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40458e:	2e00      	cmp	r6, #0
  404590:	d0e1      	beq.n	404556 <__register_exitproc+0x3e>
  404592:	e7d1      	b.n	404538 <__register_exitproc+0x20>
  404594:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404598:	430a      	orrs	r2, r1
  40459a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40459e:	e7da      	b.n	404556 <__register_exitproc+0x3e>
  4045a0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4045a4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4045a8:	e7c1      	b.n	40452e <__register_exitproc+0x16>
  4045aa:	f04f 30ff 	mov.w	r0, #4294967295
  4045ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045b2:	bf00      	nop
  4045b4:	00404b48 	.word	0x00404b48
  4045b8:	00403795 	.word	0x00403795

004045bc <_close_r>:
  4045bc:	b538      	push	{r3, r4, r5, lr}
  4045be:	4c07      	ldr	r4, [pc, #28]	; (4045dc <_close_r+0x20>)
  4045c0:	2300      	movs	r3, #0
  4045c2:	4605      	mov	r5, r0
  4045c4:	4608      	mov	r0, r1
  4045c6:	6023      	str	r3, [r4, #0]
  4045c8:	f7fc fbfa 	bl	400dc0 <_close>
  4045cc:	1c43      	adds	r3, r0, #1
  4045ce:	d000      	beq.n	4045d2 <_close_r+0x16>
  4045d0:	bd38      	pop	{r3, r4, r5, pc}
  4045d2:	6823      	ldr	r3, [r4, #0]
  4045d4:	2b00      	cmp	r3, #0
  4045d6:	d0fb      	beq.n	4045d0 <_close_r+0x14>
  4045d8:	602b      	str	r3, [r5, #0]
  4045da:	bd38      	pop	{r3, r4, r5, pc}
  4045dc:	20000ad4 	.word	0x20000ad4

004045e0 <_fclose_r>:
  4045e0:	b570      	push	{r4, r5, r6, lr}
  4045e2:	b139      	cbz	r1, 4045f4 <_fclose_r+0x14>
  4045e4:	4605      	mov	r5, r0
  4045e6:	460c      	mov	r4, r1
  4045e8:	b108      	cbz	r0, 4045ee <_fclose_r+0xe>
  4045ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4045ec:	b383      	cbz	r3, 404650 <_fclose_r+0x70>
  4045ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045f2:	b913      	cbnz	r3, 4045fa <_fclose_r+0x1a>
  4045f4:	2600      	movs	r6, #0
  4045f6:	4630      	mov	r0, r6
  4045f8:	bd70      	pop	{r4, r5, r6, pc}
  4045fa:	4621      	mov	r1, r4
  4045fc:	4628      	mov	r0, r5
  4045fe:	f7fe fbb7 	bl	402d70 <__sflush_r>
  404602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404604:	4606      	mov	r6, r0
  404606:	b133      	cbz	r3, 404616 <_fclose_r+0x36>
  404608:	69e1      	ldr	r1, [r4, #28]
  40460a:	4628      	mov	r0, r5
  40460c:	4798      	blx	r3
  40460e:	2800      	cmp	r0, #0
  404610:	bfb8      	it	lt
  404612:	f04f 36ff 	movlt.w	r6, #4294967295
  404616:	89a3      	ldrh	r3, [r4, #12]
  404618:	061b      	lsls	r3, r3, #24
  40461a:	d41c      	bmi.n	404656 <_fclose_r+0x76>
  40461c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40461e:	b141      	cbz	r1, 404632 <_fclose_r+0x52>
  404620:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404624:	4299      	cmp	r1, r3
  404626:	d002      	beq.n	40462e <_fclose_r+0x4e>
  404628:	4628      	mov	r0, r5
  40462a:	f7fe fdab 	bl	403184 <_free_r>
  40462e:	2300      	movs	r3, #0
  404630:	6323      	str	r3, [r4, #48]	; 0x30
  404632:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404634:	b121      	cbz	r1, 404640 <_fclose_r+0x60>
  404636:	4628      	mov	r0, r5
  404638:	f7fe fda4 	bl	403184 <_free_r>
  40463c:	2300      	movs	r3, #0
  40463e:	6463      	str	r3, [r4, #68]	; 0x44
  404640:	f7fe fcd0 	bl	402fe4 <__sfp_lock_acquire>
  404644:	2300      	movs	r3, #0
  404646:	81a3      	strh	r3, [r4, #12]
  404648:	f7fe fcce 	bl	402fe8 <__sfp_lock_release>
  40464c:	4630      	mov	r0, r6
  40464e:	bd70      	pop	{r4, r5, r6, pc}
  404650:	f7fe fcc2 	bl	402fd8 <__sinit>
  404654:	e7cb      	b.n	4045ee <_fclose_r+0xe>
  404656:	6921      	ldr	r1, [r4, #16]
  404658:	4628      	mov	r0, r5
  40465a:	f7fe fd93 	bl	403184 <_free_r>
  40465e:	e7dd      	b.n	40461c <_fclose_r+0x3c>

00404660 <_fstat_r>:
  404660:	b538      	push	{r3, r4, r5, lr}
  404662:	460b      	mov	r3, r1
  404664:	4c07      	ldr	r4, [pc, #28]	; (404684 <_fstat_r+0x24>)
  404666:	4605      	mov	r5, r0
  404668:	4611      	mov	r1, r2
  40466a:	4618      	mov	r0, r3
  40466c:	2300      	movs	r3, #0
  40466e:	6023      	str	r3, [r4, #0]
  404670:	f7fc fba9 	bl	400dc6 <_fstat>
  404674:	1c43      	adds	r3, r0, #1
  404676:	d000      	beq.n	40467a <_fstat_r+0x1a>
  404678:	bd38      	pop	{r3, r4, r5, pc}
  40467a:	6823      	ldr	r3, [r4, #0]
  40467c:	2b00      	cmp	r3, #0
  40467e:	d0fb      	beq.n	404678 <_fstat_r+0x18>
  404680:	602b      	str	r3, [r5, #0]
  404682:	bd38      	pop	{r3, r4, r5, pc}
  404684:	20000ad4 	.word	0x20000ad4

00404688 <_isatty_r>:
  404688:	b538      	push	{r3, r4, r5, lr}
  40468a:	4c07      	ldr	r4, [pc, #28]	; (4046a8 <_isatty_r+0x20>)
  40468c:	2300      	movs	r3, #0
  40468e:	4605      	mov	r5, r0
  404690:	4608      	mov	r0, r1
  404692:	6023      	str	r3, [r4, #0]
  404694:	f7fc fb9c 	bl	400dd0 <_isatty>
  404698:	1c43      	adds	r3, r0, #1
  40469a:	d000      	beq.n	40469e <_isatty_r+0x16>
  40469c:	bd38      	pop	{r3, r4, r5, pc}
  40469e:	6823      	ldr	r3, [r4, #0]
  4046a0:	2b00      	cmp	r3, #0
  4046a2:	d0fb      	beq.n	40469c <_isatty_r+0x14>
  4046a4:	602b      	str	r3, [r5, #0]
  4046a6:	bd38      	pop	{r3, r4, r5, pc}
  4046a8:	20000ad4 	.word	0x20000ad4

004046ac <_lseek_r>:
  4046ac:	b570      	push	{r4, r5, r6, lr}
  4046ae:	460d      	mov	r5, r1
  4046b0:	4c08      	ldr	r4, [pc, #32]	; (4046d4 <_lseek_r+0x28>)
  4046b2:	4611      	mov	r1, r2
  4046b4:	4606      	mov	r6, r0
  4046b6:	461a      	mov	r2, r3
  4046b8:	4628      	mov	r0, r5
  4046ba:	2300      	movs	r3, #0
  4046bc:	6023      	str	r3, [r4, #0]
  4046be:	f7fc fb89 	bl	400dd4 <_lseek>
  4046c2:	1c43      	adds	r3, r0, #1
  4046c4:	d000      	beq.n	4046c8 <_lseek_r+0x1c>
  4046c6:	bd70      	pop	{r4, r5, r6, pc}
  4046c8:	6823      	ldr	r3, [r4, #0]
  4046ca:	2b00      	cmp	r3, #0
  4046cc:	d0fb      	beq.n	4046c6 <_lseek_r+0x1a>
  4046ce:	6033      	str	r3, [r6, #0]
  4046d0:	bd70      	pop	{r4, r5, r6, pc}
  4046d2:	bf00      	nop
  4046d4:	20000ad4 	.word	0x20000ad4

004046d8 <_read_r>:
  4046d8:	b570      	push	{r4, r5, r6, lr}
  4046da:	460d      	mov	r5, r1
  4046dc:	4c08      	ldr	r4, [pc, #32]	; (404700 <_read_r+0x28>)
  4046de:	4611      	mov	r1, r2
  4046e0:	4606      	mov	r6, r0
  4046e2:	461a      	mov	r2, r3
  4046e4:	4628      	mov	r0, r5
  4046e6:	2300      	movs	r3, #0
  4046e8:	6023      	str	r3, [r4, #0]
  4046ea:	f7fb fd57 	bl	40019c <_read>
  4046ee:	1c43      	adds	r3, r0, #1
  4046f0:	d000      	beq.n	4046f4 <_read_r+0x1c>
  4046f2:	bd70      	pop	{r4, r5, r6, pc}
  4046f4:	6823      	ldr	r3, [r4, #0]
  4046f6:	2b00      	cmp	r3, #0
  4046f8:	d0fb      	beq.n	4046f2 <_read_r+0x1a>
  4046fa:	6033      	str	r3, [r6, #0]
  4046fc:	bd70      	pop	{r4, r5, r6, pc}
  4046fe:	bf00      	nop
  404700:	20000ad4 	.word	0x20000ad4

00404704 <__aeabi_uldivmod>:
  404704:	b953      	cbnz	r3, 40471c <__aeabi_uldivmod+0x18>
  404706:	b94a      	cbnz	r2, 40471c <__aeabi_uldivmod+0x18>
  404708:	2900      	cmp	r1, #0
  40470a:	bf08      	it	eq
  40470c:	2800      	cmpeq	r0, #0
  40470e:	bf1c      	itt	ne
  404710:	f04f 31ff 	movne.w	r1, #4294967295
  404714:	f04f 30ff 	movne.w	r0, #4294967295
  404718:	f000 b97a 	b.w	404a10 <__aeabi_idiv0>
  40471c:	f1ad 0c08 	sub.w	ip, sp, #8
  404720:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404724:	f000 f806 	bl	404734 <__udivmoddi4>
  404728:	f8dd e004 	ldr.w	lr, [sp, #4]
  40472c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404730:	b004      	add	sp, #16
  404732:	4770      	bx	lr

00404734 <__udivmoddi4>:
  404734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404738:	468c      	mov	ip, r1
  40473a:	460d      	mov	r5, r1
  40473c:	4604      	mov	r4, r0
  40473e:	9e08      	ldr	r6, [sp, #32]
  404740:	2b00      	cmp	r3, #0
  404742:	d151      	bne.n	4047e8 <__udivmoddi4+0xb4>
  404744:	428a      	cmp	r2, r1
  404746:	4617      	mov	r7, r2
  404748:	d96d      	bls.n	404826 <__udivmoddi4+0xf2>
  40474a:	fab2 fe82 	clz	lr, r2
  40474e:	f1be 0f00 	cmp.w	lr, #0
  404752:	d00b      	beq.n	40476c <__udivmoddi4+0x38>
  404754:	f1ce 0c20 	rsb	ip, lr, #32
  404758:	fa01 f50e 	lsl.w	r5, r1, lr
  40475c:	fa20 fc0c 	lsr.w	ip, r0, ip
  404760:	fa02 f70e 	lsl.w	r7, r2, lr
  404764:	ea4c 0c05 	orr.w	ip, ip, r5
  404768:	fa00 f40e 	lsl.w	r4, r0, lr
  40476c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404770:	0c25      	lsrs	r5, r4, #16
  404772:	fbbc f8fa 	udiv	r8, ip, sl
  404776:	fa1f f987 	uxth.w	r9, r7
  40477a:	fb0a cc18 	mls	ip, sl, r8, ip
  40477e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404782:	fb08 f309 	mul.w	r3, r8, r9
  404786:	42ab      	cmp	r3, r5
  404788:	d90a      	bls.n	4047a0 <__udivmoddi4+0x6c>
  40478a:	19ed      	adds	r5, r5, r7
  40478c:	f108 32ff 	add.w	r2, r8, #4294967295
  404790:	f080 8123 	bcs.w	4049da <__udivmoddi4+0x2a6>
  404794:	42ab      	cmp	r3, r5
  404796:	f240 8120 	bls.w	4049da <__udivmoddi4+0x2a6>
  40479a:	f1a8 0802 	sub.w	r8, r8, #2
  40479e:	443d      	add	r5, r7
  4047a0:	1aed      	subs	r5, r5, r3
  4047a2:	b2a4      	uxth	r4, r4
  4047a4:	fbb5 f0fa 	udiv	r0, r5, sl
  4047a8:	fb0a 5510 	mls	r5, sl, r0, r5
  4047ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4047b0:	fb00 f909 	mul.w	r9, r0, r9
  4047b4:	45a1      	cmp	r9, r4
  4047b6:	d909      	bls.n	4047cc <__udivmoddi4+0x98>
  4047b8:	19e4      	adds	r4, r4, r7
  4047ba:	f100 33ff 	add.w	r3, r0, #4294967295
  4047be:	f080 810a 	bcs.w	4049d6 <__udivmoddi4+0x2a2>
  4047c2:	45a1      	cmp	r9, r4
  4047c4:	f240 8107 	bls.w	4049d6 <__udivmoddi4+0x2a2>
  4047c8:	3802      	subs	r0, #2
  4047ca:	443c      	add	r4, r7
  4047cc:	eba4 0409 	sub.w	r4, r4, r9
  4047d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4047d4:	2100      	movs	r1, #0
  4047d6:	2e00      	cmp	r6, #0
  4047d8:	d061      	beq.n	40489e <__udivmoddi4+0x16a>
  4047da:	fa24 f40e 	lsr.w	r4, r4, lr
  4047de:	2300      	movs	r3, #0
  4047e0:	6034      	str	r4, [r6, #0]
  4047e2:	6073      	str	r3, [r6, #4]
  4047e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047e8:	428b      	cmp	r3, r1
  4047ea:	d907      	bls.n	4047fc <__udivmoddi4+0xc8>
  4047ec:	2e00      	cmp	r6, #0
  4047ee:	d054      	beq.n	40489a <__udivmoddi4+0x166>
  4047f0:	2100      	movs	r1, #0
  4047f2:	e886 0021 	stmia.w	r6, {r0, r5}
  4047f6:	4608      	mov	r0, r1
  4047f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047fc:	fab3 f183 	clz	r1, r3
  404800:	2900      	cmp	r1, #0
  404802:	f040 808e 	bne.w	404922 <__udivmoddi4+0x1ee>
  404806:	42ab      	cmp	r3, r5
  404808:	d302      	bcc.n	404810 <__udivmoddi4+0xdc>
  40480a:	4282      	cmp	r2, r0
  40480c:	f200 80fa 	bhi.w	404a04 <__udivmoddi4+0x2d0>
  404810:	1a84      	subs	r4, r0, r2
  404812:	eb65 0503 	sbc.w	r5, r5, r3
  404816:	2001      	movs	r0, #1
  404818:	46ac      	mov	ip, r5
  40481a:	2e00      	cmp	r6, #0
  40481c:	d03f      	beq.n	40489e <__udivmoddi4+0x16a>
  40481e:	e886 1010 	stmia.w	r6, {r4, ip}
  404822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404826:	b912      	cbnz	r2, 40482e <__udivmoddi4+0xfa>
  404828:	2701      	movs	r7, #1
  40482a:	fbb7 f7f2 	udiv	r7, r7, r2
  40482e:	fab7 fe87 	clz	lr, r7
  404832:	f1be 0f00 	cmp.w	lr, #0
  404836:	d134      	bne.n	4048a2 <__udivmoddi4+0x16e>
  404838:	1beb      	subs	r3, r5, r7
  40483a:	0c3a      	lsrs	r2, r7, #16
  40483c:	fa1f fc87 	uxth.w	ip, r7
  404840:	2101      	movs	r1, #1
  404842:	fbb3 f8f2 	udiv	r8, r3, r2
  404846:	0c25      	lsrs	r5, r4, #16
  404848:	fb02 3318 	mls	r3, r2, r8, r3
  40484c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404850:	fb0c f308 	mul.w	r3, ip, r8
  404854:	42ab      	cmp	r3, r5
  404856:	d907      	bls.n	404868 <__udivmoddi4+0x134>
  404858:	19ed      	adds	r5, r5, r7
  40485a:	f108 30ff 	add.w	r0, r8, #4294967295
  40485e:	d202      	bcs.n	404866 <__udivmoddi4+0x132>
  404860:	42ab      	cmp	r3, r5
  404862:	f200 80d1 	bhi.w	404a08 <__udivmoddi4+0x2d4>
  404866:	4680      	mov	r8, r0
  404868:	1aed      	subs	r5, r5, r3
  40486a:	b2a3      	uxth	r3, r4
  40486c:	fbb5 f0f2 	udiv	r0, r5, r2
  404870:	fb02 5510 	mls	r5, r2, r0, r5
  404874:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  404878:	fb0c fc00 	mul.w	ip, ip, r0
  40487c:	45a4      	cmp	ip, r4
  40487e:	d907      	bls.n	404890 <__udivmoddi4+0x15c>
  404880:	19e4      	adds	r4, r4, r7
  404882:	f100 33ff 	add.w	r3, r0, #4294967295
  404886:	d202      	bcs.n	40488e <__udivmoddi4+0x15a>
  404888:	45a4      	cmp	ip, r4
  40488a:	f200 80b8 	bhi.w	4049fe <__udivmoddi4+0x2ca>
  40488e:	4618      	mov	r0, r3
  404890:	eba4 040c 	sub.w	r4, r4, ip
  404894:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404898:	e79d      	b.n	4047d6 <__udivmoddi4+0xa2>
  40489a:	4631      	mov	r1, r6
  40489c:	4630      	mov	r0, r6
  40489e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4048a2:	f1ce 0420 	rsb	r4, lr, #32
  4048a6:	fa05 f30e 	lsl.w	r3, r5, lr
  4048aa:	fa07 f70e 	lsl.w	r7, r7, lr
  4048ae:	fa20 f804 	lsr.w	r8, r0, r4
  4048b2:	0c3a      	lsrs	r2, r7, #16
  4048b4:	fa25 f404 	lsr.w	r4, r5, r4
  4048b8:	ea48 0803 	orr.w	r8, r8, r3
  4048bc:	fbb4 f1f2 	udiv	r1, r4, r2
  4048c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4048c4:	fb02 4411 	mls	r4, r2, r1, r4
  4048c8:	fa1f fc87 	uxth.w	ip, r7
  4048cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4048d0:	fb01 f30c 	mul.w	r3, r1, ip
  4048d4:	42ab      	cmp	r3, r5
  4048d6:	fa00 f40e 	lsl.w	r4, r0, lr
  4048da:	d909      	bls.n	4048f0 <__udivmoddi4+0x1bc>
  4048dc:	19ed      	adds	r5, r5, r7
  4048de:	f101 30ff 	add.w	r0, r1, #4294967295
  4048e2:	f080 808a 	bcs.w	4049fa <__udivmoddi4+0x2c6>
  4048e6:	42ab      	cmp	r3, r5
  4048e8:	f240 8087 	bls.w	4049fa <__udivmoddi4+0x2c6>
  4048ec:	3902      	subs	r1, #2
  4048ee:	443d      	add	r5, r7
  4048f0:	1aeb      	subs	r3, r5, r3
  4048f2:	fa1f f588 	uxth.w	r5, r8
  4048f6:	fbb3 f0f2 	udiv	r0, r3, r2
  4048fa:	fb02 3310 	mls	r3, r2, r0, r3
  4048fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404902:	fb00 f30c 	mul.w	r3, r0, ip
  404906:	42ab      	cmp	r3, r5
  404908:	d907      	bls.n	40491a <__udivmoddi4+0x1e6>
  40490a:	19ed      	adds	r5, r5, r7
  40490c:	f100 38ff 	add.w	r8, r0, #4294967295
  404910:	d26f      	bcs.n	4049f2 <__udivmoddi4+0x2be>
  404912:	42ab      	cmp	r3, r5
  404914:	d96d      	bls.n	4049f2 <__udivmoddi4+0x2be>
  404916:	3802      	subs	r0, #2
  404918:	443d      	add	r5, r7
  40491a:	1aeb      	subs	r3, r5, r3
  40491c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404920:	e78f      	b.n	404842 <__udivmoddi4+0x10e>
  404922:	f1c1 0720 	rsb	r7, r1, #32
  404926:	fa22 f807 	lsr.w	r8, r2, r7
  40492a:	408b      	lsls	r3, r1
  40492c:	fa05 f401 	lsl.w	r4, r5, r1
  404930:	ea48 0303 	orr.w	r3, r8, r3
  404934:	fa20 fe07 	lsr.w	lr, r0, r7
  404938:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40493c:	40fd      	lsrs	r5, r7
  40493e:	ea4e 0e04 	orr.w	lr, lr, r4
  404942:	fbb5 f9fc 	udiv	r9, r5, ip
  404946:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40494a:	fb0c 5519 	mls	r5, ip, r9, r5
  40494e:	fa1f f883 	uxth.w	r8, r3
  404952:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  404956:	fb09 f408 	mul.w	r4, r9, r8
  40495a:	42ac      	cmp	r4, r5
  40495c:	fa02 f201 	lsl.w	r2, r2, r1
  404960:	fa00 fa01 	lsl.w	sl, r0, r1
  404964:	d908      	bls.n	404978 <__udivmoddi4+0x244>
  404966:	18ed      	adds	r5, r5, r3
  404968:	f109 30ff 	add.w	r0, r9, #4294967295
  40496c:	d243      	bcs.n	4049f6 <__udivmoddi4+0x2c2>
  40496e:	42ac      	cmp	r4, r5
  404970:	d941      	bls.n	4049f6 <__udivmoddi4+0x2c2>
  404972:	f1a9 0902 	sub.w	r9, r9, #2
  404976:	441d      	add	r5, r3
  404978:	1b2d      	subs	r5, r5, r4
  40497a:	fa1f fe8e 	uxth.w	lr, lr
  40497e:	fbb5 f0fc 	udiv	r0, r5, ip
  404982:	fb0c 5510 	mls	r5, ip, r0, r5
  404986:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40498a:	fb00 f808 	mul.w	r8, r0, r8
  40498e:	45a0      	cmp	r8, r4
  404990:	d907      	bls.n	4049a2 <__udivmoddi4+0x26e>
  404992:	18e4      	adds	r4, r4, r3
  404994:	f100 35ff 	add.w	r5, r0, #4294967295
  404998:	d229      	bcs.n	4049ee <__udivmoddi4+0x2ba>
  40499a:	45a0      	cmp	r8, r4
  40499c:	d927      	bls.n	4049ee <__udivmoddi4+0x2ba>
  40499e:	3802      	subs	r0, #2
  4049a0:	441c      	add	r4, r3
  4049a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4049a6:	eba4 0408 	sub.w	r4, r4, r8
  4049aa:	fba0 8902 	umull	r8, r9, r0, r2
  4049ae:	454c      	cmp	r4, r9
  4049b0:	46c6      	mov	lr, r8
  4049b2:	464d      	mov	r5, r9
  4049b4:	d315      	bcc.n	4049e2 <__udivmoddi4+0x2ae>
  4049b6:	d012      	beq.n	4049de <__udivmoddi4+0x2aa>
  4049b8:	b156      	cbz	r6, 4049d0 <__udivmoddi4+0x29c>
  4049ba:	ebba 030e 	subs.w	r3, sl, lr
  4049be:	eb64 0405 	sbc.w	r4, r4, r5
  4049c2:	fa04 f707 	lsl.w	r7, r4, r7
  4049c6:	40cb      	lsrs	r3, r1
  4049c8:	431f      	orrs	r7, r3
  4049ca:	40cc      	lsrs	r4, r1
  4049cc:	6037      	str	r7, [r6, #0]
  4049ce:	6074      	str	r4, [r6, #4]
  4049d0:	2100      	movs	r1, #0
  4049d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4049d6:	4618      	mov	r0, r3
  4049d8:	e6f8      	b.n	4047cc <__udivmoddi4+0x98>
  4049da:	4690      	mov	r8, r2
  4049dc:	e6e0      	b.n	4047a0 <__udivmoddi4+0x6c>
  4049de:	45c2      	cmp	sl, r8
  4049e0:	d2ea      	bcs.n	4049b8 <__udivmoddi4+0x284>
  4049e2:	ebb8 0e02 	subs.w	lr, r8, r2
  4049e6:	eb69 0503 	sbc.w	r5, r9, r3
  4049ea:	3801      	subs	r0, #1
  4049ec:	e7e4      	b.n	4049b8 <__udivmoddi4+0x284>
  4049ee:	4628      	mov	r0, r5
  4049f0:	e7d7      	b.n	4049a2 <__udivmoddi4+0x26e>
  4049f2:	4640      	mov	r0, r8
  4049f4:	e791      	b.n	40491a <__udivmoddi4+0x1e6>
  4049f6:	4681      	mov	r9, r0
  4049f8:	e7be      	b.n	404978 <__udivmoddi4+0x244>
  4049fa:	4601      	mov	r1, r0
  4049fc:	e778      	b.n	4048f0 <__udivmoddi4+0x1bc>
  4049fe:	3802      	subs	r0, #2
  404a00:	443c      	add	r4, r7
  404a02:	e745      	b.n	404890 <__udivmoddi4+0x15c>
  404a04:	4608      	mov	r0, r1
  404a06:	e708      	b.n	40481a <__udivmoddi4+0xe6>
  404a08:	f1a8 0802 	sub.w	r8, r8, #2
  404a0c:	443d      	add	r5, r7
  404a0e:	e72b      	b.n	404868 <__udivmoddi4+0x134>

00404a10 <__aeabi_idiv0>:
  404a10:	4770      	bx	lr
  404a12:	bf00      	nop
  404a14:	00000001 	.word	0x00000001
  404a18:	00000002 	.word	0x00000002
  404a1c:	00000004 	.word	0x00000004
  404a20:	00000008 	.word	0x00000008
  404a24:	00000010 	.word	0x00000010
  404a28:	00000020 	.word	0x00000020
  404a2c:	00000040 	.word	0x00000040
  404a30:	00000080 	.word	0x00000080
  404a34:	00000100 	.word	0x00000100
  404a38:	00000200 	.word	0x00000200
  404a3c:	00000400 	.word	0x00000400
  404a40:	63657845 	.word	0x63657845
  404a44:	6e617475 	.word	0x6e617475
  404a48:	4d206f64 	.word	0x4d206f64
  404a4c:	61686c61 	.word	0x61686c61
  404a50:	20656420 	.word	0x20656420
  404a54:	746e6f43 	.word	0x746e6f43
  404a58:	656c6f72 	.word	0x656c6f72
  404a5c:	00000a0d 	.word	0x00000a0d
  404a60:	74736964 	.word	0x74736964
  404a64:	65636e61 	.word	0x65636e61
  404a68:	6925203a 	.word	0x6925203a
  404a6c:	25202f20 	.word	0x25202f20
  404a70:	000a0d66 	.word	0x000a0d66
  404a74:	736e6573 	.word	0x736e6573
  404a78:	203a726f 	.word	0x203a726f
  404a7c:	0a0d7525 	.word	0x0a0d7525
  404a80:	00000000 	.word	0x00000000
  404a84:	74747542 	.word	0x74747542
  404a88:	4c206e6f 	.word	0x4c206e6f
  404a8c:	20746665 	.word	0x20746665
  404a90:	20525349 	.word	0x20525349
  404a94:	00000a0d 	.word	0x00000a0d
  404a98:	74747542 	.word	0x74747542
  404a9c:	52206e6f 	.word	0x52206e6f
  404aa0:	74686769 	.word	0x74686769
  404aa4:	52534920 	.word	0x52534920
  404aa8:	000a0d20 	.word	0x000a0d20
  404aac:	666e6f43 	.word	0x666e6f43
  404ab0:	72756769 	.word	0x72756769
  404ab4:	6f616361 	.word	0x6f616361
  404ab8:	6e655320 	.word	0x6e655320
  404abc:	20726f73 	.word	0x20726f73
  404ac0:	20525349 	.word	0x20525349
  404ac4:	00000a0d 	.word	0x00000a0d
  404ac8:	656d6954 	.word	0x656d6954
  404acc:	20302072 	.word	0x20302072
  404ad0:	666e6f43 	.word	0x666e6f43
  404ad4:	72756769 	.word	0x72756769
  404ad8:	206f6461 	.word	0x206f6461
  404adc:	61726170 	.word	0x61726170
  404ae0:	30303120 	.word	0x30303120
  404ae4:	0a0d736d 	.word	0x0a0d736d
  404ae8:	00000000 	.word	0x00000000
  404aec:	656d6954 	.word	0x656d6954
  404af0:	20312072 	.word	0x20312072
  404af4:	666e6f43 	.word	0x666e6f43
  404af8:	72756769 	.word	0x72756769
  404afc:	206f6461 	.word	0x206f6461
  404b00:	61726170 	.word	0x61726170
  404b04:	75303120 	.word	0x75303120
  404b08:	000a0d73 	.word	0x000a0d73
  404b0c:	61647055 	.word	0x61647055
  404b10:	44206574 	.word	0x44206574
  404b14:	21797475 	.word	0x21797475
  404b18:	00000a0d 	.word	0x00000a0d
  404b1c:	736e6553 	.word	0x736e6553
  404b20:	4920726f 	.word	0x4920726f
  404b24:	0d205253 	.word	0x0d205253
  404b28:	0000000a 	.word	0x0000000a
  404b2c:	63696e49 	.word	0x63696e49
  404b30:	696c6169 	.word	0x696c6169
  404b34:	676e697a 	.word	0x676e697a
  404b38:	61654220 	.word	0x61654220
  404b3c:	6142206d 	.word	0x6142206d
  404b40:	0a0d6c6c 	.word	0x0a0d6c6c
  404b44:	00000000 	.word	0x00000000

00404b48 <_global_impure_ptr>:
  404b48:	20000028 33323130 37363534 42413938     (.. 0123456789AB
  404b58:	46454443 00000000 33323130 37363534     CDEF....01234567
  404b68:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  404b78:	0000296c                                l)..

00404b7c <blanks.7202>:
  404b7c:	20202020 20202020 20202020 20202020                     

00404b8c <zeroes.7203>:
  404b8c:	30303030 30303030 30303030 30303030     0000000000000000
  404b9c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404bac <_ctype_>:
  404bac:	20202000 20202020 28282020 20282828     .         ((((( 
  404bbc:	20202020 20202020 20202020 20202020                     
  404bcc:	10108820 10101010 10101010 10101010      ...............
  404bdc:	04040410 04040404 10040404 10101010     ................
  404bec:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404bfc:	01010101 01010101 01010101 10101010     ................
  404c0c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404c1c:	02020202 02020202 02020202 10101010     ................
  404c2c:	00000020 00000000 00000000 00000000      ...............
	...

00404cb0 <_init>:
  404cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404cb2:	bf00      	nop
  404cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404cb6:	bc08      	pop	{r3}
  404cb8:	469e      	mov	lr, r3
  404cba:	4770      	bx	lr

00404cbc <__init_array_start>:
  404cbc:	00402d51 	.word	0x00402d51

00404cc0 <__frame_dummy_init_array_entry>:
  404cc0:	004000f1                                ..@.

00404cc4 <_fini>:
  404cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404cc6:	bf00      	nop
  404cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404cca:	bc08      	pop	{r3}
  404ccc:	469e      	mov	lr, r3
  404cce:	4770      	bx	lr

00404cd0 <__fini_array_start>:
  404cd0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <btn_duty>:
20000010:	000a 0000                                   ....

20000014 <usart_options.8623>:
20000014:	c200 0001 00c0 0000 0800 0000 0000 0000     ................

20000024 <_impure_ptr>:
20000024:	0028 2000                                   (.. 

20000028 <impure_data>:
20000028:	0000 0000 0314 2000 037c 2000 03e4 2000     ....... |.. ... 
	...
200000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000450 <__global_locale>:
20000450:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000470:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000490:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000510:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000530:	44d1 0040 3d05 0040 0000 0000 4bac 0040     .D@..=@......K@.
20000540:	4ba8 0040 4b44 0040 4b44 0040 4b44 0040     .K@.DK@.DK@.DK@.
20000550:	4b44 0040 4b44 0040 4b44 0040 4b44 0040     DK@.DK@.DK@.DK@.
20000560:	4b44 0040 4b44 0040 ffff ffff ffff ffff     DK@.DK@.........
20000570:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000598:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

200005bc <__malloc_av_>:
	...
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 
200009b4:	09ac 2000 09ac 2000 09b4 2000 09b4 2000     ... ... ... ... 

200009c4 <__malloc_sbrk_base>:
200009c4:	ffff ffff                                   ....

200009c8 <__malloc_trim_threshold>:
200009c8:	0000 0002                                   ....
