
BeamBall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003584  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000854  20000000  00403584  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  20000854  00403dd8  00020854  2**2
                  ALLOC
  3 .stack        00003000  20000960  00403ee4  00020854  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002087e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000e536  00000000  00000000  000208d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000232e  00000000  00000000  0002ee0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005325  00000000  00000000  0003113b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b78  00000000  00000000  00036460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a68  00000000  00000000  00036fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001484f  00000000  00000000  00037a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d07e  00000000  00000000  0004c28f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00053962  00000000  00000000  0005930d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002198  00000000  00000000  000acc70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003960 	.word	0x20003960
  400004:	00400b51 	.word	0x00400b51
  400008:	00400b4d 	.word	0x00400b4d
  40000c:	00400b4d 	.word	0x00400b4d
  400010:	00400b4d 	.word	0x00400b4d
  400014:	00400b4d 	.word	0x00400b4d
  400018:	00400b4d 	.word	0x00400b4d
	...
  40002c:	00400b4d 	.word	0x00400b4d
  400030:	00400b4d 	.word	0x00400b4d
  400034:	00000000 	.word	0x00000000
  400038:	00400b4d 	.word	0x00400b4d
  40003c:	00400b4d 	.word	0x00400b4d
  400040:	00400b4d 	.word	0x00400b4d
  400044:	00400b4d 	.word	0x00400b4d
  400048:	00400b4d 	.word	0x00400b4d
  40004c:	00400b4d 	.word	0x00400b4d
  400050:	00400b4d 	.word	0x00400b4d
  400054:	00400b4d 	.word	0x00400b4d
  400058:	00400b4d 	.word	0x00400b4d
  40005c:	00400b4d 	.word	0x00400b4d
  400060:	00400b4d 	.word	0x00400b4d
  400064:	00400b4d 	.word	0x00400b4d
  400068:	00000000 	.word	0x00000000
  40006c:	00400785 	.word	0x00400785
  400070:	00400799 	.word	0x00400799
  400074:	004007ad 	.word	0x004007ad
  400078:	00400b4d 	.word	0x00400b4d
  40007c:	00400b4d 	.word	0x00400b4d
	...
  400088:	00400b4d 	.word	0x00400b4d
  40008c:	00400b4d 	.word	0x00400b4d
  400090:	00400b4d 	.word	0x00400b4d
  400094:	00400b4d 	.word	0x00400b4d
  400098:	00400b4d 	.word	0x00400b4d
  40009c:	00401009 	.word	0x00401009
  4000a0:	00401059 	.word	0x00401059
  4000a4:	0040107d 	.word	0x0040107d
  4000a8:	0040102d 	.word	0x0040102d
  4000ac:	004010a1 	.word	0x004010a1
  4000b0:	004010c5 	.word	0x004010c5
  4000b4:	00400b4d 	.word	0x00400b4d
  4000b8:	00400b4d 	.word	0x00400b4d
  4000bc:	00400b4d 	.word	0x00400b4d
  4000c0:	00400b4d 	.word	0x00400b4d
  4000c4:	00400b4d 	.word	0x00400b4d
  4000c8:	00400b4d 	.word	0x00400b4d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000854 	.word	0x20000854
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00403584 	.word	0x00403584

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000858 	.word	0x20000858
  40011c:	00403584 	.word	0x00403584
  400120:	00403584 	.word	0x00403584
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00400d15 	.word	0x00400d15
  40016c:	00400829 	.word	0x00400829
  400170:	0040087d 	.word	0x0040087d
  400174:	0040088d 	.word	0x0040088d
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	0040089d 	.word	0x0040089d
  400184:	004007c1 	.word	0x004007c1
  400188:	00400c01 	.word	0x00400c01

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b990      	cbnz	r0, 4001b4 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0f      	ble.n	4001ba <_read+0x2e>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42a7      	cmp	r7, r4
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  4001ae:	4640      	mov	r0, r8
  4001b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001b4:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001b8:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001ba:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001c0:	2000092c 	.word	0x2000092c
  4001c4:	20000924 	.word	0x20000924

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d815      	bhi.n	4001fa <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b19a      	cbz	r2, 400200 <_write+0x38>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001fa:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001fe:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400200:	2000      	movs	r0, #0
  400202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000928 	.word	0x20000928
  400214:	2000092c 	.word	0x2000092c

00400218 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400218:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40021e:	4b46      	ldr	r3, [pc, #280]	; (400338 <board_init+0x120>)
  400220:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400222:	200b      	movs	r0, #11
  400224:	4c45      	ldr	r4, [pc, #276]	; (40033c <board_init+0x124>)
  400226:	47a0      	blx	r4
  400228:	200c      	movs	r0, #12
  40022a:	47a0      	blx	r4
  40022c:	200d      	movs	r0, #13
  40022e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400230:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400234:	2013      	movs	r0, #19
  400236:	4c42      	ldr	r4, [pc, #264]	; (400340 <board_init+0x128>)
  400238:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40023a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40023e:	2014      	movs	r0, #20
  400240:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400242:	4940      	ldr	r1, [pc, #256]	; (400344 <board_init+0x12c>)
  400244:	2023      	movs	r0, #35	; 0x23
  400246:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400248:	493f      	ldr	r1, [pc, #252]	; (400348 <board_init+0x130>)
  40024a:	204c      	movs	r0, #76	; 0x4c
  40024c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40024e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400252:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400256:	483d      	ldr	r0, [pc, #244]	; (40034c <board_init+0x134>)
  400258:	4b3d      	ldr	r3, [pc, #244]	; (400350 <board_init+0x138>)
  40025a:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  40025c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400260:	2000      	movs	r0, #0
  400262:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  400264:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400268:	2008      	movs	r0, #8
  40026a:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  40026c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400270:	2052      	movs	r0, #82	; 0x52
  400272:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400274:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400278:	200c      	movs	r0, #12
  40027a:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  40027c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400280:	200d      	movs	r0, #13
  400282:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400284:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400288:	200e      	movs	r0, #14
  40028a:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#  ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  40028c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400290:	200b      	movs	r0, #11
  400292:	47a0      	blx	r4
#  endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  400294:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400298:	2015      	movs	r0, #21
  40029a:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  40029c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002a0:	2016      	movs	r0, #22
  4002a2:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_SCK_IDX, PIN_USART1_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM33312 enable pin */
	gpio_configure_pin(PIN_USART1_EN_IDX, PIN_USART1_EN_FLAGS);
  4002a4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4002a8:	2017      	movs	r0, #23
  4002aa:	47a0      	blx	r4
	gpio_set_pin_low(PIN_USART1_EN_IDX);
  4002ac:	2017      	movs	r0, #23
  4002ae:	4b29      	ldr	r3, [pc, #164]	; (400354 <board_init+0x13c>)
  4002b0:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  4002b2:	4d29      	ldr	r5, [pc, #164]	; (400358 <board_init+0x140>)
  4002b4:	4629      	mov	r1, r5
  4002b6:	2040      	movs	r0, #64	; 0x40
  4002b8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  4002ba:	4629      	mov	r1, r5
  4002bc:	2041      	movs	r0, #65	; 0x41
  4002be:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  4002c0:	4629      	mov	r1, r5
  4002c2:	2042      	movs	r0, #66	; 0x42
  4002c4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  4002c6:	4629      	mov	r1, r5
  4002c8:	2043      	movs	r0, #67	; 0x43
  4002ca:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  4002cc:	4629      	mov	r1, r5
  4002ce:	2044      	movs	r0, #68	; 0x44
  4002d0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  4002d2:	4629      	mov	r1, r5
  4002d4:	2045      	movs	r0, #69	; 0x45
  4002d6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  4002d8:	4629      	mov	r1, r5
  4002da:	2046      	movs	r0, #70	; 0x46
  4002dc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  4002de:	4629      	mov	r1, r5
  4002e0:	2047      	movs	r0, #71	; 0x47
  4002e2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  4002e4:	4629      	mov	r1, r5
  4002e6:	204b      	movs	r0, #75	; 0x4b
  4002e8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  4002ea:	4629      	mov	r1, r5
  4002ec:	2048      	movs	r0, #72	; 0x48
  4002ee:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  4002f0:	4629      	mov	r1, r5
  4002f2:	204f      	movs	r0, #79	; 0x4f
  4002f4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  4002f6:	4629      	mov	r1, r5
  4002f8:	2053      	movs	r0, #83	; 0x53
  4002fa:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  4002fc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400300:	204d      	movs	r0, #77	; 0x4d
  400302:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_ADS7843
	/* Configure Touchscreen SPI pins */
	gpio_configure_pin(BOARD_ADS7843_IRQ_GPIO,BOARD_ADS7843_IRQ_FLAGS);
  400304:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  400308:	4629      	mov	r1, r5
  40030a:	2010      	movs	r0, #16
  40030c:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ADS7843_BUSY_GPIO, BOARD_ADS7843_BUSY_FLAGS);
  40030e:	4629      	mov	r1, r5
  400310:	2011      	movs	r0, #17
  400312:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400314:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400318:	200c      	movs	r0, #12
  40031a:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  40031c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400320:	200d      	movs	r0, #13
  400322:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400324:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400328:	200e      	movs	r0, #14
  40032a:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  40032c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400330:	200b      	movs	r0, #11
  400332:	47a0      	blx	r4
  400334:	bd38      	pop	{r3, r4, r5, pc}
  400336:	bf00      	nop
  400338:	400e1450 	.word	0x400e1450
  40033c:	004008ad 	.word	0x004008ad
  400340:	004004b1 	.word	0x004004b1
  400344:	28000079 	.word	0x28000079
  400348:	28000059 	.word	0x28000059
  40034c:	400e0e00 	.word	0x400e0e00
  400350:	004005d5 	.word	0x004005d5
  400354:	00400495 	.word	0x00400495
  400358:	08000001 	.word	0x08000001

0040035c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40035c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40035e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400362:	d02f      	beq.n	4003c4 <pio_set_peripheral+0x68>
  400364:	d807      	bhi.n	400376 <pio_set_peripheral+0x1a>
  400366:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40036a:	d014      	beq.n	400396 <pio_set_peripheral+0x3a>
  40036c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400370:	d01e      	beq.n	4003b0 <pio_set_peripheral+0x54>
  400372:	b939      	cbnz	r1, 400384 <pio_set_peripheral+0x28>
  400374:	4770      	bx	lr
  400376:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40037a:	d036      	beq.n	4003ea <pio_set_peripheral+0x8e>
  40037c:	d804      	bhi.n	400388 <pio_set_peripheral+0x2c>
  40037e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400382:	d029      	beq.n	4003d8 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400384:	6042      	str	r2, [r0, #4]
  400386:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400388:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40038c:	d02d      	beq.n	4003ea <pio_set_peripheral+0x8e>
  40038e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400392:	d02a      	beq.n	4003ea <pio_set_peripheral+0x8e>
  400394:	e7f6      	b.n	400384 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400396:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400398:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40039a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40039c:	43d3      	mvns	r3, r2
  40039e:	4021      	ands	r1, r4
  4003a0:	4019      	ands	r1, r3
  4003a2:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003a4:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4003a6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4003a8:	4021      	ands	r1, r4
  4003aa:	400b      	ands	r3, r1
  4003ac:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003ae:	e01a      	b.n	4003e6 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4003b2:	4313      	orrs	r3, r2
  4003b4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003b6:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4003b8:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4003ba:	400b      	ands	r3, r1
  4003bc:	ea23 0302 	bic.w	r3, r3, r2
  4003c0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003c2:	e7df      	b.n	400384 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003c4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4003c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4003c8:	400b      	ands	r3, r1
  4003ca:	ea23 0302 	bic.w	r3, r3, r2
  4003ce:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003d0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4003d2:	4313      	orrs	r3, r2
  4003d4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003d6:	e7d5      	b.n	400384 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4003da:	4313      	orrs	r3, r2
  4003dc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003de:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4003e0:	4313      	orrs	r3, r2
  4003e2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003e4:	e7ce      	b.n	400384 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4003e6:	6042      	str	r2, [r0, #4]
}
  4003e8:	bc10      	pop	{r4}
  4003ea:	4770      	bx	lr

004003ec <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4003ec:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003ee:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4003f2:	bf14      	ite	ne
  4003f4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003f6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4003f8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4003fc:	bf14      	ite	ne
  4003fe:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400400:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400402:	f012 0f02 	tst.w	r2, #2
  400406:	d002      	beq.n	40040e <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400408:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40040c:	e004      	b.n	400418 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40040e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400412:	bf18      	it	ne
  400414:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400418:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40041a:	6001      	str	r1, [r0, #0]
  40041c:	4770      	bx	lr
  40041e:	bf00      	nop

00400420 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400420:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400422:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400424:	9c01      	ldr	r4, [sp, #4]
  400426:	b10c      	cbz	r4, 40042c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400428:	6641      	str	r1, [r0, #100]	; 0x64
  40042a:	e000      	b.n	40042e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40042c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40042e:	b10b      	cbz	r3, 400434 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400430:	6501      	str	r1, [r0, #80]	; 0x50
  400432:	e000      	b.n	400436 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400434:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400436:	b10a      	cbz	r2, 40043c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400438:	6301      	str	r1, [r0, #48]	; 0x30
  40043a:	e000      	b.n	40043e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40043c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40043e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400440:	6001      	str	r1, [r0, #0]
}
  400442:	bc10      	pop	{r4}
  400444:	4770      	bx	lr
  400446:	bf00      	nop

00400448 <pio_pull_down>:
 */
void pio_pull_down(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_down_enable)
{
	/* Enable the pull-down if necessary */
	if (ul_pull_down_enable) {
  400448:	b112      	cbz	r2, 400450 <pio_pull_down+0x8>
		p_pio->PIO_PPDER = ul_mask;
  40044a:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  40044e:	4770      	bx	lr
	} else {
		p_pio->PIO_PPDDR = ul_mask;
  400450:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  400454:	4770      	bx	lr
  400456:	bf00      	nop

00400458 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400458:	f012 0f10 	tst.w	r2, #16
  40045c:	d010      	beq.n	400480 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40045e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400462:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400466:	bf14      	ite	ne
  400468:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40046c:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400470:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400474:	bf14      	ite	ne
  400476:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40047a:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  40047e:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400480:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400484:	4770      	bx	lr
  400486:	bf00      	nop

00400488 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  400488:	6401      	str	r1, [r0, #64]	; 0x40
  40048a:	4770      	bx	lr

0040048c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40048c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40048e:	4770      	bx	lr

00400490 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400490:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400492:	4770      	bx	lr

00400494 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400494:	0943      	lsrs	r3, r0, #5
  400496:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40049a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40049e:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4004a0:	f000 001f 	and.w	r0, r0, #31
  4004a4:	2201      	movs	r2, #1
  4004a6:	fa02 f000 	lsl.w	r0, r2, r0
  4004aa:	6358      	str	r0, [r3, #52]	; 0x34
  4004ac:	4770      	bx	lr
  4004ae:	bf00      	nop

004004b0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4004b0:	b570      	push	{r4, r5, r6, lr}
  4004b2:	b082      	sub	sp, #8
  4004b4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004b6:	0943      	lsrs	r3, r0, #5
  4004b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004bc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004c0:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4004c2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4004c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4004ca:	d047      	beq.n	40055c <pio_configure_pin+0xac>
  4004cc:	d809      	bhi.n	4004e2 <pio_configure_pin+0x32>
  4004ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4004d2:	d021      	beq.n	400518 <pio_configure_pin+0x68>
  4004d4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4004d8:	d02f      	beq.n	40053a <pio_configure_pin+0x8a>
  4004da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4004de:	d16f      	bne.n	4005c0 <pio_configure_pin+0x110>
  4004e0:	e009      	b.n	4004f6 <pio_configure_pin+0x46>
  4004e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4004e6:	d055      	beq.n	400594 <pio_configure_pin+0xe4>
  4004e8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4004ec:	d052      	beq.n	400594 <pio_configure_pin+0xe4>
  4004ee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4004f2:	d044      	beq.n	40057e <pio_configure_pin+0xce>
  4004f4:	e064      	b.n	4005c0 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4004f6:	f000 001f 	and.w	r0, r0, #31
  4004fa:	2601      	movs	r6, #1
  4004fc:	4086      	lsls	r6, r0
  4004fe:	4632      	mov	r2, r6
  400500:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400504:	4620      	mov	r0, r4
  400506:	4b30      	ldr	r3, [pc, #192]	; (4005c8 <pio_configure_pin+0x118>)
  400508:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40050a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40050e:	bf14      	ite	ne
  400510:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400512:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400514:	2001      	movs	r0, #1
  400516:	e054      	b.n	4005c2 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400518:	f000 001f 	and.w	r0, r0, #31
  40051c:	2601      	movs	r6, #1
  40051e:	4086      	lsls	r6, r0
  400520:	4632      	mov	r2, r6
  400522:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400526:	4620      	mov	r0, r4
  400528:	4b27      	ldr	r3, [pc, #156]	; (4005c8 <pio_configure_pin+0x118>)
  40052a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40052c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400530:	bf14      	ite	ne
  400532:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400534:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400536:	2001      	movs	r0, #1
  400538:	e043      	b.n	4005c2 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40053a:	f000 001f 	and.w	r0, r0, #31
  40053e:	2601      	movs	r6, #1
  400540:	4086      	lsls	r6, r0
  400542:	4632      	mov	r2, r6
  400544:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400548:	4620      	mov	r0, r4
  40054a:	4b1f      	ldr	r3, [pc, #124]	; (4005c8 <pio_configure_pin+0x118>)
  40054c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40054e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400552:	bf14      	ite	ne
  400554:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400556:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400558:	2001      	movs	r0, #1
  40055a:	e032      	b.n	4005c2 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40055c:	f000 001f 	and.w	r0, r0, #31
  400560:	2601      	movs	r6, #1
  400562:	4086      	lsls	r6, r0
  400564:	4632      	mov	r2, r6
  400566:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40056a:	4620      	mov	r0, r4
  40056c:	4b16      	ldr	r3, [pc, #88]	; (4005c8 <pio_configure_pin+0x118>)
  40056e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400570:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400574:	bf14      	ite	ne
  400576:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400578:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40057a:	2001      	movs	r0, #1
  40057c:	e021      	b.n	4005c2 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40057e:	f000 011f 	and.w	r1, r0, #31
  400582:	2601      	movs	r6, #1
  400584:	462a      	mov	r2, r5
  400586:	fa06 f101 	lsl.w	r1, r6, r1
  40058a:	4620      	mov	r0, r4
  40058c:	4b0f      	ldr	r3, [pc, #60]	; (4005cc <pio_configure_pin+0x11c>)
  40058e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400590:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400592:	e016      	b.n	4005c2 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400594:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  400598:	f000 011f 	and.w	r1, r0, #31
  40059c:	2601      	movs	r6, #1
  40059e:	ea05 0306 	and.w	r3, r5, r6
  4005a2:	9300      	str	r3, [sp, #0]
  4005a4:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4005a8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005ac:	bf14      	ite	ne
  4005ae:	2200      	movne	r2, #0
  4005b0:	2201      	moveq	r2, #1
  4005b2:	fa06 f101 	lsl.w	r1, r6, r1
  4005b6:	4620      	mov	r0, r4
  4005b8:	4c05      	ldr	r4, [pc, #20]	; (4005d0 <pio_configure_pin+0x120>)
  4005ba:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4005bc:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4005be:	e000      	b.n	4005c2 <pio_configure_pin+0x112>

	default:
		return 0;
  4005c0:	2000      	movs	r0, #0
	}

	return 1;
}
  4005c2:	b002      	add	sp, #8
  4005c4:	bd70      	pop	{r4, r5, r6, pc}
  4005c6:	bf00      	nop
  4005c8:	0040035d 	.word	0x0040035d
  4005cc:	004003ed 	.word	0x004003ed
  4005d0:	00400421 	.word	0x00400421

004005d4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4005d4:	b570      	push	{r4, r5, r6, lr}
  4005d6:	b082      	sub	sp, #8
  4005d8:	4605      	mov	r5, r0
  4005da:	460e      	mov	r6, r1
  4005dc:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4005de:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4005e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4005e6:	d038      	beq.n	40065a <pio_configure_pin_group+0x86>
  4005e8:	d809      	bhi.n	4005fe <pio_configure_pin_group+0x2a>
  4005ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4005ee:	d01c      	beq.n	40062a <pio_configure_pin_group+0x56>
  4005f0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4005f4:	d025      	beq.n	400642 <pio_configure_pin_group+0x6e>
  4005f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4005fa:	d150      	bne.n	40069e <pio_configure_pin_group+0xca>
  4005fc:	e009      	b.n	400612 <pio_configure_pin_group+0x3e>
  4005fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400602:	d03a      	beq.n	40067a <pio_configure_pin_group+0xa6>
  400604:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400608:	d037      	beq.n	40067a <pio_configure_pin_group+0xa6>
  40060a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40060e:	d030      	beq.n	400672 <pio_configure_pin_group+0x9e>
  400610:	e045      	b.n	40069e <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400612:	460a      	mov	r2, r1
  400614:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400618:	4b22      	ldr	r3, [pc, #136]	; (4006a4 <pio_configure_pin_group+0xd0>)
  40061a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40061c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400620:	bf14      	ite	ne
  400622:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400624:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400626:	2001      	movs	r0, #1
  400628:	e03a      	b.n	4006a0 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40062a:	460a      	mov	r2, r1
  40062c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400630:	4b1c      	ldr	r3, [pc, #112]	; (4006a4 <pio_configure_pin_group+0xd0>)
  400632:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400634:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400638:	bf14      	ite	ne
  40063a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40063c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40063e:	2001      	movs	r0, #1
  400640:	e02e      	b.n	4006a0 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400642:	460a      	mov	r2, r1
  400644:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400648:	4b16      	ldr	r3, [pc, #88]	; (4006a4 <pio_configure_pin_group+0xd0>)
  40064a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40064c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400650:	bf14      	ite	ne
  400652:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400654:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400656:	2001      	movs	r0, #1
  400658:	e022      	b.n	4006a0 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40065a:	460a      	mov	r2, r1
  40065c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400660:	4b10      	ldr	r3, [pc, #64]	; (4006a4 <pio_configure_pin_group+0xd0>)
  400662:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400664:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400668:	bf14      	ite	ne
  40066a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40066c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40066e:	2001      	movs	r0, #1
  400670:	e016      	b.n	4006a0 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400672:	4b0d      	ldr	r3, [pc, #52]	; (4006a8 <pio_configure_pin_group+0xd4>)
  400674:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400676:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400678:	e012      	b.n	4006a0 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40067a:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  40067e:	f004 0301 	and.w	r3, r4, #1
  400682:	9300      	str	r3, [sp, #0]
  400684:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400688:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40068c:	bf14      	ite	ne
  40068e:	2200      	movne	r2, #0
  400690:	2201      	moveq	r2, #1
  400692:	4631      	mov	r1, r6
  400694:	4628      	mov	r0, r5
  400696:	4c05      	ldr	r4, [pc, #20]	; (4006ac <pio_configure_pin_group+0xd8>)
  400698:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40069a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40069c:	e000      	b.n	4006a0 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  40069e:	2000      	movs	r0, #0
	}

	return 1;
}
  4006a0:	b002      	add	sp, #8
  4006a2:	bd70      	pop	{r4, r5, r6, pc}
  4006a4:	0040035d 	.word	0x0040035d
  4006a8:	004003ed 	.word	0x004003ed
  4006ac:	00400421 	.word	0x00400421

004006b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4006b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4006b4:	4681      	mov	r9, r0
  4006b6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4006b8:	4b12      	ldr	r3, [pc, #72]	; (400704 <pio_handler_process+0x54>)
  4006ba:	4798      	blx	r3
  4006bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4006be:	4648      	mov	r0, r9
  4006c0:	4b11      	ldr	r3, [pc, #68]	; (400708 <pio_handler_process+0x58>)
  4006c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4006c4:	4005      	ands	r5, r0
  4006c6:	d013      	beq.n	4006f0 <pio_handler_process+0x40>
  4006c8:	4c10      	ldr	r4, [pc, #64]	; (40070c <pio_handler_process+0x5c>)
  4006ca:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4006ce:	6823      	ldr	r3, [r4, #0]
  4006d0:	4543      	cmp	r3, r8
  4006d2:	d108      	bne.n	4006e6 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4006d4:	6861      	ldr	r1, [r4, #4]
  4006d6:	4229      	tst	r1, r5
  4006d8:	d005      	beq.n	4006e6 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4006da:	68e3      	ldr	r3, [r4, #12]
  4006dc:	4640      	mov	r0, r8
  4006de:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4006e0:	6863      	ldr	r3, [r4, #4]
  4006e2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4006e6:	42b4      	cmp	r4, r6
  4006e8:	d002      	beq.n	4006f0 <pio_handler_process+0x40>
  4006ea:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4006ec:	2d00      	cmp	r5, #0
  4006ee:	d1ee      	bne.n	4006ce <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4006f0:	4b07      	ldr	r3, [pc, #28]	; (400710 <pio_handler_process+0x60>)
  4006f2:	681b      	ldr	r3, [r3, #0]
  4006f4:	b123      	cbz	r3, 400700 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4006f6:	4b07      	ldr	r3, [pc, #28]	; (400714 <pio_handler_process+0x64>)
  4006f8:	681b      	ldr	r3, [r3, #0]
  4006fa:	b10b      	cbz	r3, 400700 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4006fc:	4648      	mov	r0, r9
  4006fe:	4798      	blx	r3
  400700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400704:	0040048d 	.word	0x0040048d
  400708:	00400491 	.word	0x00400491
  40070c:	20000878 	.word	0x20000878
  400710:	20000930 	.word	0x20000930
  400714:	20000874 	.word	0x20000874

00400718 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40071a:	4c17      	ldr	r4, [pc, #92]	; (400778 <pio_handler_set+0x60>)
  40071c:	6826      	ldr	r6, [r4, #0]
  40071e:	2e06      	cmp	r6, #6
  400720:	d828      	bhi.n	400774 <pio_handler_set+0x5c>
  400722:	f04f 0c00 	mov.w	ip, #0
  400726:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400728:	4f14      	ldr	r7, [pc, #80]	; (40077c <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  40072a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40072c:	0125      	lsls	r5, r4, #4
  40072e:	597d      	ldr	r5, [r7, r5]
  400730:	428d      	cmp	r5, r1
  400732:	d104      	bne.n	40073e <pio_handler_set+0x26>
  400734:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400738:	686d      	ldr	r5, [r5, #4]
  40073a:	4295      	cmp	r5, r2
  40073c:	d004      	beq.n	400748 <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40073e:	3401      	adds	r4, #1
  400740:	b2e4      	uxtb	r4, r4
  400742:	46a4      	mov	ip, r4
  400744:	42a6      	cmp	r6, r4
  400746:	d2f0      	bcs.n	40072a <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400748:	4d0c      	ldr	r5, [pc, #48]	; (40077c <pio_handler_set+0x64>)
  40074a:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  40074e:	eb05 040e 	add.w	r4, r5, lr
  400752:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400756:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400758:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40075a:	9906      	ldr	r1, [sp, #24]
  40075c:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  40075e:	3601      	adds	r6, #1
  400760:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  400762:	bf04      	itt	eq
  400764:	4904      	ldreq	r1, [pc, #16]	; (400778 <pio_handler_set+0x60>)
  400766:	600e      	streq	r6, [r1, #0]
  400768:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40076a:	461a      	mov	r2, r3
  40076c:	4b04      	ldr	r3, [pc, #16]	; (400780 <pio_handler_set+0x68>)
  40076e:	4798      	blx	r3

	return 0;
  400770:	2000      	movs	r0, #0
  400772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  400774:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  400776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400778:	20000870 	.word	0x20000870
  40077c:	20000878 	.word	0x20000878
  400780:	00400459 	.word	0x00400459

00400784 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400784:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400786:	210b      	movs	r1, #11
  400788:	4801      	ldr	r0, [pc, #4]	; (400790 <PIOA_Handler+0xc>)
  40078a:	4b02      	ldr	r3, [pc, #8]	; (400794 <PIOA_Handler+0x10>)
  40078c:	4798      	blx	r3
  40078e:	bd08      	pop	{r3, pc}
  400790:	400e0e00 	.word	0x400e0e00
  400794:	004006b1 	.word	0x004006b1

00400798 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400798:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40079a:	210c      	movs	r1, #12
  40079c:	4801      	ldr	r0, [pc, #4]	; (4007a4 <PIOB_Handler+0xc>)
  40079e:	4b02      	ldr	r3, [pc, #8]	; (4007a8 <PIOB_Handler+0x10>)
  4007a0:	4798      	blx	r3
  4007a2:	bd08      	pop	{r3, pc}
  4007a4:	400e1000 	.word	0x400e1000
  4007a8:	004006b1 	.word	0x004006b1

004007ac <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4007ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4007ae:	210d      	movs	r1, #13
  4007b0:	4801      	ldr	r0, [pc, #4]	; (4007b8 <PIOC_Handler+0xc>)
  4007b2:	4b02      	ldr	r3, [pc, #8]	; (4007bc <PIOC_Handler+0x10>)
  4007b4:	4798      	blx	r3
  4007b6:	bd08      	pop	{r3, pc}
  4007b8:	400e1200 	.word	0x400e1200
  4007bc:	004006b1 	.word	0x004006b1

004007c0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4007c0:	4a18      	ldr	r2, [pc, #96]	; (400824 <pmc_switch_mck_to_pllack+0x64>)
  4007c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4007c8:	4318      	orrs	r0, r3
  4007ca:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007ce:	f013 0f08 	tst.w	r3, #8
  4007d2:	d003      	beq.n	4007dc <pmc_switch_mck_to_pllack+0x1c>
  4007d4:	e009      	b.n	4007ea <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007d6:	3b01      	subs	r3, #1
  4007d8:	d103      	bne.n	4007e2 <pmc_switch_mck_to_pllack+0x22>
  4007da:	e01e      	b.n	40081a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007e0:	4910      	ldr	r1, [pc, #64]	; (400824 <pmc_switch_mck_to_pllack+0x64>)
  4007e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007e4:	f012 0f08 	tst.w	r2, #8
  4007e8:	d0f5      	beq.n	4007d6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007ea:	4a0e      	ldr	r2, [pc, #56]	; (400824 <pmc_switch_mck_to_pllack+0x64>)
  4007ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007ee:	f023 0303 	bic.w	r3, r3, #3
  4007f2:	f043 0302 	orr.w	r3, r3, #2
  4007f6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007f8:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4007fa:	f010 0008 	ands.w	r0, r0, #8
  4007fe:	d004      	beq.n	40080a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400800:	2000      	movs	r0, #0
  400802:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400804:	3b01      	subs	r3, #1
  400806:	d103      	bne.n	400810 <pmc_switch_mck_to_pllack+0x50>
  400808:	e009      	b.n	40081e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40080a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40080e:	4905      	ldr	r1, [pc, #20]	; (400824 <pmc_switch_mck_to_pllack+0x64>)
  400810:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400812:	f012 0f08 	tst.w	r2, #8
  400816:	d0f5      	beq.n	400804 <pmc_switch_mck_to_pllack+0x44>
  400818:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40081a:	2001      	movs	r0, #1
  40081c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40081e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400820:	4770      	bx	lr
  400822:	bf00      	nop
  400824:	400e0400 	.word	0x400e0400

00400828 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400828:	b138      	cbz	r0, 40083a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40082a:	4911      	ldr	r1, [pc, #68]	; (400870 <pmc_switch_mainck_to_xtal+0x48>)
  40082c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40082e:	4a11      	ldr	r2, [pc, #68]	; (400874 <pmc_switch_mainck_to_xtal+0x4c>)
  400830:	401a      	ands	r2, r3
  400832:	4b11      	ldr	r3, [pc, #68]	; (400878 <pmc_switch_mainck_to_xtal+0x50>)
  400834:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400836:	620b      	str	r3, [r1, #32]
  400838:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40083a:	480d      	ldr	r0, [pc, #52]	; (400870 <pmc_switch_mainck_to_xtal+0x48>)
  40083c:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40083e:	0209      	lsls	r1, r1, #8
  400840:	b289      	uxth	r1, r1
  400842:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  400846:	f023 0303 	bic.w	r3, r3, #3
  40084a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40084e:	f043 0301 	orr.w	r3, r3, #1
  400852:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400854:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400856:	4602      	mov	r2, r0
  400858:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40085a:	f013 0f01 	tst.w	r3, #1
  40085e:	d0fb      	beq.n	400858 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400860:	4a03      	ldr	r2, [pc, #12]	; (400870 <pmc_switch_mainck_to_xtal+0x48>)
  400862:	6a13      	ldr	r3, [r2, #32]
  400864:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40086c:	6213      	str	r3, [r2, #32]
  40086e:	4770      	bx	lr
  400870:	400e0400 	.word	0x400e0400
  400874:	fec8fffc 	.word	0xfec8fffc
  400878:	01370002 	.word	0x01370002

0040087c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40087c:	4b02      	ldr	r3, [pc, #8]	; (400888 <pmc_osc_is_ready_mainck+0xc>)
  40087e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400880:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400884:	4770      	bx	lr
  400886:	bf00      	nop
  400888:	400e0400 	.word	0x400e0400

0040088c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40088c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400890:	4b01      	ldr	r3, [pc, #4]	; (400898 <pmc_disable_pllack+0xc>)
  400892:	629a      	str	r2, [r3, #40]	; 0x28
  400894:	4770      	bx	lr
  400896:	bf00      	nop
  400898:	400e0400 	.word	0x400e0400

0040089c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40089c:	4b02      	ldr	r3, [pc, #8]	; (4008a8 <pmc_is_locked_pllack+0xc>)
  40089e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008a0:	f000 0002 	and.w	r0, r0, #2
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	400e0400 	.word	0x400e0400

004008ac <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4008ac:	2822      	cmp	r0, #34	; 0x22
  4008ae:	d81e      	bhi.n	4008ee <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4008b0:	281f      	cmp	r0, #31
  4008b2:	d80c      	bhi.n	4008ce <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4008b4:	4b11      	ldr	r3, [pc, #68]	; (4008fc <pmc_enable_periph_clk+0x50>)
  4008b6:	699a      	ldr	r2, [r3, #24]
  4008b8:	2301      	movs	r3, #1
  4008ba:	4083      	lsls	r3, r0
  4008bc:	4393      	bics	r3, r2
  4008be:	d018      	beq.n	4008f2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4008c0:	2301      	movs	r3, #1
  4008c2:	fa03 f000 	lsl.w	r0, r3, r0
  4008c6:	4b0d      	ldr	r3, [pc, #52]	; (4008fc <pmc_enable_periph_clk+0x50>)
  4008c8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008ca:	2000      	movs	r0, #0
  4008cc:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4008ce:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008d0:	4b0a      	ldr	r3, [pc, #40]	; (4008fc <pmc_enable_periph_clk+0x50>)
  4008d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4008d6:	2301      	movs	r3, #1
  4008d8:	4083      	lsls	r3, r0
  4008da:	4393      	bics	r3, r2
  4008dc:	d00b      	beq.n	4008f6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4008de:	2301      	movs	r3, #1
  4008e0:	fa03 f000 	lsl.w	r0, r3, r0
  4008e4:	4b05      	ldr	r3, [pc, #20]	; (4008fc <pmc_enable_periph_clk+0x50>)
  4008e6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4008ea:	2000      	movs	r0, #0
  4008ec:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4008ee:	2001      	movs	r0, #1
  4008f0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008f2:	2000      	movs	r0, #0
  4008f4:	4770      	bx	lr
  4008f6:	2000      	movs	r0, #0
}
  4008f8:	4770      	bx	lr
  4008fa:	bf00      	nop
  4008fc:	400e0400 	.word	0x400e0400

00400900 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  400900:	b4f0      	push	{r4, r5, r6, r7}
  400902:	b08c      	sub	sp, #48	; 0x30
  400904:	4607      	mov	r7, r0
  400906:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  400908:	ac01      	add	r4, sp, #4
  40090a:	4d11      	ldr	r5, [pc, #68]	; (400950 <pwm_clocks_generate+0x50>)
  40090c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40090e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400914:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400918:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  40091c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  40091e:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400920:	f852 3b04 	ldr.w	r3, [r2], #4
  400924:	fbb6 f3f3 	udiv	r3, r6, r3
  400928:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  40092c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  400930:	d905      	bls.n	40093e <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  400932:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  400934:	280b      	cmp	r0, #11
  400936:	d1f3      	bne.n	400920 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  400938:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40093c:	e005      	b.n	40094a <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  40093e:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  400940:	bf94      	ite	ls
  400942:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  400946:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  40094a:	b00c      	add	sp, #48	; 0x30
  40094c:	bcf0      	pop	{r4, r5, r6, r7}
  40094e:	4770      	bx	lr
  400950:	004033b4 	.word	0x004033b4

00400954 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  400954:	b570      	push	{r4, r5, r6, lr}
  400956:	4606      	mov	r6, r0
  400958:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  40095a:	6808      	ldr	r0, [r1, #0]
  40095c:	b140      	cbz	r0, 400970 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40095e:	6889      	ldr	r1, [r1, #8]
  400960:	4b0e      	ldr	r3, [pc, #56]	; (40099c <pwm_init+0x48>)
  400962:	4798      	blx	r3
  400964:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  400966:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40096a:	4298      	cmp	r0, r3
  40096c:	d101      	bne.n	400972 <pwm_init+0x1e>
  40096e:	e00e      	b.n	40098e <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  400970:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  400972:	6860      	ldr	r0, [r4, #4]
  400974:	b140      	cbz	r0, 400988 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  400976:	68a1      	ldr	r1, [r4, #8]
  400978:	4b08      	ldr	r3, [pc, #32]	; (40099c <pwm_init+0x48>)
  40097a:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  40097c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400980:	4298      	cmp	r0, r3
  400982:	d007      	beq.n	400994 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  400984:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  400988:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  40098a:	2000      	movs	r0, #0
  40098c:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  40098e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  400992:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  400994:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  400998:	bd70      	pop	{r4, r5, r6, pc}
  40099a:	bf00      	nop
  40099c:	00400901 	.word	0x00400901

004009a0 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  4009a0:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  4009a2:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4009a4:	684a      	ldr	r2, [r1, #4]
  4009a6:	f002 020f 	and.w	r2, r2, #15
  4009aa:	8a8c      	ldrh	r4, [r1, #20]
  4009ac:	4322      	orrs	r2, r4
  4009ae:	890c      	ldrh	r4, [r1, #8]
  4009b0:	4322      	orrs	r2, r4
  4009b2:	7a8c      	ldrb	r4, [r1, #10]
  4009b4:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  4009b8:	7d8c      	ldrb	r4, [r1, #22]
  4009ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4009be:	7dcc      	ldrb	r4, [r1, #23]
  4009c0:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  4009c4:	7e0c      	ldrb	r4, [r1, #24]
  4009c6:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  4009ca:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  4009ce:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4009d2:	68ca      	ldr	r2, [r1, #12]
  4009d4:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4009d8:	690a      	ldr	r2, [r1, #16]
  4009da:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4009de:	7d8a      	ldrb	r2, [r1, #22]
  4009e0:	b13a      	cbz	r2, 4009f2 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4009e2:	8b8c      	ldrh	r4, [r1, #28]
  4009e4:	8b4a      	ldrh	r2, [r1, #26]
  4009e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4009ea:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4009ee:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4009f2:	6c84      	ldr	r4, [r0, #72]	; 0x48
  4009f4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  4009f8:	409a      	lsls	r2, r3
  4009fa:	43d2      	mvns	r2, r2
  4009fc:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  400a00:	7fcc      	ldrb	r4, [r1, #31]
  400a02:	fa04 f603 	lsl.w	r6, r4, r3
  400a06:	7f8c      	ldrb	r4, [r1, #30]
  400a08:	409c      	lsls	r4, r3
  400a0a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  400a0e:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  400a10:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  400a12:	6c44      	ldr	r4, [r0, #68]	; 0x44
  400a14:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  400a16:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  400a1a:	fa04 f503 	lsl.w	r5, r4, r3
  400a1e:	f891 4020 	ldrb.w	r4, [r1, #32]
  400a22:	409c      	lsls	r4, r3
  400a24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400a28:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  400a2a:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  400a2c:	2201      	movs	r2, #1
  400a2e:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  400a30:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  400a34:	b11c      	cbz	r4, 400a3e <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  400a36:	6a04      	ldr	r4, [r0, #32]
  400a38:	4314      	orrs	r4, r2
  400a3a:	6204      	str	r4, [r0, #32]
  400a3c:	e003      	b.n	400a46 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  400a3e:	6a04      	ldr	r4, [r0, #32]
  400a40:	ea24 0402 	bic.w	r4, r4, r2
  400a44:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  400a46:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  400a4a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  400a4c:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400a4e:	bf0c      	ite	eq
  400a50:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  400a52:	4394      	bicne	r4, r2
  400a54:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  400a56:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  400a5a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  400a5c:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400a5e:	bf0c      	ite	eq
  400a60:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  400a64:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  400a68:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  400a6a:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  400a6c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  400a6e:	22ff      	movs	r2, #255	; 0xff
  400a70:	409a      	lsls	r2, r3
  400a72:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  400a76:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  400a7a:	fa01 f303 	lsl.w	r3, r1, r3
  400a7e:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  400a80:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  400a82:	2000      	movs	r0, #0
  400a84:	bc70      	pop	{r4, r5, r6}
  400a86:	4770      	bx	lr

00400a88 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  400a88:	690b      	ldr	r3, [r1, #16]
  400a8a:	4293      	cmp	r3, r2
  400a8c:	d307      	bcc.n	400a9e <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  400a8e:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  400a90:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  400a92:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  400a96:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  400a9a:	2000      	movs	r0, #0
  400a9c:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  400a9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  400aa2:	4770      	bx	lr

00400aa4 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  400aa4:	2301      	movs	r3, #1
  400aa6:	fa03 f101 	lsl.w	r1, r3, r1
  400aaa:	6041      	str	r1, [r0, #4]
  400aac:	4770      	bx	lr
  400aae:	bf00      	nop

00400ab0 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  400ab0:	2301      	movs	r3, #1
  400ab2:	fa03 f101 	lsl.w	r1, r3, r1
  400ab6:	6081      	str	r1, [r0, #8]
  400ab8:	4770      	bx	lr
  400aba:	bf00      	nop

00400abc <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400abc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400ac0:	6a08      	ldr	r0, [r1, #32]
}
  400ac2:	4770      	bx	lr

00400ac4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400ac4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400ac6:	23ac      	movs	r3, #172	; 0xac
  400ac8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400aca:	680b      	ldr	r3, [r1, #0]
  400acc:	684a      	ldr	r2, [r1, #4]
  400ace:	fbb3 f3f2 	udiv	r3, r3, r2
  400ad2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400ad4:	1e5c      	subs	r4, r3, #1
  400ad6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400ada:	4294      	cmp	r4, r2
  400adc:	d80a      	bhi.n	400af4 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400ade:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400ae0:	688b      	ldr	r3, [r1, #8]
  400ae2:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400ae4:	f240 2302 	movw	r3, #514	; 0x202
  400ae8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400aec:	2350      	movs	r3, #80	; 0x50
  400aee:	6003      	str	r3, [r0, #0]

	return 0;
  400af0:	2000      	movs	r0, #0
  400af2:	e000      	b.n	400af6 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400af4:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400af6:	bc10      	pop	{r4}
  400af8:	4770      	bx	lr
  400afa:	bf00      	nop

00400afc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400afc:	6943      	ldr	r3, [r0, #20]
  400afe:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400b02:	bf1a      	itte	ne
  400b04:	61c1      	strne	r1, [r0, #28]
	return 0;
  400b06:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400b08:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400b0a:	4770      	bx	lr

00400b0c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400b0c:	6943      	ldr	r3, [r0, #20]
  400b0e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400b12:	bf1d      	ittte	ne
  400b14:	6983      	ldrne	r3, [r0, #24]
  400b16:	700b      	strbne	r3, [r1, #0]
	return 0;
  400b18:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400b1a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400b1c:	4770      	bx	lr
  400b1e:	bf00      	nop

00400b20 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400b20:	6943      	ldr	r3, [r0, #20]
  400b22:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400b26:	bf1d      	ittte	ne
  400b28:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400b2c:	61c1      	strne	r1, [r0, #28]
	return 0;
  400b2e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400b30:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400b32:	4770      	bx	lr

00400b34 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b34:	6943      	ldr	r3, [r0, #20]
  400b36:	f013 0f01 	tst.w	r3, #1
  400b3a:	d005      	beq.n	400b48 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b3c:	6983      	ldr	r3, [r0, #24]
  400b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b42:	600b      	str	r3, [r1, #0]

	return 0;
  400b44:	2000      	movs	r0, #0
  400b46:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400b48:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400b4a:	4770      	bx	lr

00400b4c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b4c:	e7fe      	b.n	400b4c <Dummy_Handler>
  400b4e:	bf00      	nop

00400b50 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400b50:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400b52:	4b20      	ldr	r3, [pc, #128]	; (400bd4 <Reset_Handler+0x84>)
  400b54:	4a20      	ldr	r2, [pc, #128]	; (400bd8 <Reset_Handler+0x88>)
  400b56:	429a      	cmp	r2, r3
  400b58:	d912      	bls.n	400b80 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400b5a:	4b20      	ldr	r3, [pc, #128]	; (400bdc <Reset_Handler+0x8c>)
  400b5c:	4a1d      	ldr	r2, [pc, #116]	; (400bd4 <Reset_Handler+0x84>)
  400b5e:	429a      	cmp	r2, r3
  400b60:	d21e      	bcs.n	400ba0 <Reset_Handler+0x50>
  400b62:	4611      	mov	r1, r2
  400b64:	3b01      	subs	r3, #1
  400b66:	1a9b      	subs	r3, r3, r2
  400b68:	f023 0303 	bic.w	r3, r3, #3
  400b6c:	3304      	adds	r3, #4
  400b6e:	4a1a      	ldr	r2, [pc, #104]	; (400bd8 <Reset_Handler+0x88>)
  400b70:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400b72:	f852 0b04 	ldr.w	r0, [r2], #4
  400b76:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400b7a:	429a      	cmp	r2, r3
  400b7c:	d1f9      	bne.n	400b72 <Reset_Handler+0x22>
  400b7e:	e00f      	b.n	400ba0 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400b80:	4b14      	ldr	r3, [pc, #80]	; (400bd4 <Reset_Handler+0x84>)
  400b82:	4a15      	ldr	r2, [pc, #84]	; (400bd8 <Reset_Handler+0x88>)
  400b84:	429a      	cmp	r2, r3
  400b86:	d20b      	bcs.n	400ba0 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400b88:	4b14      	ldr	r3, [pc, #80]	; (400bdc <Reset_Handler+0x8c>)
  400b8a:	4a12      	ldr	r2, [pc, #72]	; (400bd4 <Reset_Handler+0x84>)
  400b8c:	1a9a      	subs	r2, r3, r2
  400b8e:	4814      	ldr	r0, [pc, #80]	; (400be0 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400b90:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400b92:	b12a      	cbz	r2, 400ba0 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  400b94:	f851 2904 	ldr.w	r2, [r1], #-4
  400b98:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400b9c:	4281      	cmp	r1, r0
  400b9e:	d1f9      	bne.n	400b94 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400ba0:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400ba2:	4b10      	ldr	r3, [pc, #64]	; (400be4 <Reset_Handler+0x94>)
  400ba4:	4a10      	ldr	r2, [pc, #64]	; (400be8 <Reset_Handler+0x98>)
  400ba6:	429a      	cmp	r2, r3
  400ba8:	d20b      	bcs.n	400bc2 <Reset_Handler+0x72>
  400baa:	1d13      	adds	r3, r2, #4
  400bac:	4a0f      	ldr	r2, [pc, #60]	; (400bec <Reset_Handler+0x9c>)
  400bae:	1ad2      	subs	r2, r2, r3
  400bb0:	f022 0203 	bic.w	r2, r2, #3
  400bb4:	441a      	add	r2, r3
  400bb6:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400bb8:	2100      	movs	r1, #0
  400bba:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400bbe:	429a      	cmp	r2, r3
  400bc0:	d1fb      	bne.n	400bba <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400bc2:	4b0b      	ldr	r3, [pc, #44]	; (400bf0 <Reset_Handler+0xa0>)
  400bc4:	4a0b      	ldr	r2, [pc, #44]	; (400bf4 <Reset_Handler+0xa4>)
  400bc6:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400bc8:	4b0b      	ldr	r3, [pc, #44]	; (400bf8 <Reset_Handler+0xa8>)
  400bca:	4798      	blx	r3

	/* Branch to main function */
	main();
  400bcc:	4b0b      	ldr	r3, [pc, #44]	; (400bfc <Reset_Handler+0xac>)
  400bce:	4798      	blx	r3
  400bd0:	e7fe      	b.n	400bd0 <Reset_Handler+0x80>
  400bd2:	bf00      	nop
  400bd4:	20000000 	.word	0x20000000
  400bd8:	00403584 	.word	0x00403584
  400bdc:	20000854 	.word	0x20000854
  400be0:	00403580 	.word	0x00403580
  400be4:	20000960 	.word	0x20000960
  400be8:	20000854 	.word	0x20000854
  400bec:	20000963 	.word	0x20000963
  400bf0:	e000ed00 	.word	0xe000ed00
  400bf4:	00400000 	.word	0x00400000
  400bf8:	004016d9 	.word	0x004016d9
  400bfc:	004012ed 	.word	0x004012ed

00400c00 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400c00:	4b3d      	ldr	r3, [pc, #244]	; (400cf8 <SystemCoreClockUpdate+0xf8>)
  400c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c04:	f003 0303 	and.w	r3, r3, #3
  400c08:	2b03      	cmp	r3, #3
  400c0a:	d85d      	bhi.n	400cc8 <SystemCoreClockUpdate+0xc8>
  400c0c:	e8df f003 	tbb	[pc, r3]
  400c10:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400c14:	4b39      	ldr	r3, [pc, #228]	; (400cfc <SystemCoreClockUpdate+0xfc>)
  400c16:	695b      	ldr	r3, [r3, #20]
  400c18:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c1c:	bf14      	ite	ne
  400c1e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c22:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c26:	4b36      	ldr	r3, [pc, #216]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400c28:	601a      	str	r2, [r3, #0]
  400c2a:	e04d      	b.n	400cc8 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c2c:	4b32      	ldr	r3, [pc, #200]	; (400cf8 <SystemCoreClockUpdate+0xf8>)
  400c2e:	6a1b      	ldr	r3, [r3, #32]
  400c30:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c34:	d003      	beq.n	400c3e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400c36:	4a33      	ldr	r2, [pc, #204]	; (400d04 <SystemCoreClockUpdate+0x104>)
  400c38:	4b31      	ldr	r3, [pc, #196]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400c3a:	601a      	str	r2, [r3, #0]
  400c3c:	e044      	b.n	400cc8 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c3e:	4a32      	ldr	r2, [pc, #200]	; (400d08 <SystemCoreClockUpdate+0x108>)
  400c40:	4b2f      	ldr	r3, [pc, #188]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400c42:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400c44:	4b2c      	ldr	r3, [pc, #176]	; (400cf8 <SystemCoreClockUpdate+0xf8>)
  400c46:	6a1b      	ldr	r3, [r3, #32]
  400c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c4c:	2b10      	cmp	r3, #16
  400c4e:	d002      	beq.n	400c56 <SystemCoreClockUpdate+0x56>
  400c50:	2b20      	cmp	r3, #32
  400c52:	d004      	beq.n	400c5e <SystemCoreClockUpdate+0x5e>
  400c54:	e038      	b.n	400cc8 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400c56:	4a2d      	ldr	r2, [pc, #180]	; (400d0c <SystemCoreClockUpdate+0x10c>)
  400c58:	4b29      	ldr	r3, [pc, #164]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400c5a:	601a      	str	r2, [r3, #0]
			break;
  400c5c:	e034      	b.n	400cc8 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400c5e:	4a29      	ldr	r2, [pc, #164]	; (400d04 <SystemCoreClockUpdate+0x104>)
  400c60:	4b27      	ldr	r3, [pc, #156]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400c62:	601a      	str	r2, [r3, #0]
			break;
  400c64:	e030      	b.n	400cc8 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c66:	4b24      	ldr	r3, [pc, #144]	; (400cf8 <SystemCoreClockUpdate+0xf8>)
  400c68:	6a1b      	ldr	r3, [r3, #32]
  400c6a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c6e:	d003      	beq.n	400c78 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400c70:	4a24      	ldr	r2, [pc, #144]	; (400d04 <SystemCoreClockUpdate+0x104>)
  400c72:	4b23      	ldr	r3, [pc, #140]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400c74:	601a      	str	r2, [r3, #0]
  400c76:	e012      	b.n	400c9e <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c78:	4a23      	ldr	r2, [pc, #140]	; (400d08 <SystemCoreClockUpdate+0x108>)
  400c7a:	4b21      	ldr	r3, [pc, #132]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400c7c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400c7e:	4b1e      	ldr	r3, [pc, #120]	; (400cf8 <SystemCoreClockUpdate+0xf8>)
  400c80:	6a1b      	ldr	r3, [r3, #32]
  400c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c86:	2b10      	cmp	r3, #16
  400c88:	d002      	beq.n	400c90 <SystemCoreClockUpdate+0x90>
  400c8a:	2b20      	cmp	r3, #32
  400c8c:	d004      	beq.n	400c98 <SystemCoreClockUpdate+0x98>
  400c8e:	e006      	b.n	400c9e <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400c90:	4a1e      	ldr	r2, [pc, #120]	; (400d0c <SystemCoreClockUpdate+0x10c>)
  400c92:	4b1b      	ldr	r3, [pc, #108]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400c94:	601a      	str	r2, [r3, #0]
					break;
  400c96:	e002      	b.n	400c9e <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400c98:	4a1a      	ldr	r2, [pc, #104]	; (400d04 <SystemCoreClockUpdate+0x104>)
  400c9a:	4b19      	ldr	r3, [pc, #100]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400c9c:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400c9e:	4b16      	ldr	r3, [pc, #88]	; (400cf8 <SystemCoreClockUpdate+0xf8>)
  400ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ca2:	f003 0303 	and.w	r3, r3, #3
  400ca6:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400ca8:	4a13      	ldr	r2, [pc, #76]	; (400cf8 <SystemCoreClockUpdate+0xf8>)
  400caa:	bf07      	ittee	eq
  400cac:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400cae:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400cb0:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400cb2:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400cb4:	4812      	ldr	r0, [pc, #72]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400cb6:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400cba:	6803      	ldr	r3, [r0, #0]
  400cbc:	fb01 3303 	mla	r3, r1, r3, r3
  400cc0:	b2d2      	uxtb	r2, r2
  400cc2:	fbb3 f3f2 	udiv	r3, r3, r2
  400cc6:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400cc8:	4b0b      	ldr	r3, [pc, #44]	; (400cf8 <SystemCoreClockUpdate+0xf8>)
  400cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ccc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cd0:	2b70      	cmp	r3, #112	; 0x70
  400cd2:	d107      	bne.n	400ce4 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400cd4:	4a0a      	ldr	r2, [pc, #40]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400cd6:	6813      	ldr	r3, [r2, #0]
  400cd8:	490d      	ldr	r1, [pc, #52]	; (400d10 <SystemCoreClockUpdate+0x110>)
  400cda:	fba1 1303 	umull	r1, r3, r1, r3
  400cde:	085b      	lsrs	r3, r3, #1
  400ce0:	6013      	str	r3, [r2, #0]
  400ce2:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400ce4:	4b04      	ldr	r3, [pc, #16]	; (400cf8 <SystemCoreClockUpdate+0xf8>)
  400ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400ce8:	4905      	ldr	r1, [pc, #20]	; (400d00 <SystemCoreClockUpdate+0x100>)
  400cea:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400cee:	680b      	ldr	r3, [r1, #0]
  400cf0:	40d3      	lsrs	r3, r2
  400cf2:	600b      	str	r3, [r1, #0]
  400cf4:	4770      	bx	lr
  400cf6:	bf00      	nop
  400cf8:	400e0400 	.word	0x400e0400
  400cfc:	400e1410 	.word	0x400e1410
  400d00:	20000000 	.word	0x20000000
  400d04:	00b71b00 	.word	0x00b71b00
  400d08:	003d0900 	.word	0x003d0900
  400d0c:	007a1200 	.word	0x007a1200
  400d10:	aaaaaaab 	.word	0xaaaaaaab

00400d14 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400d14:	4b1a      	ldr	r3, [pc, #104]	; (400d80 <system_init_flash+0x6c>)
  400d16:	4298      	cmp	r0, r3
  400d18:	d807      	bhi.n	400d2a <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400d1e:	4a19      	ldr	r2, [pc, #100]	; (400d84 <system_init_flash+0x70>)
  400d20:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d22:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d26:	6013      	str	r3, [r2, #0]
  400d28:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400d2a:	4b17      	ldr	r3, [pc, #92]	; (400d88 <system_init_flash+0x74>)
  400d2c:	4298      	cmp	r0, r3
  400d2e:	d806      	bhi.n	400d3e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d30:	4b16      	ldr	r3, [pc, #88]	; (400d8c <system_init_flash+0x78>)
  400d32:	4a14      	ldr	r2, [pc, #80]	; (400d84 <system_init_flash+0x70>)
  400d34:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d36:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d3a:	6013      	str	r3, [r2, #0]
  400d3c:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400d3e:	4b14      	ldr	r3, [pc, #80]	; (400d90 <system_init_flash+0x7c>)
  400d40:	4298      	cmp	r0, r3
  400d42:	d806      	bhi.n	400d52 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d44:	4b13      	ldr	r3, [pc, #76]	; (400d94 <system_init_flash+0x80>)
  400d46:	4a0f      	ldr	r2, [pc, #60]	; (400d84 <system_init_flash+0x70>)
  400d48:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d4a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d4e:	6013      	str	r3, [r2, #0]
  400d50:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400d52:	4b11      	ldr	r3, [pc, #68]	; (400d98 <system_init_flash+0x84>)
  400d54:	4298      	cmp	r0, r3
  400d56:	d806      	bhi.n	400d66 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d58:	4b10      	ldr	r3, [pc, #64]	; (400d9c <system_init_flash+0x88>)
  400d5a:	4a0a      	ldr	r2, [pc, #40]	; (400d84 <system_init_flash+0x70>)
  400d5c:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d5e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d62:	6013      	str	r3, [r2, #0]
  400d64:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400d66:	4b0e      	ldr	r3, [pc, #56]	; (400da0 <system_init_flash+0x8c>)
  400d68:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400d6a:	bf94      	ite	ls
  400d6c:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d70:	4b0c      	ldrhi	r3, [pc, #48]	; (400da4 <system_init_flash+0x90>)
  400d72:	4a04      	ldr	r2, [pc, #16]	; (400d84 <system_init_flash+0x70>)
  400d74:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d76:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d7a:	6013      	str	r3, [r2, #0]
  400d7c:	4770      	bx	lr
  400d7e:	bf00      	nop
  400d80:	01312cff 	.word	0x01312cff
  400d84:	400e0a00 	.word	0x400e0a00
  400d88:	026259ff 	.word	0x026259ff
  400d8c:	04000100 	.word	0x04000100
  400d90:	039386ff 	.word	0x039386ff
  400d94:	04000200 	.word	0x04000200
  400d98:	04c4b3ff 	.word	0x04c4b3ff
  400d9c:	04000300 	.word	0x04000300
  400da0:	05f5e0ff 	.word	0x05f5e0ff
  400da4:	04000500 	.word	0x04000500

00400da8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400da8:	4b09      	ldr	r3, [pc, #36]	; (400dd0 <_sbrk+0x28>)
  400daa:	681b      	ldr	r3, [r3, #0]
  400dac:	b913      	cbnz	r3, 400db4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400dae:	4a09      	ldr	r2, [pc, #36]	; (400dd4 <_sbrk+0x2c>)
  400db0:	4b07      	ldr	r3, [pc, #28]	; (400dd0 <_sbrk+0x28>)
  400db2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400db4:	4b06      	ldr	r3, [pc, #24]	; (400dd0 <_sbrk+0x28>)
  400db6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400db8:	181a      	adds	r2, r3, r0
  400dba:	4907      	ldr	r1, [pc, #28]	; (400dd8 <_sbrk+0x30>)
  400dbc:	4291      	cmp	r1, r2
  400dbe:	db04      	blt.n	400dca <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400dc0:	4610      	mov	r0, r2
  400dc2:	4a03      	ldr	r2, [pc, #12]	; (400dd0 <_sbrk+0x28>)
  400dc4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400dc6:	4618      	mov	r0, r3
  400dc8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400dca:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400dce:	4770      	bx	lr
  400dd0:	200008e8 	.word	0x200008e8
  400dd4:	20003960 	.word	0x20003960
  400dd8:	20027ffc 	.word	0x20027ffc

00400ddc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400ddc:	f04f 30ff 	mov.w	r0, #4294967295
  400de0:	4770      	bx	lr
  400de2:	bf00      	nop

00400de4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400de8:	604b      	str	r3, [r1, #4]

	return 0;
}
  400dea:	2000      	movs	r0, #0
  400dec:	4770      	bx	lr
  400dee:	bf00      	nop

00400df0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400df0:	2001      	movs	r0, #1
  400df2:	4770      	bx	lr

00400df4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400df4:	2000      	movs	r0, #0
  400df6:	4770      	bx	lr

00400df8 <vMalhaControle>:
	gpio_set_pin_high(PIO_TRIGGER);
	delay_us(10);
	gpio_set_pin_low(PIO_TRIGGER);
}

void vMalhaControle(double distance) {
  400df8:	b538      	push	{r3, r4, r5, lr}
  400dfa:	4604      	mov	r4, r0
  400dfc:	460d      	mov	r5, r1
	puts("Executando Malha de Controle\r\n");
  400dfe:	4804      	ldr	r0, [pc, #16]	; (400e10 <vMalhaControle+0x18>)
  400e00:	4b04      	ldr	r3, [pc, #16]	; (400e14 <vMalhaControle+0x1c>)
  400e02:	4798      	blx	r3
	// Update Motor position
	vRunMotor(motorPos);
}

void vRunMotor(double pos) {
	vPWMUpdateDuty(pos);
  400e04:	4620      	mov	r0, r4
  400e06:	4629      	mov	r1, r5
  400e08:	4b03      	ldr	r3, [pc, #12]	; (400e18 <vMalhaControle+0x20>)
  400e0a:	4798      	blx	r3
  400e0c:	bd38      	pop	{r3, r4, r5, pc}
  400e0e:	bf00      	nop
  400e10:	00403400 	.word	0x00403400
  400e14:	0040182d 	.word	0x0040182d
  400e18:	0040123d 	.word	0x0040123d

00400e1c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e1e:	b083      	sub	sp, #12
  400e20:	4605      	mov	r5, r0
  400e22:	460c      	mov	r4, r1
	uint32_t val = 0;
  400e24:	2300      	movs	r3, #0
  400e26:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400e28:	4b18      	ldr	r3, [pc, #96]	; (400e8c <usart_serial_getchar+0x70>)
  400e2a:	4298      	cmp	r0, r3
  400e2c:	d107      	bne.n	400e3e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400e2e:	461f      	mov	r7, r3
  400e30:	4e17      	ldr	r6, [pc, #92]	; (400e90 <usart_serial_getchar+0x74>)
  400e32:	4621      	mov	r1, r4
  400e34:	4638      	mov	r0, r7
  400e36:	47b0      	blx	r6
  400e38:	2800      	cmp	r0, #0
  400e3a:	d1fa      	bne.n	400e32 <usart_serial_getchar+0x16>
  400e3c:	e017      	b.n	400e6e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400e3e:	4b15      	ldr	r3, [pc, #84]	; (400e94 <usart_serial_getchar+0x78>)
  400e40:	4298      	cmp	r0, r3
  400e42:	d107      	bne.n	400e54 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400e44:	461e      	mov	r6, r3
  400e46:	4d12      	ldr	r5, [pc, #72]	; (400e90 <usart_serial_getchar+0x74>)
  400e48:	4621      	mov	r1, r4
  400e4a:	4630      	mov	r0, r6
  400e4c:	47a8      	blx	r5
  400e4e:	2800      	cmp	r0, #0
  400e50:	d1fa      	bne.n	400e48 <usart_serial_getchar+0x2c>
  400e52:	e018      	b.n	400e86 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400e54:	4b10      	ldr	r3, [pc, #64]	; (400e98 <usart_serial_getchar+0x7c>)
  400e56:	4298      	cmp	r0, r3
  400e58:	d109      	bne.n	400e6e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400e5a:	461e      	mov	r6, r3
  400e5c:	4d0f      	ldr	r5, [pc, #60]	; (400e9c <usart_serial_getchar+0x80>)
  400e5e:	a901      	add	r1, sp, #4
  400e60:	4630      	mov	r0, r6
  400e62:	47a8      	blx	r5
  400e64:	2800      	cmp	r0, #0
  400e66:	d1fa      	bne.n	400e5e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400e68:	9b01      	ldr	r3, [sp, #4]
  400e6a:	7023      	strb	r3, [r4, #0]
  400e6c:	e00b      	b.n	400e86 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400e6e:	4b0c      	ldr	r3, [pc, #48]	; (400ea0 <usart_serial_getchar+0x84>)
  400e70:	429d      	cmp	r5, r3
  400e72:	d108      	bne.n	400e86 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400e74:	461e      	mov	r6, r3
  400e76:	4d09      	ldr	r5, [pc, #36]	; (400e9c <usart_serial_getchar+0x80>)
  400e78:	a901      	add	r1, sp, #4
  400e7a:	4630      	mov	r0, r6
  400e7c:	47a8      	blx	r5
  400e7e:	2800      	cmp	r0, #0
  400e80:	d1fa      	bne.n	400e78 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400e82:	9b01      	ldr	r3, [sp, #4]
  400e84:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400e86:	b003      	add	sp, #12
  400e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400e8a:	bf00      	nop
  400e8c:	400e0600 	.word	0x400e0600
  400e90:	00400b0d 	.word	0x00400b0d
  400e94:	400e0800 	.word	0x400e0800
  400e98:	40024000 	.word	0x40024000
  400e9c:	00400b35 	.word	0x00400b35
  400ea0:	40028000 	.word	0x40028000

00400ea4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400ea4:	b570      	push	{r4, r5, r6, lr}
  400ea6:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400ea8:	4b18      	ldr	r3, [pc, #96]	; (400f0c <usart_serial_putchar+0x68>)
  400eaa:	4298      	cmp	r0, r3
  400eac:	d108      	bne.n	400ec0 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400eae:	461e      	mov	r6, r3
  400eb0:	4d17      	ldr	r5, [pc, #92]	; (400f10 <usart_serial_putchar+0x6c>)
  400eb2:	4621      	mov	r1, r4
  400eb4:	4630      	mov	r0, r6
  400eb6:	47a8      	blx	r5
  400eb8:	2800      	cmp	r0, #0
  400eba:	d1fa      	bne.n	400eb2 <usart_serial_putchar+0xe>
		return 1;
  400ebc:	2001      	movs	r0, #1
  400ebe:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400ec0:	4b14      	ldr	r3, [pc, #80]	; (400f14 <usart_serial_putchar+0x70>)
  400ec2:	4298      	cmp	r0, r3
  400ec4:	d108      	bne.n	400ed8 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400ec6:	461e      	mov	r6, r3
  400ec8:	4d11      	ldr	r5, [pc, #68]	; (400f10 <usart_serial_putchar+0x6c>)
  400eca:	4621      	mov	r1, r4
  400ecc:	4630      	mov	r0, r6
  400ece:	47a8      	blx	r5
  400ed0:	2800      	cmp	r0, #0
  400ed2:	d1fa      	bne.n	400eca <usart_serial_putchar+0x26>
		return 1;
  400ed4:	2001      	movs	r0, #1
  400ed6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400ed8:	4b0f      	ldr	r3, [pc, #60]	; (400f18 <usart_serial_putchar+0x74>)
  400eda:	4298      	cmp	r0, r3
  400edc:	d108      	bne.n	400ef0 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400ede:	461e      	mov	r6, r3
  400ee0:	4d0e      	ldr	r5, [pc, #56]	; (400f1c <usart_serial_putchar+0x78>)
  400ee2:	4621      	mov	r1, r4
  400ee4:	4630      	mov	r0, r6
  400ee6:	47a8      	blx	r5
  400ee8:	2800      	cmp	r0, #0
  400eea:	d1fa      	bne.n	400ee2 <usart_serial_putchar+0x3e>
		return 1;
  400eec:	2001      	movs	r0, #1
  400eee:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400ef0:	4b0b      	ldr	r3, [pc, #44]	; (400f20 <usart_serial_putchar+0x7c>)
  400ef2:	4298      	cmp	r0, r3
  400ef4:	d108      	bne.n	400f08 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400ef6:	461e      	mov	r6, r3
  400ef8:	4d08      	ldr	r5, [pc, #32]	; (400f1c <usart_serial_putchar+0x78>)
  400efa:	4621      	mov	r1, r4
  400efc:	4630      	mov	r0, r6
  400efe:	47a8      	blx	r5
  400f00:	2800      	cmp	r0, #0
  400f02:	d1fa      	bne.n	400efa <usart_serial_putchar+0x56>
		return 1;
  400f04:	2001      	movs	r0, #1
  400f06:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400f08:	2000      	movs	r0, #0
}
  400f0a:	bd70      	pop	{r4, r5, r6, pc}
  400f0c:	400e0600 	.word	0x400e0600
  400f10:	00400afd 	.word	0x00400afd
  400f14:	400e0800 	.word	0x400e0800
  400f18:	40024000 	.word	0x40024000
  400f1c:	00400b21 	.word	0x00400b21
  400f20:	40028000 	.word	0x40028000

00400f24 <vSensorISR>:
    tc_start(TC_SENSOR,CHANNEL_SENSOR);
}

/* ISR Configuration */

void vSensorISR(const uint32_t id, const uint32_t index) {
  400f24:	b508      	push	{r3, lr}
	puts("Sensor ISR \r\n");
  400f26:	4808      	ldr	r0, [pc, #32]	; (400f48 <vSensorISR+0x24>)
  400f28:	4b08      	ldr	r3, [pc, #32]	; (400f4c <vSensorISR+0x28>)
  400f2a:	4798      	blx	r3
void vAddSensorCounter() {
	sensor_counter++;
}

double dGetDistance() {
	return (sensor_counter/58);
  400f2c:	4b08      	ldr	r3, [pc, #32]	; (400f50 <vSensorISR+0x2c>)

void vSensorISR(const uint32_t id, const uint32_t index) {
	puts("Sensor ISR \r\n");
	
	double distance = dGetDistance();
	vMalhaControle(distance);
  400f2e:	681b      	ldr	r3, [r3, #0]
  400f30:	4808      	ldr	r0, [pc, #32]	; (400f54 <vSensorISR+0x30>)
  400f32:	fb80 2003 	smull	r2, r0, r0, r3
  400f36:	4418      	add	r0, r3
  400f38:	17db      	asrs	r3, r3, #31
  400f3a:	ebc3 1060 	rsb	r0, r3, r0, asr #5
  400f3e:	4b06      	ldr	r3, [pc, #24]	; (400f58 <vSensorISR+0x34>)
  400f40:	4798      	blx	r3
  400f42:	4b06      	ldr	r3, [pc, #24]	; (400f5c <vSensorISR+0x38>)
  400f44:	4798      	blx	r3
  400f46:	bd08      	pop	{r3, pc}
  400f48:	00403420 	.word	0x00403420
  400f4c:	0040182d 	.word	0x0040182d
  400f50:	200008ec 	.word	0x200008ec
  400f54:	8d3dcb09 	.word	0x8d3dcb09
  400f58:	004015cd 	.word	0x004015cd
  400f5c:	00400df9 	.word	0x00400df9

00400f60 <vConfigureUART>:
#include "BeamBall.h"


/* UART Configuration */

void vConfigureUART(void) {
  400f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f64:	b084      	sub	sp, #16
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400f66:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400ff4 <vConfigureUART+0x94>
  400f6a:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400f6e:	4c16      	ldr	r4, [pc, #88]	; (400fc8 <vConfigureUART+0x68>)
  400f70:	6823      	ldr	r3, [r4, #0]
  400f72:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400f74:	68a3      	ldr	r3, [r4, #8]
  400f76:	9303      	str	r3, [sp, #12]
  400f78:	2008      	movs	r0, #8
  400f7a:	4f14      	ldr	r7, [pc, #80]	; (400fcc <vConfigureUART+0x6c>)
  400f7c:	47b8      	blx	r7
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400f7e:	4d14      	ldr	r5, [pc, #80]	; (400fd0 <vConfigureUART+0x70>)
  400f80:	a901      	add	r1, sp, #4
  400f82:	4628      	mov	r0, r5
  400f84:	4e13      	ldr	r6, [pc, #76]	; (400fd4 <vConfigureUART+0x74>)
  400f86:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400f88:	4b13      	ldr	r3, [pc, #76]	; (400fd8 <vConfigureUART+0x78>)
  400f8a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400f8c:	4a13      	ldr	r2, [pc, #76]	; (400fdc <vConfigureUART+0x7c>)
  400f8e:	4b14      	ldr	r3, [pc, #80]	; (400fe0 <vConfigureUART+0x80>)
  400f90:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400f92:	4a14      	ldr	r2, [pc, #80]	; (400fe4 <vConfigureUART+0x84>)
  400f94:	4b14      	ldr	r3, [pc, #80]	; (400fe8 <vConfigureUART+0x88>)
  400f96:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400f98:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400f9c:	6823      	ldr	r3, [r4, #0]
  400f9e:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400fa0:	68a3      	ldr	r3, [r4, #8]
  400fa2:	9303      	str	r3, [sp, #12]
  400fa4:	2008      	movs	r0, #8
  400fa6:	47b8      	blx	r7
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400fa8:	a901      	add	r1, sp, #4
  400faa:	4628      	mov	r0, r5
  400fac:	47b0      	blx	r6
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400fae:	4d0f      	ldr	r5, [pc, #60]	; (400fec <vConfigureUART+0x8c>)
  400fb0:	682b      	ldr	r3, [r5, #0]
  400fb2:	2100      	movs	r1, #0
  400fb4:	6898      	ldr	r0, [r3, #8]
  400fb6:	4c0e      	ldr	r4, [pc, #56]	; (400ff0 <vConfigureUART+0x90>)
  400fb8:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400fba:	682b      	ldr	r3, [r5, #0]
  400fbc:	2100      	movs	r1, #0
  400fbe:	6858      	ldr	r0, [r3, #4]
  400fc0:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY,
		.stopbits = CONF_UART_STOP_BITS
	};
	usart_serial_init(CONF_UART, &usart_options);
	stdio_serial_init((Usart *)CONF_UART, &usart_options);
}
  400fc2:	b004      	add	sp, #16
  400fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400fc8:	20000008 	.word	0x20000008
  400fcc:	004008ad 	.word	0x004008ad
  400fd0:	400e0600 	.word	0x400e0600
  400fd4:	00400ac5 	.word	0x00400ac5
  400fd8:	2000092c 	.word	0x2000092c
  400fdc:	00400ea5 	.word	0x00400ea5
  400fe0:	20000928 	.word	0x20000928
  400fe4:	00400e1d 	.word	0x00400e1d
  400fe8:	20000924 	.word	0x20000924
  400fec:	20000440 	.word	0x20000440
  400ff0:	0040183d 	.word	0x0040183d
  400ff4:	07270e00 	.word	0x07270e00

00400ff8 <vAddSensorCounter>:
int iGetSensorCounter() {
	return sensor_counter;
}

void vAddSensorCounter() {
	sensor_counter++;
  400ff8:	4a02      	ldr	r2, [pc, #8]	; (401004 <vAddSensorCounter+0xc>)
  400ffa:	6813      	ldr	r3, [r2, #0]
  400ffc:	3301      	adds	r3, #1
  400ffe:	6013      	str	r3, [r2, #0]
  401000:	4770      	bx	lr
  401002:	bf00      	nop
  401004:	200008ec 	.word	0x200008ec

00401008 <TC0_Handler>:
}

/* Timer Configuration */

// Essa funcao forca outra leitura da malha de controle
void TC0_Handler(void) {
  401008:	b508      	push	{r3, lr}
	puts("Timer Sensor\r\n");
  40100a:	4804      	ldr	r0, [pc, #16]	; (40101c <TC0_Handler+0x14>)
  40100c:	4b04      	ldr	r3, [pc, #16]	; (401020 <TC0_Handler+0x18>)
  40100e:	4798      	blx	r3
	tc_get_status(TC,CHANNEL);
  401010:	2100      	movs	r1, #0
  401012:	4804      	ldr	r0, [pc, #16]	; (401024 <TC0_Handler+0x1c>)
  401014:	4b04      	ldr	r3, [pc, #16]	; (401028 <TC0_Handler+0x20>)
  401016:	4798      	blx	r3
  401018:	bd08      	pop	{r3, pc}
  40101a:	bf00      	nop
  40101c:	00403430 	.word	0x00403430
  401020:	0040182d 	.word	0x0040182d
  401024:	40010000 	.word	0x40010000
  401028:	00400abd 	.word	0x00400abd

0040102c <TC3_Handler>:
	//vReadSensor();
}

// Essa funcao executa o contador de tempo entre o start do sensor e a sua resposta
void TC3_Handler(void) {
  40102c:	b508      	push	{r3, lr}
	puts("Timer Contador\r\n");
  40102e:	4805      	ldr	r0, [pc, #20]	; (401044 <TC3_Handler+0x18>)
  401030:	4b05      	ldr	r3, [pc, #20]	; (401048 <TC3_Handler+0x1c>)
  401032:	4798      	blx	r3
	tc_get_status(TC_SENSOR,CHANNEL_SENSOR);
  401034:	2101      	movs	r1, #1
  401036:	4805      	ldr	r0, [pc, #20]	; (40104c <TC3_Handler+0x20>)
  401038:	4b05      	ldr	r3, [pc, #20]	; (401050 <TC3_Handler+0x24>)
  40103a:	4798      	blx	r3
	vAddSensorCounter();
  40103c:	4b05      	ldr	r3, [pc, #20]	; (401054 <TC3_Handler+0x28>)
  40103e:	4798      	blx	r3
  401040:	bd08      	pop	{r3, pc}
  401042:	bf00      	nop
  401044:	00403440 	.word	0x00403440
  401048:	0040182d 	.word	0x0040182d
  40104c:	40010000 	.word	0x40010000
  401050:	00400abd 	.word	0x00400abd
  401054:	00400ff9 	.word	0x00400ff9

00401058 <TC1_Handler>:
}

void TC1_Handler(void) {
  401058:	b508      	push	{r3, lr}
	puts("Timer 1 Contador\r\n");
  40105a:	4804      	ldr	r0, [pc, #16]	; (40106c <TC1_Handler+0x14>)
  40105c:	4b04      	ldr	r3, [pc, #16]	; (401070 <TC1_Handler+0x18>)
  40105e:	4798      	blx	r3
	tc_get_status(TC_SENSOR,CHANNEL_SENSOR);
  401060:	2101      	movs	r1, #1
  401062:	4804      	ldr	r0, [pc, #16]	; (401074 <TC1_Handler+0x1c>)
  401064:	4b04      	ldr	r3, [pc, #16]	; (401078 <TC1_Handler+0x20>)
  401066:	4798      	blx	r3
  401068:	bd08      	pop	{r3, pc}
  40106a:	bf00      	nop
  40106c:	00403454 	.word	0x00403454
  401070:	0040182d 	.word	0x0040182d
  401074:	40010000 	.word	0x40010000
  401078:	00400abd 	.word	0x00400abd

0040107c <TC2_Handler>:
}


void TC2_Handler(void) {
  40107c:	b508      	push	{r3, lr}
	puts("Timer 2 Contador\r\n");
  40107e:	4804      	ldr	r0, [pc, #16]	; (401090 <TC2_Handler+0x14>)
  401080:	4b04      	ldr	r3, [pc, #16]	; (401094 <TC2_Handler+0x18>)
  401082:	4798      	blx	r3
	tc_get_status(TC_SENSOR,CHANNEL_SENSOR);
  401084:	2101      	movs	r1, #1
  401086:	4804      	ldr	r0, [pc, #16]	; (401098 <TC2_Handler+0x1c>)
  401088:	4b04      	ldr	r3, [pc, #16]	; (40109c <TC2_Handler+0x20>)
  40108a:	4798      	blx	r3
  40108c:	bd08      	pop	{r3, pc}
  40108e:	bf00      	nop
  401090:	00403468 	.word	0x00403468
  401094:	0040182d 	.word	0x0040182d
  401098:	40010000 	.word	0x40010000
  40109c:	00400abd 	.word	0x00400abd

004010a0 <TC4_Handler>:
}


void TC4_Handler(void) {
  4010a0:	b508      	push	{r3, lr}
	puts("Timer 4 Contador\r\n");
  4010a2:	4804      	ldr	r0, [pc, #16]	; (4010b4 <TC4_Handler+0x14>)
  4010a4:	4b04      	ldr	r3, [pc, #16]	; (4010b8 <TC4_Handler+0x18>)
  4010a6:	4798      	blx	r3
	tc_get_status(TC_SENSOR,CHANNEL_SENSOR);
  4010a8:	2101      	movs	r1, #1
  4010aa:	4804      	ldr	r0, [pc, #16]	; (4010bc <TC4_Handler+0x1c>)
  4010ac:	4b04      	ldr	r3, [pc, #16]	; (4010c0 <TC4_Handler+0x20>)
  4010ae:	4798      	blx	r3
  4010b0:	bd08      	pop	{r3, pc}
  4010b2:	bf00      	nop
  4010b4:	0040347c 	.word	0x0040347c
  4010b8:	0040182d 	.word	0x0040182d
  4010bc:	40010000 	.word	0x40010000
  4010c0:	00400abd 	.word	0x00400abd

004010c4 <TC5_Handler>:
}


void TC5_Handler(void) {
  4010c4:	b508      	push	{r3, lr}
	puts("Timer 5 Contador\r\n");
  4010c6:	4804      	ldr	r0, [pc, #16]	; (4010d8 <TC5_Handler+0x14>)
  4010c8:	4b04      	ldr	r3, [pc, #16]	; (4010dc <TC5_Handler+0x18>)
  4010ca:	4798      	blx	r3
	tc_get_status(TC_SENSOR,CHANNEL_SENSOR);
  4010cc:	2101      	movs	r1, #1
  4010ce:	4804      	ldr	r0, [pc, #16]	; (4010e0 <TC5_Handler+0x1c>)
  4010d0:	4b04      	ldr	r3, [pc, #16]	; (4010e4 <TC5_Handler+0x20>)
  4010d2:	4798      	blx	r3
  4010d4:	bd08      	pop	{r3, pc}
  4010d6:	bf00      	nop
  4010d8:	00403490 	.word	0x00403490
  4010dc:	0040182d 	.word	0x0040182d
  4010e0:	40010000 	.word	0x40010000
  4010e4:	00400abd 	.word	0x00400abd

004010e8 <vConfigureISR>:
	vPWMUpdateDuty(btn_duty);
	
	puts("Button Right ISR \r\n");
}

void vConfigureISR() {
  4010e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4010ec:	b082      	sub	sp, #8
	puts("Configuracao Sensor ISR \r\n");
  4010ee:	482a      	ldr	r0, [pc, #168]	; (401198 <vConfigureISR+0xb0>)
  4010f0:	4b2a      	ldr	r3, [pc, #168]	; (40119c <vConfigureISR+0xb4>)
  4010f2:	4798      	blx	r3
	
	/* Configuracao da ISR no PIO_ECHO do Sensor */
	pio_set_input(PIOA, PIO_ECHO, PIO_DEBOUNCE);
  4010f4:	4c2a      	ldr	r4, [pc, #168]	; (4011a0 <vConfigureISR+0xb8>)
  4010f6:	2208      	movs	r2, #8
  4010f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4010fc:	4620      	mov	r0, r4
  4010fe:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 4011c4 <vConfigureISR+0xdc>
  401102:	47c8      	blx	r9
	pio_pull_down(PIOA,PIO_ECHO,1);
  401104:	2201      	movs	r2, #1
  401106:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  40110a:	4620      	mov	r0, r4
  40110c:	4b25      	ldr	r3, [pc, #148]	; (4011a4 <vConfigureISR+0xbc>)
  40110e:	4798      	blx	r3
	pio_handler_set(PIOA,ID_PIOA,PIO_ECHO,PIO_IT_RISE_EDGE,vSensorISR);
  401110:	4b25      	ldr	r3, [pc, #148]	; (4011a8 <vConfigureISR+0xc0>)
  401112:	9300      	str	r3, [sp, #0]
  401114:	2370      	movs	r3, #112	; 0x70
  401116:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40111a:	210b      	movs	r1, #11
  40111c:	4620      	mov	r0, r4
  40111e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4011c8 <vConfigureISR+0xe0>
  401122:	47c0      	blx	r8
	pio_enable_interrupt(PIOA,PIO_ECHO);
  401124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401128:	4620      	mov	r0, r4
  40112a:	4e20      	ldr	r6, [pc, #128]	; (4011ac <vConfigureISR+0xc4>)
  40112c:	47b0      	blx	r6
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40112e:	4c20      	ldr	r4, [pc, #128]	; (4011b0 <vConfigureISR+0xc8>)
  401130:	2310      	movs	r3, #16
  401132:	f884 330b 	strb.w	r3, [r4, #779]	; 0x30b
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401136:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40113a:	6023      	str	r3, [r4, #0]
	NVIC_SetPriority(PIOA_IRQn, SENSOR_PRIORITY);
	NVIC_EnableIRQ(PIOA_IRQn);
	
	/* ISR no Botao */
	pio_set_input(PIOB, PIO_BUTTON_LEFT, PIO_PULLUP | PIO_DEBOUNCE);
  40113c:	4d1d      	ldr	r5, [pc, #116]	; (4011b4 <vConfigureISR+0xcc>)
  40113e:	2209      	movs	r2, #9
  401140:	2108      	movs	r1, #8
  401142:	4628      	mov	r0, r5
  401144:	47c8      	blx	r9
	pio_handler_set(PIOB,ID_PIOB,PIO_BUTTON_LEFT,PIO_IT_RISE_EDGE,vButtonLeftISR);
  401146:	4b1c      	ldr	r3, [pc, #112]	; (4011b8 <vConfigureISR+0xd0>)
  401148:	9300      	str	r3, [sp, #0]
  40114a:	2370      	movs	r3, #112	; 0x70
  40114c:	2208      	movs	r2, #8
  40114e:	210c      	movs	r1, #12
  401150:	4628      	mov	r0, r5
  401152:	47c0      	blx	r8
	pio_enable_interrupt(PIOB,PIO_BUTTON_LEFT);
  401154:	2108      	movs	r1, #8
  401156:	4628      	mov	r0, r5
  401158:	47b0      	blx	r6
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40115a:	f04f 0a20 	mov.w	sl, #32
  40115e:	f884 a30c 	strb.w	sl, [r4, #780]	; 0x30c
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401162:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  401166:	6025      	str	r5, [r4, #0]
	NVIC_SetPriority(PIOB_IRQn, BUTTON_PRIORITY);
	NVIC_EnableIRQ(PIOB_IRQn);
	
	pio_set_input(PIOC, PIO_BUTTON_RIGTH, PIO_PULLUP | PIO_DEBOUNCE);
  401168:	4f14      	ldr	r7, [pc, #80]	; (4011bc <vConfigureISR+0xd4>)
  40116a:	2209      	movs	r2, #9
  40116c:	4629      	mov	r1, r5
  40116e:	4638      	mov	r0, r7
  401170:	47c8      	blx	r9
	pio_handler_set(PIOC,ID_PIOC,PIO_BUTTON_RIGTH,PIO_IT_RISE_EDGE,vButtonRightISR);
  401172:	4b13      	ldr	r3, [pc, #76]	; (4011c0 <vConfigureISR+0xd8>)
  401174:	9300      	str	r3, [sp, #0]
  401176:	2370      	movs	r3, #112	; 0x70
  401178:	462a      	mov	r2, r5
  40117a:	210d      	movs	r1, #13
  40117c:	4638      	mov	r0, r7
  40117e:	47c0      	blx	r8
	pio_enable_interrupt(PIOC,PIO_BUTTON_RIGTH);
  401180:	4629      	mov	r1, r5
  401182:	4638      	mov	r0, r7
  401184:	47b0      	blx	r6
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401186:	f884 a30d 	strb.w	sl, [r4, #781]	; 0x30d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40118e:	6023      	str	r3, [r4, #0]
	NVIC_SetPriority(PIOC_IRQn, BUTTON_PRIORITY);
	NVIC_EnableIRQ(PIOC_IRQn);
}
  401190:	b002      	add	sp, #8
  401192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401196:	bf00      	nop
  401198:	004034e8 	.word	0x004034e8
  40119c:	0040182d 	.word	0x0040182d
  4011a0:	400e0e00 	.word	0x400e0e00
  4011a4:	00400449 	.word	0x00400449
  4011a8:	00400f25 	.word	0x00400f25
  4011ac:	00400489 	.word	0x00400489
  4011b0:	e000e100 	.word	0xe000e100
  4011b4:	400e1000 	.word	0x400e1000
  4011b8:	0040127d 	.word	0x0040127d
  4011bc:	400e1200 	.word	0x400e1200
  4011c0:	004012b5 	.word	0x004012b5
  4011c4:	004003ed 	.word	0x004003ed
  4011c8:	00400719 	.word	0x00400719

004011cc <vConfigurePWM>:

/* PWM Configuration */

void vConfigurePWM() {
  4011cc:	b530      	push	{r4, r5, lr}
  4011ce:	b085      	sub	sp, #20
	
	pmc_enable_periph_clk(ID_PWM);
  4011d0:	201f      	movs	r0, #31
  4011d2:	4b12      	ldr	r3, [pc, #72]	; (40121c <vConfigurePWM+0x50>)
  4011d4:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL);
  4011d6:	4d12      	ldr	r5, [pc, #72]	; (401220 <vConfigurePWM+0x54>)
  4011d8:	2100      	movs	r1, #0
  4011da:	4628      	mov	r0, r5
  4011dc:	4b11      	ldr	r3, [pc, #68]	; (401224 <vConfigurePWM+0x58>)
  4011de:	4798      	blx	r3
	pwm_clock_t clock_setting = {
  4011e0:	f241 3388 	movw	r3, #5000	; 0x1388
  4011e4:	9301      	str	r3, [sp, #4]
  4011e6:	2400      	movs	r4, #0
  4011e8:	9402      	str	r4, [sp, #8]
  4011ea:	4b0f      	ldr	r3, [pc, #60]	; (401228 <vConfigurePWM+0x5c>)
  4011ec:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
  4011ee:	a901      	add	r1, sp, #4
  4011f0:	4628      	mov	r0, r5
  4011f2:	4b0e      	ldr	r3, [pc, #56]	; (40122c <vConfigurePWM+0x60>)
  4011f4:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel.alignment = PWM_ALIGN_LEFT;
  4011f6:	490e      	ldr	r1, [pc, #56]	; (401230 <vConfigurePWM+0x64>)
  4011f8:	810c      	strh	r4, [r1, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel.polarity = PWM_LOW;
  4011fa:	728c      	strb	r4, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel.ul_prescaler = PWM_CMR_CPRE_CLKA;
  4011fc:	230b      	movs	r3, #11
  4011fe:	604b      	str	r3, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel.ul_period = PERIOD_VALUE;
  401200:	2364      	movs	r3, #100	; 0x64
  401202:	610b      	str	r3, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel.ul_duty = INIT_DUTY_VALUE;
  401204:	2301      	movs	r3, #1
  401206:	60cb      	str	r3, [r1, #12]
	g_pwm_channel.channel = PWM_CHANNEL;
  401208:	600c      	str	r4, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel);
  40120a:	4628      	mov	r0, r5
  40120c:	4b09      	ldr	r3, [pc, #36]	; (401234 <vConfigurePWM+0x68>)
  40120e:	4798      	blx	r3
	//pwm_channel_enable_interrupt(PWM, PIN_PWM_LED0_CHANNEL, 0);

	/* Configure interrupt and enable PWM interrupt */
	//NVIC_EnableIRQ(PWM_IRQn);
	
	pwm_channel_enable(PWM, PWM_CHANNEL);
  401210:	4621      	mov	r1, r4
  401212:	4628      	mov	r0, r5
  401214:	4b08      	ldr	r3, [pc, #32]	; (401238 <vConfigurePWM+0x6c>)
  401216:	4798      	blx	r3
}
  401218:	b005      	add	sp, #20
  40121a:	bd30      	pop	{r4, r5, pc}
  40121c:	004008ad 	.word	0x004008ad
  401220:	40020000 	.word	0x40020000
  401224:	00400ab1 	.word	0x00400ab1
  401228:	07270e00 	.word	0x07270e00
  40122c:	00400955 	.word	0x00400955
  401230:	20000934 	.word	0x20000934
  401234:	004009a1 	.word	0x004009a1
  401238:	00400aa5 	.word	0x00400aa5

0040123c <vPWMUpdateDuty>:

void vPWMUpdateDuty (double duty) {
  40123c:	b5d0      	push	{r4, r6, r7, lr}
  40123e:	4606      	mov	r6, r0
  401240:	460f      	mov	r7, r1
	puts("Update Duty!\r\n");
  401242:	4808      	ldr	r0, [pc, #32]	; (401264 <vPWMUpdateDuty+0x28>)
  401244:	4b08      	ldr	r3, [pc, #32]	; (401268 <vPWMUpdateDuty+0x2c>)
  401246:	4798      	blx	r3
	g_pwm_channel.channel = PWM_CHANNEL;
  401248:	4c08      	ldr	r4, [pc, #32]	; (40126c <vPWMUpdateDuty+0x30>)
  40124a:	2300      	movs	r3, #0
  40124c:	6023      	str	r3, [r4, #0]
	pwm_channel_update_duty(PWM, &g_pwm_channel, duty);
  40124e:	4630      	mov	r0, r6
  401250:	4639      	mov	r1, r7
  401252:	4b07      	ldr	r3, [pc, #28]	; (401270 <vPWMUpdateDuty+0x34>)
  401254:	4798      	blx	r3
  401256:	4602      	mov	r2, r0
  401258:	4621      	mov	r1, r4
  40125a:	4806      	ldr	r0, [pc, #24]	; (401274 <vPWMUpdateDuty+0x38>)
  40125c:	4b06      	ldr	r3, [pc, #24]	; (401278 <vPWMUpdateDuty+0x3c>)
  40125e:	4798      	blx	r3
  401260:	bdd0      	pop	{r4, r6, r7, pc}
  401262:	bf00      	nop
  401264:	00403504 	.word	0x00403504
  401268:	0040182d 	.word	0x0040182d
  40126c:	20000934 	.word	0x20000934
  401270:	00401699 	.word	0x00401699
  401274:	40020000 	.word	0x40020000
  401278:	00400a89 	.word	0x00400a89

0040127c <vButtonLeftISR>:
}

uint32_t btn_duty = MIN_DUTY_VALUE;

// Alteram o PWM diretamente
void vButtonLeftISR(const uint32_t id, const uint32_t index) {
  40127c:	b508      	push	{r3, lr}
	// aumenta o duty
	if (btn_duty < MAX_DUTY_VALUE) btn_duty++;
  40127e:	4b08      	ldr	r3, [pc, #32]	; (4012a0 <vButtonLeftISR+0x24>)
  401280:	681b      	ldr	r3, [r3, #0]
  401282:	2b08      	cmp	r3, #8
  401284:	d802      	bhi.n	40128c <vButtonLeftISR+0x10>
  401286:	3301      	adds	r3, #1
  401288:	4a05      	ldr	r2, [pc, #20]	; (4012a0 <vButtonLeftISR+0x24>)
  40128a:	6013      	str	r3, [r2, #0]
	vPWMUpdateDuty(btn_duty);
  40128c:	4b04      	ldr	r3, [pc, #16]	; (4012a0 <vButtonLeftISR+0x24>)
  40128e:	6818      	ldr	r0, [r3, #0]
  401290:	4b04      	ldr	r3, [pc, #16]	; (4012a4 <vButtonLeftISR+0x28>)
  401292:	4798      	blx	r3
  401294:	4b04      	ldr	r3, [pc, #16]	; (4012a8 <vButtonLeftISR+0x2c>)
  401296:	4798      	blx	r3
	
	puts("Button Left ISR \r\n");
  401298:	4804      	ldr	r0, [pc, #16]	; (4012ac <vButtonLeftISR+0x30>)
  40129a:	4b05      	ldr	r3, [pc, #20]	; (4012b0 <vButtonLeftISR+0x34>)
  40129c:	4798      	blx	r3
  40129e:	bd08      	pop	{r3, pc}
  4012a0:	20000004 	.word	0x20000004
  4012a4:	004015ad 	.word	0x004015ad
  4012a8:	0040123d 	.word	0x0040123d
  4012ac:	00403514 	.word	0x00403514
  4012b0:	0040182d 	.word	0x0040182d

004012b4 <vButtonRightISR>:
}

void vButtonRightISR(const uint32_t id, const uint32_t index) {
  4012b4:	b508      	push	{r3, lr}
	// diminui o duty
	if (btn_duty > MIN_DUTY_VALUE) btn_duty--;
  4012b6:	4b08      	ldr	r3, [pc, #32]	; (4012d8 <vButtonRightISR+0x24>)
  4012b8:	681b      	ldr	r3, [r3, #0]
  4012ba:	2b01      	cmp	r3, #1
  4012bc:	d902      	bls.n	4012c4 <vButtonRightISR+0x10>
  4012be:	3b01      	subs	r3, #1
  4012c0:	4a05      	ldr	r2, [pc, #20]	; (4012d8 <vButtonRightISR+0x24>)
  4012c2:	6013      	str	r3, [r2, #0]
	vPWMUpdateDuty(btn_duty);
  4012c4:	4b04      	ldr	r3, [pc, #16]	; (4012d8 <vButtonRightISR+0x24>)
  4012c6:	6818      	ldr	r0, [r3, #0]
  4012c8:	4b04      	ldr	r3, [pc, #16]	; (4012dc <vButtonRightISR+0x28>)
  4012ca:	4798      	blx	r3
  4012cc:	4b04      	ldr	r3, [pc, #16]	; (4012e0 <vButtonRightISR+0x2c>)
  4012ce:	4798      	blx	r3
	
	puts("Button Right ISR \r\n");
  4012d0:	4804      	ldr	r0, [pc, #16]	; (4012e4 <vButtonRightISR+0x30>)
  4012d2:	4b05      	ldr	r3, [pc, #20]	; (4012e8 <vButtonRightISR+0x34>)
  4012d4:	4798      	blx	r3
  4012d6:	bd08      	pop	{r3, pc}
  4012d8:	20000004 	.word	0x20000004
  4012dc:	004015ad 	.word	0x004015ad
  4012e0:	0040123d 	.word	0x0040123d
  4012e4:	00403528 	.word	0x00403528
  4012e8:	0040182d 	.word	0x0040182d

004012ec <main>:
 */
#include <asf.h>
#include "BeamBall.h"

int main (void)
{
  4012ec:	b508      	push	{r3, lr}
	sysclk_init();
  4012ee:	4b07      	ldr	r3, [pc, #28]	; (40130c <main+0x20>)
  4012f0:	4798      	blx	r3
	board_init();
  4012f2:	4b07      	ldr	r3, [pc, #28]	; (401310 <main+0x24>)
  4012f4:	4798      	blx	r3
	vConfigureUART();
  4012f6:	4b07      	ldr	r3, [pc, #28]	; (401314 <main+0x28>)
  4012f8:	4798      	blx	r3

	puts("Inicializing Beam Ball\r\n");
  4012fa:	4807      	ldr	r0, [pc, #28]	; (401318 <main+0x2c>)
  4012fc:	4b07      	ldr	r3, [pc, #28]	; (40131c <main+0x30>)
  4012fe:	4798      	blx	r3

	vConfigurePWM();
  401300:	4b07      	ldr	r3, [pc, #28]	; (401320 <main+0x34>)
  401302:	4798      	blx	r3
	vConfigureISR();
  401304:	4b07      	ldr	r3, [pc, #28]	; (401324 <main+0x38>)
  401306:	4798      	blx	r3
  401308:	e7fe      	b.n	401308 <main+0x1c>
  40130a:	bf00      	nop
  40130c:	00400129 	.word	0x00400129
  401310:	00400219 	.word	0x00400219
  401314:	00400f61 	.word	0x00400f61
  401318:	0040353c 	.word	0x0040353c
  40131c:	0040182d 	.word	0x0040182d
  401320:	004011cd 	.word	0x004011cd
  401324:	004010e9 	.word	0x004010e9

00401328 <__aeabi_drsub>:
  401328:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40132c:	e002      	b.n	401334 <__adddf3>
  40132e:	bf00      	nop

00401330 <__aeabi_dsub>:
  401330:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401334 <__adddf3>:
  401334:	b530      	push	{r4, r5, lr}
  401336:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40133a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40133e:	ea94 0f05 	teq	r4, r5
  401342:	bf08      	it	eq
  401344:	ea90 0f02 	teqeq	r0, r2
  401348:	bf1f      	itttt	ne
  40134a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40134e:	ea55 0c02 	orrsne.w	ip, r5, r2
  401352:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401356:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40135a:	f000 80e2 	beq.w	401522 <__adddf3+0x1ee>
  40135e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401362:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401366:	bfb8      	it	lt
  401368:	426d      	neglt	r5, r5
  40136a:	dd0c      	ble.n	401386 <__adddf3+0x52>
  40136c:	442c      	add	r4, r5
  40136e:	ea80 0202 	eor.w	r2, r0, r2
  401372:	ea81 0303 	eor.w	r3, r1, r3
  401376:	ea82 0000 	eor.w	r0, r2, r0
  40137a:	ea83 0101 	eor.w	r1, r3, r1
  40137e:	ea80 0202 	eor.w	r2, r0, r2
  401382:	ea81 0303 	eor.w	r3, r1, r3
  401386:	2d36      	cmp	r5, #54	; 0x36
  401388:	bf88      	it	hi
  40138a:	bd30      	pophi	{r4, r5, pc}
  40138c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401390:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401394:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401398:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40139c:	d002      	beq.n	4013a4 <__adddf3+0x70>
  40139e:	4240      	negs	r0, r0
  4013a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4013a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4013a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4013ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4013b0:	d002      	beq.n	4013b8 <__adddf3+0x84>
  4013b2:	4252      	negs	r2, r2
  4013b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4013b8:	ea94 0f05 	teq	r4, r5
  4013bc:	f000 80a7 	beq.w	40150e <__adddf3+0x1da>
  4013c0:	f1a4 0401 	sub.w	r4, r4, #1
  4013c4:	f1d5 0e20 	rsbs	lr, r5, #32
  4013c8:	db0d      	blt.n	4013e6 <__adddf3+0xb2>
  4013ca:	fa02 fc0e 	lsl.w	ip, r2, lr
  4013ce:	fa22 f205 	lsr.w	r2, r2, r5
  4013d2:	1880      	adds	r0, r0, r2
  4013d4:	f141 0100 	adc.w	r1, r1, #0
  4013d8:	fa03 f20e 	lsl.w	r2, r3, lr
  4013dc:	1880      	adds	r0, r0, r2
  4013de:	fa43 f305 	asr.w	r3, r3, r5
  4013e2:	4159      	adcs	r1, r3
  4013e4:	e00e      	b.n	401404 <__adddf3+0xd0>
  4013e6:	f1a5 0520 	sub.w	r5, r5, #32
  4013ea:	f10e 0e20 	add.w	lr, lr, #32
  4013ee:	2a01      	cmp	r2, #1
  4013f0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4013f4:	bf28      	it	cs
  4013f6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4013fa:	fa43 f305 	asr.w	r3, r3, r5
  4013fe:	18c0      	adds	r0, r0, r3
  401400:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401404:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401408:	d507      	bpl.n	40141a <__adddf3+0xe6>
  40140a:	f04f 0e00 	mov.w	lr, #0
  40140e:	f1dc 0c00 	rsbs	ip, ip, #0
  401412:	eb7e 0000 	sbcs.w	r0, lr, r0
  401416:	eb6e 0101 	sbc.w	r1, lr, r1
  40141a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40141e:	d31b      	bcc.n	401458 <__adddf3+0x124>
  401420:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401424:	d30c      	bcc.n	401440 <__adddf3+0x10c>
  401426:	0849      	lsrs	r1, r1, #1
  401428:	ea5f 0030 	movs.w	r0, r0, rrx
  40142c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401430:	f104 0401 	add.w	r4, r4, #1
  401434:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401438:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40143c:	f080 809a 	bcs.w	401574 <__adddf3+0x240>
  401440:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401444:	bf08      	it	eq
  401446:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40144a:	f150 0000 	adcs.w	r0, r0, #0
  40144e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401452:	ea41 0105 	orr.w	r1, r1, r5
  401456:	bd30      	pop	{r4, r5, pc}
  401458:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40145c:	4140      	adcs	r0, r0
  40145e:	eb41 0101 	adc.w	r1, r1, r1
  401462:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401466:	f1a4 0401 	sub.w	r4, r4, #1
  40146a:	d1e9      	bne.n	401440 <__adddf3+0x10c>
  40146c:	f091 0f00 	teq	r1, #0
  401470:	bf04      	itt	eq
  401472:	4601      	moveq	r1, r0
  401474:	2000      	moveq	r0, #0
  401476:	fab1 f381 	clz	r3, r1
  40147a:	bf08      	it	eq
  40147c:	3320      	addeq	r3, #32
  40147e:	f1a3 030b 	sub.w	r3, r3, #11
  401482:	f1b3 0220 	subs.w	r2, r3, #32
  401486:	da0c      	bge.n	4014a2 <__adddf3+0x16e>
  401488:	320c      	adds	r2, #12
  40148a:	dd08      	ble.n	40149e <__adddf3+0x16a>
  40148c:	f102 0c14 	add.w	ip, r2, #20
  401490:	f1c2 020c 	rsb	r2, r2, #12
  401494:	fa01 f00c 	lsl.w	r0, r1, ip
  401498:	fa21 f102 	lsr.w	r1, r1, r2
  40149c:	e00c      	b.n	4014b8 <__adddf3+0x184>
  40149e:	f102 0214 	add.w	r2, r2, #20
  4014a2:	bfd8      	it	le
  4014a4:	f1c2 0c20 	rsble	ip, r2, #32
  4014a8:	fa01 f102 	lsl.w	r1, r1, r2
  4014ac:	fa20 fc0c 	lsr.w	ip, r0, ip
  4014b0:	bfdc      	itt	le
  4014b2:	ea41 010c 	orrle.w	r1, r1, ip
  4014b6:	4090      	lslle	r0, r2
  4014b8:	1ae4      	subs	r4, r4, r3
  4014ba:	bfa2      	ittt	ge
  4014bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4014c0:	4329      	orrge	r1, r5
  4014c2:	bd30      	popge	{r4, r5, pc}
  4014c4:	ea6f 0404 	mvn.w	r4, r4
  4014c8:	3c1f      	subs	r4, #31
  4014ca:	da1c      	bge.n	401506 <__adddf3+0x1d2>
  4014cc:	340c      	adds	r4, #12
  4014ce:	dc0e      	bgt.n	4014ee <__adddf3+0x1ba>
  4014d0:	f104 0414 	add.w	r4, r4, #20
  4014d4:	f1c4 0220 	rsb	r2, r4, #32
  4014d8:	fa20 f004 	lsr.w	r0, r0, r4
  4014dc:	fa01 f302 	lsl.w	r3, r1, r2
  4014e0:	ea40 0003 	orr.w	r0, r0, r3
  4014e4:	fa21 f304 	lsr.w	r3, r1, r4
  4014e8:	ea45 0103 	orr.w	r1, r5, r3
  4014ec:	bd30      	pop	{r4, r5, pc}
  4014ee:	f1c4 040c 	rsb	r4, r4, #12
  4014f2:	f1c4 0220 	rsb	r2, r4, #32
  4014f6:	fa20 f002 	lsr.w	r0, r0, r2
  4014fa:	fa01 f304 	lsl.w	r3, r1, r4
  4014fe:	ea40 0003 	orr.w	r0, r0, r3
  401502:	4629      	mov	r1, r5
  401504:	bd30      	pop	{r4, r5, pc}
  401506:	fa21 f004 	lsr.w	r0, r1, r4
  40150a:	4629      	mov	r1, r5
  40150c:	bd30      	pop	{r4, r5, pc}
  40150e:	f094 0f00 	teq	r4, #0
  401512:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401516:	bf06      	itte	eq
  401518:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40151c:	3401      	addeq	r4, #1
  40151e:	3d01      	subne	r5, #1
  401520:	e74e      	b.n	4013c0 <__adddf3+0x8c>
  401522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401526:	bf18      	it	ne
  401528:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40152c:	d029      	beq.n	401582 <__adddf3+0x24e>
  40152e:	ea94 0f05 	teq	r4, r5
  401532:	bf08      	it	eq
  401534:	ea90 0f02 	teqeq	r0, r2
  401538:	d005      	beq.n	401546 <__adddf3+0x212>
  40153a:	ea54 0c00 	orrs.w	ip, r4, r0
  40153e:	bf04      	itt	eq
  401540:	4619      	moveq	r1, r3
  401542:	4610      	moveq	r0, r2
  401544:	bd30      	pop	{r4, r5, pc}
  401546:	ea91 0f03 	teq	r1, r3
  40154a:	bf1e      	ittt	ne
  40154c:	2100      	movne	r1, #0
  40154e:	2000      	movne	r0, #0
  401550:	bd30      	popne	{r4, r5, pc}
  401552:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401556:	d105      	bne.n	401564 <__adddf3+0x230>
  401558:	0040      	lsls	r0, r0, #1
  40155a:	4149      	adcs	r1, r1
  40155c:	bf28      	it	cs
  40155e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401562:	bd30      	pop	{r4, r5, pc}
  401564:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401568:	bf3c      	itt	cc
  40156a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40156e:	bd30      	popcc	{r4, r5, pc}
  401570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401574:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401578:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40157c:	f04f 0000 	mov.w	r0, #0
  401580:	bd30      	pop	{r4, r5, pc}
  401582:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401586:	bf1a      	itte	ne
  401588:	4619      	movne	r1, r3
  40158a:	4610      	movne	r0, r2
  40158c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401590:	bf1c      	itt	ne
  401592:	460b      	movne	r3, r1
  401594:	4602      	movne	r2, r0
  401596:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40159a:	bf06      	itte	eq
  40159c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4015a0:	ea91 0f03 	teqeq	r1, r3
  4015a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4015a8:	bd30      	pop	{r4, r5, pc}
  4015aa:	bf00      	nop

004015ac <__aeabi_ui2d>:
  4015ac:	f090 0f00 	teq	r0, #0
  4015b0:	bf04      	itt	eq
  4015b2:	2100      	moveq	r1, #0
  4015b4:	4770      	bxeq	lr
  4015b6:	b530      	push	{r4, r5, lr}
  4015b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4015bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4015c0:	f04f 0500 	mov.w	r5, #0
  4015c4:	f04f 0100 	mov.w	r1, #0
  4015c8:	e750      	b.n	40146c <__adddf3+0x138>
  4015ca:	bf00      	nop

004015cc <__aeabi_i2d>:
  4015cc:	f090 0f00 	teq	r0, #0
  4015d0:	bf04      	itt	eq
  4015d2:	2100      	moveq	r1, #0
  4015d4:	4770      	bxeq	lr
  4015d6:	b530      	push	{r4, r5, lr}
  4015d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4015dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4015e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4015e4:	bf48      	it	mi
  4015e6:	4240      	negmi	r0, r0
  4015e8:	f04f 0100 	mov.w	r1, #0
  4015ec:	e73e      	b.n	40146c <__adddf3+0x138>
  4015ee:	bf00      	nop

004015f0 <__aeabi_f2d>:
  4015f0:	0042      	lsls	r2, r0, #1
  4015f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4015f6:	ea4f 0131 	mov.w	r1, r1, rrx
  4015fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4015fe:	bf1f      	itttt	ne
  401600:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401604:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401608:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40160c:	4770      	bxne	lr
  40160e:	f092 0f00 	teq	r2, #0
  401612:	bf14      	ite	ne
  401614:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401618:	4770      	bxeq	lr
  40161a:	b530      	push	{r4, r5, lr}
  40161c:	f44f 7460 	mov.w	r4, #896	; 0x380
  401620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401628:	e720      	b.n	40146c <__adddf3+0x138>
  40162a:	bf00      	nop

0040162c <__aeabi_ul2d>:
  40162c:	ea50 0201 	orrs.w	r2, r0, r1
  401630:	bf08      	it	eq
  401632:	4770      	bxeq	lr
  401634:	b530      	push	{r4, r5, lr}
  401636:	f04f 0500 	mov.w	r5, #0
  40163a:	e00a      	b.n	401652 <__aeabi_l2d+0x16>

0040163c <__aeabi_l2d>:
  40163c:	ea50 0201 	orrs.w	r2, r0, r1
  401640:	bf08      	it	eq
  401642:	4770      	bxeq	lr
  401644:	b530      	push	{r4, r5, lr}
  401646:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40164a:	d502      	bpl.n	401652 <__aeabi_l2d+0x16>
  40164c:	4240      	negs	r0, r0
  40164e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401652:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401656:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40165a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40165e:	f43f aedc 	beq.w	40141a <__adddf3+0xe6>
  401662:	f04f 0203 	mov.w	r2, #3
  401666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40166a:	bf18      	it	ne
  40166c:	3203      	addne	r2, #3
  40166e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401672:	bf18      	it	ne
  401674:	3203      	addne	r2, #3
  401676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40167a:	f1c2 0320 	rsb	r3, r2, #32
  40167e:	fa00 fc03 	lsl.w	ip, r0, r3
  401682:	fa20 f002 	lsr.w	r0, r0, r2
  401686:	fa01 fe03 	lsl.w	lr, r1, r3
  40168a:	ea40 000e 	orr.w	r0, r0, lr
  40168e:	fa21 f102 	lsr.w	r1, r1, r2
  401692:	4414      	add	r4, r2
  401694:	e6c1      	b.n	40141a <__adddf3+0xe6>
  401696:	bf00      	nop

00401698 <__aeabi_d2uiz>:
  401698:	004a      	lsls	r2, r1, #1
  40169a:	d211      	bcs.n	4016c0 <__aeabi_d2uiz+0x28>
  40169c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4016a0:	d211      	bcs.n	4016c6 <__aeabi_d2uiz+0x2e>
  4016a2:	d50d      	bpl.n	4016c0 <__aeabi_d2uiz+0x28>
  4016a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4016a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4016ac:	d40e      	bmi.n	4016cc <__aeabi_d2uiz+0x34>
  4016ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4016b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4016b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4016ba:	fa23 f002 	lsr.w	r0, r3, r2
  4016be:	4770      	bx	lr
  4016c0:	f04f 0000 	mov.w	r0, #0
  4016c4:	4770      	bx	lr
  4016c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4016ca:	d102      	bne.n	4016d2 <__aeabi_d2uiz+0x3a>
  4016cc:	f04f 30ff 	mov.w	r0, #4294967295
  4016d0:	4770      	bx	lr
  4016d2:	f04f 0000 	mov.w	r0, #0
  4016d6:	4770      	bx	lr

004016d8 <__libc_init_array>:
  4016d8:	b570      	push	{r4, r5, r6, lr}
  4016da:	4e0f      	ldr	r6, [pc, #60]	; (401718 <__libc_init_array+0x40>)
  4016dc:	4d0f      	ldr	r5, [pc, #60]	; (40171c <__libc_init_array+0x44>)
  4016de:	1b76      	subs	r6, r6, r5
  4016e0:	10b6      	asrs	r6, r6, #2
  4016e2:	bf18      	it	ne
  4016e4:	2400      	movne	r4, #0
  4016e6:	d005      	beq.n	4016f4 <__libc_init_array+0x1c>
  4016e8:	3401      	adds	r4, #1
  4016ea:	f855 3b04 	ldr.w	r3, [r5], #4
  4016ee:	4798      	blx	r3
  4016f0:	42a6      	cmp	r6, r4
  4016f2:	d1f9      	bne.n	4016e8 <__libc_init_array+0x10>
  4016f4:	4e0a      	ldr	r6, [pc, #40]	; (401720 <__libc_init_array+0x48>)
  4016f6:	4d0b      	ldr	r5, [pc, #44]	; (401724 <__libc_init_array+0x4c>)
  4016f8:	1b76      	subs	r6, r6, r5
  4016fa:	f001 ff31 	bl	403560 <_init>
  4016fe:	10b6      	asrs	r6, r6, #2
  401700:	bf18      	it	ne
  401702:	2400      	movne	r4, #0
  401704:	d006      	beq.n	401714 <__libc_init_array+0x3c>
  401706:	3401      	adds	r4, #1
  401708:	f855 3b04 	ldr.w	r3, [r5], #4
  40170c:	4798      	blx	r3
  40170e:	42a6      	cmp	r6, r4
  401710:	d1f9      	bne.n	401706 <__libc_init_array+0x2e>
  401712:	bd70      	pop	{r4, r5, r6, pc}
  401714:	bd70      	pop	{r4, r5, r6, pc}
  401716:	bf00      	nop
  401718:	0040356c 	.word	0x0040356c
  40171c:	0040356c 	.word	0x0040356c
  401720:	00403574 	.word	0x00403574
  401724:	0040356c 	.word	0x0040356c

00401728 <memset>:
  401728:	b470      	push	{r4, r5, r6}
  40172a:	0784      	lsls	r4, r0, #30
  40172c:	d046      	beq.n	4017bc <memset+0x94>
  40172e:	1e54      	subs	r4, r2, #1
  401730:	2a00      	cmp	r2, #0
  401732:	d041      	beq.n	4017b8 <memset+0x90>
  401734:	b2cd      	uxtb	r5, r1
  401736:	4603      	mov	r3, r0
  401738:	e002      	b.n	401740 <memset+0x18>
  40173a:	1e62      	subs	r2, r4, #1
  40173c:	b3e4      	cbz	r4, 4017b8 <memset+0x90>
  40173e:	4614      	mov	r4, r2
  401740:	f803 5b01 	strb.w	r5, [r3], #1
  401744:	079a      	lsls	r2, r3, #30
  401746:	d1f8      	bne.n	40173a <memset+0x12>
  401748:	2c03      	cmp	r4, #3
  40174a:	d92e      	bls.n	4017aa <memset+0x82>
  40174c:	b2cd      	uxtb	r5, r1
  40174e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401752:	2c0f      	cmp	r4, #15
  401754:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401758:	d919      	bls.n	40178e <memset+0x66>
  40175a:	f103 0210 	add.w	r2, r3, #16
  40175e:	4626      	mov	r6, r4
  401760:	3e10      	subs	r6, #16
  401762:	2e0f      	cmp	r6, #15
  401764:	f842 5c10 	str.w	r5, [r2, #-16]
  401768:	f842 5c0c 	str.w	r5, [r2, #-12]
  40176c:	f842 5c08 	str.w	r5, [r2, #-8]
  401770:	f842 5c04 	str.w	r5, [r2, #-4]
  401774:	f102 0210 	add.w	r2, r2, #16
  401778:	d8f2      	bhi.n	401760 <memset+0x38>
  40177a:	f1a4 0210 	sub.w	r2, r4, #16
  40177e:	f022 020f 	bic.w	r2, r2, #15
  401782:	f004 040f 	and.w	r4, r4, #15
  401786:	3210      	adds	r2, #16
  401788:	2c03      	cmp	r4, #3
  40178a:	4413      	add	r3, r2
  40178c:	d90d      	bls.n	4017aa <memset+0x82>
  40178e:	461e      	mov	r6, r3
  401790:	4622      	mov	r2, r4
  401792:	3a04      	subs	r2, #4
  401794:	2a03      	cmp	r2, #3
  401796:	f846 5b04 	str.w	r5, [r6], #4
  40179a:	d8fa      	bhi.n	401792 <memset+0x6a>
  40179c:	1f22      	subs	r2, r4, #4
  40179e:	f022 0203 	bic.w	r2, r2, #3
  4017a2:	3204      	adds	r2, #4
  4017a4:	4413      	add	r3, r2
  4017a6:	f004 0403 	and.w	r4, r4, #3
  4017aa:	b12c      	cbz	r4, 4017b8 <memset+0x90>
  4017ac:	b2c9      	uxtb	r1, r1
  4017ae:	441c      	add	r4, r3
  4017b0:	f803 1b01 	strb.w	r1, [r3], #1
  4017b4:	42a3      	cmp	r3, r4
  4017b6:	d1fb      	bne.n	4017b0 <memset+0x88>
  4017b8:	bc70      	pop	{r4, r5, r6}
  4017ba:	4770      	bx	lr
  4017bc:	4614      	mov	r4, r2
  4017be:	4603      	mov	r3, r0
  4017c0:	e7c2      	b.n	401748 <memset+0x20>
  4017c2:	bf00      	nop

004017c4 <_puts_r>:
  4017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4017c6:	4605      	mov	r5, r0
  4017c8:	b089      	sub	sp, #36	; 0x24
  4017ca:	4608      	mov	r0, r1
  4017cc:	460c      	mov	r4, r1
  4017ce:	f000 f8f7 	bl	4019c0 <strlen>
  4017d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4017d4:	4f14      	ldr	r7, [pc, #80]	; (401828 <_puts_r+0x64>)
  4017d6:	9404      	str	r4, [sp, #16]
  4017d8:	2601      	movs	r6, #1
  4017da:	1c44      	adds	r4, r0, #1
  4017dc:	a904      	add	r1, sp, #16
  4017de:	2202      	movs	r2, #2
  4017e0:	9403      	str	r4, [sp, #12]
  4017e2:	9005      	str	r0, [sp, #20]
  4017e4:	68ac      	ldr	r4, [r5, #8]
  4017e6:	9706      	str	r7, [sp, #24]
  4017e8:	9607      	str	r6, [sp, #28]
  4017ea:	9101      	str	r1, [sp, #4]
  4017ec:	9202      	str	r2, [sp, #8]
  4017ee:	b1b3      	cbz	r3, 40181e <_puts_r+0x5a>
  4017f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4017f4:	049a      	lsls	r2, r3, #18
  4017f6:	d406      	bmi.n	401806 <_puts_r+0x42>
  4017f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4017fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4017fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401802:	81a3      	strh	r3, [r4, #12]
  401804:	6662      	str	r2, [r4, #100]	; 0x64
  401806:	4621      	mov	r1, r4
  401808:	4628      	mov	r0, r5
  40180a:	aa01      	add	r2, sp, #4
  40180c:	f000 fbe2 	bl	401fd4 <__sfvwrite_r>
  401810:	2800      	cmp	r0, #0
  401812:	bf14      	ite	ne
  401814:	f04f 30ff 	movne.w	r0, #4294967295
  401818:	200a      	moveq	r0, #10
  40181a:	b009      	add	sp, #36	; 0x24
  40181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40181e:	4628      	mov	r0, r5
  401820:	f000 fa84 	bl	401d2c <__sinit>
  401824:	e7e4      	b.n	4017f0 <_puts_r+0x2c>
  401826:	bf00      	nop
  401828:	0040342c 	.word	0x0040342c

0040182c <puts>:
  40182c:	4b02      	ldr	r3, [pc, #8]	; (401838 <puts+0xc>)
  40182e:	4601      	mov	r1, r0
  401830:	6818      	ldr	r0, [r3, #0]
  401832:	f7ff bfc7 	b.w	4017c4 <_puts_r>
  401836:	bf00      	nop
  401838:	20000440 	.word	0x20000440

0040183c <setbuf>:
  40183c:	2900      	cmp	r1, #0
  40183e:	bf0c      	ite	eq
  401840:	2202      	moveq	r2, #2
  401842:	2200      	movne	r2, #0
  401844:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401848:	f000 b800 	b.w	40184c <setvbuf>

0040184c <setvbuf>:
  40184c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401850:	4c51      	ldr	r4, [pc, #324]	; (401998 <setvbuf+0x14c>)
  401852:	6825      	ldr	r5, [r4, #0]
  401854:	b083      	sub	sp, #12
  401856:	4604      	mov	r4, r0
  401858:	460f      	mov	r7, r1
  40185a:	4690      	mov	r8, r2
  40185c:	461e      	mov	r6, r3
  40185e:	b115      	cbz	r5, 401866 <setvbuf+0x1a>
  401860:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401862:	2b00      	cmp	r3, #0
  401864:	d079      	beq.n	40195a <setvbuf+0x10e>
  401866:	f1b8 0f02 	cmp.w	r8, #2
  40186a:	d004      	beq.n	401876 <setvbuf+0x2a>
  40186c:	f1b8 0f01 	cmp.w	r8, #1
  401870:	d87f      	bhi.n	401972 <setvbuf+0x126>
  401872:	2e00      	cmp	r6, #0
  401874:	db7d      	blt.n	401972 <setvbuf+0x126>
  401876:	4621      	mov	r1, r4
  401878:	4628      	mov	r0, r5
  40187a:	f000 f9c3 	bl	401c04 <_fflush_r>
  40187e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401880:	b141      	cbz	r1, 401894 <setvbuf+0x48>
  401882:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401886:	4299      	cmp	r1, r3
  401888:	d002      	beq.n	401890 <setvbuf+0x44>
  40188a:	4628      	mov	r0, r5
  40188c:	f000 faba 	bl	401e04 <_free_r>
  401890:	2300      	movs	r3, #0
  401892:	6323      	str	r3, [r4, #48]	; 0x30
  401894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401898:	2200      	movs	r2, #0
  40189a:	61a2      	str	r2, [r4, #24]
  40189c:	6062      	str	r2, [r4, #4]
  40189e:	061a      	lsls	r2, r3, #24
  4018a0:	d454      	bmi.n	40194c <setvbuf+0x100>
  4018a2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4018a6:	f023 0303 	bic.w	r3, r3, #3
  4018aa:	f1b8 0f02 	cmp.w	r8, #2
  4018ae:	81a3      	strh	r3, [r4, #12]
  4018b0:	d039      	beq.n	401926 <setvbuf+0xda>
  4018b2:	ab01      	add	r3, sp, #4
  4018b4:	466a      	mov	r2, sp
  4018b6:	4621      	mov	r1, r4
  4018b8:	4628      	mov	r0, r5
  4018ba:	f000 fd37 	bl	40232c <__swhatbuf_r>
  4018be:	89a3      	ldrh	r3, [r4, #12]
  4018c0:	4318      	orrs	r0, r3
  4018c2:	81a0      	strh	r0, [r4, #12]
  4018c4:	b326      	cbz	r6, 401910 <setvbuf+0xc4>
  4018c6:	b327      	cbz	r7, 401912 <setvbuf+0xc6>
  4018c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4018ca:	2b00      	cmp	r3, #0
  4018cc:	d04d      	beq.n	40196a <setvbuf+0x11e>
  4018ce:	9b00      	ldr	r3, [sp, #0]
  4018d0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4018d4:	6027      	str	r7, [r4, #0]
  4018d6:	429e      	cmp	r6, r3
  4018d8:	bf1c      	itt	ne
  4018da:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4018de:	81a0      	strhne	r0, [r4, #12]
  4018e0:	f1b8 0f01 	cmp.w	r8, #1
  4018e4:	bf08      	it	eq
  4018e6:	f040 0001 	orreq.w	r0, r0, #1
  4018ea:	b283      	uxth	r3, r0
  4018ec:	bf08      	it	eq
  4018ee:	81a0      	strheq	r0, [r4, #12]
  4018f0:	f003 0008 	and.w	r0, r3, #8
  4018f4:	b280      	uxth	r0, r0
  4018f6:	6127      	str	r7, [r4, #16]
  4018f8:	6166      	str	r6, [r4, #20]
  4018fa:	b318      	cbz	r0, 401944 <setvbuf+0xf8>
  4018fc:	f013 0001 	ands.w	r0, r3, #1
  401900:	d02f      	beq.n	401962 <setvbuf+0x116>
  401902:	2000      	movs	r0, #0
  401904:	4276      	negs	r6, r6
  401906:	61a6      	str	r6, [r4, #24]
  401908:	60a0      	str	r0, [r4, #8]
  40190a:	b003      	add	sp, #12
  40190c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401910:	9e00      	ldr	r6, [sp, #0]
  401912:	4630      	mov	r0, r6
  401914:	f000 fd7e 	bl	402414 <malloc>
  401918:	4607      	mov	r7, r0
  40191a:	b368      	cbz	r0, 401978 <setvbuf+0x12c>
  40191c:	89a3      	ldrh	r3, [r4, #12]
  40191e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401922:	81a3      	strh	r3, [r4, #12]
  401924:	e7d0      	b.n	4018c8 <setvbuf+0x7c>
  401926:	2000      	movs	r0, #0
  401928:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40192c:	f043 0302 	orr.w	r3, r3, #2
  401930:	2500      	movs	r5, #0
  401932:	2101      	movs	r1, #1
  401934:	81a3      	strh	r3, [r4, #12]
  401936:	60a5      	str	r5, [r4, #8]
  401938:	6022      	str	r2, [r4, #0]
  40193a:	6122      	str	r2, [r4, #16]
  40193c:	6161      	str	r1, [r4, #20]
  40193e:	b003      	add	sp, #12
  401940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401944:	60a0      	str	r0, [r4, #8]
  401946:	b003      	add	sp, #12
  401948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40194c:	6921      	ldr	r1, [r4, #16]
  40194e:	4628      	mov	r0, r5
  401950:	f000 fa58 	bl	401e04 <_free_r>
  401954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401958:	e7a3      	b.n	4018a2 <setvbuf+0x56>
  40195a:	4628      	mov	r0, r5
  40195c:	f000 f9e6 	bl	401d2c <__sinit>
  401960:	e781      	b.n	401866 <setvbuf+0x1a>
  401962:	60a6      	str	r6, [r4, #8]
  401964:	b003      	add	sp, #12
  401966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40196a:	4628      	mov	r0, r5
  40196c:	f000 f9de 	bl	401d2c <__sinit>
  401970:	e7ad      	b.n	4018ce <setvbuf+0x82>
  401972:	f04f 30ff 	mov.w	r0, #4294967295
  401976:	e7e2      	b.n	40193e <setvbuf+0xf2>
  401978:	f8dd 9000 	ldr.w	r9, [sp]
  40197c:	45b1      	cmp	r9, r6
  40197e:	d006      	beq.n	40198e <setvbuf+0x142>
  401980:	4648      	mov	r0, r9
  401982:	f000 fd47 	bl	402414 <malloc>
  401986:	4607      	mov	r7, r0
  401988:	b108      	cbz	r0, 40198e <setvbuf+0x142>
  40198a:	464e      	mov	r6, r9
  40198c:	e7c6      	b.n	40191c <setvbuf+0xd0>
  40198e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401992:	f04f 30ff 	mov.w	r0, #4294967295
  401996:	e7c7      	b.n	401928 <setvbuf+0xdc>
  401998:	20000440 	.word	0x20000440
	...

004019c0 <strlen>:
  4019c0:	f890 f000 	pld	[r0]
  4019c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4019c8:	f020 0107 	bic.w	r1, r0, #7
  4019cc:	f06f 0c00 	mvn.w	ip, #0
  4019d0:	f010 0407 	ands.w	r4, r0, #7
  4019d4:	f891 f020 	pld	[r1, #32]
  4019d8:	f040 8049 	bne.w	401a6e <strlen+0xae>
  4019dc:	f04f 0400 	mov.w	r4, #0
  4019e0:	f06f 0007 	mvn.w	r0, #7
  4019e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4019e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4019ec:	f100 0008 	add.w	r0, r0, #8
  4019f0:	fa82 f24c 	uadd8	r2, r2, ip
  4019f4:	faa4 f28c 	sel	r2, r4, ip
  4019f8:	fa83 f34c 	uadd8	r3, r3, ip
  4019fc:	faa2 f38c 	sel	r3, r2, ip
  401a00:	bb4b      	cbnz	r3, 401a56 <strlen+0x96>
  401a02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401a06:	fa82 f24c 	uadd8	r2, r2, ip
  401a0a:	f100 0008 	add.w	r0, r0, #8
  401a0e:	faa4 f28c 	sel	r2, r4, ip
  401a12:	fa83 f34c 	uadd8	r3, r3, ip
  401a16:	faa2 f38c 	sel	r3, r2, ip
  401a1a:	b9e3      	cbnz	r3, 401a56 <strlen+0x96>
  401a1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401a20:	fa82 f24c 	uadd8	r2, r2, ip
  401a24:	f100 0008 	add.w	r0, r0, #8
  401a28:	faa4 f28c 	sel	r2, r4, ip
  401a2c:	fa83 f34c 	uadd8	r3, r3, ip
  401a30:	faa2 f38c 	sel	r3, r2, ip
  401a34:	b97b      	cbnz	r3, 401a56 <strlen+0x96>
  401a36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  401a3a:	f101 0120 	add.w	r1, r1, #32
  401a3e:	fa82 f24c 	uadd8	r2, r2, ip
  401a42:	f100 0008 	add.w	r0, r0, #8
  401a46:	faa4 f28c 	sel	r2, r4, ip
  401a4a:	fa83 f34c 	uadd8	r3, r3, ip
  401a4e:	faa2 f38c 	sel	r3, r2, ip
  401a52:	2b00      	cmp	r3, #0
  401a54:	d0c6      	beq.n	4019e4 <strlen+0x24>
  401a56:	2a00      	cmp	r2, #0
  401a58:	bf04      	itt	eq
  401a5a:	3004      	addeq	r0, #4
  401a5c:	461a      	moveq	r2, r3
  401a5e:	ba12      	rev	r2, r2
  401a60:	fab2 f282 	clz	r2, r2
  401a64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401a68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401a6c:	4770      	bx	lr
  401a6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401a72:	f004 0503 	and.w	r5, r4, #3
  401a76:	f1c4 0000 	rsb	r0, r4, #0
  401a7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  401a7e:	f014 0f04 	tst.w	r4, #4
  401a82:	f891 f040 	pld	[r1, #64]	; 0x40
  401a86:	fa0c f505 	lsl.w	r5, ip, r5
  401a8a:	ea62 0205 	orn	r2, r2, r5
  401a8e:	bf1c      	itt	ne
  401a90:	ea63 0305 	ornne	r3, r3, r5
  401a94:	4662      	movne	r2, ip
  401a96:	f04f 0400 	mov.w	r4, #0
  401a9a:	e7a9      	b.n	4019f0 <strlen+0x30>

00401a9c <register_fini>:
  401a9c:	4b02      	ldr	r3, [pc, #8]	; (401aa8 <register_fini+0xc>)
  401a9e:	b113      	cbz	r3, 401aa6 <register_fini+0xa>
  401aa0:	4802      	ldr	r0, [pc, #8]	; (401aac <register_fini+0x10>)
  401aa2:	f000 b805 	b.w	401ab0 <atexit>
  401aa6:	4770      	bx	lr
  401aa8:	00000000 	.word	0x00000000
  401aac:	00401d41 	.word	0x00401d41

00401ab0 <atexit>:
  401ab0:	2300      	movs	r3, #0
  401ab2:	4601      	mov	r1, r0
  401ab4:	461a      	mov	r2, r3
  401ab6:	4618      	mov	r0, r3
  401ab8:	f001 bb84 	b.w	4031c4 <__register_exitproc>

00401abc <__sflush_r>:
  401abc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401ac0:	b29a      	uxth	r2, r3
  401ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ac6:	460d      	mov	r5, r1
  401ac8:	0711      	lsls	r1, r2, #28
  401aca:	4680      	mov	r8, r0
  401acc:	d43c      	bmi.n	401b48 <__sflush_r+0x8c>
  401ace:	686a      	ldr	r2, [r5, #4]
  401ad0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401ad4:	2a00      	cmp	r2, #0
  401ad6:	81ab      	strh	r3, [r5, #12]
  401ad8:	dd73      	ble.n	401bc2 <__sflush_r+0x106>
  401ada:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401adc:	2c00      	cmp	r4, #0
  401ade:	d04b      	beq.n	401b78 <__sflush_r+0xbc>
  401ae0:	b29b      	uxth	r3, r3
  401ae2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  401ae6:	2100      	movs	r1, #0
  401ae8:	b292      	uxth	r2, r2
  401aea:	f8d8 6000 	ldr.w	r6, [r8]
  401aee:	f8c8 1000 	str.w	r1, [r8]
  401af2:	2a00      	cmp	r2, #0
  401af4:	d069      	beq.n	401bca <__sflush_r+0x10e>
  401af6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401af8:	075f      	lsls	r7, r3, #29
  401afa:	d505      	bpl.n	401b08 <__sflush_r+0x4c>
  401afc:	6869      	ldr	r1, [r5, #4]
  401afe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401b00:	1a52      	subs	r2, r2, r1
  401b02:	b10b      	cbz	r3, 401b08 <__sflush_r+0x4c>
  401b04:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401b06:	1ad2      	subs	r2, r2, r3
  401b08:	2300      	movs	r3, #0
  401b0a:	69e9      	ldr	r1, [r5, #28]
  401b0c:	4640      	mov	r0, r8
  401b0e:	47a0      	blx	r4
  401b10:	1c44      	adds	r4, r0, #1
  401b12:	d03c      	beq.n	401b8e <__sflush_r+0xd2>
  401b14:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401b18:	692a      	ldr	r2, [r5, #16]
  401b1a:	602a      	str	r2, [r5, #0]
  401b1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401b20:	2200      	movs	r2, #0
  401b22:	81ab      	strh	r3, [r5, #12]
  401b24:	04db      	lsls	r3, r3, #19
  401b26:	606a      	str	r2, [r5, #4]
  401b28:	d449      	bmi.n	401bbe <__sflush_r+0x102>
  401b2a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401b2c:	f8c8 6000 	str.w	r6, [r8]
  401b30:	b311      	cbz	r1, 401b78 <__sflush_r+0xbc>
  401b32:	f105 0340 	add.w	r3, r5, #64	; 0x40
  401b36:	4299      	cmp	r1, r3
  401b38:	d002      	beq.n	401b40 <__sflush_r+0x84>
  401b3a:	4640      	mov	r0, r8
  401b3c:	f000 f962 	bl	401e04 <_free_r>
  401b40:	2000      	movs	r0, #0
  401b42:	6328      	str	r0, [r5, #48]	; 0x30
  401b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b48:	692e      	ldr	r6, [r5, #16]
  401b4a:	b1ae      	cbz	r6, 401b78 <__sflush_r+0xbc>
  401b4c:	682c      	ldr	r4, [r5, #0]
  401b4e:	602e      	str	r6, [r5, #0]
  401b50:	0790      	lsls	r0, r2, #30
  401b52:	bf0c      	ite	eq
  401b54:	696b      	ldreq	r3, [r5, #20]
  401b56:	2300      	movne	r3, #0
  401b58:	1ba4      	subs	r4, r4, r6
  401b5a:	60ab      	str	r3, [r5, #8]
  401b5c:	e00a      	b.n	401b74 <__sflush_r+0xb8>
  401b5e:	4623      	mov	r3, r4
  401b60:	4632      	mov	r2, r6
  401b62:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  401b64:	69e9      	ldr	r1, [r5, #28]
  401b66:	4640      	mov	r0, r8
  401b68:	47b8      	blx	r7
  401b6a:	2800      	cmp	r0, #0
  401b6c:	eba4 0400 	sub.w	r4, r4, r0
  401b70:	4406      	add	r6, r0
  401b72:	dd04      	ble.n	401b7e <__sflush_r+0xc2>
  401b74:	2c00      	cmp	r4, #0
  401b76:	dcf2      	bgt.n	401b5e <__sflush_r+0xa2>
  401b78:	2000      	movs	r0, #0
  401b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b7e:	89ab      	ldrh	r3, [r5, #12]
  401b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401b84:	81ab      	strh	r3, [r5, #12]
  401b86:	f04f 30ff 	mov.w	r0, #4294967295
  401b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b8e:	f8d8 2000 	ldr.w	r2, [r8]
  401b92:	2a1d      	cmp	r2, #29
  401b94:	d8f3      	bhi.n	401b7e <__sflush_r+0xc2>
  401b96:	4b1a      	ldr	r3, [pc, #104]	; (401c00 <__sflush_r+0x144>)
  401b98:	40d3      	lsrs	r3, r2
  401b9a:	f003 0301 	and.w	r3, r3, #1
  401b9e:	f083 0401 	eor.w	r4, r3, #1
  401ba2:	2b00      	cmp	r3, #0
  401ba4:	d0eb      	beq.n	401b7e <__sflush_r+0xc2>
  401ba6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401baa:	6929      	ldr	r1, [r5, #16]
  401bac:	6029      	str	r1, [r5, #0]
  401bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401bb2:	04d9      	lsls	r1, r3, #19
  401bb4:	606c      	str	r4, [r5, #4]
  401bb6:	81ab      	strh	r3, [r5, #12]
  401bb8:	d5b7      	bpl.n	401b2a <__sflush_r+0x6e>
  401bba:	2a00      	cmp	r2, #0
  401bbc:	d1b5      	bne.n	401b2a <__sflush_r+0x6e>
  401bbe:	6528      	str	r0, [r5, #80]	; 0x50
  401bc0:	e7b3      	b.n	401b2a <__sflush_r+0x6e>
  401bc2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401bc4:	2a00      	cmp	r2, #0
  401bc6:	dc88      	bgt.n	401ada <__sflush_r+0x1e>
  401bc8:	e7d6      	b.n	401b78 <__sflush_r+0xbc>
  401bca:	2301      	movs	r3, #1
  401bcc:	69e9      	ldr	r1, [r5, #28]
  401bce:	4640      	mov	r0, r8
  401bd0:	47a0      	blx	r4
  401bd2:	1c43      	adds	r3, r0, #1
  401bd4:	4602      	mov	r2, r0
  401bd6:	d002      	beq.n	401bde <__sflush_r+0x122>
  401bd8:	89ab      	ldrh	r3, [r5, #12]
  401bda:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401bdc:	e78c      	b.n	401af8 <__sflush_r+0x3c>
  401bde:	f8d8 3000 	ldr.w	r3, [r8]
  401be2:	2b00      	cmp	r3, #0
  401be4:	d0f8      	beq.n	401bd8 <__sflush_r+0x11c>
  401be6:	2b1d      	cmp	r3, #29
  401be8:	d001      	beq.n	401bee <__sflush_r+0x132>
  401bea:	2b16      	cmp	r3, #22
  401bec:	d102      	bne.n	401bf4 <__sflush_r+0x138>
  401bee:	f8c8 6000 	str.w	r6, [r8]
  401bf2:	e7c1      	b.n	401b78 <__sflush_r+0xbc>
  401bf4:	89ab      	ldrh	r3, [r5, #12]
  401bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401bfa:	81ab      	strh	r3, [r5, #12]
  401bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c00:	20400001 	.word	0x20400001

00401c04 <_fflush_r>:
  401c04:	b510      	push	{r4, lr}
  401c06:	4604      	mov	r4, r0
  401c08:	b082      	sub	sp, #8
  401c0a:	b108      	cbz	r0, 401c10 <_fflush_r+0xc>
  401c0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401c0e:	b153      	cbz	r3, 401c26 <_fflush_r+0x22>
  401c10:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  401c14:	b908      	cbnz	r0, 401c1a <_fflush_r+0x16>
  401c16:	b002      	add	sp, #8
  401c18:	bd10      	pop	{r4, pc}
  401c1a:	4620      	mov	r0, r4
  401c1c:	b002      	add	sp, #8
  401c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401c22:	f7ff bf4b 	b.w	401abc <__sflush_r>
  401c26:	9101      	str	r1, [sp, #4]
  401c28:	f000 f880 	bl	401d2c <__sinit>
  401c2c:	9901      	ldr	r1, [sp, #4]
  401c2e:	e7ef      	b.n	401c10 <_fflush_r+0xc>

00401c30 <_cleanup_r>:
  401c30:	4901      	ldr	r1, [pc, #4]	; (401c38 <_cleanup_r+0x8>)
  401c32:	f000 bb51 	b.w	4022d8 <_fwalk_reent>
  401c36:	bf00      	nop
  401c38:	0040328d 	.word	0x0040328d

00401c3c <__sinit.part.1>:
  401c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c40:	4b35      	ldr	r3, [pc, #212]	; (401d18 <__sinit.part.1+0xdc>)
  401c42:	6845      	ldr	r5, [r0, #4]
  401c44:	63c3      	str	r3, [r0, #60]	; 0x3c
  401c46:	2400      	movs	r4, #0
  401c48:	4607      	mov	r7, r0
  401c4a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  401c4e:	2304      	movs	r3, #4
  401c50:	2103      	movs	r1, #3
  401c52:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  401c56:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  401c5a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  401c5e:	b083      	sub	sp, #12
  401c60:	602c      	str	r4, [r5, #0]
  401c62:	606c      	str	r4, [r5, #4]
  401c64:	60ac      	str	r4, [r5, #8]
  401c66:	666c      	str	r4, [r5, #100]	; 0x64
  401c68:	81ec      	strh	r4, [r5, #14]
  401c6a:	612c      	str	r4, [r5, #16]
  401c6c:	616c      	str	r4, [r5, #20]
  401c6e:	61ac      	str	r4, [r5, #24]
  401c70:	81ab      	strh	r3, [r5, #12]
  401c72:	4621      	mov	r1, r4
  401c74:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401c78:	2208      	movs	r2, #8
  401c7a:	f7ff fd55 	bl	401728 <memset>
  401c7e:	68be      	ldr	r6, [r7, #8]
  401c80:	f8df b098 	ldr.w	fp, [pc, #152]	; 401d1c <__sinit.part.1+0xe0>
  401c84:	f8df a098 	ldr.w	sl, [pc, #152]	; 401d20 <__sinit.part.1+0xe4>
  401c88:	f8df 9098 	ldr.w	r9, [pc, #152]	; 401d24 <__sinit.part.1+0xe8>
  401c8c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401d28 <__sinit.part.1+0xec>
  401c90:	f8c5 b020 	str.w	fp, [r5, #32]
  401c94:	2301      	movs	r3, #1
  401c96:	2209      	movs	r2, #9
  401c98:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401c9c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401ca0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401ca4:	61ed      	str	r5, [r5, #28]
  401ca6:	4621      	mov	r1, r4
  401ca8:	81f3      	strh	r3, [r6, #14]
  401caa:	81b2      	strh	r2, [r6, #12]
  401cac:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  401cb0:	6034      	str	r4, [r6, #0]
  401cb2:	6074      	str	r4, [r6, #4]
  401cb4:	60b4      	str	r4, [r6, #8]
  401cb6:	6674      	str	r4, [r6, #100]	; 0x64
  401cb8:	6134      	str	r4, [r6, #16]
  401cba:	6174      	str	r4, [r6, #20]
  401cbc:	61b4      	str	r4, [r6, #24]
  401cbe:	2208      	movs	r2, #8
  401cc0:	9301      	str	r3, [sp, #4]
  401cc2:	f7ff fd31 	bl	401728 <memset>
  401cc6:	68fd      	ldr	r5, [r7, #12]
  401cc8:	61f6      	str	r6, [r6, #28]
  401cca:	2012      	movs	r0, #18
  401ccc:	2202      	movs	r2, #2
  401cce:	f8c6 b020 	str.w	fp, [r6, #32]
  401cd2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  401cd6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  401cda:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  401cde:	4621      	mov	r1, r4
  401ce0:	81a8      	strh	r0, [r5, #12]
  401ce2:	81ea      	strh	r2, [r5, #14]
  401ce4:	602c      	str	r4, [r5, #0]
  401ce6:	606c      	str	r4, [r5, #4]
  401ce8:	60ac      	str	r4, [r5, #8]
  401cea:	666c      	str	r4, [r5, #100]	; 0x64
  401cec:	612c      	str	r4, [r5, #16]
  401cee:	616c      	str	r4, [r5, #20]
  401cf0:	61ac      	str	r4, [r5, #24]
  401cf2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401cf6:	2208      	movs	r2, #8
  401cf8:	f7ff fd16 	bl	401728 <memset>
  401cfc:	9b01      	ldr	r3, [sp, #4]
  401cfe:	61ed      	str	r5, [r5, #28]
  401d00:	f8c5 b020 	str.w	fp, [r5, #32]
  401d04:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401d08:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401d0c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401d10:	63bb      	str	r3, [r7, #56]	; 0x38
  401d12:	b003      	add	sp, #12
  401d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d18:	00401c31 	.word	0x00401c31
  401d1c:	00403049 	.word	0x00403049
  401d20:	0040306d 	.word	0x0040306d
  401d24:	004030a9 	.word	0x004030a9
  401d28:	004030c9 	.word	0x004030c9

00401d2c <__sinit>:
  401d2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401d2e:	b103      	cbz	r3, 401d32 <__sinit+0x6>
  401d30:	4770      	bx	lr
  401d32:	f7ff bf83 	b.w	401c3c <__sinit.part.1>
  401d36:	bf00      	nop

00401d38 <__sfp_lock_acquire>:
  401d38:	4770      	bx	lr
  401d3a:	bf00      	nop

00401d3c <__sfp_lock_release>:
  401d3c:	4770      	bx	lr
  401d3e:	bf00      	nop

00401d40 <__libc_fini_array>:
  401d40:	b538      	push	{r3, r4, r5, lr}
  401d42:	4d07      	ldr	r5, [pc, #28]	; (401d60 <__libc_fini_array+0x20>)
  401d44:	4c07      	ldr	r4, [pc, #28]	; (401d64 <__libc_fini_array+0x24>)
  401d46:	1b2c      	subs	r4, r5, r4
  401d48:	10a4      	asrs	r4, r4, #2
  401d4a:	d005      	beq.n	401d58 <__libc_fini_array+0x18>
  401d4c:	3c01      	subs	r4, #1
  401d4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  401d52:	4798      	blx	r3
  401d54:	2c00      	cmp	r4, #0
  401d56:	d1f9      	bne.n	401d4c <__libc_fini_array+0xc>
  401d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401d5c:	f001 bc0a 	b.w	403574 <_fini>
  401d60:	00403584 	.word	0x00403584
  401d64:	00403580 	.word	0x00403580

00401d68 <_malloc_trim_r>:
  401d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d6a:	4f23      	ldr	r7, [pc, #140]	; (401df8 <_malloc_trim_r+0x90>)
  401d6c:	460c      	mov	r4, r1
  401d6e:	4606      	mov	r6, r0
  401d70:	f000 ff64 	bl	402c3c <__malloc_lock>
  401d74:	68bb      	ldr	r3, [r7, #8]
  401d76:	685d      	ldr	r5, [r3, #4]
  401d78:	f025 0503 	bic.w	r5, r5, #3
  401d7c:	1b29      	subs	r1, r5, r4
  401d7e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  401d82:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401d86:	f021 010f 	bic.w	r1, r1, #15
  401d8a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401d8e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401d92:	db07      	blt.n	401da4 <_malloc_trim_r+0x3c>
  401d94:	2100      	movs	r1, #0
  401d96:	4630      	mov	r0, r6
  401d98:	f001 f944 	bl	403024 <_sbrk_r>
  401d9c:	68bb      	ldr	r3, [r7, #8]
  401d9e:	442b      	add	r3, r5
  401da0:	4298      	cmp	r0, r3
  401da2:	d004      	beq.n	401dae <_malloc_trim_r+0x46>
  401da4:	4630      	mov	r0, r6
  401da6:	f000 ff4b 	bl	402c40 <__malloc_unlock>
  401daa:	2000      	movs	r0, #0
  401dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401dae:	4261      	negs	r1, r4
  401db0:	4630      	mov	r0, r6
  401db2:	f001 f937 	bl	403024 <_sbrk_r>
  401db6:	3001      	adds	r0, #1
  401db8:	d00d      	beq.n	401dd6 <_malloc_trim_r+0x6e>
  401dba:	4b10      	ldr	r3, [pc, #64]	; (401dfc <_malloc_trim_r+0x94>)
  401dbc:	68ba      	ldr	r2, [r7, #8]
  401dbe:	6819      	ldr	r1, [r3, #0]
  401dc0:	1b2d      	subs	r5, r5, r4
  401dc2:	f045 0501 	orr.w	r5, r5, #1
  401dc6:	4630      	mov	r0, r6
  401dc8:	1b09      	subs	r1, r1, r4
  401dca:	6055      	str	r5, [r2, #4]
  401dcc:	6019      	str	r1, [r3, #0]
  401dce:	f000 ff37 	bl	402c40 <__malloc_unlock>
  401dd2:	2001      	movs	r0, #1
  401dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401dd6:	2100      	movs	r1, #0
  401dd8:	4630      	mov	r0, r6
  401dda:	f001 f923 	bl	403024 <_sbrk_r>
  401dde:	68ba      	ldr	r2, [r7, #8]
  401de0:	1a83      	subs	r3, r0, r2
  401de2:	2b0f      	cmp	r3, #15
  401de4:	ddde      	ble.n	401da4 <_malloc_trim_r+0x3c>
  401de6:	4c06      	ldr	r4, [pc, #24]	; (401e00 <_malloc_trim_r+0x98>)
  401de8:	4904      	ldr	r1, [pc, #16]	; (401dfc <_malloc_trim_r+0x94>)
  401dea:	6824      	ldr	r4, [r4, #0]
  401dec:	f043 0301 	orr.w	r3, r3, #1
  401df0:	1b00      	subs	r0, r0, r4
  401df2:	6053      	str	r3, [r2, #4]
  401df4:	6008      	str	r0, [r1, #0]
  401df6:	e7d5      	b.n	401da4 <_malloc_trim_r+0x3c>
  401df8:	20000444 	.word	0x20000444
  401dfc:	200008fc 	.word	0x200008fc
  401e00:	20000850 	.word	0x20000850

00401e04 <_free_r>:
  401e04:	2900      	cmp	r1, #0
  401e06:	d045      	beq.n	401e94 <_free_r+0x90>
  401e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e0c:	460d      	mov	r5, r1
  401e0e:	4680      	mov	r8, r0
  401e10:	f000 ff14 	bl	402c3c <__malloc_lock>
  401e14:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401e18:	496a      	ldr	r1, [pc, #424]	; (401fc4 <_free_r+0x1c0>)
  401e1a:	f027 0301 	bic.w	r3, r7, #1
  401e1e:	f1a5 0408 	sub.w	r4, r5, #8
  401e22:	18e2      	adds	r2, r4, r3
  401e24:	688e      	ldr	r6, [r1, #8]
  401e26:	6850      	ldr	r0, [r2, #4]
  401e28:	42b2      	cmp	r2, r6
  401e2a:	f020 0003 	bic.w	r0, r0, #3
  401e2e:	d062      	beq.n	401ef6 <_free_r+0xf2>
  401e30:	07fe      	lsls	r6, r7, #31
  401e32:	6050      	str	r0, [r2, #4]
  401e34:	d40b      	bmi.n	401e4e <_free_r+0x4a>
  401e36:	f855 7c08 	ldr.w	r7, [r5, #-8]
  401e3a:	1be4      	subs	r4, r4, r7
  401e3c:	f101 0e08 	add.w	lr, r1, #8
  401e40:	68a5      	ldr	r5, [r4, #8]
  401e42:	4575      	cmp	r5, lr
  401e44:	443b      	add	r3, r7
  401e46:	d06f      	beq.n	401f28 <_free_r+0x124>
  401e48:	68e7      	ldr	r7, [r4, #12]
  401e4a:	60ef      	str	r7, [r5, #12]
  401e4c:	60bd      	str	r5, [r7, #8]
  401e4e:	1815      	adds	r5, r2, r0
  401e50:	686d      	ldr	r5, [r5, #4]
  401e52:	07ed      	lsls	r5, r5, #31
  401e54:	d542      	bpl.n	401edc <_free_r+0xd8>
  401e56:	f043 0201 	orr.w	r2, r3, #1
  401e5a:	6062      	str	r2, [r4, #4]
  401e5c:	50e3      	str	r3, [r4, r3]
  401e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401e62:	d218      	bcs.n	401e96 <_free_r+0x92>
  401e64:	08db      	lsrs	r3, r3, #3
  401e66:	1c5a      	adds	r2, r3, #1
  401e68:	684d      	ldr	r5, [r1, #4]
  401e6a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  401e6e:	60a7      	str	r7, [r4, #8]
  401e70:	2001      	movs	r0, #1
  401e72:	109b      	asrs	r3, r3, #2
  401e74:	fa00 f303 	lsl.w	r3, r0, r3
  401e78:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  401e7c:	431d      	orrs	r5, r3
  401e7e:	3808      	subs	r0, #8
  401e80:	60e0      	str	r0, [r4, #12]
  401e82:	604d      	str	r5, [r1, #4]
  401e84:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  401e88:	60fc      	str	r4, [r7, #12]
  401e8a:	4640      	mov	r0, r8
  401e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401e90:	f000 bed6 	b.w	402c40 <__malloc_unlock>
  401e94:	4770      	bx	lr
  401e96:	0a5a      	lsrs	r2, r3, #9
  401e98:	2a04      	cmp	r2, #4
  401e9a:	d853      	bhi.n	401f44 <_free_r+0x140>
  401e9c:	099a      	lsrs	r2, r3, #6
  401e9e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401ea2:	007f      	lsls	r7, r7, #1
  401ea4:	f102 0538 	add.w	r5, r2, #56	; 0x38
  401ea8:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  401eac:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  401eb0:	4944      	ldr	r1, [pc, #272]	; (401fc4 <_free_r+0x1c0>)
  401eb2:	3808      	subs	r0, #8
  401eb4:	4290      	cmp	r0, r2
  401eb6:	d04d      	beq.n	401f54 <_free_r+0x150>
  401eb8:	6851      	ldr	r1, [r2, #4]
  401eba:	f021 0103 	bic.w	r1, r1, #3
  401ebe:	428b      	cmp	r3, r1
  401ec0:	d202      	bcs.n	401ec8 <_free_r+0xc4>
  401ec2:	6892      	ldr	r2, [r2, #8]
  401ec4:	4290      	cmp	r0, r2
  401ec6:	d1f7      	bne.n	401eb8 <_free_r+0xb4>
  401ec8:	68d0      	ldr	r0, [r2, #12]
  401eca:	60e0      	str	r0, [r4, #12]
  401ecc:	60a2      	str	r2, [r4, #8]
  401ece:	6084      	str	r4, [r0, #8]
  401ed0:	60d4      	str	r4, [r2, #12]
  401ed2:	4640      	mov	r0, r8
  401ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401ed8:	f000 beb2 	b.w	402c40 <__malloc_unlock>
  401edc:	6895      	ldr	r5, [r2, #8]
  401ede:	4f3a      	ldr	r7, [pc, #232]	; (401fc8 <_free_r+0x1c4>)
  401ee0:	42bd      	cmp	r5, r7
  401ee2:	4403      	add	r3, r0
  401ee4:	d03f      	beq.n	401f66 <_free_r+0x162>
  401ee6:	68d0      	ldr	r0, [r2, #12]
  401ee8:	60e8      	str	r0, [r5, #12]
  401eea:	f043 0201 	orr.w	r2, r3, #1
  401eee:	6085      	str	r5, [r0, #8]
  401ef0:	6062      	str	r2, [r4, #4]
  401ef2:	50e3      	str	r3, [r4, r3]
  401ef4:	e7b3      	b.n	401e5e <_free_r+0x5a>
  401ef6:	07ff      	lsls	r7, r7, #31
  401ef8:	4403      	add	r3, r0
  401efa:	d407      	bmi.n	401f0c <_free_r+0x108>
  401efc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401f00:	1aa4      	subs	r4, r4, r2
  401f02:	4413      	add	r3, r2
  401f04:	68a0      	ldr	r0, [r4, #8]
  401f06:	68e2      	ldr	r2, [r4, #12]
  401f08:	60c2      	str	r2, [r0, #12]
  401f0a:	6090      	str	r0, [r2, #8]
  401f0c:	4a2f      	ldr	r2, [pc, #188]	; (401fcc <_free_r+0x1c8>)
  401f0e:	6812      	ldr	r2, [r2, #0]
  401f10:	f043 0001 	orr.w	r0, r3, #1
  401f14:	4293      	cmp	r3, r2
  401f16:	6060      	str	r0, [r4, #4]
  401f18:	608c      	str	r4, [r1, #8]
  401f1a:	d3b6      	bcc.n	401e8a <_free_r+0x86>
  401f1c:	4b2c      	ldr	r3, [pc, #176]	; (401fd0 <_free_r+0x1cc>)
  401f1e:	4640      	mov	r0, r8
  401f20:	6819      	ldr	r1, [r3, #0]
  401f22:	f7ff ff21 	bl	401d68 <_malloc_trim_r>
  401f26:	e7b0      	b.n	401e8a <_free_r+0x86>
  401f28:	1811      	adds	r1, r2, r0
  401f2a:	6849      	ldr	r1, [r1, #4]
  401f2c:	07c9      	lsls	r1, r1, #31
  401f2e:	d444      	bmi.n	401fba <_free_r+0x1b6>
  401f30:	6891      	ldr	r1, [r2, #8]
  401f32:	68d2      	ldr	r2, [r2, #12]
  401f34:	60ca      	str	r2, [r1, #12]
  401f36:	4403      	add	r3, r0
  401f38:	f043 0001 	orr.w	r0, r3, #1
  401f3c:	6091      	str	r1, [r2, #8]
  401f3e:	6060      	str	r0, [r4, #4]
  401f40:	50e3      	str	r3, [r4, r3]
  401f42:	e7a2      	b.n	401e8a <_free_r+0x86>
  401f44:	2a14      	cmp	r2, #20
  401f46:	d817      	bhi.n	401f78 <_free_r+0x174>
  401f48:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  401f4c:	007f      	lsls	r7, r7, #1
  401f4e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  401f52:	e7a9      	b.n	401ea8 <_free_r+0xa4>
  401f54:	10aa      	asrs	r2, r5, #2
  401f56:	684b      	ldr	r3, [r1, #4]
  401f58:	2501      	movs	r5, #1
  401f5a:	fa05 f202 	lsl.w	r2, r5, r2
  401f5e:	4313      	orrs	r3, r2
  401f60:	604b      	str	r3, [r1, #4]
  401f62:	4602      	mov	r2, r0
  401f64:	e7b1      	b.n	401eca <_free_r+0xc6>
  401f66:	f043 0201 	orr.w	r2, r3, #1
  401f6a:	614c      	str	r4, [r1, #20]
  401f6c:	610c      	str	r4, [r1, #16]
  401f6e:	60e5      	str	r5, [r4, #12]
  401f70:	60a5      	str	r5, [r4, #8]
  401f72:	6062      	str	r2, [r4, #4]
  401f74:	50e3      	str	r3, [r4, r3]
  401f76:	e788      	b.n	401e8a <_free_r+0x86>
  401f78:	2a54      	cmp	r2, #84	; 0x54
  401f7a:	d806      	bhi.n	401f8a <_free_r+0x186>
  401f7c:	0b1a      	lsrs	r2, r3, #12
  401f7e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  401f82:	007f      	lsls	r7, r7, #1
  401f84:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  401f88:	e78e      	b.n	401ea8 <_free_r+0xa4>
  401f8a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401f8e:	d806      	bhi.n	401f9e <_free_r+0x19a>
  401f90:	0bda      	lsrs	r2, r3, #15
  401f92:	f102 0778 	add.w	r7, r2, #120	; 0x78
  401f96:	007f      	lsls	r7, r7, #1
  401f98:	f102 0577 	add.w	r5, r2, #119	; 0x77
  401f9c:	e784      	b.n	401ea8 <_free_r+0xa4>
  401f9e:	f240 5054 	movw	r0, #1364	; 0x554
  401fa2:	4282      	cmp	r2, r0
  401fa4:	d806      	bhi.n	401fb4 <_free_r+0x1b0>
  401fa6:	0c9a      	lsrs	r2, r3, #18
  401fa8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  401fac:	007f      	lsls	r7, r7, #1
  401fae:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401fb2:	e779      	b.n	401ea8 <_free_r+0xa4>
  401fb4:	27fe      	movs	r7, #254	; 0xfe
  401fb6:	257e      	movs	r5, #126	; 0x7e
  401fb8:	e776      	b.n	401ea8 <_free_r+0xa4>
  401fba:	f043 0201 	orr.w	r2, r3, #1
  401fbe:	6062      	str	r2, [r4, #4]
  401fc0:	50e3      	str	r3, [r4, r3]
  401fc2:	e762      	b.n	401e8a <_free_r+0x86>
  401fc4:	20000444 	.word	0x20000444
  401fc8:	2000044c 	.word	0x2000044c
  401fcc:	2000084c 	.word	0x2000084c
  401fd0:	200008f8 	.word	0x200008f8

00401fd4 <__sfvwrite_r>:
  401fd4:	6893      	ldr	r3, [r2, #8]
  401fd6:	2b00      	cmp	r3, #0
  401fd8:	d076      	beq.n	4020c8 <__sfvwrite_r+0xf4>
  401fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fde:	898b      	ldrh	r3, [r1, #12]
  401fe0:	b085      	sub	sp, #20
  401fe2:	460c      	mov	r4, r1
  401fe4:	0719      	lsls	r1, r3, #28
  401fe6:	9001      	str	r0, [sp, #4]
  401fe8:	4616      	mov	r6, r2
  401fea:	d529      	bpl.n	402040 <__sfvwrite_r+0x6c>
  401fec:	6922      	ldr	r2, [r4, #16]
  401fee:	b33a      	cbz	r2, 402040 <__sfvwrite_r+0x6c>
  401ff0:	f003 0802 	and.w	r8, r3, #2
  401ff4:	fa1f f088 	uxth.w	r0, r8
  401ff8:	6835      	ldr	r5, [r6, #0]
  401ffa:	2800      	cmp	r0, #0
  401ffc:	d02f      	beq.n	40205e <__sfvwrite_r+0x8a>
  401ffe:	f04f 0900 	mov.w	r9, #0
  402002:	4fb4      	ldr	r7, [pc, #720]	; (4022d4 <__sfvwrite_r+0x300>)
  402004:	46c8      	mov	r8, r9
  402006:	46b2      	mov	sl, r6
  402008:	45b8      	cmp	r8, r7
  40200a:	4643      	mov	r3, r8
  40200c:	464a      	mov	r2, r9
  40200e:	bf28      	it	cs
  402010:	463b      	movcs	r3, r7
  402012:	9801      	ldr	r0, [sp, #4]
  402014:	f1b8 0f00 	cmp.w	r8, #0
  402018:	d050      	beq.n	4020bc <__sfvwrite_r+0xe8>
  40201a:	69e1      	ldr	r1, [r4, #28]
  40201c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40201e:	47b0      	blx	r6
  402020:	2800      	cmp	r0, #0
  402022:	dd71      	ble.n	402108 <__sfvwrite_r+0x134>
  402024:	f8da 3008 	ldr.w	r3, [sl, #8]
  402028:	1a1b      	subs	r3, r3, r0
  40202a:	4481      	add	r9, r0
  40202c:	ebc0 0808 	rsb	r8, r0, r8
  402030:	f8ca 3008 	str.w	r3, [sl, #8]
  402034:	2b00      	cmp	r3, #0
  402036:	d1e7      	bne.n	402008 <__sfvwrite_r+0x34>
  402038:	2000      	movs	r0, #0
  40203a:	b005      	add	sp, #20
  40203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402040:	4621      	mov	r1, r4
  402042:	9801      	ldr	r0, [sp, #4]
  402044:	f001 f85a 	bl	4030fc <__swsetup_r>
  402048:	2800      	cmp	r0, #0
  40204a:	f040 813a 	bne.w	4022c2 <__sfvwrite_r+0x2ee>
  40204e:	89a3      	ldrh	r3, [r4, #12]
  402050:	6835      	ldr	r5, [r6, #0]
  402052:	f003 0802 	and.w	r8, r3, #2
  402056:	fa1f f088 	uxth.w	r0, r8
  40205a:	2800      	cmp	r0, #0
  40205c:	d1cf      	bne.n	401ffe <__sfvwrite_r+0x2a>
  40205e:	f013 0901 	ands.w	r9, r3, #1
  402062:	d15b      	bne.n	40211c <__sfvwrite_r+0x148>
  402064:	464f      	mov	r7, r9
  402066:	9602      	str	r6, [sp, #8]
  402068:	b31f      	cbz	r7, 4020b2 <__sfvwrite_r+0xde>
  40206a:	059a      	lsls	r2, r3, #22
  40206c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402070:	d52c      	bpl.n	4020cc <__sfvwrite_r+0xf8>
  402072:	4547      	cmp	r7, r8
  402074:	46c2      	mov	sl, r8
  402076:	f0c0 80a4 	bcc.w	4021c2 <__sfvwrite_r+0x1ee>
  40207a:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40207e:	f040 80b1 	bne.w	4021e4 <__sfvwrite_r+0x210>
  402082:	6820      	ldr	r0, [r4, #0]
  402084:	4652      	mov	r2, sl
  402086:	4649      	mov	r1, r9
  402088:	f000 fd74 	bl	402b74 <memmove>
  40208c:	68a0      	ldr	r0, [r4, #8]
  40208e:	6823      	ldr	r3, [r4, #0]
  402090:	ebc8 0000 	rsb	r0, r8, r0
  402094:	4453      	add	r3, sl
  402096:	60a0      	str	r0, [r4, #8]
  402098:	6023      	str	r3, [r4, #0]
  40209a:	4638      	mov	r0, r7
  40209c:	9a02      	ldr	r2, [sp, #8]
  40209e:	6893      	ldr	r3, [r2, #8]
  4020a0:	1a1b      	subs	r3, r3, r0
  4020a2:	4481      	add	r9, r0
  4020a4:	1a3f      	subs	r7, r7, r0
  4020a6:	6093      	str	r3, [r2, #8]
  4020a8:	2b00      	cmp	r3, #0
  4020aa:	d0c5      	beq.n	402038 <__sfvwrite_r+0x64>
  4020ac:	89a3      	ldrh	r3, [r4, #12]
  4020ae:	2f00      	cmp	r7, #0
  4020b0:	d1db      	bne.n	40206a <__sfvwrite_r+0x96>
  4020b2:	f8d5 9000 	ldr.w	r9, [r5]
  4020b6:	686f      	ldr	r7, [r5, #4]
  4020b8:	3508      	adds	r5, #8
  4020ba:	e7d5      	b.n	402068 <__sfvwrite_r+0x94>
  4020bc:	f8d5 9000 	ldr.w	r9, [r5]
  4020c0:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4020c4:	3508      	adds	r5, #8
  4020c6:	e79f      	b.n	402008 <__sfvwrite_r+0x34>
  4020c8:	2000      	movs	r0, #0
  4020ca:	4770      	bx	lr
  4020cc:	6820      	ldr	r0, [r4, #0]
  4020ce:	6923      	ldr	r3, [r4, #16]
  4020d0:	4298      	cmp	r0, r3
  4020d2:	d803      	bhi.n	4020dc <__sfvwrite_r+0x108>
  4020d4:	6961      	ldr	r1, [r4, #20]
  4020d6:	428f      	cmp	r7, r1
  4020d8:	f080 80b7 	bcs.w	40224a <__sfvwrite_r+0x276>
  4020dc:	45b8      	cmp	r8, r7
  4020de:	bf28      	it	cs
  4020e0:	46b8      	movcs	r8, r7
  4020e2:	4642      	mov	r2, r8
  4020e4:	4649      	mov	r1, r9
  4020e6:	f000 fd45 	bl	402b74 <memmove>
  4020ea:	68a3      	ldr	r3, [r4, #8]
  4020ec:	6822      	ldr	r2, [r4, #0]
  4020ee:	ebc8 0303 	rsb	r3, r8, r3
  4020f2:	4442      	add	r2, r8
  4020f4:	60a3      	str	r3, [r4, #8]
  4020f6:	6022      	str	r2, [r4, #0]
  4020f8:	2b00      	cmp	r3, #0
  4020fa:	d149      	bne.n	402190 <__sfvwrite_r+0x1bc>
  4020fc:	4621      	mov	r1, r4
  4020fe:	9801      	ldr	r0, [sp, #4]
  402100:	f7ff fd80 	bl	401c04 <_fflush_r>
  402104:	2800      	cmp	r0, #0
  402106:	d043      	beq.n	402190 <__sfvwrite_r+0x1bc>
  402108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40210c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402110:	f04f 30ff 	mov.w	r0, #4294967295
  402114:	81a3      	strh	r3, [r4, #12]
  402116:	b005      	add	sp, #20
  402118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40211c:	4680      	mov	r8, r0
  40211e:	9002      	str	r0, [sp, #8]
  402120:	4682      	mov	sl, r0
  402122:	4681      	mov	r9, r0
  402124:	f1b9 0f00 	cmp.w	r9, #0
  402128:	d02a      	beq.n	402180 <__sfvwrite_r+0x1ac>
  40212a:	9b02      	ldr	r3, [sp, #8]
  40212c:	2b00      	cmp	r3, #0
  40212e:	d04c      	beq.n	4021ca <__sfvwrite_r+0x1f6>
  402130:	6820      	ldr	r0, [r4, #0]
  402132:	6923      	ldr	r3, [r4, #16]
  402134:	6962      	ldr	r2, [r4, #20]
  402136:	45c8      	cmp	r8, r9
  402138:	46c3      	mov	fp, r8
  40213a:	bf28      	it	cs
  40213c:	46cb      	movcs	fp, r9
  40213e:	4298      	cmp	r0, r3
  402140:	465f      	mov	r7, fp
  402142:	d904      	bls.n	40214e <__sfvwrite_r+0x17a>
  402144:	68a3      	ldr	r3, [r4, #8]
  402146:	4413      	add	r3, r2
  402148:	459b      	cmp	fp, r3
  40214a:	f300 8090 	bgt.w	40226e <__sfvwrite_r+0x29a>
  40214e:	4593      	cmp	fp, r2
  402150:	db20      	blt.n	402194 <__sfvwrite_r+0x1c0>
  402152:	4613      	mov	r3, r2
  402154:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402156:	69e1      	ldr	r1, [r4, #28]
  402158:	9801      	ldr	r0, [sp, #4]
  40215a:	4652      	mov	r2, sl
  40215c:	47b8      	blx	r7
  40215e:	1e07      	subs	r7, r0, #0
  402160:	ddd2      	ble.n	402108 <__sfvwrite_r+0x134>
  402162:	ebb8 0807 	subs.w	r8, r8, r7
  402166:	d023      	beq.n	4021b0 <__sfvwrite_r+0x1dc>
  402168:	68b3      	ldr	r3, [r6, #8]
  40216a:	1bdb      	subs	r3, r3, r7
  40216c:	44ba      	add	sl, r7
  40216e:	ebc7 0909 	rsb	r9, r7, r9
  402172:	60b3      	str	r3, [r6, #8]
  402174:	2b00      	cmp	r3, #0
  402176:	f43f af5f 	beq.w	402038 <__sfvwrite_r+0x64>
  40217a:	f1b9 0f00 	cmp.w	r9, #0
  40217e:	d1d4      	bne.n	40212a <__sfvwrite_r+0x156>
  402180:	2300      	movs	r3, #0
  402182:	f8d5 a000 	ldr.w	sl, [r5]
  402186:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40218a:	9302      	str	r3, [sp, #8]
  40218c:	3508      	adds	r5, #8
  40218e:	e7c9      	b.n	402124 <__sfvwrite_r+0x150>
  402190:	4640      	mov	r0, r8
  402192:	e783      	b.n	40209c <__sfvwrite_r+0xc8>
  402194:	465a      	mov	r2, fp
  402196:	4651      	mov	r1, sl
  402198:	f000 fcec 	bl	402b74 <memmove>
  40219c:	68a2      	ldr	r2, [r4, #8]
  40219e:	6823      	ldr	r3, [r4, #0]
  4021a0:	ebcb 0202 	rsb	r2, fp, r2
  4021a4:	445b      	add	r3, fp
  4021a6:	ebb8 0807 	subs.w	r8, r8, r7
  4021aa:	60a2      	str	r2, [r4, #8]
  4021ac:	6023      	str	r3, [r4, #0]
  4021ae:	d1db      	bne.n	402168 <__sfvwrite_r+0x194>
  4021b0:	4621      	mov	r1, r4
  4021b2:	9801      	ldr	r0, [sp, #4]
  4021b4:	f7ff fd26 	bl	401c04 <_fflush_r>
  4021b8:	2800      	cmp	r0, #0
  4021ba:	d1a5      	bne.n	402108 <__sfvwrite_r+0x134>
  4021bc:	f8cd 8008 	str.w	r8, [sp, #8]
  4021c0:	e7d2      	b.n	402168 <__sfvwrite_r+0x194>
  4021c2:	6820      	ldr	r0, [r4, #0]
  4021c4:	46b8      	mov	r8, r7
  4021c6:	46ba      	mov	sl, r7
  4021c8:	e75c      	b.n	402084 <__sfvwrite_r+0xb0>
  4021ca:	464a      	mov	r2, r9
  4021cc:	210a      	movs	r1, #10
  4021ce:	4650      	mov	r0, sl
  4021d0:	f000 fbe6 	bl	4029a0 <memchr>
  4021d4:	2800      	cmp	r0, #0
  4021d6:	d06f      	beq.n	4022b8 <__sfvwrite_r+0x2e4>
  4021d8:	3001      	adds	r0, #1
  4021da:	2301      	movs	r3, #1
  4021dc:	ebca 0800 	rsb	r8, sl, r0
  4021e0:	9302      	str	r3, [sp, #8]
  4021e2:	e7a5      	b.n	402130 <__sfvwrite_r+0x15c>
  4021e4:	6962      	ldr	r2, [r4, #20]
  4021e6:	6820      	ldr	r0, [r4, #0]
  4021e8:	6921      	ldr	r1, [r4, #16]
  4021ea:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4021ee:	ebc1 0a00 	rsb	sl, r1, r0
  4021f2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4021f6:	f10a 0001 	add.w	r0, sl, #1
  4021fa:	ea4f 0868 	mov.w	r8, r8, asr #1
  4021fe:	4438      	add	r0, r7
  402200:	4540      	cmp	r0, r8
  402202:	4642      	mov	r2, r8
  402204:	bf84      	itt	hi
  402206:	4680      	movhi	r8, r0
  402208:	4642      	movhi	r2, r8
  40220a:	055b      	lsls	r3, r3, #21
  40220c:	d542      	bpl.n	402294 <__sfvwrite_r+0x2c0>
  40220e:	4611      	mov	r1, r2
  402210:	9801      	ldr	r0, [sp, #4]
  402212:	f000 f907 	bl	402424 <_malloc_r>
  402216:	4683      	mov	fp, r0
  402218:	2800      	cmp	r0, #0
  40221a:	d055      	beq.n	4022c8 <__sfvwrite_r+0x2f4>
  40221c:	4652      	mov	r2, sl
  40221e:	6921      	ldr	r1, [r4, #16]
  402220:	f000 fc0e 	bl	402a40 <memcpy>
  402224:	89a3      	ldrh	r3, [r4, #12]
  402226:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40222a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40222e:	81a3      	strh	r3, [r4, #12]
  402230:	ebca 0308 	rsb	r3, sl, r8
  402234:	eb0b 000a 	add.w	r0, fp, sl
  402238:	f8c4 8014 	str.w	r8, [r4, #20]
  40223c:	f8c4 b010 	str.w	fp, [r4, #16]
  402240:	6020      	str	r0, [r4, #0]
  402242:	60a3      	str	r3, [r4, #8]
  402244:	46b8      	mov	r8, r7
  402246:	46ba      	mov	sl, r7
  402248:	e71c      	b.n	402084 <__sfvwrite_r+0xb0>
  40224a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40224e:	42bb      	cmp	r3, r7
  402250:	bf28      	it	cs
  402252:	463b      	movcs	r3, r7
  402254:	464a      	mov	r2, r9
  402256:	fb93 f3f1 	sdiv	r3, r3, r1
  40225a:	9801      	ldr	r0, [sp, #4]
  40225c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40225e:	fb01 f303 	mul.w	r3, r1, r3
  402262:	69e1      	ldr	r1, [r4, #28]
  402264:	47b0      	blx	r6
  402266:	2800      	cmp	r0, #0
  402268:	f73f af18 	bgt.w	40209c <__sfvwrite_r+0xc8>
  40226c:	e74c      	b.n	402108 <__sfvwrite_r+0x134>
  40226e:	461a      	mov	r2, r3
  402270:	4651      	mov	r1, sl
  402272:	9303      	str	r3, [sp, #12]
  402274:	f000 fc7e 	bl	402b74 <memmove>
  402278:	6822      	ldr	r2, [r4, #0]
  40227a:	9b03      	ldr	r3, [sp, #12]
  40227c:	9801      	ldr	r0, [sp, #4]
  40227e:	441a      	add	r2, r3
  402280:	6022      	str	r2, [r4, #0]
  402282:	4621      	mov	r1, r4
  402284:	f7ff fcbe 	bl	401c04 <_fflush_r>
  402288:	9b03      	ldr	r3, [sp, #12]
  40228a:	2800      	cmp	r0, #0
  40228c:	f47f af3c 	bne.w	402108 <__sfvwrite_r+0x134>
  402290:	461f      	mov	r7, r3
  402292:	e766      	b.n	402162 <__sfvwrite_r+0x18e>
  402294:	9801      	ldr	r0, [sp, #4]
  402296:	f000 fcd5 	bl	402c44 <_realloc_r>
  40229a:	4683      	mov	fp, r0
  40229c:	2800      	cmp	r0, #0
  40229e:	d1c7      	bne.n	402230 <__sfvwrite_r+0x25c>
  4022a0:	9d01      	ldr	r5, [sp, #4]
  4022a2:	6921      	ldr	r1, [r4, #16]
  4022a4:	4628      	mov	r0, r5
  4022a6:	f7ff fdad 	bl	401e04 <_free_r>
  4022aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4022ae:	220c      	movs	r2, #12
  4022b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4022b4:	602a      	str	r2, [r5, #0]
  4022b6:	e729      	b.n	40210c <__sfvwrite_r+0x138>
  4022b8:	2301      	movs	r3, #1
  4022ba:	f109 0801 	add.w	r8, r9, #1
  4022be:	9302      	str	r3, [sp, #8]
  4022c0:	e736      	b.n	402130 <__sfvwrite_r+0x15c>
  4022c2:	f04f 30ff 	mov.w	r0, #4294967295
  4022c6:	e6b8      	b.n	40203a <__sfvwrite_r+0x66>
  4022c8:	9a01      	ldr	r2, [sp, #4]
  4022ca:	230c      	movs	r3, #12
  4022cc:	6013      	str	r3, [r2, #0]
  4022ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4022d2:	e71b      	b.n	40210c <__sfvwrite_r+0x138>
  4022d4:	7ffffc00 	.word	0x7ffffc00

004022d8 <_fwalk_reent>:
  4022d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4022dc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4022e0:	d01f      	beq.n	402322 <_fwalk_reent+0x4a>
  4022e2:	4688      	mov	r8, r1
  4022e4:	4606      	mov	r6, r0
  4022e6:	f04f 0900 	mov.w	r9, #0
  4022ea:	687d      	ldr	r5, [r7, #4]
  4022ec:	68bc      	ldr	r4, [r7, #8]
  4022ee:	3d01      	subs	r5, #1
  4022f0:	d411      	bmi.n	402316 <_fwalk_reent+0x3e>
  4022f2:	89a3      	ldrh	r3, [r4, #12]
  4022f4:	2b01      	cmp	r3, #1
  4022f6:	f105 35ff 	add.w	r5, r5, #4294967295
  4022fa:	d908      	bls.n	40230e <_fwalk_reent+0x36>
  4022fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402300:	3301      	adds	r3, #1
  402302:	4621      	mov	r1, r4
  402304:	4630      	mov	r0, r6
  402306:	d002      	beq.n	40230e <_fwalk_reent+0x36>
  402308:	47c0      	blx	r8
  40230a:	ea49 0900 	orr.w	r9, r9, r0
  40230e:	1c6b      	adds	r3, r5, #1
  402310:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402314:	d1ed      	bne.n	4022f2 <_fwalk_reent+0x1a>
  402316:	683f      	ldr	r7, [r7, #0]
  402318:	2f00      	cmp	r7, #0
  40231a:	d1e6      	bne.n	4022ea <_fwalk_reent+0x12>
  40231c:	4648      	mov	r0, r9
  40231e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402322:	46b9      	mov	r9, r7
  402324:	4648      	mov	r0, r9
  402326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40232a:	bf00      	nop

0040232c <__swhatbuf_r>:
  40232c:	b570      	push	{r4, r5, r6, lr}
  40232e:	460d      	mov	r5, r1
  402330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402334:	2900      	cmp	r1, #0
  402336:	b090      	sub	sp, #64	; 0x40
  402338:	4614      	mov	r4, r2
  40233a:	461e      	mov	r6, r3
  40233c:	db14      	blt.n	402368 <__swhatbuf_r+0x3c>
  40233e:	aa01      	add	r2, sp, #4
  402340:	f000 ffe6 	bl	403310 <_fstat_r>
  402344:	2800      	cmp	r0, #0
  402346:	db0f      	blt.n	402368 <__swhatbuf_r+0x3c>
  402348:	9a02      	ldr	r2, [sp, #8]
  40234a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40234e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402352:	fab2 f282 	clz	r2, r2
  402356:	0952      	lsrs	r2, r2, #5
  402358:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40235c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402360:	6032      	str	r2, [r6, #0]
  402362:	6023      	str	r3, [r4, #0]
  402364:	b010      	add	sp, #64	; 0x40
  402366:	bd70      	pop	{r4, r5, r6, pc}
  402368:	89a8      	ldrh	r0, [r5, #12]
  40236a:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40236e:	b282      	uxth	r2, r0
  402370:	2000      	movs	r0, #0
  402372:	6030      	str	r0, [r6, #0]
  402374:	b11a      	cbz	r2, 40237e <__swhatbuf_r+0x52>
  402376:	2340      	movs	r3, #64	; 0x40
  402378:	6023      	str	r3, [r4, #0]
  40237a:	b010      	add	sp, #64	; 0x40
  40237c:	bd70      	pop	{r4, r5, r6, pc}
  40237e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402382:	4610      	mov	r0, r2
  402384:	6023      	str	r3, [r4, #0]
  402386:	b010      	add	sp, #64	; 0x40
  402388:	bd70      	pop	{r4, r5, r6, pc}
  40238a:	bf00      	nop

0040238c <__smakebuf_r>:
  40238c:	898a      	ldrh	r2, [r1, #12]
  40238e:	0792      	lsls	r2, r2, #30
  402390:	460b      	mov	r3, r1
  402392:	d506      	bpl.n	4023a2 <__smakebuf_r+0x16>
  402394:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402398:	2101      	movs	r1, #1
  40239a:	601a      	str	r2, [r3, #0]
  40239c:	611a      	str	r2, [r3, #16]
  40239e:	6159      	str	r1, [r3, #20]
  4023a0:	4770      	bx	lr
  4023a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4023a4:	b083      	sub	sp, #12
  4023a6:	ab01      	add	r3, sp, #4
  4023a8:	466a      	mov	r2, sp
  4023aa:	460c      	mov	r4, r1
  4023ac:	4605      	mov	r5, r0
  4023ae:	f7ff ffbd 	bl	40232c <__swhatbuf_r>
  4023b2:	9900      	ldr	r1, [sp, #0]
  4023b4:	4606      	mov	r6, r0
  4023b6:	4628      	mov	r0, r5
  4023b8:	f000 f834 	bl	402424 <_malloc_r>
  4023bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4023c0:	b1d0      	cbz	r0, 4023f8 <__smakebuf_r+0x6c>
  4023c2:	9a01      	ldr	r2, [sp, #4]
  4023c4:	4f12      	ldr	r7, [pc, #72]	; (402410 <__smakebuf_r+0x84>)
  4023c6:	9900      	ldr	r1, [sp, #0]
  4023c8:	63ef      	str	r7, [r5, #60]	; 0x3c
  4023ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4023ce:	81a3      	strh	r3, [r4, #12]
  4023d0:	6020      	str	r0, [r4, #0]
  4023d2:	6120      	str	r0, [r4, #16]
  4023d4:	6161      	str	r1, [r4, #20]
  4023d6:	b91a      	cbnz	r2, 4023e0 <__smakebuf_r+0x54>
  4023d8:	4333      	orrs	r3, r6
  4023da:	81a3      	strh	r3, [r4, #12]
  4023dc:	b003      	add	sp, #12
  4023de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4023e0:	4628      	mov	r0, r5
  4023e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4023e6:	f000 ffa7 	bl	403338 <_isatty_r>
  4023ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4023ee:	2800      	cmp	r0, #0
  4023f0:	d0f2      	beq.n	4023d8 <__smakebuf_r+0x4c>
  4023f2:	f043 0301 	orr.w	r3, r3, #1
  4023f6:	e7ef      	b.n	4023d8 <__smakebuf_r+0x4c>
  4023f8:	059a      	lsls	r2, r3, #22
  4023fa:	d4ef      	bmi.n	4023dc <__smakebuf_r+0x50>
  4023fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402400:	f043 0302 	orr.w	r3, r3, #2
  402404:	2101      	movs	r1, #1
  402406:	81a3      	strh	r3, [r4, #12]
  402408:	6022      	str	r2, [r4, #0]
  40240a:	6122      	str	r2, [r4, #16]
  40240c:	6161      	str	r1, [r4, #20]
  40240e:	e7e5      	b.n	4023dc <__smakebuf_r+0x50>
  402410:	00401c31 	.word	0x00401c31

00402414 <malloc>:
  402414:	4b02      	ldr	r3, [pc, #8]	; (402420 <malloc+0xc>)
  402416:	4601      	mov	r1, r0
  402418:	6818      	ldr	r0, [r3, #0]
  40241a:	f000 b803 	b.w	402424 <_malloc_r>
  40241e:	bf00      	nop
  402420:	20000440 	.word	0x20000440

00402424 <_malloc_r>:
  402424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402428:	f101 050b 	add.w	r5, r1, #11
  40242c:	2d16      	cmp	r5, #22
  40242e:	b083      	sub	sp, #12
  402430:	4606      	mov	r6, r0
  402432:	f240 809f 	bls.w	402574 <_malloc_r+0x150>
  402436:	f035 0507 	bics.w	r5, r5, #7
  40243a:	f100 80bf 	bmi.w	4025bc <_malloc_r+0x198>
  40243e:	42a9      	cmp	r1, r5
  402440:	f200 80bc 	bhi.w	4025bc <_malloc_r+0x198>
  402444:	f000 fbfa 	bl	402c3c <__malloc_lock>
  402448:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40244c:	f0c0 829c 	bcc.w	402988 <_malloc_r+0x564>
  402450:	0a6b      	lsrs	r3, r5, #9
  402452:	f000 80ba 	beq.w	4025ca <_malloc_r+0x1a6>
  402456:	2b04      	cmp	r3, #4
  402458:	f200 8183 	bhi.w	402762 <_malloc_r+0x33e>
  40245c:	09a8      	lsrs	r0, r5, #6
  40245e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  402462:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402466:	3038      	adds	r0, #56	; 0x38
  402468:	4fc4      	ldr	r7, [pc, #784]	; (40277c <_malloc_r+0x358>)
  40246a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40246e:	f1a3 0108 	sub.w	r1, r3, #8
  402472:	685c      	ldr	r4, [r3, #4]
  402474:	42a1      	cmp	r1, r4
  402476:	d107      	bne.n	402488 <_malloc_r+0x64>
  402478:	e0ac      	b.n	4025d4 <_malloc_r+0x1b0>
  40247a:	2a00      	cmp	r2, #0
  40247c:	f280 80ac 	bge.w	4025d8 <_malloc_r+0x1b4>
  402480:	68e4      	ldr	r4, [r4, #12]
  402482:	42a1      	cmp	r1, r4
  402484:	f000 80a6 	beq.w	4025d4 <_malloc_r+0x1b0>
  402488:	6863      	ldr	r3, [r4, #4]
  40248a:	f023 0303 	bic.w	r3, r3, #3
  40248e:	1b5a      	subs	r2, r3, r5
  402490:	2a0f      	cmp	r2, #15
  402492:	ddf2      	ble.n	40247a <_malloc_r+0x56>
  402494:	49b9      	ldr	r1, [pc, #740]	; (40277c <_malloc_r+0x358>)
  402496:	693c      	ldr	r4, [r7, #16]
  402498:	f101 0e08 	add.w	lr, r1, #8
  40249c:	4574      	cmp	r4, lr
  40249e:	f000 81b3 	beq.w	402808 <_malloc_r+0x3e4>
  4024a2:	6863      	ldr	r3, [r4, #4]
  4024a4:	f023 0303 	bic.w	r3, r3, #3
  4024a8:	1b5a      	subs	r2, r3, r5
  4024aa:	2a0f      	cmp	r2, #15
  4024ac:	f300 8199 	bgt.w	4027e2 <_malloc_r+0x3be>
  4024b0:	2a00      	cmp	r2, #0
  4024b2:	f8c1 e014 	str.w	lr, [r1, #20]
  4024b6:	f8c1 e010 	str.w	lr, [r1, #16]
  4024ba:	f280 809e 	bge.w	4025fa <_malloc_r+0x1d6>
  4024be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4024c2:	f080 8167 	bcs.w	402794 <_malloc_r+0x370>
  4024c6:	08db      	lsrs	r3, r3, #3
  4024c8:	f103 0c01 	add.w	ip, r3, #1
  4024cc:	2201      	movs	r2, #1
  4024ce:	109b      	asrs	r3, r3, #2
  4024d0:	fa02 f303 	lsl.w	r3, r2, r3
  4024d4:	684a      	ldr	r2, [r1, #4]
  4024d6:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4024da:	f8c4 8008 	str.w	r8, [r4, #8]
  4024de:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  4024e2:	431a      	orrs	r2, r3
  4024e4:	f1a9 0308 	sub.w	r3, r9, #8
  4024e8:	60e3      	str	r3, [r4, #12]
  4024ea:	604a      	str	r2, [r1, #4]
  4024ec:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4024f0:	f8c8 400c 	str.w	r4, [r8, #12]
  4024f4:	1083      	asrs	r3, r0, #2
  4024f6:	2401      	movs	r4, #1
  4024f8:	409c      	lsls	r4, r3
  4024fa:	4294      	cmp	r4, r2
  4024fc:	f200 808a 	bhi.w	402614 <_malloc_r+0x1f0>
  402500:	4214      	tst	r4, r2
  402502:	d106      	bne.n	402512 <_malloc_r+0xee>
  402504:	f020 0003 	bic.w	r0, r0, #3
  402508:	0064      	lsls	r4, r4, #1
  40250a:	4214      	tst	r4, r2
  40250c:	f100 0004 	add.w	r0, r0, #4
  402510:	d0fa      	beq.n	402508 <_malloc_r+0xe4>
  402512:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402516:	46cc      	mov	ip, r9
  402518:	4680      	mov	r8, r0
  40251a:	f8dc 100c 	ldr.w	r1, [ip, #12]
  40251e:	458c      	cmp	ip, r1
  402520:	d107      	bne.n	402532 <_malloc_r+0x10e>
  402522:	e173      	b.n	40280c <_malloc_r+0x3e8>
  402524:	2a00      	cmp	r2, #0
  402526:	f280 8181 	bge.w	40282c <_malloc_r+0x408>
  40252a:	68c9      	ldr	r1, [r1, #12]
  40252c:	458c      	cmp	ip, r1
  40252e:	f000 816d 	beq.w	40280c <_malloc_r+0x3e8>
  402532:	684b      	ldr	r3, [r1, #4]
  402534:	f023 0303 	bic.w	r3, r3, #3
  402538:	1b5a      	subs	r2, r3, r5
  40253a:	2a0f      	cmp	r2, #15
  40253c:	ddf2      	ble.n	402524 <_malloc_r+0x100>
  40253e:	460c      	mov	r4, r1
  402540:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  402544:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402548:	194b      	adds	r3, r1, r5
  40254a:	f045 0501 	orr.w	r5, r5, #1
  40254e:	604d      	str	r5, [r1, #4]
  402550:	f042 0101 	orr.w	r1, r2, #1
  402554:	f8c8 c00c 	str.w	ip, [r8, #12]
  402558:	4630      	mov	r0, r6
  40255a:	f8cc 8008 	str.w	r8, [ip, #8]
  40255e:	617b      	str	r3, [r7, #20]
  402560:	613b      	str	r3, [r7, #16]
  402562:	f8c3 e00c 	str.w	lr, [r3, #12]
  402566:	f8c3 e008 	str.w	lr, [r3, #8]
  40256a:	6059      	str	r1, [r3, #4]
  40256c:	509a      	str	r2, [r3, r2]
  40256e:	f000 fb67 	bl	402c40 <__malloc_unlock>
  402572:	e01f      	b.n	4025b4 <_malloc_r+0x190>
  402574:	2910      	cmp	r1, #16
  402576:	d821      	bhi.n	4025bc <_malloc_r+0x198>
  402578:	f000 fb60 	bl	402c3c <__malloc_lock>
  40257c:	2510      	movs	r5, #16
  40257e:	2306      	movs	r3, #6
  402580:	2002      	movs	r0, #2
  402582:	4f7e      	ldr	r7, [pc, #504]	; (40277c <_malloc_r+0x358>)
  402584:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402588:	f1a3 0208 	sub.w	r2, r3, #8
  40258c:	685c      	ldr	r4, [r3, #4]
  40258e:	4294      	cmp	r4, r2
  402590:	f000 8145 	beq.w	40281e <_malloc_r+0x3fa>
  402594:	6863      	ldr	r3, [r4, #4]
  402596:	68e1      	ldr	r1, [r4, #12]
  402598:	68a5      	ldr	r5, [r4, #8]
  40259a:	f023 0303 	bic.w	r3, r3, #3
  40259e:	4423      	add	r3, r4
  4025a0:	4630      	mov	r0, r6
  4025a2:	685a      	ldr	r2, [r3, #4]
  4025a4:	60e9      	str	r1, [r5, #12]
  4025a6:	f042 0201 	orr.w	r2, r2, #1
  4025aa:	608d      	str	r5, [r1, #8]
  4025ac:	605a      	str	r2, [r3, #4]
  4025ae:	f000 fb47 	bl	402c40 <__malloc_unlock>
  4025b2:	3408      	adds	r4, #8
  4025b4:	4620      	mov	r0, r4
  4025b6:	b003      	add	sp, #12
  4025b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025bc:	2400      	movs	r4, #0
  4025be:	230c      	movs	r3, #12
  4025c0:	4620      	mov	r0, r4
  4025c2:	6033      	str	r3, [r6, #0]
  4025c4:	b003      	add	sp, #12
  4025c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025ca:	2380      	movs	r3, #128	; 0x80
  4025cc:	f04f 0e40 	mov.w	lr, #64	; 0x40
  4025d0:	203f      	movs	r0, #63	; 0x3f
  4025d2:	e749      	b.n	402468 <_malloc_r+0x44>
  4025d4:	4670      	mov	r0, lr
  4025d6:	e75d      	b.n	402494 <_malloc_r+0x70>
  4025d8:	4423      	add	r3, r4
  4025da:	68e1      	ldr	r1, [r4, #12]
  4025dc:	685a      	ldr	r2, [r3, #4]
  4025de:	68a5      	ldr	r5, [r4, #8]
  4025e0:	f042 0201 	orr.w	r2, r2, #1
  4025e4:	60e9      	str	r1, [r5, #12]
  4025e6:	4630      	mov	r0, r6
  4025e8:	608d      	str	r5, [r1, #8]
  4025ea:	605a      	str	r2, [r3, #4]
  4025ec:	f000 fb28 	bl	402c40 <__malloc_unlock>
  4025f0:	3408      	adds	r4, #8
  4025f2:	4620      	mov	r0, r4
  4025f4:	b003      	add	sp, #12
  4025f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025fa:	4423      	add	r3, r4
  4025fc:	4630      	mov	r0, r6
  4025fe:	685a      	ldr	r2, [r3, #4]
  402600:	f042 0201 	orr.w	r2, r2, #1
  402604:	605a      	str	r2, [r3, #4]
  402606:	f000 fb1b 	bl	402c40 <__malloc_unlock>
  40260a:	3408      	adds	r4, #8
  40260c:	4620      	mov	r0, r4
  40260e:	b003      	add	sp, #12
  402610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402614:	68bc      	ldr	r4, [r7, #8]
  402616:	6863      	ldr	r3, [r4, #4]
  402618:	f023 0803 	bic.w	r8, r3, #3
  40261c:	45a8      	cmp	r8, r5
  40261e:	d304      	bcc.n	40262a <_malloc_r+0x206>
  402620:	ebc5 0308 	rsb	r3, r5, r8
  402624:	2b0f      	cmp	r3, #15
  402626:	f300 808c 	bgt.w	402742 <_malloc_r+0x31e>
  40262a:	4b55      	ldr	r3, [pc, #340]	; (402780 <_malloc_r+0x35c>)
  40262c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 402790 <_malloc_r+0x36c>
  402630:	681a      	ldr	r2, [r3, #0]
  402632:	f8d9 3000 	ldr.w	r3, [r9]
  402636:	3301      	adds	r3, #1
  402638:	442a      	add	r2, r5
  40263a:	eb04 0a08 	add.w	sl, r4, r8
  40263e:	f000 8160 	beq.w	402902 <_malloc_r+0x4de>
  402642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402646:	320f      	adds	r2, #15
  402648:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40264c:	f022 020f 	bic.w	r2, r2, #15
  402650:	4611      	mov	r1, r2
  402652:	4630      	mov	r0, r6
  402654:	9201      	str	r2, [sp, #4]
  402656:	f000 fce5 	bl	403024 <_sbrk_r>
  40265a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40265e:	4683      	mov	fp, r0
  402660:	9a01      	ldr	r2, [sp, #4]
  402662:	f000 8158 	beq.w	402916 <_malloc_r+0x4f2>
  402666:	4582      	cmp	sl, r0
  402668:	f200 80fc 	bhi.w	402864 <_malloc_r+0x440>
  40266c:	4b45      	ldr	r3, [pc, #276]	; (402784 <_malloc_r+0x360>)
  40266e:	6819      	ldr	r1, [r3, #0]
  402670:	45da      	cmp	sl, fp
  402672:	4411      	add	r1, r2
  402674:	6019      	str	r1, [r3, #0]
  402676:	f000 8153 	beq.w	402920 <_malloc_r+0x4fc>
  40267a:	f8d9 0000 	ldr.w	r0, [r9]
  40267e:	f8df e110 	ldr.w	lr, [pc, #272]	; 402790 <_malloc_r+0x36c>
  402682:	3001      	adds	r0, #1
  402684:	bf1b      	ittet	ne
  402686:	ebca 0a0b 	rsbne	sl, sl, fp
  40268a:	4451      	addne	r1, sl
  40268c:	f8ce b000 	streq.w	fp, [lr]
  402690:	6019      	strne	r1, [r3, #0]
  402692:	f01b 0107 	ands.w	r1, fp, #7
  402696:	f000 8117 	beq.w	4028c8 <_malloc_r+0x4a4>
  40269a:	f1c1 0008 	rsb	r0, r1, #8
  40269e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4026a2:	4483      	add	fp, r0
  4026a4:	3108      	adds	r1, #8
  4026a6:	445a      	add	r2, fp
  4026a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4026ac:	ebc2 0901 	rsb	r9, r2, r1
  4026b0:	4649      	mov	r1, r9
  4026b2:	4630      	mov	r0, r6
  4026b4:	9301      	str	r3, [sp, #4]
  4026b6:	f000 fcb5 	bl	403024 <_sbrk_r>
  4026ba:	1c43      	adds	r3, r0, #1
  4026bc:	9b01      	ldr	r3, [sp, #4]
  4026be:	f000 813f 	beq.w	402940 <_malloc_r+0x51c>
  4026c2:	ebcb 0200 	rsb	r2, fp, r0
  4026c6:	444a      	add	r2, r9
  4026c8:	f042 0201 	orr.w	r2, r2, #1
  4026cc:	6819      	ldr	r1, [r3, #0]
  4026ce:	f8c7 b008 	str.w	fp, [r7, #8]
  4026d2:	4449      	add	r1, r9
  4026d4:	42bc      	cmp	r4, r7
  4026d6:	f8cb 2004 	str.w	r2, [fp, #4]
  4026da:	6019      	str	r1, [r3, #0]
  4026dc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 402784 <_malloc_r+0x360>
  4026e0:	d016      	beq.n	402710 <_malloc_r+0x2ec>
  4026e2:	f1b8 0f0f 	cmp.w	r8, #15
  4026e6:	f240 80fd 	bls.w	4028e4 <_malloc_r+0x4c0>
  4026ea:	6862      	ldr	r2, [r4, #4]
  4026ec:	f1a8 030c 	sub.w	r3, r8, #12
  4026f0:	f023 0307 	bic.w	r3, r3, #7
  4026f4:	18e0      	adds	r0, r4, r3
  4026f6:	f002 0201 	and.w	r2, r2, #1
  4026fa:	f04f 0e05 	mov.w	lr, #5
  4026fe:	431a      	orrs	r2, r3
  402700:	2b0f      	cmp	r3, #15
  402702:	6062      	str	r2, [r4, #4]
  402704:	f8c0 e004 	str.w	lr, [r0, #4]
  402708:	f8c0 e008 	str.w	lr, [r0, #8]
  40270c:	f200 811c 	bhi.w	402948 <_malloc_r+0x524>
  402710:	4b1d      	ldr	r3, [pc, #116]	; (402788 <_malloc_r+0x364>)
  402712:	68bc      	ldr	r4, [r7, #8]
  402714:	681a      	ldr	r2, [r3, #0]
  402716:	4291      	cmp	r1, r2
  402718:	bf88      	it	hi
  40271a:	6019      	strhi	r1, [r3, #0]
  40271c:	4b1b      	ldr	r3, [pc, #108]	; (40278c <_malloc_r+0x368>)
  40271e:	681a      	ldr	r2, [r3, #0]
  402720:	4291      	cmp	r1, r2
  402722:	6862      	ldr	r2, [r4, #4]
  402724:	bf88      	it	hi
  402726:	6019      	strhi	r1, [r3, #0]
  402728:	f022 0203 	bic.w	r2, r2, #3
  40272c:	4295      	cmp	r5, r2
  40272e:	eba2 0305 	sub.w	r3, r2, r5
  402732:	d801      	bhi.n	402738 <_malloc_r+0x314>
  402734:	2b0f      	cmp	r3, #15
  402736:	dc04      	bgt.n	402742 <_malloc_r+0x31e>
  402738:	4630      	mov	r0, r6
  40273a:	f000 fa81 	bl	402c40 <__malloc_unlock>
  40273e:	2400      	movs	r4, #0
  402740:	e738      	b.n	4025b4 <_malloc_r+0x190>
  402742:	1962      	adds	r2, r4, r5
  402744:	f043 0301 	orr.w	r3, r3, #1
  402748:	f045 0501 	orr.w	r5, r5, #1
  40274c:	6065      	str	r5, [r4, #4]
  40274e:	4630      	mov	r0, r6
  402750:	60ba      	str	r2, [r7, #8]
  402752:	6053      	str	r3, [r2, #4]
  402754:	f000 fa74 	bl	402c40 <__malloc_unlock>
  402758:	3408      	adds	r4, #8
  40275a:	4620      	mov	r0, r4
  40275c:	b003      	add	sp, #12
  40275e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402762:	2b14      	cmp	r3, #20
  402764:	d971      	bls.n	40284a <_malloc_r+0x426>
  402766:	2b54      	cmp	r3, #84	; 0x54
  402768:	f200 80a4 	bhi.w	4028b4 <_malloc_r+0x490>
  40276c:	0b28      	lsrs	r0, r5, #12
  40276e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  402772:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402776:	306e      	adds	r0, #110	; 0x6e
  402778:	e676      	b.n	402468 <_malloc_r+0x44>
  40277a:	bf00      	nop
  40277c:	20000444 	.word	0x20000444
  402780:	200008f8 	.word	0x200008f8
  402784:	200008fc 	.word	0x200008fc
  402788:	200008f4 	.word	0x200008f4
  40278c:	200008f0 	.word	0x200008f0
  402790:	20000850 	.word	0x20000850
  402794:	0a5a      	lsrs	r2, r3, #9
  402796:	2a04      	cmp	r2, #4
  402798:	d95e      	bls.n	402858 <_malloc_r+0x434>
  40279a:	2a14      	cmp	r2, #20
  40279c:	f200 80b3 	bhi.w	402906 <_malloc_r+0x4e2>
  4027a0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4027a4:	0049      	lsls	r1, r1, #1
  4027a6:	325b      	adds	r2, #91	; 0x5b
  4027a8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4027ac:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  4027b0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 402990 <_malloc_r+0x56c>
  4027b4:	f1ac 0c08 	sub.w	ip, ip, #8
  4027b8:	458c      	cmp	ip, r1
  4027ba:	f000 8088 	beq.w	4028ce <_malloc_r+0x4aa>
  4027be:	684a      	ldr	r2, [r1, #4]
  4027c0:	f022 0203 	bic.w	r2, r2, #3
  4027c4:	4293      	cmp	r3, r2
  4027c6:	d202      	bcs.n	4027ce <_malloc_r+0x3aa>
  4027c8:	6889      	ldr	r1, [r1, #8]
  4027ca:	458c      	cmp	ip, r1
  4027cc:	d1f7      	bne.n	4027be <_malloc_r+0x39a>
  4027ce:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4027d2:	687a      	ldr	r2, [r7, #4]
  4027d4:	f8c4 c00c 	str.w	ip, [r4, #12]
  4027d8:	60a1      	str	r1, [r4, #8]
  4027da:	f8cc 4008 	str.w	r4, [ip, #8]
  4027de:	60cc      	str	r4, [r1, #12]
  4027e0:	e688      	b.n	4024f4 <_malloc_r+0xd0>
  4027e2:	1963      	adds	r3, r4, r5
  4027e4:	f042 0701 	orr.w	r7, r2, #1
  4027e8:	f045 0501 	orr.w	r5, r5, #1
  4027ec:	6065      	str	r5, [r4, #4]
  4027ee:	4630      	mov	r0, r6
  4027f0:	614b      	str	r3, [r1, #20]
  4027f2:	610b      	str	r3, [r1, #16]
  4027f4:	f8c3 e00c 	str.w	lr, [r3, #12]
  4027f8:	f8c3 e008 	str.w	lr, [r3, #8]
  4027fc:	605f      	str	r7, [r3, #4]
  4027fe:	509a      	str	r2, [r3, r2]
  402800:	3408      	adds	r4, #8
  402802:	f000 fa1d 	bl	402c40 <__malloc_unlock>
  402806:	e6d5      	b.n	4025b4 <_malloc_r+0x190>
  402808:	684a      	ldr	r2, [r1, #4]
  40280a:	e673      	b.n	4024f4 <_malloc_r+0xd0>
  40280c:	f108 0801 	add.w	r8, r8, #1
  402810:	f018 0f03 	tst.w	r8, #3
  402814:	f10c 0c08 	add.w	ip, ip, #8
  402818:	f47f ae7f 	bne.w	40251a <_malloc_r+0xf6>
  40281c:	e030      	b.n	402880 <_malloc_r+0x45c>
  40281e:	68dc      	ldr	r4, [r3, #12]
  402820:	42a3      	cmp	r3, r4
  402822:	bf08      	it	eq
  402824:	3002      	addeq	r0, #2
  402826:	f43f ae35 	beq.w	402494 <_malloc_r+0x70>
  40282a:	e6b3      	b.n	402594 <_malloc_r+0x170>
  40282c:	440b      	add	r3, r1
  40282e:	460c      	mov	r4, r1
  402830:	685a      	ldr	r2, [r3, #4]
  402832:	68c9      	ldr	r1, [r1, #12]
  402834:	f854 5f08 	ldr.w	r5, [r4, #8]!
  402838:	f042 0201 	orr.w	r2, r2, #1
  40283c:	605a      	str	r2, [r3, #4]
  40283e:	4630      	mov	r0, r6
  402840:	60e9      	str	r1, [r5, #12]
  402842:	608d      	str	r5, [r1, #8]
  402844:	f000 f9fc 	bl	402c40 <__malloc_unlock>
  402848:	e6b4      	b.n	4025b4 <_malloc_r+0x190>
  40284a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40284e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  402852:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402856:	e607      	b.n	402468 <_malloc_r+0x44>
  402858:	099a      	lsrs	r2, r3, #6
  40285a:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40285e:	0049      	lsls	r1, r1, #1
  402860:	3238      	adds	r2, #56	; 0x38
  402862:	e7a1      	b.n	4027a8 <_malloc_r+0x384>
  402864:	42bc      	cmp	r4, r7
  402866:	4b4a      	ldr	r3, [pc, #296]	; (402990 <_malloc_r+0x56c>)
  402868:	f43f af00 	beq.w	40266c <_malloc_r+0x248>
  40286c:	689c      	ldr	r4, [r3, #8]
  40286e:	6862      	ldr	r2, [r4, #4]
  402870:	f022 0203 	bic.w	r2, r2, #3
  402874:	e75a      	b.n	40272c <_malloc_r+0x308>
  402876:	f859 3908 	ldr.w	r3, [r9], #-8
  40287a:	4599      	cmp	r9, r3
  40287c:	f040 8082 	bne.w	402984 <_malloc_r+0x560>
  402880:	f010 0f03 	tst.w	r0, #3
  402884:	f100 30ff 	add.w	r0, r0, #4294967295
  402888:	d1f5      	bne.n	402876 <_malloc_r+0x452>
  40288a:	687b      	ldr	r3, [r7, #4]
  40288c:	ea23 0304 	bic.w	r3, r3, r4
  402890:	607b      	str	r3, [r7, #4]
  402892:	0064      	lsls	r4, r4, #1
  402894:	429c      	cmp	r4, r3
  402896:	f63f aebd 	bhi.w	402614 <_malloc_r+0x1f0>
  40289a:	2c00      	cmp	r4, #0
  40289c:	f43f aeba 	beq.w	402614 <_malloc_r+0x1f0>
  4028a0:	421c      	tst	r4, r3
  4028a2:	4640      	mov	r0, r8
  4028a4:	f47f ae35 	bne.w	402512 <_malloc_r+0xee>
  4028a8:	0064      	lsls	r4, r4, #1
  4028aa:	421c      	tst	r4, r3
  4028ac:	f100 0004 	add.w	r0, r0, #4
  4028b0:	d0fa      	beq.n	4028a8 <_malloc_r+0x484>
  4028b2:	e62e      	b.n	402512 <_malloc_r+0xee>
  4028b4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4028b8:	d818      	bhi.n	4028ec <_malloc_r+0x4c8>
  4028ba:	0be8      	lsrs	r0, r5, #15
  4028bc:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  4028c0:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4028c4:	3077      	adds	r0, #119	; 0x77
  4028c6:	e5cf      	b.n	402468 <_malloc_r+0x44>
  4028c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4028cc:	e6eb      	b.n	4026a6 <_malloc_r+0x282>
  4028ce:	2101      	movs	r1, #1
  4028d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4028d4:	1092      	asrs	r2, r2, #2
  4028d6:	fa01 f202 	lsl.w	r2, r1, r2
  4028da:	431a      	orrs	r2, r3
  4028dc:	f8c8 2004 	str.w	r2, [r8, #4]
  4028e0:	4661      	mov	r1, ip
  4028e2:	e777      	b.n	4027d4 <_malloc_r+0x3b0>
  4028e4:	2301      	movs	r3, #1
  4028e6:	f8cb 3004 	str.w	r3, [fp, #4]
  4028ea:	e725      	b.n	402738 <_malloc_r+0x314>
  4028ec:	f240 5254 	movw	r2, #1364	; 0x554
  4028f0:	4293      	cmp	r3, r2
  4028f2:	d820      	bhi.n	402936 <_malloc_r+0x512>
  4028f4:	0ca8      	lsrs	r0, r5, #18
  4028f6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  4028fa:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4028fe:	307c      	adds	r0, #124	; 0x7c
  402900:	e5b2      	b.n	402468 <_malloc_r+0x44>
  402902:	3210      	adds	r2, #16
  402904:	e6a4      	b.n	402650 <_malloc_r+0x22c>
  402906:	2a54      	cmp	r2, #84	; 0x54
  402908:	d826      	bhi.n	402958 <_malloc_r+0x534>
  40290a:	0b1a      	lsrs	r2, r3, #12
  40290c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402910:	0049      	lsls	r1, r1, #1
  402912:	326e      	adds	r2, #110	; 0x6e
  402914:	e748      	b.n	4027a8 <_malloc_r+0x384>
  402916:	68bc      	ldr	r4, [r7, #8]
  402918:	6862      	ldr	r2, [r4, #4]
  40291a:	f022 0203 	bic.w	r2, r2, #3
  40291e:	e705      	b.n	40272c <_malloc_r+0x308>
  402920:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402924:	2800      	cmp	r0, #0
  402926:	f47f aea8 	bne.w	40267a <_malloc_r+0x256>
  40292a:	4442      	add	r2, r8
  40292c:	68bb      	ldr	r3, [r7, #8]
  40292e:	f042 0201 	orr.w	r2, r2, #1
  402932:	605a      	str	r2, [r3, #4]
  402934:	e6ec      	b.n	402710 <_malloc_r+0x2ec>
  402936:	23fe      	movs	r3, #254	; 0xfe
  402938:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  40293c:	207e      	movs	r0, #126	; 0x7e
  40293e:	e593      	b.n	402468 <_malloc_r+0x44>
  402940:	2201      	movs	r2, #1
  402942:	f04f 0900 	mov.w	r9, #0
  402946:	e6c1      	b.n	4026cc <_malloc_r+0x2a8>
  402948:	f104 0108 	add.w	r1, r4, #8
  40294c:	4630      	mov	r0, r6
  40294e:	f7ff fa59 	bl	401e04 <_free_r>
  402952:	f8d9 1000 	ldr.w	r1, [r9]
  402956:	e6db      	b.n	402710 <_malloc_r+0x2ec>
  402958:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40295c:	d805      	bhi.n	40296a <_malloc_r+0x546>
  40295e:	0bda      	lsrs	r2, r3, #15
  402960:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402964:	0049      	lsls	r1, r1, #1
  402966:	3277      	adds	r2, #119	; 0x77
  402968:	e71e      	b.n	4027a8 <_malloc_r+0x384>
  40296a:	f240 5154 	movw	r1, #1364	; 0x554
  40296e:	428a      	cmp	r2, r1
  402970:	d805      	bhi.n	40297e <_malloc_r+0x55a>
  402972:	0c9a      	lsrs	r2, r3, #18
  402974:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402978:	0049      	lsls	r1, r1, #1
  40297a:	327c      	adds	r2, #124	; 0x7c
  40297c:	e714      	b.n	4027a8 <_malloc_r+0x384>
  40297e:	21fe      	movs	r1, #254	; 0xfe
  402980:	227e      	movs	r2, #126	; 0x7e
  402982:	e711      	b.n	4027a8 <_malloc_r+0x384>
  402984:	687b      	ldr	r3, [r7, #4]
  402986:	e784      	b.n	402892 <_malloc_r+0x46e>
  402988:	08e8      	lsrs	r0, r5, #3
  40298a:	1c43      	adds	r3, r0, #1
  40298c:	005b      	lsls	r3, r3, #1
  40298e:	e5f8      	b.n	402582 <_malloc_r+0x15e>
  402990:	20000444 	.word	0x20000444
	...

004029a0 <memchr>:
  4029a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4029a4:	2a10      	cmp	r2, #16
  4029a6:	db2b      	blt.n	402a00 <memchr+0x60>
  4029a8:	f010 0f07 	tst.w	r0, #7
  4029ac:	d008      	beq.n	4029c0 <memchr+0x20>
  4029ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4029b2:	3a01      	subs	r2, #1
  4029b4:	428b      	cmp	r3, r1
  4029b6:	d02d      	beq.n	402a14 <memchr+0x74>
  4029b8:	f010 0f07 	tst.w	r0, #7
  4029bc:	b342      	cbz	r2, 402a10 <memchr+0x70>
  4029be:	d1f6      	bne.n	4029ae <memchr+0xe>
  4029c0:	b4f0      	push	{r4, r5, r6, r7}
  4029c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4029c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4029ca:	f022 0407 	bic.w	r4, r2, #7
  4029ce:	f07f 0700 	mvns.w	r7, #0
  4029d2:	2300      	movs	r3, #0
  4029d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4029d8:	3c08      	subs	r4, #8
  4029da:	ea85 0501 	eor.w	r5, r5, r1
  4029de:	ea86 0601 	eor.w	r6, r6, r1
  4029e2:	fa85 f547 	uadd8	r5, r5, r7
  4029e6:	faa3 f587 	sel	r5, r3, r7
  4029ea:	fa86 f647 	uadd8	r6, r6, r7
  4029ee:	faa5 f687 	sel	r6, r5, r7
  4029f2:	b98e      	cbnz	r6, 402a18 <memchr+0x78>
  4029f4:	d1ee      	bne.n	4029d4 <memchr+0x34>
  4029f6:	bcf0      	pop	{r4, r5, r6, r7}
  4029f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4029fc:	f002 0207 	and.w	r2, r2, #7
  402a00:	b132      	cbz	r2, 402a10 <memchr+0x70>
  402a02:	f810 3b01 	ldrb.w	r3, [r0], #1
  402a06:	3a01      	subs	r2, #1
  402a08:	ea83 0301 	eor.w	r3, r3, r1
  402a0c:	b113      	cbz	r3, 402a14 <memchr+0x74>
  402a0e:	d1f8      	bne.n	402a02 <memchr+0x62>
  402a10:	2000      	movs	r0, #0
  402a12:	4770      	bx	lr
  402a14:	3801      	subs	r0, #1
  402a16:	4770      	bx	lr
  402a18:	2d00      	cmp	r5, #0
  402a1a:	bf06      	itte	eq
  402a1c:	4635      	moveq	r5, r6
  402a1e:	3803      	subeq	r0, #3
  402a20:	3807      	subne	r0, #7
  402a22:	f015 0f01 	tst.w	r5, #1
  402a26:	d107      	bne.n	402a38 <memchr+0x98>
  402a28:	3001      	adds	r0, #1
  402a2a:	f415 7f80 	tst.w	r5, #256	; 0x100
  402a2e:	bf02      	ittt	eq
  402a30:	3001      	addeq	r0, #1
  402a32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402a36:	3001      	addeq	r0, #1
  402a38:	bcf0      	pop	{r4, r5, r6, r7}
  402a3a:	3801      	subs	r0, #1
  402a3c:	4770      	bx	lr
  402a3e:	bf00      	nop

00402a40 <memcpy>:
  402a40:	4684      	mov	ip, r0
  402a42:	ea41 0300 	orr.w	r3, r1, r0
  402a46:	f013 0303 	ands.w	r3, r3, #3
  402a4a:	d16d      	bne.n	402b28 <memcpy+0xe8>
  402a4c:	3a40      	subs	r2, #64	; 0x40
  402a4e:	d341      	bcc.n	402ad4 <memcpy+0x94>
  402a50:	f851 3b04 	ldr.w	r3, [r1], #4
  402a54:	f840 3b04 	str.w	r3, [r0], #4
  402a58:	f851 3b04 	ldr.w	r3, [r1], #4
  402a5c:	f840 3b04 	str.w	r3, [r0], #4
  402a60:	f851 3b04 	ldr.w	r3, [r1], #4
  402a64:	f840 3b04 	str.w	r3, [r0], #4
  402a68:	f851 3b04 	ldr.w	r3, [r1], #4
  402a6c:	f840 3b04 	str.w	r3, [r0], #4
  402a70:	f851 3b04 	ldr.w	r3, [r1], #4
  402a74:	f840 3b04 	str.w	r3, [r0], #4
  402a78:	f851 3b04 	ldr.w	r3, [r1], #4
  402a7c:	f840 3b04 	str.w	r3, [r0], #4
  402a80:	f851 3b04 	ldr.w	r3, [r1], #4
  402a84:	f840 3b04 	str.w	r3, [r0], #4
  402a88:	f851 3b04 	ldr.w	r3, [r1], #4
  402a8c:	f840 3b04 	str.w	r3, [r0], #4
  402a90:	f851 3b04 	ldr.w	r3, [r1], #4
  402a94:	f840 3b04 	str.w	r3, [r0], #4
  402a98:	f851 3b04 	ldr.w	r3, [r1], #4
  402a9c:	f840 3b04 	str.w	r3, [r0], #4
  402aa0:	f851 3b04 	ldr.w	r3, [r1], #4
  402aa4:	f840 3b04 	str.w	r3, [r0], #4
  402aa8:	f851 3b04 	ldr.w	r3, [r1], #4
  402aac:	f840 3b04 	str.w	r3, [r0], #4
  402ab0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ab4:	f840 3b04 	str.w	r3, [r0], #4
  402ab8:	f851 3b04 	ldr.w	r3, [r1], #4
  402abc:	f840 3b04 	str.w	r3, [r0], #4
  402ac0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ac4:	f840 3b04 	str.w	r3, [r0], #4
  402ac8:	f851 3b04 	ldr.w	r3, [r1], #4
  402acc:	f840 3b04 	str.w	r3, [r0], #4
  402ad0:	3a40      	subs	r2, #64	; 0x40
  402ad2:	d2bd      	bcs.n	402a50 <memcpy+0x10>
  402ad4:	3230      	adds	r2, #48	; 0x30
  402ad6:	d311      	bcc.n	402afc <memcpy+0xbc>
  402ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  402adc:	f840 3b04 	str.w	r3, [r0], #4
  402ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ae4:	f840 3b04 	str.w	r3, [r0], #4
  402ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  402aec:	f840 3b04 	str.w	r3, [r0], #4
  402af0:	f851 3b04 	ldr.w	r3, [r1], #4
  402af4:	f840 3b04 	str.w	r3, [r0], #4
  402af8:	3a10      	subs	r2, #16
  402afa:	d2ed      	bcs.n	402ad8 <memcpy+0x98>
  402afc:	320c      	adds	r2, #12
  402afe:	d305      	bcc.n	402b0c <memcpy+0xcc>
  402b00:	f851 3b04 	ldr.w	r3, [r1], #4
  402b04:	f840 3b04 	str.w	r3, [r0], #4
  402b08:	3a04      	subs	r2, #4
  402b0a:	d2f9      	bcs.n	402b00 <memcpy+0xc0>
  402b0c:	3204      	adds	r2, #4
  402b0e:	d008      	beq.n	402b22 <memcpy+0xe2>
  402b10:	07d2      	lsls	r2, r2, #31
  402b12:	bf1c      	itt	ne
  402b14:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402b18:	f800 3b01 	strbne.w	r3, [r0], #1
  402b1c:	d301      	bcc.n	402b22 <memcpy+0xe2>
  402b1e:	880b      	ldrh	r3, [r1, #0]
  402b20:	8003      	strh	r3, [r0, #0]
  402b22:	4660      	mov	r0, ip
  402b24:	4770      	bx	lr
  402b26:	bf00      	nop
  402b28:	2a08      	cmp	r2, #8
  402b2a:	d313      	bcc.n	402b54 <memcpy+0x114>
  402b2c:	078b      	lsls	r3, r1, #30
  402b2e:	d08d      	beq.n	402a4c <memcpy+0xc>
  402b30:	f010 0303 	ands.w	r3, r0, #3
  402b34:	d08a      	beq.n	402a4c <memcpy+0xc>
  402b36:	f1c3 0304 	rsb	r3, r3, #4
  402b3a:	1ad2      	subs	r2, r2, r3
  402b3c:	07db      	lsls	r3, r3, #31
  402b3e:	bf1c      	itt	ne
  402b40:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402b44:	f800 3b01 	strbne.w	r3, [r0], #1
  402b48:	d380      	bcc.n	402a4c <memcpy+0xc>
  402b4a:	f831 3b02 	ldrh.w	r3, [r1], #2
  402b4e:	f820 3b02 	strh.w	r3, [r0], #2
  402b52:	e77b      	b.n	402a4c <memcpy+0xc>
  402b54:	3a04      	subs	r2, #4
  402b56:	d3d9      	bcc.n	402b0c <memcpy+0xcc>
  402b58:	3a01      	subs	r2, #1
  402b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
  402b5e:	f800 3b01 	strb.w	r3, [r0], #1
  402b62:	d2f9      	bcs.n	402b58 <memcpy+0x118>
  402b64:	780b      	ldrb	r3, [r1, #0]
  402b66:	7003      	strb	r3, [r0, #0]
  402b68:	784b      	ldrb	r3, [r1, #1]
  402b6a:	7043      	strb	r3, [r0, #1]
  402b6c:	788b      	ldrb	r3, [r1, #2]
  402b6e:	7083      	strb	r3, [r0, #2]
  402b70:	4660      	mov	r0, ip
  402b72:	4770      	bx	lr

00402b74 <memmove>:
  402b74:	4288      	cmp	r0, r1
  402b76:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b78:	d90d      	bls.n	402b96 <memmove+0x22>
  402b7a:	188b      	adds	r3, r1, r2
  402b7c:	4298      	cmp	r0, r3
  402b7e:	d20a      	bcs.n	402b96 <memmove+0x22>
  402b80:	1881      	adds	r1, r0, r2
  402b82:	2a00      	cmp	r2, #0
  402b84:	d051      	beq.n	402c2a <memmove+0xb6>
  402b86:	1a9a      	subs	r2, r3, r2
  402b88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  402b8c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  402b90:	4293      	cmp	r3, r2
  402b92:	d1f9      	bne.n	402b88 <memmove+0x14>
  402b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b96:	2a0f      	cmp	r2, #15
  402b98:	d948      	bls.n	402c2c <memmove+0xb8>
  402b9a:	ea41 0300 	orr.w	r3, r1, r0
  402b9e:	079b      	lsls	r3, r3, #30
  402ba0:	d146      	bne.n	402c30 <memmove+0xbc>
  402ba2:	f100 0410 	add.w	r4, r0, #16
  402ba6:	f101 0310 	add.w	r3, r1, #16
  402baa:	4615      	mov	r5, r2
  402bac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  402bb0:	f844 6c10 	str.w	r6, [r4, #-16]
  402bb4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  402bb8:	f844 6c0c 	str.w	r6, [r4, #-12]
  402bbc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  402bc0:	f844 6c08 	str.w	r6, [r4, #-8]
  402bc4:	3d10      	subs	r5, #16
  402bc6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  402bca:	f844 6c04 	str.w	r6, [r4, #-4]
  402bce:	2d0f      	cmp	r5, #15
  402bd0:	f103 0310 	add.w	r3, r3, #16
  402bd4:	f104 0410 	add.w	r4, r4, #16
  402bd8:	d8e8      	bhi.n	402bac <memmove+0x38>
  402bda:	f1a2 0310 	sub.w	r3, r2, #16
  402bde:	f023 030f 	bic.w	r3, r3, #15
  402be2:	f002 0e0f 	and.w	lr, r2, #15
  402be6:	3310      	adds	r3, #16
  402be8:	f1be 0f03 	cmp.w	lr, #3
  402bec:	4419      	add	r1, r3
  402bee:	4403      	add	r3, r0
  402bf0:	d921      	bls.n	402c36 <memmove+0xc2>
  402bf2:	1f1e      	subs	r6, r3, #4
  402bf4:	460d      	mov	r5, r1
  402bf6:	4674      	mov	r4, lr
  402bf8:	3c04      	subs	r4, #4
  402bfa:	f855 7b04 	ldr.w	r7, [r5], #4
  402bfe:	f846 7f04 	str.w	r7, [r6, #4]!
  402c02:	2c03      	cmp	r4, #3
  402c04:	d8f8      	bhi.n	402bf8 <memmove+0x84>
  402c06:	f1ae 0404 	sub.w	r4, lr, #4
  402c0a:	f024 0403 	bic.w	r4, r4, #3
  402c0e:	3404      	adds	r4, #4
  402c10:	4423      	add	r3, r4
  402c12:	4421      	add	r1, r4
  402c14:	f002 0203 	and.w	r2, r2, #3
  402c18:	b162      	cbz	r2, 402c34 <memmove+0xc0>
  402c1a:	3b01      	subs	r3, #1
  402c1c:	440a      	add	r2, r1
  402c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
  402c22:	f803 4f01 	strb.w	r4, [r3, #1]!
  402c26:	428a      	cmp	r2, r1
  402c28:	d1f9      	bne.n	402c1e <memmove+0xaa>
  402c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c2c:	4603      	mov	r3, r0
  402c2e:	e7f3      	b.n	402c18 <memmove+0xa4>
  402c30:	4603      	mov	r3, r0
  402c32:	e7f2      	b.n	402c1a <memmove+0xa6>
  402c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c36:	4672      	mov	r2, lr
  402c38:	e7ee      	b.n	402c18 <memmove+0xa4>
  402c3a:	bf00      	nop

00402c3c <__malloc_lock>:
  402c3c:	4770      	bx	lr
  402c3e:	bf00      	nop

00402c40 <__malloc_unlock>:
  402c40:	4770      	bx	lr
  402c42:	bf00      	nop

00402c44 <_realloc_r>:
  402c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c48:	4617      	mov	r7, r2
  402c4a:	b083      	sub	sp, #12
  402c4c:	2900      	cmp	r1, #0
  402c4e:	f000 80c1 	beq.w	402dd4 <_realloc_r+0x190>
  402c52:	460e      	mov	r6, r1
  402c54:	4681      	mov	r9, r0
  402c56:	f107 050b 	add.w	r5, r7, #11
  402c5a:	f7ff ffef 	bl	402c3c <__malloc_lock>
  402c5e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  402c62:	2d16      	cmp	r5, #22
  402c64:	f02e 0403 	bic.w	r4, lr, #3
  402c68:	f1a6 0808 	sub.w	r8, r6, #8
  402c6c:	d840      	bhi.n	402cf0 <_realloc_r+0xac>
  402c6e:	2210      	movs	r2, #16
  402c70:	4615      	mov	r5, r2
  402c72:	42af      	cmp	r7, r5
  402c74:	d841      	bhi.n	402cfa <_realloc_r+0xb6>
  402c76:	4294      	cmp	r4, r2
  402c78:	da75      	bge.n	402d66 <_realloc_r+0x122>
  402c7a:	4bc9      	ldr	r3, [pc, #804]	; (402fa0 <_realloc_r+0x35c>)
  402c7c:	6899      	ldr	r1, [r3, #8]
  402c7e:	eb08 0004 	add.w	r0, r8, r4
  402c82:	4288      	cmp	r0, r1
  402c84:	6841      	ldr	r1, [r0, #4]
  402c86:	f000 80d9 	beq.w	402e3c <_realloc_r+0x1f8>
  402c8a:	f021 0301 	bic.w	r3, r1, #1
  402c8e:	4403      	add	r3, r0
  402c90:	685b      	ldr	r3, [r3, #4]
  402c92:	07db      	lsls	r3, r3, #31
  402c94:	d57d      	bpl.n	402d92 <_realloc_r+0x14e>
  402c96:	f01e 0f01 	tst.w	lr, #1
  402c9a:	d035      	beq.n	402d08 <_realloc_r+0xc4>
  402c9c:	4639      	mov	r1, r7
  402c9e:	4648      	mov	r0, r9
  402ca0:	f7ff fbc0 	bl	402424 <_malloc_r>
  402ca4:	4607      	mov	r7, r0
  402ca6:	b1e0      	cbz	r0, 402ce2 <_realloc_r+0x9e>
  402ca8:	f856 3c04 	ldr.w	r3, [r6, #-4]
  402cac:	f023 0301 	bic.w	r3, r3, #1
  402cb0:	4443      	add	r3, r8
  402cb2:	f1a0 0208 	sub.w	r2, r0, #8
  402cb6:	429a      	cmp	r2, r3
  402cb8:	f000 8144 	beq.w	402f44 <_realloc_r+0x300>
  402cbc:	1f22      	subs	r2, r4, #4
  402cbe:	2a24      	cmp	r2, #36	; 0x24
  402cc0:	f200 8131 	bhi.w	402f26 <_realloc_r+0x2e2>
  402cc4:	2a13      	cmp	r2, #19
  402cc6:	f200 8104 	bhi.w	402ed2 <_realloc_r+0x28e>
  402cca:	4603      	mov	r3, r0
  402ccc:	4632      	mov	r2, r6
  402cce:	6811      	ldr	r1, [r2, #0]
  402cd0:	6019      	str	r1, [r3, #0]
  402cd2:	6851      	ldr	r1, [r2, #4]
  402cd4:	6059      	str	r1, [r3, #4]
  402cd6:	6892      	ldr	r2, [r2, #8]
  402cd8:	609a      	str	r2, [r3, #8]
  402cda:	4631      	mov	r1, r6
  402cdc:	4648      	mov	r0, r9
  402cde:	f7ff f891 	bl	401e04 <_free_r>
  402ce2:	4648      	mov	r0, r9
  402ce4:	f7ff ffac 	bl	402c40 <__malloc_unlock>
  402ce8:	4638      	mov	r0, r7
  402cea:	b003      	add	sp, #12
  402cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cf0:	f025 0507 	bic.w	r5, r5, #7
  402cf4:	2d00      	cmp	r5, #0
  402cf6:	462a      	mov	r2, r5
  402cf8:	dabb      	bge.n	402c72 <_realloc_r+0x2e>
  402cfa:	230c      	movs	r3, #12
  402cfc:	2000      	movs	r0, #0
  402cfe:	f8c9 3000 	str.w	r3, [r9]
  402d02:	b003      	add	sp, #12
  402d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d08:	f856 3c08 	ldr.w	r3, [r6, #-8]
  402d0c:	ebc3 0a08 	rsb	sl, r3, r8
  402d10:	f8da 3004 	ldr.w	r3, [sl, #4]
  402d14:	f023 0c03 	bic.w	ip, r3, #3
  402d18:	eb04 030c 	add.w	r3, r4, ip
  402d1c:	4293      	cmp	r3, r2
  402d1e:	dbbd      	blt.n	402c9c <_realloc_r+0x58>
  402d20:	4657      	mov	r7, sl
  402d22:	f8da 100c 	ldr.w	r1, [sl, #12]
  402d26:	f857 0f08 	ldr.w	r0, [r7, #8]!
  402d2a:	1f22      	subs	r2, r4, #4
  402d2c:	2a24      	cmp	r2, #36	; 0x24
  402d2e:	60c1      	str	r1, [r0, #12]
  402d30:	6088      	str	r0, [r1, #8]
  402d32:	f200 8117 	bhi.w	402f64 <_realloc_r+0x320>
  402d36:	2a13      	cmp	r2, #19
  402d38:	f240 8112 	bls.w	402f60 <_realloc_r+0x31c>
  402d3c:	6831      	ldr	r1, [r6, #0]
  402d3e:	f8ca 1008 	str.w	r1, [sl, #8]
  402d42:	6871      	ldr	r1, [r6, #4]
  402d44:	f8ca 100c 	str.w	r1, [sl, #12]
  402d48:	2a1b      	cmp	r2, #27
  402d4a:	f200 812b 	bhi.w	402fa4 <_realloc_r+0x360>
  402d4e:	3608      	adds	r6, #8
  402d50:	f10a 0210 	add.w	r2, sl, #16
  402d54:	6831      	ldr	r1, [r6, #0]
  402d56:	6011      	str	r1, [r2, #0]
  402d58:	6871      	ldr	r1, [r6, #4]
  402d5a:	6051      	str	r1, [r2, #4]
  402d5c:	68b1      	ldr	r1, [r6, #8]
  402d5e:	6091      	str	r1, [r2, #8]
  402d60:	463e      	mov	r6, r7
  402d62:	461c      	mov	r4, r3
  402d64:	46d0      	mov	r8, sl
  402d66:	1b63      	subs	r3, r4, r5
  402d68:	2b0f      	cmp	r3, #15
  402d6a:	d81d      	bhi.n	402da8 <_realloc_r+0x164>
  402d6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  402d70:	f003 0301 	and.w	r3, r3, #1
  402d74:	4323      	orrs	r3, r4
  402d76:	4444      	add	r4, r8
  402d78:	f8c8 3004 	str.w	r3, [r8, #4]
  402d7c:	6863      	ldr	r3, [r4, #4]
  402d7e:	f043 0301 	orr.w	r3, r3, #1
  402d82:	6063      	str	r3, [r4, #4]
  402d84:	4648      	mov	r0, r9
  402d86:	f7ff ff5b 	bl	402c40 <__malloc_unlock>
  402d8a:	4630      	mov	r0, r6
  402d8c:	b003      	add	sp, #12
  402d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d92:	f021 0103 	bic.w	r1, r1, #3
  402d96:	4421      	add	r1, r4
  402d98:	4291      	cmp	r1, r2
  402d9a:	db21      	blt.n	402de0 <_realloc_r+0x19c>
  402d9c:	68c3      	ldr	r3, [r0, #12]
  402d9e:	6882      	ldr	r2, [r0, #8]
  402da0:	460c      	mov	r4, r1
  402da2:	60d3      	str	r3, [r2, #12]
  402da4:	609a      	str	r2, [r3, #8]
  402da6:	e7de      	b.n	402d66 <_realloc_r+0x122>
  402da8:	f8d8 2004 	ldr.w	r2, [r8, #4]
  402dac:	eb08 0105 	add.w	r1, r8, r5
  402db0:	f002 0201 	and.w	r2, r2, #1
  402db4:	4315      	orrs	r5, r2
  402db6:	f043 0201 	orr.w	r2, r3, #1
  402dba:	440b      	add	r3, r1
  402dbc:	f8c8 5004 	str.w	r5, [r8, #4]
  402dc0:	604a      	str	r2, [r1, #4]
  402dc2:	685a      	ldr	r2, [r3, #4]
  402dc4:	f042 0201 	orr.w	r2, r2, #1
  402dc8:	3108      	adds	r1, #8
  402dca:	605a      	str	r2, [r3, #4]
  402dcc:	4648      	mov	r0, r9
  402dce:	f7ff f819 	bl	401e04 <_free_r>
  402dd2:	e7d7      	b.n	402d84 <_realloc_r+0x140>
  402dd4:	4611      	mov	r1, r2
  402dd6:	b003      	add	sp, #12
  402dd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ddc:	f7ff bb22 	b.w	402424 <_malloc_r>
  402de0:	f01e 0f01 	tst.w	lr, #1
  402de4:	f47f af5a 	bne.w	402c9c <_realloc_r+0x58>
  402de8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  402dec:	ebc3 0a08 	rsb	sl, r3, r8
  402df0:	f8da 3004 	ldr.w	r3, [sl, #4]
  402df4:	f023 0c03 	bic.w	ip, r3, #3
  402df8:	eb01 0e0c 	add.w	lr, r1, ip
  402dfc:	4596      	cmp	lr, r2
  402dfe:	db8b      	blt.n	402d18 <_realloc_r+0xd4>
  402e00:	68c3      	ldr	r3, [r0, #12]
  402e02:	6882      	ldr	r2, [r0, #8]
  402e04:	4657      	mov	r7, sl
  402e06:	60d3      	str	r3, [r2, #12]
  402e08:	609a      	str	r2, [r3, #8]
  402e0a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  402e0e:	f8da 300c 	ldr.w	r3, [sl, #12]
  402e12:	60cb      	str	r3, [r1, #12]
  402e14:	1f22      	subs	r2, r4, #4
  402e16:	2a24      	cmp	r2, #36	; 0x24
  402e18:	6099      	str	r1, [r3, #8]
  402e1a:	f200 8099 	bhi.w	402f50 <_realloc_r+0x30c>
  402e1e:	2a13      	cmp	r2, #19
  402e20:	d962      	bls.n	402ee8 <_realloc_r+0x2a4>
  402e22:	6833      	ldr	r3, [r6, #0]
  402e24:	f8ca 3008 	str.w	r3, [sl, #8]
  402e28:	6873      	ldr	r3, [r6, #4]
  402e2a:	f8ca 300c 	str.w	r3, [sl, #12]
  402e2e:	2a1b      	cmp	r2, #27
  402e30:	f200 80a0 	bhi.w	402f74 <_realloc_r+0x330>
  402e34:	3608      	adds	r6, #8
  402e36:	f10a 0310 	add.w	r3, sl, #16
  402e3a:	e056      	b.n	402eea <_realloc_r+0x2a6>
  402e3c:	f021 0b03 	bic.w	fp, r1, #3
  402e40:	44a3      	add	fp, r4
  402e42:	f105 0010 	add.w	r0, r5, #16
  402e46:	4583      	cmp	fp, r0
  402e48:	da59      	bge.n	402efe <_realloc_r+0x2ba>
  402e4a:	f01e 0f01 	tst.w	lr, #1
  402e4e:	f47f af25 	bne.w	402c9c <_realloc_r+0x58>
  402e52:	f856 1c08 	ldr.w	r1, [r6, #-8]
  402e56:	ebc1 0a08 	rsb	sl, r1, r8
  402e5a:	f8da 1004 	ldr.w	r1, [sl, #4]
  402e5e:	f021 0c03 	bic.w	ip, r1, #3
  402e62:	44e3      	add	fp, ip
  402e64:	4558      	cmp	r0, fp
  402e66:	f73f af57 	bgt.w	402d18 <_realloc_r+0xd4>
  402e6a:	4657      	mov	r7, sl
  402e6c:	f8da 100c 	ldr.w	r1, [sl, #12]
  402e70:	f857 0f08 	ldr.w	r0, [r7, #8]!
  402e74:	1f22      	subs	r2, r4, #4
  402e76:	2a24      	cmp	r2, #36	; 0x24
  402e78:	60c1      	str	r1, [r0, #12]
  402e7a:	6088      	str	r0, [r1, #8]
  402e7c:	f200 80b4 	bhi.w	402fe8 <_realloc_r+0x3a4>
  402e80:	2a13      	cmp	r2, #19
  402e82:	f240 80a5 	bls.w	402fd0 <_realloc_r+0x38c>
  402e86:	6831      	ldr	r1, [r6, #0]
  402e88:	f8ca 1008 	str.w	r1, [sl, #8]
  402e8c:	6871      	ldr	r1, [r6, #4]
  402e8e:	f8ca 100c 	str.w	r1, [sl, #12]
  402e92:	2a1b      	cmp	r2, #27
  402e94:	f200 80af 	bhi.w	402ff6 <_realloc_r+0x3b2>
  402e98:	3608      	adds	r6, #8
  402e9a:	f10a 0210 	add.w	r2, sl, #16
  402e9e:	6831      	ldr	r1, [r6, #0]
  402ea0:	6011      	str	r1, [r2, #0]
  402ea2:	6871      	ldr	r1, [r6, #4]
  402ea4:	6051      	str	r1, [r2, #4]
  402ea6:	68b1      	ldr	r1, [r6, #8]
  402ea8:	6091      	str	r1, [r2, #8]
  402eaa:	eb0a 0105 	add.w	r1, sl, r5
  402eae:	ebc5 020b 	rsb	r2, r5, fp
  402eb2:	f042 0201 	orr.w	r2, r2, #1
  402eb6:	6099      	str	r1, [r3, #8]
  402eb8:	604a      	str	r2, [r1, #4]
  402eba:	f8da 3004 	ldr.w	r3, [sl, #4]
  402ebe:	f003 0301 	and.w	r3, r3, #1
  402ec2:	431d      	orrs	r5, r3
  402ec4:	4648      	mov	r0, r9
  402ec6:	f8ca 5004 	str.w	r5, [sl, #4]
  402eca:	f7ff feb9 	bl	402c40 <__malloc_unlock>
  402ece:	4638      	mov	r0, r7
  402ed0:	e75c      	b.n	402d8c <_realloc_r+0x148>
  402ed2:	6833      	ldr	r3, [r6, #0]
  402ed4:	6003      	str	r3, [r0, #0]
  402ed6:	6873      	ldr	r3, [r6, #4]
  402ed8:	6043      	str	r3, [r0, #4]
  402eda:	2a1b      	cmp	r2, #27
  402edc:	d827      	bhi.n	402f2e <_realloc_r+0x2ea>
  402ede:	f100 0308 	add.w	r3, r0, #8
  402ee2:	f106 0208 	add.w	r2, r6, #8
  402ee6:	e6f2      	b.n	402cce <_realloc_r+0x8a>
  402ee8:	463b      	mov	r3, r7
  402eea:	6832      	ldr	r2, [r6, #0]
  402eec:	601a      	str	r2, [r3, #0]
  402eee:	6872      	ldr	r2, [r6, #4]
  402ef0:	605a      	str	r2, [r3, #4]
  402ef2:	68b2      	ldr	r2, [r6, #8]
  402ef4:	609a      	str	r2, [r3, #8]
  402ef6:	463e      	mov	r6, r7
  402ef8:	4674      	mov	r4, lr
  402efa:	46d0      	mov	r8, sl
  402efc:	e733      	b.n	402d66 <_realloc_r+0x122>
  402efe:	eb08 0105 	add.w	r1, r8, r5
  402f02:	ebc5 0b0b 	rsb	fp, r5, fp
  402f06:	f04b 0201 	orr.w	r2, fp, #1
  402f0a:	6099      	str	r1, [r3, #8]
  402f0c:	604a      	str	r2, [r1, #4]
  402f0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  402f12:	f003 0301 	and.w	r3, r3, #1
  402f16:	431d      	orrs	r5, r3
  402f18:	4648      	mov	r0, r9
  402f1a:	f846 5c04 	str.w	r5, [r6, #-4]
  402f1e:	f7ff fe8f 	bl	402c40 <__malloc_unlock>
  402f22:	4630      	mov	r0, r6
  402f24:	e732      	b.n	402d8c <_realloc_r+0x148>
  402f26:	4631      	mov	r1, r6
  402f28:	f7ff fe24 	bl	402b74 <memmove>
  402f2c:	e6d5      	b.n	402cda <_realloc_r+0x96>
  402f2e:	68b3      	ldr	r3, [r6, #8]
  402f30:	6083      	str	r3, [r0, #8]
  402f32:	68f3      	ldr	r3, [r6, #12]
  402f34:	60c3      	str	r3, [r0, #12]
  402f36:	2a24      	cmp	r2, #36	; 0x24
  402f38:	d028      	beq.n	402f8c <_realloc_r+0x348>
  402f3a:	f100 0310 	add.w	r3, r0, #16
  402f3e:	f106 0210 	add.w	r2, r6, #16
  402f42:	e6c4      	b.n	402cce <_realloc_r+0x8a>
  402f44:	f850 3c04 	ldr.w	r3, [r0, #-4]
  402f48:	f023 0303 	bic.w	r3, r3, #3
  402f4c:	441c      	add	r4, r3
  402f4e:	e70a      	b.n	402d66 <_realloc_r+0x122>
  402f50:	4631      	mov	r1, r6
  402f52:	4638      	mov	r0, r7
  402f54:	4674      	mov	r4, lr
  402f56:	46d0      	mov	r8, sl
  402f58:	f7ff fe0c 	bl	402b74 <memmove>
  402f5c:	463e      	mov	r6, r7
  402f5e:	e702      	b.n	402d66 <_realloc_r+0x122>
  402f60:	463a      	mov	r2, r7
  402f62:	e6f7      	b.n	402d54 <_realloc_r+0x110>
  402f64:	4631      	mov	r1, r6
  402f66:	4638      	mov	r0, r7
  402f68:	461c      	mov	r4, r3
  402f6a:	46d0      	mov	r8, sl
  402f6c:	f7ff fe02 	bl	402b74 <memmove>
  402f70:	463e      	mov	r6, r7
  402f72:	e6f8      	b.n	402d66 <_realloc_r+0x122>
  402f74:	68b3      	ldr	r3, [r6, #8]
  402f76:	f8ca 3010 	str.w	r3, [sl, #16]
  402f7a:	68f3      	ldr	r3, [r6, #12]
  402f7c:	f8ca 3014 	str.w	r3, [sl, #20]
  402f80:	2a24      	cmp	r2, #36	; 0x24
  402f82:	d01b      	beq.n	402fbc <_realloc_r+0x378>
  402f84:	3610      	adds	r6, #16
  402f86:	f10a 0318 	add.w	r3, sl, #24
  402f8a:	e7ae      	b.n	402eea <_realloc_r+0x2a6>
  402f8c:	6933      	ldr	r3, [r6, #16]
  402f8e:	6103      	str	r3, [r0, #16]
  402f90:	6973      	ldr	r3, [r6, #20]
  402f92:	6143      	str	r3, [r0, #20]
  402f94:	f106 0218 	add.w	r2, r6, #24
  402f98:	f100 0318 	add.w	r3, r0, #24
  402f9c:	e697      	b.n	402cce <_realloc_r+0x8a>
  402f9e:	bf00      	nop
  402fa0:	20000444 	.word	0x20000444
  402fa4:	68b1      	ldr	r1, [r6, #8]
  402fa6:	f8ca 1010 	str.w	r1, [sl, #16]
  402faa:	68f1      	ldr	r1, [r6, #12]
  402fac:	f8ca 1014 	str.w	r1, [sl, #20]
  402fb0:	2a24      	cmp	r2, #36	; 0x24
  402fb2:	d00f      	beq.n	402fd4 <_realloc_r+0x390>
  402fb4:	3610      	adds	r6, #16
  402fb6:	f10a 0218 	add.w	r2, sl, #24
  402fba:	e6cb      	b.n	402d54 <_realloc_r+0x110>
  402fbc:	6933      	ldr	r3, [r6, #16]
  402fbe:	f8ca 3018 	str.w	r3, [sl, #24]
  402fc2:	6973      	ldr	r3, [r6, #20]
  402fc4:	f8ca 301c 	str.w	r3, [sl, #28]
  402fc8:	3618      	adds	r6, #24
  402fca:	f10a 0320 	add.w	r3, sl, #32
  402fce:	e78c      	b.n	402eea <_realloc_r+0x2a6>
  402fd0:	463a      	mov	r2, r7
  402fd2:	e764      	b.n	402e9e <_realloc_r+0x25a>
  402fd4:	6932      	ldr	r2, [r6, #16]
  402fd6:	f8ca 2018 	str.w	r2, [sl, #24]
  402fda:	6972      	ldr	r2, [r6, #20]
  402fdc:	f8ca 201c 	str.w	r2, [sl, #28]
  402fe0:	3618      	adds	r6, #24
  402fe2:	f10a 0220 	add.w	r2, sl, #32
  402fe6:	e6b5      	b.n	402d54 <_realloc_r+0x110>
  402fe8:	4631      	mov	r1, r6
  402fea:	4638      	mov	r0, r7
  402fec:	9301      	str	r3, [sp, #4]
  402fee:	f7ff fdc1 	bl	402b74 <memmove>
  402ff2:	9b01      	ldr	r3, [sp, #4]
  402ff4:	e759      	b.n	402eaa <_realloc_r+0x266>
  402ff6:	68b1      	ldr	r1, [r6, #8]
  402ff8:	f8ca 1010 	str.w	r1, [sl, #16]
  402ffc:	68f1      	ldr	r1, [r6, #12]
  402ffe:	f8ca 1014 	str.w	r1, [sl, #20]
  403002:	2a24      	cmp	r2, #36	; 0x24
  403004:	d003      	beq.n	40300e <_realloc_r+0x3ca>
  403006:	3610      	adds	r6, #16
  403008:	f10a 0218 	add.w	r2, sl, #24
  40300c:	e747      	b.n	402e9e <_realloc_r+0x25a>
  40300e:	6932      	ldr	r2, [r6, #16]
  403010:	f8ca 2018 	str.w	r2, [sl, #24]
  403014:	6972      	ldr	r2, [r6, #20]
  403016:	f8ca 201c 	str.w	r2, [sl, #28]
  40301a:	3618      	adds	r6, #24
  40301c:	f10a 0220 	add.w	r2, sl, #32
  403020:	e73d      	b.n	402e9e <_realloc_r+0x25a>
  403022:	bf00      	nop

00403024 <_sbrk_r>:
  403024:	b538      	push	{r3, r4, r5, lr}
  403026:	4c07      	ldr	r4, [pc, #28]	; (403044 <_sbrk_r+0x20>)
  403028:	2300      	movs	r3, #0
  40302a:	4605      	mov	r5, r0
  40302c:	4608      	mov	r0, r1
  40302e:	6023      	str	r3, [r4, #0]
  403030:	f7fd feba 	bl	400da8 <_sbrk>
  403034:	1c43      	adds	r3, r0, #1
  403036:	d000      	beq.n	40303a <_sbrk_r+0x16>
  403038:	bd38      	pop	{r3, r4, r5, pc}
  40303a:	6823      	ldr	r3, [r4, #0]
  40303c:	2b00      	cmp	r3, #0
  40303e:	d0fb      	beq.n	403038 <_sbrk_r+0x14>
  403040:	602b      	str	r3, [r5, #0]
  403042:	bd38      	pop	{r3, r4, r5, pc}
  403044:	2000095c 	.word	0x2000095c

00403048 <__sread>:
  403048:	b510      	push	{r4, lr}
  40304a:	460c      	mov	r4, r1
  40304c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403050:	f000 f99a 	bl	403388 <_read_r>
  403054:	2800      	cmp	r0, #0
  403056:	db03      	blt.n	403060 <__sread+0x18>
  403058:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40305a:	4403      	add	r3, r0
  40305c:	6523      	str	r3, [r4, #80]	; 0x50
  40305e:	bd10      	pop	{r4, pc}
  403060:	89a3      	ldrh	r3, [r4, #12]
  403062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403066:	81a3      	strh	r3, [r4, #12]
  403068:	bd10      	pop	{r4, pc}
  40306a:	bf00      	nop

0040306c <__swrite>:
  40306c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403070:	4616      	mov	r6, r2
  403072:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403076:	461f      	mov	r7, r3
  403078:	05d3      	lsls	r3, r2, #23
  40307a:	460c      	mov	r4, r1
  40307c:	4605      	mov	r5, r0
  40307e:	d507      	bpl.n	403090 <__swrite+0x24>
  403080:	2200      	movs	r2, #0
  403082:	2302      	movs	r3, #2
  403084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403088:	f000 f968 	bl	40335c <_lseek_r>
  40308c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403094:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403098:	81a2      	strh	r2, [r4, #12]
  40309a:	463b      	mov	r3, r7
  40309c:	4632      	mov	r2, r6
  40309e:	4628      	mov	r0, r5
  4030a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4030a4:	f000 b814 	b.w	4030d0 <_write_r>

004030a8 <__sseek>:
  4030a8:	b510      	push	{r4, lr}
  4030aa:	460c      	mov	r4, r1
  4030ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4030b0:	f000 f954 	bl	40335c <_lseek_r>
  4030b4:	89a3      	ldrh	r3, [r4, #12]
  4030b6:	1c42      	adds	r2, r0, #1
  4030b8:	bf0e      	itee	eq
  4030ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4030be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4030c2:	6520      	strne	r0, [r4, #80]	; 0x50
  4030c4:	81a3      	strh	r3, [r4, #12]
  4030c6:	bd10      	pop	{r4, pc}

004030c8 <__sclose>:
  4030c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4030cc:	f000 b8cc 	b.w	403268 <_close_r>

004030d0 <_write_r>:
  4030d0:	b570      	push	{r4, r5, r6, lr}
  4030d2:	460d      	mov	r5, r1
  4030d4:	4c08      	ldr	r4, [pc, #32]	; (4030f8 <_write_r+0x28>)
  4030d6:	4611      	mov	r1, r2
  4030d8:	4606      	mov	r6, r0
  4030da:	461a      	mov	r2, r3
  4030dc:	4628      	mov	r0, r5
  4030de:	2300      	movs	r3, #0
  4030e0:	6023      	str	r3, [r4, #0]
  4030e2:	f7fd f871 	bl	4001c8 <_write>
  4030e6:	1c43      	adds	r3, r0, #1
  4030e8:	d000      	beq.n	4030ec <_write_r+0x1c>
  4030ea:	bd70      	pop	{r4, r5, r6, pc}
  4030ec:	6823      	ldr	r3, [r4, #0]
  4030ee:	2b00      	cmp	r3, #0
  4030f0:	d0fb      	beq.n	4030ea <_write_r+0x1a>
  4030f2:	6033      	str	r3, [r6, #0]
  4030f4:	bd70      	pop	{r4, r5, r6, pc}
  4030f6:	bf00      	nop
  4030f8:	2000095c 	.word	0x2000095c

004030fc <__swsetup_r>:
  4030fc:	b538      	push	{r3, r4, r5, lr}
  4030fe:	4b30      	ldr	r3, [pc, #192]	; (4031c0 <__swsetup_r+0xc4>)
  403100:	681b      	ldr	r3, [r3, #0]
  403102:	4605      	mov	r5, r0
  403104:	460c      	mov	r4, r1
  403106:	b113      	cbz	r3, 40310e <__swsetup_r+0x12>
  403108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40310a:	2a00      	cmp	r2, #0
  40310c:	d038      	beq.n	403180 <__swsetup_r+0x84>
  40310e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403112:	b293      	uxth	r3, r2
  403114:	0718      	lsls	r0, r3, #28
  403116:	d50c      	bpl.n	403132 <__swsetup_r+0x36>
  403118:	6920      	ldr	r0, [r4, #16]
  40311a:	b1a8      	cbz	r0, 403148 <__swsetup_r+0x4c>
  40311c:	f013 0201 	ands.w	r2, r3, #1
  403120:	d01e      	beq.n	403160 <__swsetup_r+0x64>
  403122:	6963      	ldr	r3, [r4, #20]
  403124:	2200      	movs	r2, #0
  403126:	425b      	negs	r3, r3
  403128:	61a3      	str	r3, [r4, #24]
  40312a:	60a2      	str	r2, [r4, #8]
  40312c:	b1f0      	cbz	r0, 40316c <__swsetup_r+0x70>
  40312e:	2000      	movs	r0, #0
  403130:	bd38      	pop	{r3, r4, r5, pc}
  403132:	06d9      	lsls	r1, r3, #27
  403134:	d53c      	bpl.n	4031b0 <__swsetup_r+0xb4>
  403136:	0758      	lsls	r0, r3, #29
  403138:	d426      	bmi.n	403188 <__swsetup_r+0x8c>
  40313a:	6920      	ldr	r0, [r4, #16]
  40313c:	f042 0308 	orr.w	r3, r2, #8
  403140:	81a3      	strh	r3, [r4, #12]
  403142:	b29b      	uxth	r3, r3
  403144:	2800      	cmp	r0, #0
  403146:	d1e9      	bne.n	40311c <__swsetup_r+0x20>
  403148:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40314c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403150:	d0e4      	beq.n	40311c <__swsetup_r+0x20>
  403152:	4628      	mov	r0, r5
  403154:	4621      	mov	r1, r4
  403156:	f7ff f919 	bl	40238c <__smakebuf_r>
  40315a:	89a3      	ldrh	r3, [r4, #12]
  40315c:	6920      	ldr	r0, [r4, #16]
  40315e:	e7dd      	b.n	40311c <__swsetup_r+0x20>
  403160:	0799      	lsls	r1, r3, #30
  403162:	bf58      	it	pl
  403164:	6962      	ldrpl	r2, [r4, #20]
  403166:	60a2      	str	r2, [r4, #8]
  403168:	2800      	cmp	r0, #0
  40316a:	d1e0      	bne.n	40312e <__swsetup_r+0x32>
  40316c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403170:	061a      	lsls	r2, r3, #24
  403172:	d5dd      	bpl.n	403130 <__swsetup_r+0x34>
  403174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403178:	81a3      	strh	r3, [r4, #12]
  40317a:	f04f 30ff 	mov.w	r0, #4294967295
  40317e:	bd38      	pop	{r3, r4, r5, pc}
  403180:	4618      	mov	r0, r3
  403182:	f7fe fdd3 	bl	401d2c <__sinit>
  403186:	e7c2      	b.n	40310e <__swsetup_r+0x12>
  403188:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40318a:	b151      	cbz	r1, 4031a2 <__swsetup_r+0xa6>
  40318c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403190:	4299      	cmp	r1, r3
  403192:	d004      	beq.n	40319e <__swsetup_r+0xa2>
  403194:	4628      	mov	r0, r5
  403196:	f7fe fe35 	bl	401e04 <_free_r>
  40319a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40319e:	2300      	movs	r3, #0
  4031a0:	6323      	str	r3, [r4, #48]	; 0x30
  4031a2:	2300      	movs	r3, #0
  4031a4:	6920      	ldr	r0, [r4, #16]
  4031a6:	6063      	str	r3, [r4, #4]
  4031a8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4031ac:	6020      	str	r0, [r4, #0]
  4031ae:	e7c5      	b.n	40313c <__swsetup_r+0x40>
  4031b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4031b4:	2309      	movs	r3, #9
  4031b6:	602b      	str	r3, [r5, #0]
  4031b8:	f04f 30ff 	mov.w	r0, #4294967295
  4031bc:	81a2      	strh	r2, [r4, #12]
  4031be:	bd38      	pop	{r3, r4, r5, pc}
  4031c0:	20000440 	.word	0x20000440

004031c4 <__register_exitproc>:
  4031c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4031c8:	4c25      	ldr	r4, [pc, #148]	; (403260 <__register_exitproc+0x9c>)
  4031ca:	6825      	ldr	r5, [r4, #0]
  4031cc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4031d0:	4606      	mov	r6, r0
  4031d2:	4688      	mov	r8, r1
  4031d4:	4692      	mov	sl, r2
  4031d6:	4699      	mov	r9, r3
  4031d8:	b3c4      	cbz	r4, 40324c <__register_exitproc+0x88>
  4031da:	6860      	ldr	r0, [r4, #4]
  4031dc:	281f      	cmp	r0, #31
  4031de:	dc17      	bgt.n	403210 <__register_exitproc+0x4c>
  4031e0:	1c43      	adds	r3, r0, #1
  4031e2:	b176      	cbz	r6, 403202 <__register_exitproc+0x3e>
  4031e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4031e8:	2201      	movs	r2, #1
  4031ea:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4031ee:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4031f2:	4082      	lsls	r2, r0
  4031f4:	4311      	orrs	r1, r2
  4031f6:	2e02      	cmp	r6, #2
  4031f8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4031fc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403200:	d01e      	beq.n	403240 <__register_exitproc+0x7c>
  403202:	3002      	adds	r0, #2
  403204:	6063      	str	r3, [r4, #4]
  403206:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40320a:	2000      	movs	r0, #0
  40320c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403210:	4b14      	ldr	r3, [pc, #80]	; (403264 <__register_exitproc+0xa0>)
  403212:	b303      	cbz	r3, 403256 <__register_exitproc+0x92>
  403214:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403218:	f7ff f8fc 	bl	402414 <malloc>
  40321c:	4604      	mov	r4, r0
  40321e:	b1d0      	cbz	r0, 403256 <__register_exitproc+0x92>
  403220:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403224:	2700      	movs	r7, #0
  403226:	e880 0088 	stmia.w	r0, {r3, r7}
  40322a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40322e:	4638      	mov	r0, r7
  403230:	2301      	movs	r3, #1
  403232:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403236:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40323a:	2e00      	cmp	r6, #0
  40323c:	d0e1      	beq.n	403202 <__register_exitproc+0x3e>
  40323e:	e7d1      	b.n	4031e4 <__register_exitproc+0x20>
  403240:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403244:	430a      	orrs	r2, r1
  403246:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40324a:	e7da      	b.n	403202 <__register_exitproc+0x3e>
  40324c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403250:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403254:	e7c1      	b.n	4031da <__register_exitproc+0x16>
  403256:	f04f 30ff 	mov.w	r0, #4294967295
  40325a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40325e:	bf00      	nop
  403260:	0040355c 	.word	0x0040355c
  403264:	00402415 	.word	0x00402415

00403268 <_close_r>:
  403268:	b538      	push	{r3, r4, r5, lr}
  40326a:	4c07      	ldr	r4, [pc, #28]	; (403288 <_close_r+0x20>)
  40326c:	2300      	movs	r3, #0
  40326e:	4605      	mov	r5, r0
  403270:	4608      	mov	r0, r1
  403272:	6023      	str	r3, [r4, #0]
  403274:	f7fd fdb2 	bl	400ddc <_close>
  403278:	1c43      	adds	r3, r0, #1
  40327a:	d000      	beq.n	40327e <_close_r+0x16>
  40327c:	bd38      	pop	{r3, r4, r5, pc}
  40327e:	6823      	ldr	r3, [r4, #0]
  403280:	2b00      	cmp	r3, #0
  403282:	d0fb      	beq.n	40327c <_close_r+0x14>
  403284:	602b      	str	r3, [r5, #0]
  403286:	bd38      	pop	{r3, r4, r5, pc}
  403288:	2000095c 	.word	0x2000095c

0040328c <_fclose_r>:
  40328c:	2900      	cmp	r1, #0
  40328e:	d03d      	beq.n	40330c <_fclose_r+0x80>
  403290:	b570      	push	{r4, r5, r6, lr}
  403292:	4605      	mov	r5, r0
  403294:	460c      	mov	r4, r1
  403296:	b108      	cbz	r0, 40329c <_fclose_r+0x10>
  403298:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40329a:	b37b      	cbz	r3, 4032fc <_fclose_r+0x70>
  40329c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032a0:	b90b      	cbnz	r3, 4032a6 <_fclose_r+0x1a>
  4032a2:	2000      	movs	r0, #0
  4032a4:	bd70      	pop	{r4, r5, r6, pc}
  4032a6:	4621      	mov	r1, r4
  4032a8:	4628      	mov	r0, r5
  4032aa:	f7fe fc07 	bl	401abc <__sflush_r>
  4032ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4032b0:	4606      	mov	r6, r0
  4032b2:	b133      	cbz	r3, 4032c2 <_fclose_r+0x36>
  4032b4:	69e1      	ldr	r1, [r4, #28]
  4032b6:	4628      	mov	r0, r5
  4032b8:	4798      	blx	r3
  4032ba:	2800      	cmp	r0, #0
  4032bc:	bfb8      	it	lt
  4032be:	f04f 36ff 	movlt.w	r6, #4294967295
  4032c2:	89a3      	ldrh	r3, [r4, #12]
  4032c4:	061b      	lsls	r3, r3, #24
  4032c6:	d41c      	bmi.n	403302 <_fclose_r+0x76>
  4032c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4032ca:	b141      	cbz	r1, 4032de <_fclose_r+0x52>
  4032cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4032d0:	4299      	cmp	r1, r3
  4032d2:	d002      	beq.n	4032da <_fclose_r+0x4e>
  4032d4:	4628      	mov	r0, r5
  4032d6:	f7fe fd95 	bl	401e04 <_free_r>
  4032da:	2300      	movs	r3, #0
  4032dc:	6323      	str	r3, [r4, #48]	; 0x30
  4032de:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4032e0:	b121      	cbz	r1, 4032ec <_fclose_r+0x60>
  4032e2:	4628      	mov	r0, r5
  4032e4:	f7fe fd8e 	bl	401e04 <_free_r>
  4032e8:	2300      	movs	r3, #0
  4032ea:	6463      	str	r3, [r4, #68]	; 0x44
  4032ec:	f7fe fd24 	bl	401d38 <__sfp_lock_acquire>
  4032f0:	2300      	movs	r3, #0
  4032f2:	81a3      	strh	r3, [r4, #12]
  4032f4:	f7fe fd22 	bl	401d3c <__sfp_lock_release>
  4032f8:	4630      	mov	r0, r6
  4032fa:	bd70      	pop	{r4, r5, r6, pc}
  4032fc:	f7fe fd16 	bl	401d2c <__sinit>
  403300:	e7cc      	b.n	40329c <_fclose_r+0x10>
  403302:	6921      	ldr	r1, [r4, #16]
  403304:	4628      	mov	r0, r5
  403306:	f7fe fd7d 	bl	401e04 <_free_r>
  40330a:	e7dd      	b.n	4032c8 <_fclose_r+0x3c>
  40330c:	2000      	movs	r0, #0
  40330e:	4770      	bx	lr

00403310 <_fstat_r>:
  403310:	b538      	push	{r3, r4, r5, lr}
  403312:	460b      	mov	r3, r1
  403314:	4c07      	ldr	r4, [pc, #28]	; (403334 <_fstat_r+0x24>)
  403316:	4605      	mov	r5, r0
  403318:	4611      	mov	r1, r2
  40331a:	4618      	mov	r0, r3
  40331c:	2300      	movs	r3, #0
  40331e:	6023      	str	r3, [r4, #0]
  403320:	f7fd fd60 	bl	400de4 <_fstat>
  403324:	1c43      	adds	r3, r0, #1
  403326:	d000      	beq.n	40332a <_fstat_r+0x1a>
  403328:	bd38      	pop	{r3, r4, r5, pc}
  40332a:	6823      	ldr	r3, [r4, #0]
  40332c:	2b00      	cmp	r3, #0
  40332e:	d0fb      	beq.n	403328 <_fstat_r+0x18>
  403330:	602b      	str	r3, [r5, #0]
  403332:	bd38      	pop	{r3, r4, r5, pc}
  403334:	2000095c 	.word	0x2000095c

00403338 <_isatty_r>:
  403338:	b538      	push	{r3, r4, r5, lr}
  40333a:	4c07      	ldr	r4, [pc, #28]	; (403358 <_isatty_r+0x20>)
  40333c:	2300      	movs	r3, #0
  40333e:	4605      	mov	r5, r0
  403340:	4608      	mov	r0, r1
  403342:	6023      	str	r3, [r4, #0]
  403344:	f7fd fd54 	bl	400df0 <_isatty>
  403348:	1c43      	adds	r3, r0, #1
  40334a:	d000      	beq.n	40334e <_isatty_r+0x16>
  40334c:	bd38      	pop	{r3, r4, r5, pc}
  40334e:	6823      	ldr	r3, [r4, #0]
  403350:	2b00      	cmp	r3, #0
  403352:	d0fb      	beq.n	40334c <_isatty_r+0x14>
  403354:	602b      	str	r3, [r5, #0]
  403356:	bd38      	pop	{r3, r4, r5, pc}
  403358:	2000095c 	.word	0x2000095c

0040335c <_lseek_r>:
  40335c:	b570      	push	{r4, r5, r6, lr}
  40335e:	460d      	mov	r5, r1
  403360:	4c08      	ldr	r4, [pc, #32]	; (403384 <_lseek_r+0x28>)
  403362:	4611      	mov	r1, r2
  403364:	4606      	mov	r6, r0
  403366:	461a      	mov	r2, r3
  403368:	4628      	mov	r0, r5
  40336a:	2300      	movs	r3, #0
  40336c:	6023      	str	r3, [r4, #0]
  40336e:	f7fd fd41 	bl	400df4 <_lseek>
  403372:	1c43      	adds	r3, r0, #1
  403374:	d000      	beq.n	403378 <_lseek_r+0x1c>
  403376:	bd70      	pop	{r4, r5, r6, pc}
  403378:	6823      	ldr	r3, [r4, #0]
  40337a:	2b00      	cmp	r3, #0
  40337c:	d0fb      	beq.n	403376 <_lseek_r+0x1a>
  40337e:	6033      	str	r3, [r6, #0]
  403380:	bd70      	pop	{r4, r5, r6, pc}
  403382:	bf00      	nop
  403384:	2000095c 	.word	0x2000095c

00403388 <_read_r>:
  403388:	b570      	push	{r4, r5, r6, lr}
  40338a:	460d      	mov	r5, r1
  40338c:	4c08      	ldr	r4, [pc, #32]	; (4033b0 <_read_r+0x28>)
  40338e:	4611      	mov	r1, r2
  403390:	4606      	mov	r6, r0
  403392:	461a      	mov	r2, r3
  403394:	4628      	mov	r0, r5
  403396:	2300      	movs	r3, #0
  403398:	6023      	str	r3, [r4, #0]
  40339a:	f7fc fef7 	bl	40018c <_read>
  40339e:	1c43      	adds	r3, r0, #1
  4033a0:	d000      	beq.n	4033a4 <_read_r+0x1c>
  4033a2:	bd70      	pop	{r4, r5, r6, pc}
  4033a4:	6823      	ldr	r3, [r4, #0]
  4033a6:	2b00      	cmp	r3, #0
  4033a8:	d0fb      	beq.n	4033a2 <_read_r+0x1a>
  4033aa:	6033      	str	r3, [r6, #0]
  4033ac:	bd70      	pop	{r4, r5, r6, pc}
  4033ae:	bf00      	nop
  4033b0:	2000095c 	.word	0x2000095c
  4033b4:	00000001 	.word	0x00000001
  4033b8:	00000002 	.word	0x00000002
  4033bc:	00000004 	.word	0x00000004
  4033c0:	00000008 	.word	0x00000008
  4033c4:	00000010 	.word	0x00000010
  4033c8:	00000020 	.word	0x00000020
  4033cc:	00000040 	.word	0x00000040
  4033d0:	00000080 	.word	0x00000080
  4033d4:	00000100 	.word	0x00000100
  4033d8:	00000200 	.word	0x00000200
  4033dc:	00000400 	.word	0x00000400
  4033e0:	63696e49 	.word	0x63696e49
  4033e4:	646e6169 	.word	0x646e6169
  4033e8:	654c206f 	.word	0x654c206f
  4033ec:	72757469 	.word	0x72757469
  4033f0:	6f642061 	.word	0x6f642061
  4033f4:	6e655320 	.word	0x6e655320
  4033f8:	0d726f73 	.word	0x0d726f73
  4033fc:	0000000a 	.word	0x0000000a
  403400:	63657845 	.word	0x63657845
  403404:	6e617475 	.word	0x6e617475
  403408:	4d206f64 	.word	0x4d206f64
  40340c:	61686c61 	.word	0x61686c61
  403410:	20656420 	.word	0x20656420
  403414:	746e6f43 	.word	0x746e6f43
  403418:	656c6f72 	.word	0x656c6f72
  40341c:	00000a0d 	.word	0x00000a0d
  403420:	736e6553 	.word	0x736e6553
  403424:	4920726f 	.word	0x4920726f
  403428:	0d205253 	.word	0x0d205253
  40342c:	0000000a 	.word	0x0000000a
  403430:	656d6954 	.word	0x656d6954
  403434:	65532072 	.word	0x65532072
  403438:	726f736e 	.word	0x726f736e
  40343c:	00000a0d 	.word	0x00000a0d
  403440:	656d6954 	.word	0x656d6954
  403444:	6f432072 	.word	0x6f432072
  403448:	6461746e 	.word	0x6461746e
  40344c:	0a0d726f 	.word	0x0a0d726f
  403450:	00000000 	.word	0x00000000
  403454:	656d6954 	.word	0x656d6954
  403458:	20312072 	.word	0x20312072
  40345c:	746e6f43 	.word	0x746e6f43
  403460:	726f6461 	.word	0x726f6461
  403464:	00000a0d 	.word	0x00000a0d
  403468:	656d6954 	.word	0x656d6954
  40346c:	20322072 	.word	0x20322072
  403470:	746e6f43 	.word	0x746e6f43
  403474:	726f6461 	.word	0x726f6461
  403478:	00000a0d 	.word	0x00000a0d
  40347c:	656d6954 	.word	0x656d6954
  403480:	20342072 	.word	0x20342072
  403484:	746e6f43 	.word	0x746e6f43
  403488:	726f6461 	.word	0x726f6461
  40348c:	00000a0d 	.word	0x00000a0d
  403490:	656d6954 	.word	0x656d6954
  403494:	20352072 	.word	0x20352072
  403498:	746e6f43 	.word	0x746e6f43
  40349c:	726f6461 	.word	0x726f6461
  4034a0:	00000a0d 	.word	0x00000a0d
  4034a4:	656d6954 	.word	0x656d6954
  4034a8:	20302072 	.word	0x20302072
  4034ac:	666e6f43 	.word	0x666e6f43
  4034b0:	72756769 	.word	0x72756769
  4034b4:	206f6461 	.word	0x206f6461
  4034b8:	61726170 	.word	0x61726170
  4034bc:	30303120 	.word	0x30303120
  4034c0:	0a0d736d 	.word	0x0a0d736d
  4034c4:	00000000 	.word	0x00000000
  4034c8:	656d6954 	.word	0x656d6954
  4034cc:	20312072 	.word	0x20312072
  4034d0:	666e6f43 	.word	0x666e6f43
  4034d4:	72756769 	.word	0x72756769
  4034d8:	206f6461 	.word	0x206f6461
  4034dc:	61726170 	.word	0x61726170
  4034e0:	75303120 	.word	0x75303120
  4034e4:	000a0d73 	.word	0x000a0d73
  4034e8:	666e6f43 	.word	0x666e6f43
  4034ec:	72756769 	.word	0x72756769
  4034f0:	6f616361 	.word	0x6f616361
  4034f4:	6e655320 	.word	0x6e655320
  4034f8:	20726f73 	.word	0x20726f73
  4034fc:	20525349 	.word	0x20525349
  403500:	00000a0d 	.word	0x00000a0d
  403504:	61647055 	.word	0x61647055
  403508:	44206574 	.word	0x44206574
  40350c:	21797475 	.word	0x21797475
  403510:	00000a0d 	.word	0x00000a0d
  403514:	74747542 	.word	0x74747542
  403518:	4c206e6f 	.word	0x4c206e6f
  40351c:	20746665 	.word	0x20746665
  403520:	20525349 	.word	0x20525349
  403524:	00000a0d 	.word	0x00000a0d
  403528:	74747542 	.word	0x74747542
  40352c:	52206e6f 	.word	0x52206e6f
  403530:	74686769 	.word	0x74686769
  403534:	52534920 	.word	0x52534920
  403538:	000a0d20 	.word	0x000a0d20
  40353c:	63696e49 	.word	0x63696e49
  403540:	696c6169 	.word	0x696c6169
  403544:	676e697a 	.word	0x676e697a
  403548:	61654220 	.word	0x61654220
  40354c:	6142206d 	.word	0x6142206d
  403550:	0a0d6c6c 	.word	0x0a0d6c6c
  403554:	00000000 	.word	0x00000000
  403558:	00000043 	.word	0x00000043

0040355c <_global_impure_ptr>:
  40355c:	20000018                                ... 

00403560 <_init>:
  403560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403562:	bf00      	nop
  403564:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403566:	bc08      	pop	{r3}
  403568:	469e      	mov	lr, r3
  40356a:	4770      	bx	lr

0040356c <__init_array_start>:
  40356c:	00401a9d 	.word	0x00401a9d

00403570 <__frame_dummy_init_array_entry>:
  403570:	004000f1                                ..@.

00403574 <_fini>:
  403574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403576:	bf00      	nop
  403578:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40357a:	bc08      	pop	{r3}
  40357c:	469e      	mov	lr, r3
  40357e:	4770      	bx	lr

00403580 <__fini_array_start>:
  403580:	004000cd 	.word	0x004000cd
