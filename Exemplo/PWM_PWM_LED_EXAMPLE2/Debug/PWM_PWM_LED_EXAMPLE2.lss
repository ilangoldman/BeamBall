
PWM_PWM_LED_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e90  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00403e90  00403e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a94  20000000  00403e98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000f8  20000a94  0040492c  00020a94  2**2
                  ALLOC
  4 .stack        00000804  20000b8c  00404a24  00020a94  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020a94  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020abd  2**0
                  CONTENTS, READONLY
  7 .debug_info   000119ab  00000000  00000000  00020b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002914  00000000  00000000  000324c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000037e3  00000000  00000000  00034dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000830  00000000  00000000  000385b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000770  00000000  00000000  00038de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000ff9d  00000000  00000000  00039558  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a431  00000000  00000000  000494f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0003e2d9  00000000  00000000  00053926  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001dac  00000000  00000000  00091c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	90 13 00 20 61 09 40 00 5f 09 40 00 5f 09 40 00     ... a.@._.@._.@.
  400010:	5f 09 40 00 5f 09 40 00 5f 09 40 00 00 00 00 00     _.@._.@._.@.....
	...
  40002c:	5f 09 40 00 5f 09 40 00 00 00 00 00 5f 09 40 00     _.@._.@....._.@.
  40003c:	5f 09 40 00 5f 09 40 00 5f 09 40 00 5f 09 40 00     _.@._.@._.@._.@.
  40004c:	5f 09 40 00 5f 09 40 00 5f 09 40 00 5f 09 40 00     _.@._.@._.@._.@.
  40005c:	5f 09 40 00 5f 09 40 00 5f 09 40 00 5f 09 40 00     _.@._.@._.@._.@.
  40006c:	71 06 40 00 85 06 40 00 99 06 40 00 5f 09 40 00     q.@...@...@._.@.
  40007c:	5f 09 40 00 5f 09 40 00 5f 09 40 00 5f 09 40 00     _.@._.@._.@._.@.
  40008c:	5f 09 40 00 5f 09 40 00 5f 09 40 00 5f 09 40 00     _.@._.@._.@._.@.
  40009c:	5f 09 40 00 5f 09 40 00 5f 09 40 00 5f 09 40 00     _.@._.@._.@._.@.
  4000ac:	5f 09 40 00 5f 09 40 00 5f 09 40 00 5f 09 40 00     _.@._.@._.@._.@.
  4000bc:	91 0c 40 00 5f 09 40 00                             ..@._.@.

004000c4 <__do_global_dtors_aux>:
  4000c4:	b510      	push	{r4, lr}
  4000c6:	4c05      	ldr	r4, [pc, #20]	; (4000dc <__do_global_dtors_aux+0x18>)
  4000c8:	7823      	ldrb	r3, [r4, #0]
  4000ca:	b933      	cbnz	r3, 4000da <__do_global_dtors_aux+0x16>
  4000cc:	4b04      	ldr	r3, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x1c>)
  4000ce:	b113      	cbz	r3, 4000d6 <__do_global_dtors_aux+0x12>
  4000d0:	4804      	ldr	r0, [pc, #16]	; (4000e4 <__do_global_dtors_aux+0x20>)
  4000d2:	f3af 8000 	nop.w
  4000d6:	2301      	movs	r3, #1
  4000d8:	7023      	strb	r3, [r4, #0]
  4000da:	bd10      	pop	{r4, pc}
  4000dc:	20000a94 	.word	0x20000a94
  4000e0:	00000000 	.word	0x00000000
  4000e4:	00403e98 	.word	0x00403e98

004000e8 <frame_dummy>:
  4000e8:	4b0c      	ldr	r3, [pc, #48]	; (40011c <frame_dummy+0x34>)
  4000ea:	b143      	cbz	r3, 4000fe <frame_dummy+0x16>
  4000ec:	480c      	ldr	r0, [pc, #48]	; (400120 <frame_dummy+0x38>)
  4000ee:	b510      	push	{r4, lr}
  4000f0:	490c      	ldr	r1, [pc, #48]	; (400124 <frame_dummy+0x3c>)
  4000f2:	f3af 8000 	nop.w
  4000f6:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x40>)
  4000f8:	6803      	ldr	r3, [r0, #0]
  4000fa:	b923      	cbnz	r3, 400106 <frame_dummy+0x1e>
  4000fc:	bd10      	pop	{r4, pc}
  4000fe:	480a      	ldr	r0, [pc, #40]	; (400128 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b933      	cbnz	r3, 400112 <frame_dummy+0x2a>
  400104:	4770      	bx	lr
  400106:	4b09      	ldr	r3, [pc, #36]	; (40012c <frame_dummy+0x44>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0f7      	beq.n	4000fc <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	4b06      	ldr	r3, [pc, #24]	; (40012c <frame_dummy+0x44>)
  400114:	2b00      	cmp	r3, #0
  400116:	d0f5      	beq.n	400104 <frame_dummy+0x1c>
  400118:	4718      	bx	r3
  40011a:	bf00      	nop
  40011c:	00000000 	.word	0x00000000
  400120:	00403e98 	.word	0x00403e98
  400124:	20000a98 	.word	0x20000a98
  400128:	00403e98 	.word	0x00403e98
  40012c:	00000000 	.word	0x00000000

00400130 <sysclk_init>:
{
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400130:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400132:	480e      	ldr	r0, [pc, #56]	; (40016c <sysclk_init+0x3c>)
  400134:	4b0e      	ldr	r3, [pc, #56]	; (400170 <sysclk_init+0x40>)
  400136:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400138:	213e      	movs	r1, #62	; 0x3e
  40013a:	2000      	movs	r0, #0
  40013c:	4b0d      	ldr	r3, [pc, #52]	; (400174 <sysclk_init+0x44>)
  40013e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400140:	4c0d      	ldr	r4, [pc, #52]	; (400178 <sysclk_init+0x48>)
  400142:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400144:	2800      	cmp	r0, #0
  400146:	d0fc      	beq.n	400142 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400148:	4b0c      	ldr	r3, [pc, #48]	; (40017c <sysclk_init+0x4c>)
  40014a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40014c:	4a0c      	ldr	r2, [pc, #48]	; (400180 <sysclk_init+0x50>)
  40014e:	4b0d      	ldr	r3, [pc, #52]	; (400184 <sysclk_init+0x54>)
  400150:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400152:	4c0d      	ldr	r4, [pc, #52]	; (400188 <sysclk_init+0x58>)
  400154:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400156:	2800      	cmp	r0, #0
  400158:	d0fc      	beq.n	400154 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40015a:	2010      	movs	r0, #16
  40015c:	4b0b      	ldr	r3, [pc, #44]	; (40018c <sysclk_init+0x5c>)
  40015e:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400160:	4b0b      	ldr	r3, [pc, #44]	; (400190 <sysclk_init+0x60>)
  400162:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400164:	4801      	ldr	r0, [pc, #4]	; (40016c <sysclk_init+0x3c>)
  400166:	4b02      	ldr	r3, [pc, #8]	; (400170 <sysclk_init+0x40>)
  400168:	4798      	blx	r3
  40016a:	bd10      	pop	{r4, pc}
  40016c:	02dc6c00 	.word	0x02dc6c00
  400170:	200000a1 	.word	0x200000a1
  400174:	00400711 	.word	0x00400711
  400178:	00400765 	.word	0x00400765
  40017c:	00400775 	.word	0x00400775
  400180:	20073f01 	.word	0x20073f01
  400184:	400e0400 	.word	0x400e0400
  400188:	00400785 	.word	0x00400785
  40018c:	004006ad 	.word	0x004006ad
  400190:	004009f9 	.word	0x004009f9

00400194 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400198:	b980      	cbnz	r0, 4001bc <_read+0x28>
  40019a:	460c      	mov	r4, r1
  40019c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2a00      	cmp	r2, #0
  4001a0:	dd0f      	ble.n	4001c2 <_read+0x2e>
  4001a2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001a4:	4e08      	ldr	r6, [pc, #32]	; (4001c8 <_read+0x34>)
  4001a6:	4d09      	ldr	r5, [pc, #36]	; (4001cc <_read+0x38>)
  4001a8:	6830      	ldr	r0, [r6, #0]
  4001aa:	4621      	mov	r1, r4
  4001ac:	682b      	ldr	r3, [r5, #0]
  4001ae:	4798      	blx	r3
		ptr++;
  4001b0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001b2:	42bc      	cmp	r4, r7
  4001b4:	d1f8      	bne.n	4001a8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001b6:	4640      	mov	r0, r8
  4001b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001bc:	f04f 38ff 	mov.w	r8, #4294967295
  4001c0:	e7f9      	b.n	4001b6 <_read+0x22>
	for (; len > 0; --len) {
  4001c2:	4680      	mov	r8, r0
  4001c4:	e7f7      	b.n	4001b6 <_read+0x22>
  4001c6:	bf00      	nop
  4001c8:	20000b70 	.word	0x20000b70
  4001cc:	20000b68 	.word	0x20000b68

004001d0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001d0:	3801      	subs	r0, #1
  4001d2:	2802      	cmp	r0, #2
  4001d4:	d815      	bhi.n	400202 <_write+0x32>
{
  4001d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001da:	460e      	mov	r6, r1
  4001dc:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4001de:	b19a      	cbz	r2, 400208 <_write+0x38>
  4001e0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001e2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40021c <_write+0x4c>
  4001e6:	4f0c      	ldr	r7, [pc, #48]	; (400218 <_write+0x48>)
  4001e8:	f8d8 0000 	ldr.w	r0, [r8]
  4001ec:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001f0:	683b      	ldr	r3, [r7, #0]
  4001f2:	4798      	blx	r3
  4001f4:	2800      	cmp	r0, #0
  4001f6:	db0a      	blt.n	40020e <_write+0x3e>
  4001f8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4001fa:	3c01      	subs	r4, #1
  4001fc:	d1f4      	bne.n	4001e8 <_write+0x18>
  4001fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400202:	f04f 30ff 	mov.w	r0, #4294967295
  400206:	4770      	bx	lr
	for (; len != 0; --len) {
  400208:	4610      	mov	r0, r2
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40020e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400216:	bf00      	nop
  400218:	20000b6c 	.word	0x20000b6c
  40021c:	20000b70 	.word	0x20000b70

00400220 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400220:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400222:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400226:	4b14      	ldr	r3, [pc, #80]	; (400278 <board_init+0x58>)
  400228:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40022a:	200b      	movs	r0, #11
  40022c:	4c13      	ldr	r4, [pc, #76]	; (40027c <board_init+0x5c>)
  40022e:	47a0      	blx	r4
  400230:	200c      	movs	r0, #12
  400232:	47a0      	blx	r4
  400234:	200d      	movs	r0, #13
  400236:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400238:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40023c:	2017      	movs	r0, #23
  40023e:	4c10      	ldr	r4, [pc, #64]	; (400280 <board_init+0x60>)
  400240:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  400242:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400246:	202e      	movs	r0, #46	; 0x2e
  400248:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  40024a:	490e      	ldr	r1, [pc, #56]	; (400284 <board_init+0x64>)
  40024c:	200f      	movs	r0, #15
  40024e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400250:	490d      	ldr	r1, [pc, #52]	; (400288 <board_init+0x68>)
  400252:	2010      	movs	r0, #16
  400254:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  400256:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40025a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  40025e:	480b      	ldr	r0, [pc, #44]	; (40028c <board_init+0x6c>)
  400260:	4b0b      	ldr	r3, [pc, #44]	; (400290 <board_init+0x70>)
  400262:	4798      	blx	r3
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
#endif

#ifdef CONF_BOARD_PWM_LED0
	/* Configure PWM LED0 pin */
	gpio_configure_pin(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
  400264:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400268:	2017      	movs	r0, #23
  40026a:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_PWM_LED1
	/* Configure PWM LED1 pin */
	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
  40026c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400270:	202e      	movs	r0, #46	; 0x2e
  400272:	47a0      	blx	r4
  400274:	bd10      	pop	{r4, pc}
  400276:	bf00      	nop
  400278:	400e1450 	.word	0x400e1450
  40027c:	00400795 	.word	0x00400795
  400280:	004003b9 	.word	0x004003b9
  400284:	28000079 	.word	0x28000079
  400288:	28000059 	.word	0x28000059
  40028c:	400e0e00 	.word	0x400e0e00
  400290:	004004d9 	.word	0x004004d9

00400294 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400294:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400296:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40029a:	d039      	beq.n	400310 <pio_set_peripheral+0x7c>
  40029c:	d813      	bhi.n	4002c6 <pio_set_peripheral+0x32>
  40029e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4002a2:	d025      	beq.n	4002f0 <pio_set_peripheral+0x5c>
  4002a4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4002a8:	d10a      	bne.n	4002c0 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4002ac:	4313      	orrs	r3, r2
  4002ae:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002b0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4002b2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4002b4:	400b      	ands	r3, r1
  4002b6:	ea23 0302 	bic.w	r3, r3, r2
  4002ba:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4002bc:	6042      	str	r2, [r0, #4]
  4002be:	4770      	bx	lr
	switch (ul_type) {
  4002c0:	2900      	cmp	r1, #0
  4002c2:	d1fb      	bne.n	4002bc <pio_set_peripheral+0x28>
  4002c4:	4770      	bx	lr
  4002c6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4002ca:	d020      	beq.n	40030e <pio_set_peripheral+0x7a>
  4002cc:	d809      	bhi.n	4002e2 <pio_set_peripheral+0x4e>
  4002ce:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4002d2:	d1f3      	bne.n	4002bc <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4002d6:	4313      	orrs	r3, r2
  4002d8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4002da:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4002dc:	4313      	orrs	r3, r2
  4002de:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002e0:	e7ec      	b.n	4002bc <pio_set_peripheral+0x28>
	switch (ul_type) {
  4002e2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4002e6:	d012      	beq.n	40030e <pio_set_peripheral+0x7a>
  4002e8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4002ec:	d00f      	beq.n	40030e <pio_set_peripheral+0x7a>
  4002ee:	e7e5      	b.n	4002bc <pio_set_peripheral+0x28>
{
  4002f0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002f2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4002f4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4002f6:	43d3      	mvns	r3, r2
  4002f8:	4021      	ands	r1, r4
  4002fa:	461c      	mov	r4, r3
  4002fc:	4019      	ands	r1, r3
  4002fe:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400300:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400302:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400304:	400b      	ands	r3, r1
  400306:	4023      	ands	r3, r4
  400308:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40030a:	6042      	str	r2, [r0, #4]
}
  40030c:	bc10      	pop	{r4}
  40030e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400310:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400312:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400314:	400b      	ands	r3, r1
  400316:	ea23 0302 	bic.w	r3, r3, r2
  40031a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40031c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40031e:	4313      	orrs	r3, r2
  400320:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400322:	e7cb      	b.n	4002bc <pio_set_peripheral+0x28>

00400324 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400324:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400326:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40032a:	bf14      	ite	ne
  40032c:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40032e:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400330:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400334:	bf14      	ite	ne
  400336:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  400338:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  40033a:	f012 0f02 	tst.w	r2, #2
  40033e:	d107      	bne.n	400350 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400340:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400344:	bf18      	it	ne
  400346:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  40034a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40034c:	6001      	str	r1, [r0, #0]
  40034e:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  400350:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400354:	e7f9      	b.n	40034a <pio_set_input+0x26>

00400356 <pio_set_output>:
{
  400356:	b410      	push	{r4}
  400358:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40035a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40035c:	b944      	cbnz	r4, 400370 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  40035e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400360:	b143      	cbz	r3, 400374 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  400362:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400364:	b942      	cbnz	r2, 400378 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  400366:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400368:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40036a:	6001      	str	r1, [r0, #0]
}
  40036c:	bc10      	pop	{r4}
  40036e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400370:	6641      	str	r1, [r0, #100]	; 0x64
  400372:	e7f5      	b.n	400360 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400374:	6541      	str	r1, [r0, #84]	; 0x54
  400376:	e7f5      	b.n	400364 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400378:	6301      	str	r1, [r0, #48]	; 0x30
  40037a:	e7f5      	b.n	400368 <pio_set_output+0x12>

0040037c <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  40037c:	f012 0f10 	tst.w	r2, #16
  400380:	d010      	beq.n	4003a4 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  400382:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400386:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  40038a:	bf14      	ite	ne
  40038c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  400390:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  400394:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  400398:	bf14      	ite	ne
  40039a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  40039e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  4003a2:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4003a4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4003a8:	4770      	bx	lr

004003aa <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4003aa:	6401      	str	r1, [r0, #64]	; 0x40
  4003ac:	4770      	bx	lr

004003ae <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4003ae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4003b0:	4770      	bx	lr

004003b2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4003b2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4003b4:	4770      	bx	lr
	...

004003b8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4003b8:	b570      	push	{r4, r5, r6, lr}
  4003ba:	b082      	sub	sp, #8
  4003bc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4003be:	0943      	lsrs	r3, r0, #5
  4003c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4003c4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4003c8:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4003ca:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4003ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4003d2:	d053      	beq.n	40047c <pio_configure_pin+0xc4>
  4003d4:	d80a      	bhi.n	4003ec <pio_configure_pin+0x34>
  4003d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4003da:	d02d      	beq.n	400438 <pio_configure_pin+0x80>
  4003dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4003e0:	d03b      	beq.n	40045a <pio_configure_pin+0xa2>
  4003e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4003e6:	d015      	beq.n	400414 <pio_configure_pin+0x5c>
		return 0;
  4003e8:	2000      	movs	r0, #0
  4003ea:	e023      	b.n	400434 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4003ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4003f0:	d055      	beq.n	40049e <pio_configure_pin+0xe6>
  4003f2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4003f6:	d052      	beq.n	40049e <pio_configure_pin+0xe6>
  4003f8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4003fc:	d1f4      	bne.n	4003e8 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4003fe:	f000 011f 	and.w	r1, r0, #31
  400402:	2601      	movs	r6, #1
  400404:	462a      	mov	r2, r5
  400406:	fa06 f101 	lsl.w	r1, r6, r1
  40040a:	4620      	mov	r0, r4
  40040c:	4b2f      	ldr	r3, [pc, #188]	; (4004cc <pio_configure_pin+0x114>)
  40040e:	4798      	blx	r3
	return 1;
  400410:	4630      	mov	r0, r6
		break;
  400412:	e00f      	b.n	400434 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400414:	f000 001f 	and.w	r0, r0, #31
  400418:	2601      	movs	r6, #1
  40041a:	4086      	lsls	r6, r0
  40041c:	4632      	mov	r2, r6
  40041e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400422:	4620      	mov	r0, r4
  400424:	4b2a      	ldr	r3, [pc, #168]	; (4004d0 <pio_configure_pin+0x118>)
  400426:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400428:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40042c:	bf14      	ite	ne
  40042e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400430:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400432:	2001      	movs	r0, #1
}
  400434:	b002      	add	sp, #8
  400436:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400438:	f000 001f 	and.w	r0, r0, #31
  40043c:	2601      	movs	r6, #1
  40043e:	4086      	lsls	r6, r0
  400440:	4632      	mov	r2, r6
  400442:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400446:	4620      	mov	r0, r4
  400448:	4b21      	ldr	r3, [pc, #132]	; (4004d0 <pio_configure_pin+0x118>)
  40044a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40044c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400450:	bf14      	ite	ne
  400452:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400454:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400456:	2001      	movs	r0, #1
  400458:	e7ec      	b.n	400434 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40045a:	f000 001f 	and.w	r0, r0, #31
  40045e:	2601      	movs	r6, #1
  400460:	4086      	lsls	r6, r0
  400462:	4632      	mov	r2, r6
  400464:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400468:	4620      	mov	r0, r4
  40046a:	4b19      	ldr	r3, [pc, #100]	; (4004d0 <pio_configure_pin+0x118>)
  40046c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40046e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400472:	bf14      	ite	ne
  400474:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400476:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400478:	2001      	movs	r0, #1
  40047a:	e7db      	b.n	400434 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40047c:	f000 001f 	and.w	r0, r0, #31
  400480:	2601      	movs	r6, #1
  400482:	4086      	lsls	r6, r0
  400484:	4632      	mov	r2, r6
  400486:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40048a:	4620      	mov	r0, r4
  40048c:	4b10      	ldr	r3, [pc, #64]	; (4004d0 <pio_configure_pin+0x118>)
  40048e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400490:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400494:	bf14      	ite	ne
  400496:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400498:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40049a:	2001      	movs	r0, #1
  40049c:	e7ca      	b.n	400434 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40049e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4004a2:	f000 011f 	and.w	r1, r0, #31
  4004a6:	2601      	movs	r6, #1
  4004a8:	ea05 0306 	and.w	r3, r5, r6
  4004ac:	9300      	str	r3, [sp, #0]
  4004ae:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4004b2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4004b6:	bf14      	ite	ne
  4004b8:	2200      	movne	r2, #0
  4004ba:	2201      	moveq	r2, #1
  4004bc:	fa06 f101 	lsl.w	r1, r6, r1
  4004c0:	4620      	mov	r0, r4
  4004c2:	4c04      	ldr	r4, [pc, #16]	; (4004d4 <pio_configure_pin+0x11c>)
  4004c4:	47a0      	blx	r4
	return 1;
  4004c6:	4630      	mov	r0, r6
		break;
  4004c8:	e7b4      	b.n	400434 <pio_configure_pin+0x7c>
  4004ca:	bf00      	nop
  4004cc:	00400325 	.word	0x00400325
  4004d0:	00400295 	.word	0x00400295
  4004d4:	00400357 	.word	0x00400357

004004d8 <pio_configure_pin_group>:
{
  4004d8:	b570      	push	{r4, r5, r6, lr}
  4004da:	b082      	sub	sp, #8
  4004dc:	4605      	mov	r5, r0
  4004de:	460e      	mov	r6, r1
  4004e0:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  4004e2:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4004e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4004ea:	d03d      	beq.n	400568 <pio_configure_pin_group+0x90>
  4004ec:	d80a      	bhi.n	400504 <pio_configure_pin_group+0x2c>
  4004ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4004f2:	d021      	beq.n	400538 <pio_configure_pin_group+0x60>
  4004f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4004f8:	d02a      	beq.n	400550 <pio_configure_pin_group+0x78>
  4004fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4004fe:	d00e      	beq.n	40051e <pio_configure_pin_group+0x46>
		return 0;
  400500:	2000      	movs	r0, #0
  400502:	e017      	b.n	400534 <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  400504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400508:	d03a      	beq.n	400580 <pio_configure_pin_group+0xa8>
  40050a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40050e:	d037      	beq.n	400580 <pio_configure_pin_group+0xa8>
  400510:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400514:	d1f4      	bne.n	400500 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  400516:	4b23      	ldr	r3, [pc, #140]	; (4005a4 <pio_configure_pin_group+0xcc>)
  400518:	4798      	blx	r3
	return 1;
  40051a:	2001      	movs	r0, #1
		break;
  40051c:	e00a      	b.n	400534 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40051e:	460a      	mov	r2, r1
  400520:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400524:	4b20      	ldr	r3, [pc, #128]	; (4005a8 <pio_configure_pin_group+0xd0>)
  400526:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400528:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40052c:	bf14      	ite	ne
  40052e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400530:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400532:	2001      	movs	r0, #1
}
  400534:	b002      	add	sp, #8
  400536:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400538:	460a      	mov	r2, r1
  40053a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40053e:	4b1a      	ldr	r3, [pc, #104]	; (4005a8 <pio_configure_pin_group+0xd0>)
  400540:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400542:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400546:	bf14      	ite	ne
  400548:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40054a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40054c:	2001      	movs	r0, #1
  40054e:	e7f1      	b.n	400534 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400550:	460a      	mov	r2, r1
  400552:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400556:	4b14      	ldr	r3, [pc, #80]	; (4005a8 <pio_configure_pin_group+0xd0>)
  400558:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40055a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40055e:	bf14      	ite	ne
  400560:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400562:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400564:	2001      	movs	r0, #1
  400566:	e7e5      	b.n	400534 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400568:	460a      	mov	r2, r1
  40056a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40056e:	4b0e      	ldr	r3, [pc, #56]	; (4005a8 <pio_configure_pin_group+0xd0>)
  400570:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400572:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400576:	bf14      	ite	ne
  400578:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40057a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40057c:	2001      	movs	r0, #1
  40057e:	e7d9      	b.n	400534 <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400580:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  400584:	f004 0301 	and.w	r3, r4, #1
  400588:	9300      	str	r3, [sp, #0]
  40058a:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40058e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400592:	bf14      	ite	ne
  400594:	2200      	movne	r2, #0
  400596:	2201      	moveq	r2, #1
  400598:	4631      	mov	r1, r6
  40059a:	4628      	mov	r0, r5
  40059c:	4c03      	ldr	r4, [pc, #12]	; (4005ac <pio_configure_pin_group+0xd4>)
  40059e:	47a0      	blx	r4
	return 1;
  4005a0:	2001      	movs	r0, #1
		break;
  4005a2:	e7c7      	b.n	400534 <pio_configure_pin_group+0x5c>
  4005a4:	00400325 	.word	0x00400325
  4005a8:	00400295 	.word	0x00400295
  4005ac:	00400357 	.word	0x00400357

004005b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4005b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005b4:	4604      	mov	r4, r0
  4005b6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4005b8:	4b0e      	ldr	r3, [pc, #56]	; (4005f4 <pio_handler_process+0x44>)
  4005ba:	4798      	blx	r3
  4005bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4005be:	4620      	mov	r0, r4
  4005c0:	4b0d      	ldr	r3, [pc, #52]	; (4005f8 <pio_handler_process+0x48>)
  4005c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4005c4:	4005      	ands	r5, r0
  4005c6:	d013      	beq.n	4005f0 <pio_handler_process+0x40>
  4005c8:	4c0c      	ldr	r4, [pc, #48]	; (4005fc <pio_handler_process+0x4c>)
  4005ca:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4005ce:	e003      	b.n	4005d8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4005d0:	42b4      	cmp	r4, r6
  4005d2:	d00d      	beq.n	4005f0 <pio_handler_process+0x40>
  4005d4:	3410      	adds	r4, #16
		while (status != 0) {
  4005d6:	b15d      	cbz	r5, 4005f0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4005d8:	6820      	ldr	r0, [r4, #0]
  4005da:	4540      	cmp	r0, r8
  4005dc:	d1f8      	bne.n	4005d0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4005de:	6861      	ldr	r1, [r4, #4]
  4005e0:	4229      	tst	r1, r5
  4005e2:	d0f5      	beq.n	4005d0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4005e4:	68e3      	ldr	r3, [r4, #12]
  4005e6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4005e8:	6863      	ldr	r3, [r4, #4]
  4005ea:	ea25 0503 	bic.w	r5, r5, r3
  4005ee:	e7ef      	b.n	4005d0 <pio_handler_process+0x20>
  4005f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005f4:	004003af 	.word	0x004003af
  4005f8:	004003b3 	.word	0x004003b3
  4005fc:	20000ab0 	.word	0x20000ab0

00400600 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400602:	4c18      	ldr	r4, [pc, #96]	; (400664 <pio_handler_set+0x64>)
  400604:	6826      	ldr	r6, [r4, #0]
  400606:	2e06      	cmp	r6, #6
  400608:	d829      	bhi.n	40065e <pio_handler_set+0x5e>
  40060a:	f04f 0c00 	mov.w	ip, #0
  40060e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400610:	4f15      	ldr	r7, [pc, #84]	; (400668 <pio_handler_set+0x68>)
  400612:	e004      	b.n	40061e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400614:	3401      	adds	r4, #1
  400616:	b2e4      	uxtb	r4, r4
  400618:	46a4      	mov	ip, r4
  40061a:	42a6      	cmp	r6, r4
  40061c:	d309      	bcc.n	400632 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40061e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400620:	0125      	lsls	r5, r4, #4
  400622:	597d      	ldr	r5, [r7, r5]
  400624:	428d      	cmp	r5, r1
  400626:	d1f5      	bne.n	400614 <pio_handler_set+0x14>
  400628:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40062c:	686d      	ldr	r5, [r5, #4]
  40062e:	4295      	cmp	r5, r2
  400630:	d1f0      	bne.n	400614 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400632:	4d0d      	ldr	r5, [pc, #52]	; (400668 <pio_handler_set+0x68>)
  400634:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400638:	eb05 040e 	add.w	r4, r5, lr
  40063c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400640:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400642:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400644:	9906      	ldr	r1, [sp, #24]
  400646:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400648:	3601      	adds	r6, #1
  40064a:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  40064c:	bf04      	itt	eq
  40064e:	4905      	ldreq	r1, [pc, #20]	; (400664 <pio_handler_set+0x64>)
  400650:	600e      	streq	r6, [r1, #0]
  400652:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400654:	461a      	mov	r2, r3
  400656:	4b05      	ldr	r3, [pc, #20]	; (40066c <pio_handler_set+0x6c>)
  400658:	4798      	blx	r3

	return 0;
  40065a:	2000      	movs	r0, #0
  40065c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  40065e:	2001      	movs	r0, #1
}
  400660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400662:	bf00      	nop
  400664:	20000b20 	.word	0x20000b20
  400668:	20000ab0 	.word	0x20000ab0
  40066c:	0040037d 	.word	0x0040037d

00400670 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400670:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400672:	210b      	movs	r1, #11
  400674:	4801      	ldr	r0, [pc, #4]	; (40067c <PIOA_Handler+0xc>)
  400676:	4b02      	ldr	r3, [pc, #8]	; (400680 <PIOA_Handler+0x10>)
  400678:	4798      	blx	r3
  40067a:	bd08      	pop	{r3, pc}
  40067c:	400e0e00 	.word	0x400e0e00
  400680:	004005b1 	.word	0x004005b1

00400684 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400684:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400686:	210c      	movs	r1, #12
  400688:	4801      	ldr	r0, [pc, #4]	; (400690 <PIOB_Handler+0xc>)
  40068a:	4b02      	ldr	r3, [pc, #8]	; (400694 <PIOB_Handler+0x10>)
  40068c:	4798      	blx	r3
  40068e:	bd08      	pop	{r3, pc}
  400690:	400e1000 	.word	0x400e1000
  400694:	004005b1 	.word	0x004005b1

00400698 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400698:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40069a:	210d      	movs	r1, #13
  40069c:	4801      	ldr	r0, [pc, #4]	; (4006a4 <PIOC_Handler+0xc>)
  40069e:	4b02      	ldr	r3, [pc, #8]	; (4006a8 <PIOC_Handler+0x10>)
  4006a0:	4798      	blx	r3
  4006a2:	bd08      	pop	{r3, pc}
  4006a4:	400e1200 	.word	0x400e1200
  4006a8:	004005b1 	.word	0x004005b1

004006ac <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4006ac:	4a17      	ldr	r2, [pc, #92]	; (40070c <pmc_switch_mck_to_pllack+0x60>)
  4006ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4006b4:	4318      	orrs	r0, r3
  4006b6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006ba:	f013 0f08 	tst.w	r3, #8
  4006be:	d10a      	bne.n	4006d6 <pmc_switch_mck_to_pllack+0x2a>
  4006c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4006c4:	4911      	ldr	r1, [pc, #68]	; (40070c <pmc_switch_mck_to_pllack+0x60>)
  4006c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006c8:	f012 0f08 	tst.w	r2, #8
  4006cc:	d103      	bne.n	4006d6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006ce:	3b01      	subs	r3, #1
  4006d0:	d1f9      	bne.n	4006c6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4006d2:	2001      	movs	r0, #1
  4006d4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4006d6:	4a0d      	ldr	r2, [pc, #52]	; (40070c <pmc_switch_mck_to_pllack+0x60>)
  4006d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006da:	f023 0303 	bic.w	r3, r3, #3
  4006de:	f043 0302 	orr.w	r3, r3, #2
  4006e2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006e6:	f013 0f08 	tst.w	r3, #8
  4006ea:	d10a      	bne.n	400702 <pmc_switch_mck_to_pllack+0x56>
  4006ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4006f0:	4906      	ldr	r1, [pc, #24]	; (40070c <pmc_switch_mck_to_pllack+0x60>)
  4006f2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006f4:	f012 0f08 	tst.w	r2, #8
  4006f8:	d105      	bne.n	400706 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006fa:	3b01      	subs	r3, #1
  4006fc:	d1f9      	bne.n	4006f2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4006fe:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400700:	4770      	bx	lr
	return 0;
  400702:	2000      	movs	r0, #0
  400704:	4770      	bx	lr
  400706:	2000      	movs	r0, #0
  400708:	4770      	bx	lr
  40070a:	bf00      	nop
  40070c:	400e0400 	.word	0x400e0400

00400710 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400710:	b9c8      	cbnz	r0, 400746 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400712:	4a11      	ldr	r2, [pc, #68]	; (400758 <pmc_switch_mainck_to_xtal+0x48>)
  400714:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400716:	0209      	lsls	r1, r1, #8
  400718:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40071a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40071e:	f023 0303 	bic.w	r3, r3, #3
  400722:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400726:	f043 0301 	orr.w	r3, r3, #1
  40072a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40072c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40072e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400730:	f013 0f01 	tst.w	r3, #1
  400734:	d0fb      	beq.n	40072e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400736:	4a08      	ldr	r2, [pc, #32]	; (400758 <pmc_switch_mainck_to_xtal+0x48>)
  400738:	6a13      	ldr	r3, [r2, #32]
  40073a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40073e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400742:	6213      	str	r3, [r2, #32]
  400744:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400746:	4904      	ldr	r1, [pc, #16]	; (400758 <pmc_switch_mainck_to_xtal+0x48>)
  400748:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40074a:	4a04      	ldr	r2, [pc, #16]	; (40075c <pmc_switch_mainck_to_xtal+0x4c>)
  40074c:	401a      	ands	r2, r3
  40074e:	4b04      	ldr	r3, [pc, #16]	; (400760 <pmc_switch_mainck_to_xtal+0x50>)
  400750:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400752:	620b      	str	r3, [r1, #32]
  400754:	4770      	bx	lr
  400756:	bf00      	nop
  400758:	400e0400 	.word	0x400e0400
  40075c:	fec8fffc 	.word	0xfec8fffc
  400760:	01370002 	.word	0x01370002

00400764 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400764:	4b02      	ldr	r3, [pc, #8]	; (400770 <pmc_osc_is_ready_mainck+0xc>)
  400766:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400768:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40076c:	4770      	bx	lr
  40076e:	bf00      	nop
  400770:	400e0400 	.word	0x400e0400

00400774 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400774:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400778:	4b01      	ldr	r3, [pc, #4]	; (400780 <pmc_disable_pllack+0xc>)
  40077a:	629a      	str	r2, [r3, #40]	; 0x28
  40077c:	4770      	bx	lr
  40077e:	bf00      	nop
  400780:	400e0400 	.word	0x400e0400

00400784 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400784:	4b02      	ldr	r3, [pc, #8]	; (400790 <pmc_is_locked_pllack+0xc>)
  400786:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400788:	f000 0002 	and.w	r0, r0, #2
  40078c:	4770      	bx	lr
  40078e:	bf00      	nop
  400790:	400e0400 	.word	0x400e0400

00400794 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400794:	281f      	cmp	r0, #31
  400796:	d80c      	bhi.n	4007b2 <pmc_enable_periph_clk+0x1e>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400798:	4b08      	ldr	r3, [pc, #32]	; (4007bc <pmc_enable_periph_clk+0x28>)
  40079a:	699a      	ldr	r2, [r3, #24]
  40079c:	2301      	movs	r3, #1
  40079e:	4083      	lsls	r3, r0
  4007a0:	4393      	bics	r3, r2
  4007a2:	d008      	beq.n	4007b6 <pmc_enable_periph_clk+0x22>
			PMC->PMC_PCER0 = 1 << ul_id;
  4007a4:	2301      	movs	r3, #1
  4007a6:	fa03 f000 	lsl.w	r0, r3, r0
  4007aa:	4b04      	ldr	r3, [pc, #16]	; (4007bc <pmc_enable_periph_clk+0x28>)
  4007ac:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4007ae:	2000      	movs	r0, #0
  4007b0:	4770      	bx	lr
		return 1;
  4007b2:	2001      	movs	r0, #1
  4007b4:	4770      	bx	lr
	return 0;
  4007b6:	2000      	movs	r0, #0
}
  4007b8:	4770      	bx	lr
  4007ba:	bf00      	nop
  4007bc:	400e0400 	.word	0x400e0400

004007c0 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4007c0:	b4f0      	push	{r4, r5, r6, r7}
  4007c2:	b08c      	sub	sp, #48	; 0x30
  4007c4:	4607      	mov	r7, r0
  4007c6:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4007c8:	ac01      	add	r4, sp, #4
  4007ca:	4d11      	ldr	r5, [pc, #68]	; (400810 <pwm_clocks_generate+0x50>)
  4007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4007ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4007d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4007d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4007d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4007d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4007dc:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4007de:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4007e0:	f852 0b04 	ldr.w	r0, [r2], #4
  4007e4:	fbb6 f0f0 	udiv	r0, r6, r0
  4007e8:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4007ec:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  4007f0:	d907      	bls.n	400802 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  4007f2:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4007f4:	2b0b      	cmp	r3, #11
  4007f6:	d1f3      	bne.n	4007e0 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4007f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  4007fc:	b00c      	add	sp, #48	; 0x30
  4007fe:	bcf0      	pop	{r4, r5, r6, r7}
  400800:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  400802:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  400804:	bf94      	ite	ls
  400806:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  40080a:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  40080e:	e7f5      	b.n	4007fc <pwm_clocks_generate+0x3c>
  400810:	00403c2c 	.word	0x00403c2c

00400814 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  400814:	b570      	push	{r4, r5, r6, lr}
  400816:	4606      	mov	r6, r0
  400818:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  40081a:	680c      	ldr	r4, [r1, #0]
  40081c:	b144      	cbz	r4, 400830 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40081e:	6889      	ldr	r1, [r1, #8]
  400820:	4620      	mov	r0, r4
  400822:	4b0c      	ldr	r3, [pc, #48]	; (400854 <pwm_init+0x40>)
  400824:	4798      	blx	r3
  400826:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  400828:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40082c:	4298      	cmp	r0, r3
  40082e:	d00c      	beq.n	40084a <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  400830:	6868      	ldr	r0, [r5, #4]
  400832:	b140      	cbz	r0, 400846 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  400834:	68a9      	ldr	r1, [r5, #8]
  400836:	4b07      	ldr	r3, [pc, #28]	; (400854 <pwm_init+0x40>)
  400838:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  40083a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40083e:	4298      	cmp	r0, r3
  400840:	d005      	beq.n	40084e <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  400842:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
  400846:	6034      	str	r4, [r6, #0]
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
  400848:	2400      	movs	r4, #0
}
  40084a:	4620      	mov	r0, r4
  40084c:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  40084e:	4604      	mov	r4, r0
  400850:	e7fb      	b.n	40084a <pwm_init+0x36>
  400852:	bf00      	nop
  400854:	004007c1 	.word	0x004007c1

00400858 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  400858:	b410      	push	{r4}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  40085a:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40085c:	684b      	ldr	r3, [r1, #4]
  40085e:	f003 030f 	and.w	r3, r3, #15
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  400862:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400864:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  400866:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400868:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
  40086c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  400870:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  400874:	68cb      	ldr	r3, [r1, #12]
  400876:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  40087a:	690b      	ldr	r3, [r1, #16]
  40087c:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  400880:	2000      	movs	r0, #0
  400882:	bc10      	pop	{r4}
  400884:	4770      	bx	lr

00400886 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  400886:	690b      	ldr	r3, [r1, #16]
  400888:	4293      	cmp	r3, r2
  40088a:	d202      	bcs.n	400892 <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
  40088c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  400890:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
  400892:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
  400894:	60ca      	str	r2, [r1, #12]
  400896:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		uint32_t mode = p_pwm->PWM_CH_NUM[ch_num].PWM_CMR;
  40089a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
		mode &= ~PWM_CMR_CPD;
  40089e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;
  4008a2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
  4008a6:	f8c0 2210 	str.w	r2, [r0, #528]	; 0x210
	return 0;
  4008aa:	2000      	movs	r0, #0
  4008ac:	4770      	bx	lr

004008ae <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4008ae:	2301      	movs	r3, #1
  4008b0:	fa03 f101 	lsl.w	r1, r3, r1
  4008b4:	6041      	str	r1, [r0, #4]
  4008b6:	4770      	bx	lr

004008b8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4008b8:	2301      	movs	r3, #1
  4008ba:	fa03 f101 	lsl.w	r1, r3, r1
  4008be:	6081      	str	r1, [r0, #8]
  4008c0:	4770      	bx	lr

004008c2 <pwm_channel_get_interrupt_status>:
 * \return Channel counter event and fault protection trigger interrupt status.
 */
uint32_t pwm_channel_get_interrupt_status(Pwm *p_pwm)
{
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	return p_pwm->PWM_ISR;
  4008c2:	69c0      	ldr	r0, [r0, #28]
#else
	return p_pwm->PWM_ISR1;
#endif
}
  4008c4:	4770      	bx	lr

004008c6 <pwm_channel_enable_interrupt>:
 */
void pwm_channel_enable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IER = (1 << ul_event);
  4008c6:	2301      	movs	r3, #1
  4008c8:	fa03 f101 	lsl.w	r1, r3, r1
  4008cc:	6101      	str	r1, [r0, #16]
  4008ce:	4770      	bx	lr

004008d0 <pwm_channel_disable_interrupt>:
 */
void pwm_channel_disable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
  4008d0:	2301      	movs	r3, #1
  4008d2:	fa03 f101 	lsl.w	r1, r3, r1
  4008d6:	6141      	str	r1, [r0, #20]
  4008d8:	4770      	bx	lr

004008da <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4008da:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4008dc:	23ac      	movs	r3, #172	; 0xac
  4008de:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4008e0:	680b      	ldr	r3, [r1, #0]
  4008e2:	684a      	ldr	r2, [r1, #4]
  4008e4:	fbb3 f3f2 	udiv	r3, r3, r2
  4008e8:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4008ea:	1e5c      	subs	r4, r3, #1
  4008ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4008f0:	4294      	cmp	r4, r2
  4008f2:	d80b      	bhi.n	40090c <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  4008f4:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4008f6:	688b      	ldr	r3, [r1, #8]
  4008f8:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4008fa:	f240 2302 	movw	r3, #514	; 0x202
  4008fe:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400902:	2350      	movs	r3, #80	; 0x50
  400904:	6003      	str	r3, [r0, #0]

	return 0;
  400906:	2000      	movs	r0, #0
}
  400908:	bc10      	pop	{r4}
  40090a:	4770      	bx	lr
		return 1;
  40090c:	2001      	movs	r0, #1
  40090e:	e7fb      	b.n	400908 <uart_init+0x2e>

00400910 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400910:	6943      	ldr	r3, [r0, #20]
  400912:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400916:	bf1a      	itte	ne
  400918:	61c1      	strne	r1, [r0, #28]
	return 0;
  40091a:	2000      	movne	r0, #0
		return 1;
  40091c:	2001      	moveq	r0, #1
}
  40091e:	4770      	bx	lr

00400920 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400920:	6943      	ldr	r3, [r0, #20]
  400922:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400926:	bf1d      	ittte	ne
  400928:	6983      	ldrne	r3, [r0, #24]
  40092a:	700b      	strbne	r3, [r1, #0]
	return 0;
  40092c:	2000      	movne	r0, #0
		return 1;
  40092e:	2001      	moveq	r0, #1
}
  400930:	4770      	bx	lr

00400932 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400932:	6943      	ldr	r3, [r0, #20]
  400934:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400938:	bf1d      	ittte	ne
  40093a:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  40093e:	61c1      	strne	r1, [r0, #28]
	return 0;
  400940:	2000      	movne	r0, #0
		return 1;
  400942:	2001      	moveq	r0, #1
}
  400944:	4770      	bx	lr

00400946 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400946:	6943      	ldr	r3, [r0, #20]
  400948:	f013 0f01 	tst.w	r3, #1
  40094c:	d005      	beq.n	40095a <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40094e:	6983      	ldr	r3, [r0, #24]
  400950:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400954:	600b      	str	r3, [r1, #0]

	return 0;
  400956:	2000      	movs	r0, #0
  400958:	4770      	bx	lr
		return 1;
  40095a:	2001      	movs	r0, #1
}
  40095c:	4770      	bx	lr

0040095e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40095e:	e7fe      	b.n	40095e <Dummy_Handler>

00400960 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400960:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400962:	4b1c      	ldr	r3, [pc, #112]	; (4009d4 <Reset_Handler+0x74>)
  400964:	4a1c      	ldr	r2, [pc, #112]	; (4009d8 <Reset_Handler+0x78>)
  400966:	429a      	cmp	r2, r3
  400968:	d010      	beq.n	40098c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
  40096a:	4b1c      	ldr	r3, [pc, #112]	; (4009dc <Reset_Handler+0x7c>)
  40096c:	4a19      	ldr	r2, [pc, #100]	; (4009d4 <Reset_Handler+0x74>)
  40096e:	429a      	cmp	r2, r3
  400970:	d20c      	bcs.n	40098c <Reset_Handler+0x2c>
  400972:	3b01      	subs	r3, #1
  400974:	1a9b      	subs	r3, r3, r2
  400976:	f023 0303 	bic.w	r3, r3, #3
  40097a:	3304      	adds	r3, #4
  40097c:	4413      	add	r3, r2
  40097e:	4916      	ldr	r1, [pc, #88]	; (4009d8 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
  400980:	f851 0b04 	ldr.w	r0, [r1], #4
  400984:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400988:	429a      	cmp	r2, r3
  40098a:	d1f9      	bne.n	400980 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40098c:	4b14      	ldr	r3, [pc, #80]	; (4009e0 <Reset_Handler+0x80>)
  40098e:	4a15      	ldr	r2, [pc, #84]	; (4009e4 <Reset_Handler+0x84>)
  400990:	429a      	cmp	r2, r3
  400992:	d20a      	bcs.n	4009aa <Reset_Handler+0x4a>
  400994:	3b01      	subs	r3, #1
  400996:	1a9b      	subs	r3, r3, r2
  400998:	f023 0303 	bic.w	r3, r3, #3
  40099c:	3304      	adds	r3, #4
  40099e:	4413      	add	r3, r2
		*pDest++ = 0;
  4009a0:	2100      	movs	r1, #0
  4009a2:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4009a6:	4293      	cmp	r3, r2
  4009a8:	d1fb      	bne.n	4009a2 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4009aa:	4b0f      	ldr	r3, [pc, #60]	; (4009e8 <Reset_Handler+0x88>)
  4009ac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
  4009b0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4009b4:	490d      	ldr	r1, [pc, #52]	; (4009ec <Reset_Handler+0x8c>)
  4009b6:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  4009b8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  4009bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
  4009c0:	d203      	bcs.n	4009ca <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  4009c2:	688b      	ldr	r3, [r1, #8]
  4009c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4009c8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  4009ca:	4b09      	ldr	r3, [pc, #36]	; (4009f0 <Reset_Handler+0x90>)
  4009cc:	4798      	blx	r3

	/* Branch to main function */
	main();
  4009ce:	4b09      	ldr	r3, [pc, #36]	; (4009f4 <Reset_Handler+0x94>)
  4009d0:	4798      	blx	r3
  4009d2:	e7fe      	b.n	4009d2 <Reset_Handler+0x72>
  4009d4:	20000000 	.word	0x20000000
  4009d8:	00403e98 	.word	0x00403e98
  4009dc:	20000a94 	.word	0x20000a94
  4009e0:	20000b8c 	.word	0x20000b8c
  4009e4:	20000a94 	.word	0x20000a94
  4009e8:	00400000 	.word	0x00400000
  4009ec:	e000ed00 	.word	0xe000ed00
  4009f0:	00400ee1 	.word	0x00400ee1
  4009f4:	00400d7d 	.word	0x00400d7d

004009f8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
  4009f8:	4b38      	ldr	r3, [pc, #224]	; (400adc <SystemCoreClockUpdate+0xe4>)
  4009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009fc:	f003 0303 	and.w	r3, r3, #3
  400a00:	2b01      	cmp	r3, #1
  400a02:	d01d      	beq.n	400a40 <SystemCoreClockUpdate+0x48>
  400a04:	b183      	cbz	r3, 400a28 <SystemCoreClockUpdate+0x30>
  400a06:	2b02      	cmp	r3, #2
  400a08:	d036      	beq.n	400a78 <SystemCoreClockUpdate+0x80>
		SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
			                         CKGR_PLLAR_DIVA_Pos));
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400a0a:	4b34      	ldr	r3, [pc, #208]	; (400adc <SystemCoreClockUpdate+0xe4>)
  400a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a12:	2b70      	cmp	r3, #112	; 0x70
  400a14:	d059      	beq.n	400aca <SystemCoreClockUpdate+0xd2>
		SystemCoreClock /= 3U;
	} else { 
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
  400a16:	4b31      	ldr	r3, [pc, #196]	; (400adc <SystemCoreClockUpdate+0xe4>)
  400a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a1a:	4931      	ldr	r1, [pc, #196]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
  400a1c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400a20:	680b      	ldr	r3, [r1, #0]
  400a22:	40d3      	lsrs	r3, r2
  400a24:	600b      	str	r3, [r1, #0]
  400a26:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400a28:	4b2e      	ldr	r3, [pc, #184]	; (400ae4 <SystemCoreClockUpdate+0xec>)
  400a2a:	695b      	ldr	r3, [r3, #20]
  400a2c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a30:	bf14      	ite	ne
  400a32:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a36:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a3a:	4b29      	ldr	r3, [pc, #164]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
  400a3c:	601a      	str	r2, [r3, #0]
  400a3e:	e7e4      	b.n	400a0a <SystemCoreClockUpdate+0x12>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400a40:	4b26      	ldr	r3, [pc, #152]	; (400adc <SystemCoreClockUpdate+0xe4>)
  400a42:	6a1b      	ldr	r3, [r3, #32]
  400a44:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a48:	d003      	beq.n	400a52 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400a4a:	4a27      	ldr	r2, [pc, #156]	; (400ae8 <SystemCoreClockUpdate+0xf0>)
  400a4c:	4b24      	ldr	r3, [pc, #144]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
  400a4e:	601a      	str	r2, [r3, #0]
  400a50:	e7db      	b.n	400a0a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a52:	4a26      	ldr	r2, [pc, #152]	; (400aec <SystemCoreClockUpdate+0xf4>)
  400a54:	4b22      	ldr	r3, [pc, #136]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
  400a56:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400a58:	4b20      	ldr	r3, [pc, #128]	; (400adc <SystemCoreClockUpdate+0xe4>)
  400a5a:	6a1b      	ldr	r3, [r3, #32]
  400a5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a60:	2b10      	cmp	r3, #16
  400a62:	d005      	beq.n	400a70 <SystemCoreClockUpdate+0x78>
  400a64:	2b20      	cmp	r3, #32
  400a66:	d1d0      	bne.n	400a0a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400a68:	4a1f      	ldr	r2, [pc, #124]	; (400ae8 <SystemCoreClockUpdate+0xf0>)
  400a6a:	4b1d      	ldr	r3, [pc, #116]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
  400a6c:	601a      	str	r2, [r3, #0]
				break;
  400a6e:	e7cc      	b.n	400a0a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400a70:	4a1f      	ldr	r2, [pc, #124]	; (400af0 <SystemCoreClockUpdate+0xf8>)
  400a72:	4b1b      	ldr	r3, [pc, #108]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
  400a74:	601a      	str	r2, [r3, #0]
				break;
  400a76:	e7c8      	b.n	400a0a <SystemCoreClockUpdate+0x12>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400a78:	4b18      	ldr	r3, [pc, #96]	; (400adc <SystemCoreClockUpdate+0xe4>)
  400a7a:	6a1b      	ldr	r3, [r3, #32]
  400a7c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a80:	d010      	beq.n	400aa4 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400a82:	4a19      	ldr	r2, [pc, #100]	; (400ae8 <SystemCoreClockUpdate+0xf0>)
  400a84:	4b16      	ldr	r3, [pc, #88]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
  400a86:	601a      	str	r2, [r3, #0]
		SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  400a88:	4a14      	ldr	r2, [pc, #80]	; (400adc <SystemCoreClockUpdate+0xe4>)
  400a8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
		SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  400a8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400a8e:	4814      	ldr	r0, [pc, #80]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
		SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  400a90:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400a94:	6803      	ldr	r3, [r0, #0]
  400a96:	fb01 3303 	mla	r3, r1, r3, r3
		SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  400a9a:	b2d2      	uxtb	r2, r2
  400a9c:	fbb3 f3f2 	udiv	r3, r3, r2
  400aa0:	6003      	str	r3, [r0, #0]
		break;
  400aa2:	e7b2      	b.n	400a0a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400aa4:	4a11      	ldr	r2, [pc, #68]	; (400aec <SystemCoreClockUpdate+0xf4>)
  400aa6:	4b0e      	ldr	r3, [pc, #56]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
  400aa8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400aaa:	4b0c      	ldr	r3, [pc, #48]	; (400adc <SystemCoreClockUpdate+0xe4>)
  400aac:	6a1b      	ldr	r3, [r3, #32]
  400aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ab2:	2b10      	cmp	r3, #16
  400ab4:	d005      	beq.n	400ac2 <SystemCoreClockUpdate+0xca>
  400ab6:	2b20      	cmp	r3, #32
  400ab8:	d1e6      	bne.n	400a88 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400aba:	4a0b      	ldr	r2, [pc, #44]	; (400ae8 <SystemCoreClockUpdate+0xf0>)
  400abc:	4b08      	ldr	r3, [pc, #32]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
  400abe:	601a      	str	r2, [r3, #0]
				break;
  400ac0:	e7e2      	b.n	400a88 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400ac2:	4a0b      	ldr	r2, [pc, #44]	; (400af0 <SystemCoreClockUpdate+0xf8>)
  400ac4:	4b06      	ldr	r3, [pc, #24]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
  400ac6:	601a      	str	r2, [r3, #0]
				break;
  400ac8:	e7de      	b.n	400a88 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400aca:	4a05      	ldr	r2, [pc, #20]	; (400ae0 <SystemCoreClockUpdate+0xe8>)
  400acc:	6813      	ldr	r3, [r2, #0]
  400ace:	4909      	ldr	r1, [pc, #36]	; (400af4 <SystemCoreClockUpdate+0xfc>)
  400ad0:	fba1 1303 	umull	r1, r3, r1, r3
  400ad4:	085b      	lsrs	r3, r3, #1
  400ad6:	6013      	str	r3, [r2, #0]
  400ad8:	4770      	bx	lr
  400ada:	bf00      	nop
  400adc:	400e0400 	.word	0x400e0400
  400ae0:	200000e4 	.word	0x200000e4
  400ae4:	400e1410 	.word	0x400e1410
  400ae8:	00b71b00 	.word	0x00b71b00
  400aec:	003d0900 	.word	0x003d0900
  400af0:	007a1200 	.word	0x007a1200
  400af4:	aaaaaaab 	.word	0xaaaaaaab

00400af8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400af8:	4b0a      	ldr	r3, [pc, #40]	; (400b24 <_sbrk+0x2c>)
  400afa:	681b      	ldr	r3, [r3, #0]
  400afc:	b153      	cbz	r3, 400b14 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400afe:	4b09      	ldr	r3, [pc, #36]	; (400b24 <_sbrk+0x2c>)
  400b00:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400b02:	181a      	adds	r2, r3, r0
  400b04:	4908      	ldr	r1, [pc, #32]	; (400b28 <_sbrk+0x30>)
  400b06:	4291      	cmp	r1, r2
  400b08:	db08      	blt.n	400b1c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400b0a:	4610      	mov	r0, r2
  400b0c:	4a05      	ldr	r2, [pc, #20]	; (400b24 <_sbrk+0x2c>)
  400b0e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400b10:	4618      	mov	r0, r3
  400b12:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400b14:	4a05      	ldr	r2, [pc, #20]	; (400b2c <_sbrk+0x34>)
  400b16:	4b03      	ldr	r3, [pc, #12]	; (400b24 <_sbrk+0x2c>)
  400b18:	601a      	str	r2, [r3, #0]
  400b1a:	e7f0      	b.n	400afe <_sbrk+0x6>
		return (caddr_t) -1;	
  400b1c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400b20:	4770      	bx	lr
  400b22:	bf00      	nop
  400b24:	20000b24 	.word	0x20000b24
  400b28:	20005ffc 	.word	0x20005ffc
  400b2c:	20001390 	.word	0x20001390

00400b30 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400b30:	f04f 30ff 	mov.w	r0, #4294967295
  400b34:	4770      	bx	lr

00400b36 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b3a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b3c:	2000      	movs	r0, #0
  400b3e:	4770      	bx	lr

00400b40 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400b40:	2001      	movs	r0, #1
  400b42:	4770      	bx	lr

00400b44 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400b44:	2000      	movs	r0, #0
  400b46:	4770      	bx	lr

00400b48 <vSensorISR>:
		}
	}
}

int i = 0;
void vSensorISR(const uint32_t id, const uint32_t index) {
  400b48:	b510      	push	{r4, lr}
	// write in queue sensorISR
	// int sensor_counter = timer_value_RC;
	printf("Entrei ISR \r\n");
  400b4a:	4808      	ldr	r0, [pc, #32]	; (400b6c <vSensorISR+0x24>)
  400b4c:	4c08      	ldr	r4, [pc, #32]	; (400b70 <vSensorISR+0x28>)
  400b4e:	47a0      	blx	r4

	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  400b50:	4908      	ldr	r1, [pc, #32]	; (400b74 <vSensorISR+0x2c>)
  400b52:	2300      	movs	r3, #0
  400b54:	600b      	str	r3, [r1, #0]
	i += 1;
  400b56:	4b08      	ldr	r3, [pc, #32]	; (400b78 <vSensorISR+0x30>)
  400b58:	681a      	ldr	r2, [r3, #0]
  400b5a:	3201      	adds	r2, #1
  400b5c:	601a      	str	r2, [r3, #0]
	pwm_channel_update_duty(PWM, &g_pwm_channel_led, i);
  400b5e:	4807      	ldr	r0, [pc, #28]	; (400b7c <vSensorISR+0x34>)
  400b60:	4b07      	ldr	r3, [pc, #28]	; (400b80 <vSensorISR+0x38>)
  400b62:	4798      	blx	r3


	printf("Terminei ISR \r\n");
  400b64:	4807      	ldr	r0, [pc, #28]	; (400b84 <vSensorISR+0x3c>)
  400b66:	47a0      	blx	r4
  400b68:	bd10      	pop	{r4, pc}
  400b6a:	bf00      	nop
  400b6c:	00403ce4 	.word	0x00403ce4
  400b70:	00400f31 	.word	0x00400f31
  400b74:	20000b74 	.word	0x20000b74
  400b78:	20000b28 	.word	0x20000b28
  400b7c:	40020000 	.word	0x40020000
  400b80:	00400887 	.word	0x00400887
  400b84:	00403cf4 	.word	0x00403cf4

00400b88 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400b88:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b8a:	b083      	sub	sp, #12
  400b8c:	4605      	mov	r5, r0
  400b8e:	460c      	mov	r4, r1
	uint32_t val = 0;
  400b90:	2300      	movs	r3, #0
  400b92:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400b94:	4b18      	ldr	r3, [pc, #96]	; (400bf8 <usart_serial_getchar+0x70>)
  400b96:	4298      	cmp	r0, r3
  400b98:	d00a      	beq.n	400bb0 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400b9a:	4b18      	ldr	r3, [pc, #96]	; (400bfc <usart_serial_getchar+0x74>)
  400b9c:	4298      	cmp	r0, r3
  400b9e:	d00f      	beq.n	400bc0 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400ba0:	4b17      	ldr	r3, [pc, #92]	; (400c00 <usart_serial_getchar+0x78>)
  400ba2:	4298      	cmp	r0, r3
  400ba4:	d014      	beq.n	400bd0 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400ba6:	4b17      	ldr	r3, [pc, #92]	; (400c04 <usart_serial_getchar+0x7c>)
  400ba8:	429d      	cmp	r5, r3
  400baa:	d01b      	beq.n	400be4 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400bac:	b003      	add	sp, #12
  400bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400bb0:	461f      	mov	r7, r3
  400bb2:	4e15      	ldr	r6, [pc, #84]	; (400c08 <usart_serial_getchar+0x80>)
  400bb4:	4621      	mov	r1, r4
  400bb6:	4638      	mov	r0, r7
  400bb8:	47b0      	blx	r6
  400bba:	2800      	cmp	r0, #0
  400bbc:	d1fa      	bne.n	400bb4 <usart_serial_getchar+0x2c>
  400bbe:	e7f2      	b.n	400ba6 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400bc0:	461e      	mov	r6, r3
  400bc2:	4d11      	ldr	r5, [pc, #68]	; (400c08 <usart_serial_getchar+0x80>)
  400bc4:	4621      	mov	r1, r4
  400bc6:	4630      	mov	r0, r6
  400bc8:	47a8      	blx	r5
  400bca:	2800      	cmp	r0, #0
  400bcc:	d1fa      	bne.n	400bc4 <usart_serial_getchar+0x3c>
  400bce:	e7ed      	b.n	400bac <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400bd0:	461e      	mov	r6, r3
  400bd2:	4d0e      	ldr	r5, [pc, #56]	; (400c0c <usart_serial_getchar+0x84>)
  400bd4:	a901      	add	r1, sp, #4
  400bd6:	4630      	mov	r0, r6
  400bd8:	47a8      	blx	r5
  400bda:	2800      	cmp	r0, #0
  400bdc:	d1fa      	bne.n	400bd4 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400bde:	9b01      	ldr	r3, [sp, #4]
  400be0:	7023      	strb	r3, [r4, #0]
  400be2:	e7e3      	b.n	400bac <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400be4:	461e      	mov	r6, r3
  400be6:	4d09      	ldr	r5, [pc, #36]	; (400c0c <usart_serial_getchar+0x84>)
  400be8:	a901      	add	r1, sp, #4
  400bea:	4630      	mov	r0, r6
  400bec:	47a8      	blx	r5
  400bee:	2800      	cmp	r0, #0
  400bf0:	d1fa      	bne.n	400be8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400bf2:	9b01      	ldr	r3, [sp, #4]
  400bf4:	7023      	strb	r3, [r4, #0]
}
  400bf6:	e7d9      	b.n	400bac <usart_serial_getchar+0x24>
  400bf8:	400e0600 	.word	0x400e0600
  400bfc:	400e0800 	.word	0x400e0800
  400c00:	40024000 	.word	0x40024000
  400c04:	40028000 	.word	0x40028000
  400c08:	00400921 	.word	0x00400921
  400c0c:	00400947 	.word	0x00400947

00400c10 <usart_serial_putchar>:
{
  400c10:	b570      	push	{r4, r5, r6, lr}
  400c12:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400c14:	4b18      	ldr	r3, [pc, #96]	; (400c78 <usart_serial_putchar+0x68>)
  400c16:	4298      	cmp	r0, r3
  400c18:	d00a      	beq.n	400c30 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400c1a:	4b18      	ldr	r3, [pc, #96]	; (400c7c <usart_serial_putchar+0x6c>)
  400c1c:	4298      	cmp	r0, r3
  400c1e:	d010      	beq.n	400c42 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400c20:	4b17      	ldr	r3, [pc, #92]	; (400c80 <usart_serial_putchar+0x70>)
  400c22:	4298      	cmp	r0, r3
  400c24:	d016      	beq.n	400c54 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400c26:	4b17      	ldr	r3, [pc, #92]	; (400c84 <usart_serial_putchar+0x74>)
  400c28:	4298      	cmp	r0, r3
  400c2a:	d01c      	beq.n	400c66 <usart_serial_putchar+0x56>
	return 0;
  400c2c:	2000      	movs	r0, #0
}
  400c2e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400c30:	461e      	mov	r6, r3
  400c32:	4d15      	ldr	r5, [pc, #84]	; (400c88 <usart_serial_putchar+0x78>)
  400c34:	4621      	mov	r1, r4
  400c36:	4630      	mov	r0, r6
  400c38:	47a8      	blx	r5
  400c3a:	2800      	cmp	r0, #0
  400c3c:	d1fa      	bne.n	400c34 <usart_serial_putchar+0x24>
		return 1;
  400c3e:	2001      	movs	r0, #1
  400c40:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400c42:	461e      	mov	r6, r3
  400c44:	4d10      	ldr	r5, [pc, #64]	; (400c88 <usart_serial_putchar+0x78>)
  400c46:	4621      	mov	r1, r4
  400c48:	4630      	mov	r0, r6
  400c4a:	47a8      	blx	r5
  400c4c:	2800      	cmp	r0, #0
  400c4e:	d1fa      	bne.n	400c46 <usart_serial_putchar+0x36>
		return 1;
  400c50:	2001      	movs	r0, #1
  400c52:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400c54:	461e      	mov	r6, r3
  400c56:	4d0d      	ldr	r5, [pc, #52]	; (400c8c <usart_serial_putchar+0x7c>)
  400c58:	4621      	mov	r1, r4
  400c5a:	4630      	mov	r0, r6
  400c5c:	47a8      	blx	r5
  400c5e:	2800      	cmp	r0, #0
  400c60:	d1fa      	bne.n	400c58 <usart_serial_putchar+0x48>
		return 1;
  400c62:	2001      	movs	r0, #1
  400c64:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400c66:	461e      	mov	r6, r3
  400c68:	4d08      	ldr	r5, [pc, #32]	; (400c8c <usart_serial_putchar+0x7c>)
  400c6a:	4621      	mov	r1, r4
  400c6c:	4630      	mov	r0, r6
  400c6e:	47a8      	blx	r5
  400c70:	2800      	cmp	r0, #0
  400c72:	d1fa      	bne.n	400c6a <usart_serial_putchar+0x5a>
		return 1;
  400c74:	2001      	movs	r0, #1
  400c76:	bd70      	pop	{r4, r5, r6, pc}
  400c78:	400e0600 	.word	0x400e0600
  400c7c:	400e0800 	.word	0x400e0800
  400c80:	40024000 	.word	0x40024000
  400c84:	40028000 	.word	0x40028000
  400c88:	00400911 	.word	0x00400911
  400c8c:	00400933 	.word	0x00400933

00400c90 <PWM_Handler>:
{
  400c90:	b508      	push	{r3, lr}
	uint32_t events = pwm_channel_get_interrupt_status(PWM);
  400c92:	4817      	ldr	r0, [pc, #92]	; (400cf0 <PWM_Handler+0x60>)
  400c94:	4b17      	ldr	r3, [pc, #92]	; (400cf4 <PWM_Handler+0x64>)
  400c96:	4798      	blx	r3
	if ((events & (1 << PIN_PWM_LED0_CHANNEL)) ==
  400c98:	f010 0f01 	tst.w	r0, #1
  400c9c:	d018      	beq.n	400cd0 <PWM_Handler+0x40>
		ul_count++;
  400c9e:	4a16      	ldr	r2, [pc, #88]	; (400cf8 <PWM_Handler+0x68>)
  400ca0:	6813      	ldr	r3, [r2, #0]
  400ca2:	3301      	adds	r3, #1
  400ca4:	6013      	str	r3, [r2, #0]
		if (ul_count == (PWM_FREQUENCY / (PERIOD_VALUE - INIT_DUTY_VALUE))) {
  400ca6:	b99b      	cbnz	r3, 400cd0 <PWM_Handler+0x40>
			if (fade_in) {
  400ca8:	4b14      	ldr	r3, [pc, #80]	; (400cfc <PWM_Handler+0x6c>)
  400caa:	781b      	ldrb	r3, [r3, #0]
  400cac:	b1ab      	cbz	r3, 400cda <PWM_Handler+0x4a>
				ul_duty++;
  400cae:	4a14      	ldr	r2, [pc, #80]	; (400d00 <PWM_Handler+0x70>)
  400cb0:	6813      	ldr	r3, [r2, #0]
  400cb2:	3301      	adds	r3, #1
  400cb4:	6013      	str	r3, [r2, #0]
				if (ul_duty == PERIOD_VALUE) {
  400cb6:	2ba0      	cmp	r3, #160	; 0xa0
  400cb8:	d00b      	beq.n	400cd2 <PWM_Handler+0x42>
			ul_count = 0;
  400cba:	2200      	movs	r2, #0
  400cbc:	4b0e      	ldr	r3, [pc, #56]	; (400cf8 <PWM_Handler+0x68>)
  400cbe:	601a      	str	r2, [r3, #0]
			g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  400cc0:	4910      	ldr	r1, [pc, #64]	; (400d04 <PWM_Handler+0x74>)
  400cc2:	2303      	movs	r3, #3
  400cc4:	600b      	str	r3, [r1, #0]
			pwm_channel_update_duty(PWM, &g_pwm_channel_led, ul_duty);
  400cc6:	4b0e      	ldr	r3, [pc, #56]	; (400d00 <PWM_Handler+0x70>)
  400cc8:	681a      	ldr	r2, [r3, #0]
  400cca:	4809      	ldr	r0, [pc, #36]	; (400cf0 <PWM_Handler+0x60>)
  400ccc:	4b0e      	ldr	r3, [pc, #56]	; (400d08 <PWM_Handler+0x78>)
  400cce:	4798      	blx	r3
  400cd0:	bd08      	pop	{r3, pc}
					fade_in = 0;
  400cd2:	2200      	movs	r2, #0
  400cd4:	4b09      	ldr	r3, [pc, #36]	; (400cfc <PWM_Handler+0x6c>)
  400cd6:	701a      	strb	r2, [r3, #0]
  400cd8:	e7ef      	b.n	400cba <PWM_Handler+0x2a>
				ul_duty--;
  400cda:	4a09      	ldr	r2, [pc, #36]	; (400d00 <PWM_Handler+0x70>)
  400cdc:	6813      	ldr	r3, [r2, #0]
  400cde:	3b01      	subs	r3, #1
  400ce0:	6013      	str	r3, [r2, #0]
				if (ul_duty == INIT_DUTY_VALUE) {
  400ce2:	2b00      	cmp	r3, #0
  400ce4:	d1e9      	bne.n	400cba <PWM_Handler+0x2a>
					fade_in = 1;
  400ce6:	2201      	movs	r2, #1
  400ce8:	4b04      	ldr	r3, [pc, #16]	; (400cfc <PWM_Handler+0x6c>)
  400cea:	701a      	strb	r2, [r3, #0]
  400cec:	e7e5      	b.n	400cba <PWM_Handler+0x2a>
  400cee:	bf00      	nop
  400cf0:	40020000 	.word	0x40020000
  400cf4:	004008c3 	.word	0x004008c3
  400cf8:	20000b2c 	.word	0x20000b2c
  400cfc:	200000e8 	.word	0x200000e8
  400d00:	20000b30 	.word	0x20000b30
  400d04:	20000b74 	.word	0x20000b74
  400d08:	00400887 	.word	0x00400887

00400d0c <vConfigureSensorISR>:
}

void vConfigureSensorISR() {
  400d0c:	b570      	push	{r4, r5, r6, lr}
  400d0e:	b082      	sub	sp, #8
	// configure sensor interrupt
	printf("Configuracao Sensor ISR \r\n");
  400d10:	4811      	ldr	r0, [pc, #68]	; (400d58 <vConfigureSensorISR+0x4c>)
  400d12:	4d12      	ldr	r5, [pc, #72]	; (400d5c <vConfigureSensorISR+0x50>)
  400d14:	47a8      	blx	r5
	
	// pio no btn BP2 (LEFT) trocar para outro PIO
	
	pio_set_input(PIOA, PIO_PA15,PIO_PULLUP | PIO_DEBOUNCE); // pull down
  400d16:	4c12      	ldr	r4, [pc, #72]	; (400d60 <vConfigureSensorISR+0x54>)
  400d18:	2209      	movs	r2, #9
  400d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400d1e:	4620      	mov	r0, r4
  400d20:	4b10      	ldr	r3, [pc, #64]	; (400d64 <vConfigureSensorISR+0x58>)
  400d22:	4798      	blx	r3
	//pio_pull_down(PIOA,PIO_ECHO,1);
	pio_handler_set(PIOA,ID_PIOA,PIO_PA15,PIO_IT_RISE_EDGE,vSensorISR);
  400d24:	4b10      	ldr	r3, [pc, #64]	; (400d68 <vConfigureSensorISR+0x5c>)
  400d26:	9300      	str	r3, [sp, #0]
  400d28:	2370      	movs	r3, #112	; 0x70
  400d2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d2e:	210b      	movs	r1, #11
  400d30:	4620      	mov	r0, r4
  400d32:	4e0e      	ldr	r6, [pc, #56]	; (400d6c <vConfigureSensorISR+0x60>)
  400d34:	47b0      	blx	r6
	pio_enable_interrupt(PIOA,PIO_PA15);
  400d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400d3a:	4620      	mov	r0, r4
  400d3c:	4b0c      	ldr	r3, [pc, #48]	; (400d70 <vConfigureSensorISR+0x64>)
  400d3e:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400d40:	4b0c      	ldr	r3, [pc, #48]	; (400d74 <vConfigureSensorISR+0x68>)
  400d42:	2210      	movs	r2, #16
  400d44:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  400d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d4c:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(PIOA_IRQn, 1 );
	NVIC_EnableIRQ(PIOA_IRQn);

	printf("Terminei Config Sensor ISR \r\n");
  400d4e:	480a      	ldr	r0, [pc, #40]	; (400d78 <vConfigureSensorISR+0x6c>)
  400d50:	47a8      	blx	r5
}
  400d52:	b002      	add	sp, #8
  400d54:	bd70      	pop	{r4, r5, r6, pc}
  400d56:	bf00      	nop
  400d58:	00403ca8 	.word	0x00403ca8
  400d5c:	00400f31 	.word	0x00400f31
  400d60:	400e0e00 	.word	0x400e0e00
  400d64:	00400325 	.word	0x00400325
  400d68:	00400b49 	.word	0x00400b49
  400d6c:	00400601 	.word	0x00400601
  400d70:	004003ab 	.word	0x004003ab
  400d74:	e000e100 	.word	0xe000e100
  400d78:	00403cc4 	.word	0x00403cc4

00400d7c <main>:
 * Output PWM waves on LEDs to make them fade in and out.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400d7c:	b580      	push	{r7, lr}
  400d7e:	b086      	sub	sp, #24
	/* Initialize the SAM system */
	sysclk_init();
  400d80:	4b3e      	ldr	r3, [pc, #248]	; (400e7c <main+0x100>)
  400d82:	4798      	blx	r3
	board_init();
  400d84:	4b3e      	ldr	r3, [pc, #248]	; (400e80 <main+0x104>)
  400d86:	4798      	blx	r3
  400d88:	2008      	movs	r0, #8
  400d8a:	4c3e      	ldr	r4, [pc, #248]	; (400e84 <main+0x108>)
  400d8c:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400d8e:	4d3e      	ldr	r5, [pc, #248]	; (400e88 <main+0x10c>)
  400d90:	4b3e      	ldr	r3, [pc, #248]	; (400e8c <main+0x110>)
  400d92:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400d94:	4a3e      	ldr	r2, [pc, #248]	; (400e90 <main+0x114>)
  400d96:	4b3f      	ldr	r3, [pc, #252]	; (400e94 <main+0x118>)
  400d98:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400d9a:	4a3f      	ldr	r2, [pc, #252]	; (400e98 <main+0x11c>)
  400d9c:	4b3f      	ldr	r3, [pc, #252]	; (400e9c <main+0x120>)
  400d9e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400da0:	4f3f      	ldr	r7, [pc, #252]	; (400ea0 <main+0x124>)
  400da2:	9700      	str	r7, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
  400da4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400da8:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  400daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400dae:	9302      	str	r3, [sp, #8]
  400db0:	2008      	movs	r0, #8
  400db2:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
  400db4:	4669      	mov	r1, sp
  400db6:	4628      	mov	r0, r5
  400db8:	4b3a      	ldr	r3, [pc, #232]	; (400ea4 <main+0x128>)
  400dba:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400dbc:	4e3a      	ldr	r6, [pc, #232]	; (400ea8 <main+0x12c>)
  400dbe:	6833      	ldr	r3, [r6, #0]
  400dc0:	2100      	movs	r1, #0
  400dc2:	6898      	ldr	r0, [r3, #8]
  400dc4:	4d39      	ldr	r5, [pc, #228]	; (400eac <main+0x130>)
  400dc6:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400dc8:	6833      	ldr	r3, [r6, #0]
  400dca:	2100      	movs	r1, #0
  400dcc:	6858      	ldr	r0, [r3, #4]
  400dce:	47a8      	blx	r5

	/* Configure the console uart for debug information */
	configure_console();
	vConfigureSensorISR();
  400dd0:	4b37      	ldr	r3, [pc, #220]	; (400eb0 <main+0x134>)
  400dd2:	4798      	blx	r3

	/* Output example information */
	puts(STRING_HEADER);
  400dd4:	4837      	ldr	r0, [pc, #220]	; (400eb4 <main+0x138>)
  400dd6:	4b38      	ldr	r3, [pc, #224]	; (400eb8 <main+0x13c>)
  400dd8:	4798      	blx	r3
	
	/* Enable PWM peripheral clock */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pmc_enable_periph_clk(ID_PWM0);
#else
	pmc_enable_periph_clk(ID_PWM);
  400dda:	201f      	movs	r0, #31
  400ddc:	47a0      	blx	r4
	/* Disable PWM channels for LEDs */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);
#else
	pwm_channel_disable(PWM, PIN_PWM_LED0_CHANNEL);
  400dde:	4e37      	ldr	r6, [pc, #220]	; (400ebc <main+0x140>)
  400de0:	2100      	movs	r1, #0
  400de2:	4630      	mov	r0, r6
  400de4:	4c36      	ldr	r4, [pc, #216]	; (400ec0 <main+0x144>)
  400de6:	47a0      	blx	r4
	pwm_channel_disable(PWM, PIN_PWM_LED1_CHANNEL);
  400de8:	2103      	movs	r1, #3
  400dea:	4630      	mov	r0, r6
  400dec:	47a0      	blx	r4
#endif

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  400dee:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
  400df2:	9303      	str	r3, [sp, #12]
  400df4:	2500      	movs	r5, #0
  400df6:	9504      	str	r5, [sp, #16]
  400df8:	9705      	str	r7, [sp, #20]
		.ul_mck = sysclk_get_cpu_hz()
	};
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_init(PWM0, &clock_setting);
#else
	pwm_init(PWM, &clock_setting);
  400dfa:	a903      	add	r1, sp, #12
  400dfc:	4630      	mov	r0, r6
  400dfe:	4b31      	ldr	r3, [pc, #196]	; (400ec4 <main+0x148>)
  400e00:	4798      	blx	r3
#endif

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  400e02:	4c31      	ldr	r4, [pc, #196]	; (400ec8 <main+0x14c>)
  400e04:	8125      	strh	r5, [r4, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  400e06:	f04f 0a01 	mov.w	sl, #1
  400e0a:	f884 a00a 	strb.w	sl, [r4, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  400e0e:	f04f 090b 	mov.w	r9, #11
  400e12:	f8c4 9004 	str.w	r9, [r4, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  400e16:	27a0      	movs	r7, #160	; 0xa0
  400e18:	6127      	str	r7, [r4, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  400e1a:	60e5      	str	r5, [r4, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  400e1c:	6025      	str	r5, [r4, #0]
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_init(PWM0, &g_pwm_channel_led);
#else
	pwm_channel_init(PWM, &g_pwm_channel_led);
  400e1e:	4621      	mov	r1, r4
  400e20:	4630      	mov	r0, r6
  400e22:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 400edc <main+0x160>
  400e26:	47c0      	blx	r8

	/* Enable channel counter event interrupt */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_enable_interrupt(PWM0, PIN_PWM_LED0_CHANNEL, 0);
#else
	pwm_channel_enable_interrupt(PWM, PIN_PWM_LED0_CHANNEL, 0);
  400e28:	462a      	mov	r2, r5
  400e2a:	4629      	mov	r1, r5
  400e2c:	4630      	mov	r0, r6
  400e2e:	4b27      	ldr	r3, [pc, #156]	; (400ecc <main+0x150>)
  400e30:	4798      	blx	r3
#endif

	/* Initialize PWM channel for LED1 */
	/* Period is center-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
  400e32:	f44f 7380 	mov.w	r3, #256	; 0x100
  400e36:	8123      	strh	r3, [r4, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  400e38:	f884 a00a 	strb.w	sl, [r4, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  400e3c:	f8c4 9004 	str.w	r9, [r4, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  400e40:	6127      	str	r7, [r4, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  400e42:	60e5      	str	r5, [r4, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  400e44:	2703      	movs	r7, #3
  400e46:	6027      	str	r7, [r4, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PIN_PWM_LED1_CHANNEL, 0);
#else
	pwm_channel_init(PWM, &g_pwm_channel_led);
  400e48:	4621      	mov	r1, r4
  400e4a:	4630      	mov	r0, r6
  400e4c:	47c0      	blx	r8

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_PWM_LED1_CHANNEL, 0);
  400e4e:	462a      	mov	r2, r5
  400e50:	4639      	mov	r1, r7
  400e52:	4630      	mov	r0, r6
  400e54:	4b1e      	ldr	r3, [pc, #120]	; (400ed0 <main+0x154>)
  400e56:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400e58:	4b1e      	ldr	r3, [pc, #120]	; (400ed4 <main+0x158>)
  400e5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400e62:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400e66:	f883 531f 	strb.w	r5, [r3, #799]	; 0x31f
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  400e6a:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(PWM_IRQn);
	NVIC_SetPriority(PWM_IRQn, 0);
	NVIC_EnableIRQ(PWM_IRQn);
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM, PIN_PWM_LED0_CHANNEL);
  400e6c:	4629      	mov	r1, r5
  400e6e:	4630      	mov	r0, r6
  400e70:	4c19      	ldr	r4, [pc, #100]	; (400ed8 <main+0x15c>)
  400e72:	47a0      	blx	r4
	pwm_channel_enable(PWM, PIN_PWM_LED1_CHANNEL);
  400e74:	4639      	mov	r1, r7
  400e76:	4630      	mov	r0, r6
  400e78:	47a0      	blx	r4
  400e7a:	e7fe      	b.n	400e7a <main+0xfe>
  400e7c:	00400131 	.word	0x00400131
  400e80:	00400221 	.word	0x00400221
  400e84:	00400795 	.word	0x00400795
  400e88:	400e0600 	.word	0x400e0600
  400e8c:	20000b70 	.word	0x20000b70
  400e90:	00400c11 	.word	0x00400c11
  400e94:	20000b6c 	.word	0x20000b6c
  400e98:	00400b89 	.word	0x00400b89
  400e9c:	20000b68 	.word	0x20000b68
  400ea0:	02dc6c00 	.word	0x02dc6c00
  400ea4:	004008db 	.word	0x004008db
  400ea8:	200000ec 	.word	0x200000ec
  400eac:	0040106d 	.word	0x0040106d
  400eb0:	00400d0d 	.word	0x00400d0d
  400eb4:	00403c58 	.word	0x00403c58
  400eb8:	0040105d 	.word	0x0040105d
  400ebc:	40020000 	.word	0x40020000
  400ec0:	004008b9 	.word	0x004008b9
  400ec4:	00400815 	.word	0x00400815
  400ec8:	20000b74 	.word	0x20000b74
  400ecc:	004008c7 	.word	0x004008c7
  400ed0:	004008d1 	.word	0x004008d1
  400ed4:	e000e100 	.word	0xe000e100
  400ed8:	004008af 	.word	0x004008af
  400edc:	00400859 	.word	0x00400859

00400ee0 <__libc_init_array>:
  400ee0:	b570      	push	{r4, r5, r6, lr}
  400ee2:	4e0f      	ldr	r6, [pc, #60]	; (400f20 <__libc_init_array+0x40>)
  400ee4:	4d0f      	ldr	r5, [pc, #60]	; (400f24 <__libc_init_array+0x44>)
  400ee6:	1b76      	subs	r6, r6, r5
  400ee8:	10b6      	asrs	r6, r6, #2
  400eea:	bf18      	it	ne
  400eec:	2400      	movne	r4, #0
  400eee:	d005      	beq.n	400efc <__libc_init_array+0x1c>
  400ef0:	3401      	adds	r4, #1
  400ef2:	f855 3b04 	ldr.w	r3, [r5], #4
  400ef6:	4798      	blx	r3
  400ef8:	42a6      	cmp	r6, r4
  400efa:	d1f9      	bne.n	400ef0 <__libc_init_array+0x10>
  400efc:	4e0a      	ldr	r6, [pc, #40]	; (400f28 <__libc_init_array+0x48>)
  400efe:	4d0b      	ldr	r5, [pc, #44]	; (400f2c <__libc_init_array+0x4c>)
  400f00:	f002 ffb4 	bl	403e6c <_init>
  400f04:	1b76      	subs	r6, r6, r5
  400f06:	10b6      	asrs	r6, r6, #2
  400f08:	bf18      	it	ne
  400f0a:	2400      	movne	r4, #0
  400f0c:	d006      	beq.n	400f1c <__libc_init_array+0x3c>
  400f0e:	3401      	adds	r4, #1
  400f10:	f855 3b04 	ldr.w	r3, [r5], #4
  400f14:	4798      	blx	r3
  400f16:	42a6      	cmp	r6, r4
  400f18:	d1f9      	bne.n	400f0e <__libc_init_array+0x2e>
  400f1a:	bd70      	pop	{r4, r5, r6, pc}
  400f1c:	bd70      	pop	{r4, r5, r6, pc}
  400f1e:	bf00      	nop
  400f20:	00403e78 	.word	0x00403e78
  400f24:	00403e78 	.word	0x00403e78
  400f28:	00403e80 	.word	0x00403e80
  400f2c:	00403e78 	.word	0x00403e78

00400f30 <iprintf>:
  400f30:	b40f      	push	{r0, r1, r2, r3}
  400f32:	b510      	push	{r4, lr}
  400f34:	4b07      	ldr	r3, [pc, #28]	; (400f54 <iprintf+0x24>)
  400f36:	b082      	sub	sp, #8
  400f38:	ac04      	add	r4, sp, #16
  400f3a:	f854 2b04 	ldr.w	r2, [r4], #4
  400f3e:	6818      	ldr	r0, [r3, #0]
  400f40:	4623      	mov	r3, r4
  400f42:	6881      	ldr	r1, [r0, #8]
  400f44:	9401      	str	r4, [sp, #4]
  400f46:	f000 f9ad 	bl	4012a4 <_vfiprintf_r>
  400f4a:	b002      	add	sp, #8
  400f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400f50:	b004      	add	sp, #16
  400f52:	4770      	bx	lr
  400f54:	200000ec 	.word	0x200000ec

00400f58 <memset>:
  400f58:	b470      	push	{r4, r5, r6}
  400f5a:	0786      	lsls	r6, r0, #30
  400f5c:	d046      	beq.n	400fec <memset+0x94>
  400f5e:	1e54      	subs	r4, r2, #1
  400f60:	2a00      	cmp	r2, #0
  400f62:	d041      	beq.n	400fe8 <memset+0x90>
  400f64:	b2ca      	uxtb	r2, r1
  400f66:	4603      	mov	r3, r0
  400f68:	e002      	b.n	400f70 <memset+0x18>
  400f6a:	f114 34ff 	adds.w	r4, r4, #4294967295
  400f6e:	d33b      	bcc.n	400fe8 <memset+0x90>
  400f70:	f803 2b01 	strb.w	r2, [r3], #1
  400f74:	079d      	lsls	r5, r3, #30
  400f76:	d1f8      	bne.n	400f6a <memset+0x12>
  400f78:	2c03      	cmp	r4, #3
  400f7a:	d92e      	bls.n	400fda <memset+0x82>
  400f7c:	b2cd      	uxtb	r5, r1
  400f7e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400f82:	2c0f      	cmp	r4, #15
  400f84:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400f88:	d919      	bls.n	400fbe <memset+0x66>
  400f8a:	4626      	mov	r6, r4
  400f8c:	f103 0210 	add.w	r2, r3, #16
  400f90:	3e10      	subs	r6, #16
  400f92:	2e0f      	cmp	r6, #15
  400f94:	f842 5c10 	str.w	r5, [r2, #-16]
  400f98:	f842 5c0c 	str.w	r5, [r2, #-12]
  400f9c:	f842 5c08 	str.w	r5, [r2, #-8]
  400fa0:	f842 5c04 	str.w	r5, [r2, #-4]
  400fa4:	f102 0210 	add.w	r2, r2, #16
  400fa8:	d8f2      	bhi.n	400f90 <memset+0x38>
  400faa:	f1a4 0210 	sub.w	r2, r4, #16
  400fae:	f022 020f 	bic.w	r2, r2, #15
  400fb2:	f004 040f 	and.w	r4, r4, #15
  400fb6:	3210      	adds	r2, #16
  400fb8:	2c03      	cmp	r4, #3
  400fba:	4413      	add	r3, r2
  400fbc:	d90d      	bls.n	400fda <memset+0x82>
  400fbe:	461e      	mov	r6, r3
  400fc0:	4622      	mov	r2, r4
  400fc2:	3a04      	subs	r2, #4
  400fc4:	2a03      	cmp	r2, #3
  400fc6:	f846 5b04 	str.w	r5, [r6], #4
  400fca:	d8fa      	bhi.n	400fc2 <memset+0x6a>
  400fcc:	1f22      	subs	r2, r4, #4
  400fce:	f022 0203 	bic.w	r2, r2, #3
  400fd2:	3204      	adds	r2, #4
  400fd4:	4413      	add	r3, r2
  400fd6:	f004 0403 	and.w	r4, r4, #3
  400fda:	b12c      	cbz	r4, 400fe8 <memset+0x90>
  400fdc:	b2c9      	uxtb	r1, r1
  400fde:	441c      	add	r4, r3
  400fe0:	f803 1b01 	strb.w	r1, [r3], #1
  400fe4:	429c      	cmp	r4, r3
  400fe6:	d1fb      	bne.n	400fe0 <memset+0x88>
  400fe8:	bc70      	pop	{r4, r5, r6}
  400fea:	4770      	bx	lr
  400fec:	4614      	mov	r4, r2
  400fee:	4603      	mov	r3, r0
  400ff0:	e7c2      	b.n	400f78 <memset+0x20>
  400ff2:	bf00      	nop

00400ff4 <_puts_r>:
  400ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ff6:	4605      	mov	r5, r0
  400ff8:	b089      	sub	sp, #36	; 0x24
  400ffa:	4608      	mov	r0, r1
  400ffc:	460c      	mov	r4, r1
  400ffe:	2701      	movs	r7, #1
  401000:	f000 f8e2 	bl	4011c8 <strlen>
  401004:	2602      	movs	r6, #2
  401006:	19c3      	adds	r3, r0, r7
  401008:	4913      	ldr	r1, [pc, #76]	; (401058 <_puts_r+0x64>)
  40100a:	9303      	str	r3, [sp, #12]
  40100c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40100e:	aa04      	add	r2, sp, #16
  401010:	9404      	str	r4, [sp, #16]
  401012:	9005      	str	r0, [sp, #20]
  401014:	68ac      	ldr	r4, [r5, #8]
  401016:	9707      	str	r7, [sp, #28]
  401018:	9602      	str	r6, [sp, #8]
  40101a:	9106      	str	r1, [sp, #24]
  40101c:	9201      	str	r2, [sp, #4]
  40101e:	b1b3      	cbz	r3, 40104e <_puts_r+0x5a>
  401020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401024:	049a      	lsls	r2, r3, #18
  401026:	d406      	bmi.n	401036 <_puts_r+0x42>
  401028:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40102a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40102e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401032:	81a3      	strh	r3, [r4, #12]
  401034:	6662      	str	r2, [r4, #100]	; 0x64
  401036:	4621      	mov	r1, r4
  401038:	4628      	mov	r0, r5
  40103a:	aa01      	add	r2, sp, #4
  40103c:	f001 fabe 	bl	4025bc <__sfvwrite_r>
  401040:	2800      	cmp	r0, #0
  401042:	bf14      	ite	ne
  401044:	f04f 30ff 	movne.w	r0, #4294967295
  401048:	200a      	moveq	r0, #10
  40104a:	b009      	add	sp, #36	; 0x24
  40104c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40104e:	4628      	mov	r0, r5
  401050:	f001 f8fc 	bl	40224c <__sinit>
  401054:	e7e4      	b.n	401020 <_puts_r+0x2c>
  401056:	bf00      	nop
  401058:	00403cf0 	.word	0x00403cf0

0040105c <puts>:
  40105c:	4b02      	ldr	r3, [pc, #8]	; (401068 <puts+0xc>)
  40105e:	4601      	mov	r1, r0
  401060:	6818      	ldr	r0, [r3, #0]
  401062:	f7ff bfc7 	b.w	400ff4 <_puts_r>
  401066:	bf00      	nop
  401068:	200000ec 	.word	0x200000ec

0040106c <setbuf>:
  40106c:	2900      	cmp	r1, #0
  40106e:	bf0c      	ite	eq
  401070:	2202      	moveq	r2, #2
  401072:	2200      	movne	r2, #0
  401074:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401078:	f000 b800 	b.w	40107c <setvbuf>

0040107c <setvbuf>:
  40107c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401080:	4d50      	ldr	r5, [pc, #320]	; (4011c4 <setvbuf+0x148>)
  401082:	b083      	sub	sp, #12
  401084:	682d      	ldr	r5, [r5, #0]
  401086:	4604      	mov	r4, r0
  401088:	460f      	mov	r7, r1
  40108a:	4690      	mov	r8, r2
  40108c:	461e      	mov	r6, r3
  40108e:	b115      	cbz	r5, 401096 <setvbuf+0x1a>
  401090:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401092:	2b00      	cmp	r3, #0
  401094:	d077      	beq.n	401186 <setvbuf+0x10a>
  401096:	f1b8 0f02 	cmp.w	r8, #2
  40109a:	d004      	beq.n	4010a6 <setvbuf+0x2a>
  40109c:	f1b8 0f01 	cmp.w	r8, #1
  4010a0:	d87d      	bhi.n	40119e <setvbuf+0x122>
  4010a2:	2e00      	cmp	r6, #0
  4010a4:	db7b      	blt.n	40119e <setvbuf+0x122>
  4010a6:	4621      	mov	r1, r4
  4010a8:	4628      	mov	r0, r5
  4010aa:	f001 f83b 	bl	402124 <_fflush_r>
  4010ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4010b0:	b141      	cbz	r1, 4010c4 <setvbuf+0x48>
  4010b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4010b6:	4299      	cmp	r1, r3
  4010b8:	d002      	beq.n	4010c0 <setvbuf+0x44>
  4010ba:	4628      	mov	r0, r5
  4010bc:	f001 f998 	bl	4023f0 <_free_r>
  4010c0:	2300      	movs	r3, #0
  4010c2:	6323      	str	r3, [r4, #48]	; 0x30
  4010c4:	2200      	movs	r2, #0
  4010c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010ca:	61a2      	str	r2, [r4, #24]
  4010cc:	6062      	str	r2, [r4, #4]
  4010ce:	061a      	lsls	r2, r3, #24
  4010d0:	d452      	bmi.n	401178 <setvbuf+0xfc>
  4010d2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4010d6:	f023 0303 	bic.w	r3, r3, #3
  4010da:	f1b8 0f02 	cmp.w	r8, #2
  4010de:	81a3      	strh	r3, [r4, #12]
  4010e0:	d037      	beq.n	401152 <setvbuf+0xd6>
  4010e2:	ab01      	add	r3, sp, #4
  4010e4:	466a      	mov	r2, sp
  4010e6:	4621      	mov	r1, r4
  4010e8:	4628      	mov	r0, r5
  4010ea:	f001 fc17 	bl	40291c <__swhatbuf_r>
  4010ee:	89a3      	ldrh	r3, [r4, #12]
  4010f0:	4318      	orrs	r0, r3
  4010f2:	81a0      	strh	r0, [r4, #12]
  4010f4:	b316      	cbz	r6, 40113c <setvbuf+0xc0>
  4010f6:	b317      	cbz	r7, 40113e <setvbuf+0xc2>
  4010f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4010fa:	2b00      	cmp	r3, #0
  4010fc:	d04b      	beq.n	401196 <setvbuf+0x11a>
  4010fe:	9b00      	ldr	r3, [sp, #0]
  401100:	6027      	str	r7, [r4, #0]
  401102:	429e      	cmp	r6, r3
  401104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401108:	6127      	str	r7, [r4, #16]
  40110a:	bf1c      	itt	ne
  40110c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  401110:	81a3      	strhne	r3, [r4, #12]
  401112:	f1b8 0f01 	cmp.w	r8, #1
  401116:	bf04      	itt	eq
  401118:	f043 0301 	orreq.w	r3, r3, #1
  40111c:	81a3      	strheq	r3, [r4, #12]
  40111e:	b29b      	uxth	r3, r3
  401120:	f013 0008 	ands.w	r0, r3, #8
  401124:	6166      	str	r6, [r4, #20]
  401126:	d023      	beq.n	401170 <setvbuf+0xf4>
  401128:	f013 0001 	ands.w	r0, r3, #1
  40112c:	d02f      	beq.n	40118e <setvbuf+0x112>
  40112e:	2000      	movs	r0, #0
  401130:	4276      	negs	r6, r6
  401132:	61a6      	str	r6, [r4, #24]
  401134:	60a0      	str	r0, [r4, #8]
  401136:	b003      	add	sp, #12
  401138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40113c:	9e00      	ldr	r6, [sp, #0]
  40113e:	4630      	mov	r0, r6
  401140:	f001 fc5e 	bl	402a00 <malloc>
  401144:	4607      	mov	r7, r0
  401146:	b368      	cbz	r0, 4011a4 <setvbuf+0x128>
  401148:	89a3      	ldrh	r3, [r4, #12]
  40114a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40114e:	81a3      	strh	r3, [r4, #12]
  401150:	e7d2      	b.n	4010f8 <setvbuf+0x7c>
  401152:	2000      	movs	r0, #0
  401154:	2500      	movs	r5, #0
  401156:	2101      	movs	r1, #1
  401158:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40115c:	f043 0302 	orr.w	r3, r3, #2
  401160:	81a3      	strh	r3, [r4, #12]
  401162:	60a5      	str	r5, [r4, #8]
  401164:	6161      	str	r1, [r4, #20]
  401166:	6022      	str	r2, [r4, #0]
  401168:	6122      	str	r2, [r4, #16]
  40116a:	b003      	add	sp, #12
  40116c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401170:	60a0      	str	r0, [r4, #8]
  401172:	b003      	add	sp, #12
  401174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401178:	6921      	ldr	r1, [r4, #16]
  40117a:	4628      	mov	r0, r5
  40117c:	f001 f938 	bl	4023f0 <_free_r>
  401180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401184:	e7a5      	b.n	4010d2 <setvbuf+0x56>
  401186:	4628      	mov	r0, r5
  401188:	f001 f860 	bl	40224c <__sinit>
  40118c:	e783      	b.n	401096 <setvbuf+0x1a>
  40118e:	60a6      	str	r6, [r4, #8]
  401190:	b003      	add	sp, #12
  401192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401196:	4628      	mov	r0, r5
  401198:	f001 f858 	bl	40224c <__sinit>
  40119c:	e7af      	b.n	4010fe <setvbuf+0x82>
  40119e:	f04f 30ff 	mov.w	r0, #4294967295
  4011a2:	e7e2      	b.n	40116a <setvbuf+0xee>
  4011a4:	f8dd 9000 	ldr.w	r9, [sp]
  4011a8:	45b1      	cmp	r9, r6
  4011aa:	d006      	beq.n	4011ba <setvbuf+0x13e>
  4011ac:	4648      	mov	r0, r9
  4011ae:	f001 fc27 	bl	402a00 <malloc>
  4011b2:	4607      	mov	r7, r0
  4011b4:	b108      	cbz	r0, 4011ba <setvbuf+0x13e>
  4011b6:	464e      	mov	r6, r9
  4011b8:	e7c6      	b.n	401148 <setvbuf+0xcc>
  4011ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011be:	f04f 30ff 	mov.w	r0, #4294967295
  4011c2:	e7c7      	b.n	401154 <setvbuf+0xd8>
  4011c4:	200000ec 	.word	0x200000ec

004011c8 <strlen>:
  4011c8:	f020 0103 	bic.w	r1, r0, #3
  4011cc:	f010 0003 	ands.w	r0, r0, #3
  4011d0:	f1c0 0000 	rsb	r0, r0, #0
  4011d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4011d8:	f100 0c04 	add.w	ip, r0, #4
  4011dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4011e0:	f06f 0200 	mvn.w	r2, #0
  4011e4:	bf1c      	itt	ne
  4011e6:	fa22 f20c 	lsrne.w	r2, r2, ip
  4011ea:	4313      	orrne	r3, r2
  4011ec:	f04f 0c01 	mov.w	ip, #1
  4011f0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4011f4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4011f8:	eba3 020c 	sub.w	r2, r3, ip
  4011fc:	ea22 0203 	bic.w	r2, r2, r3
  401200:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  401204:	bf04      	itt	eq
  401206:	f851 3b04 	ldreq.w	r3, [r1], #4
  40120a:	3004      	addeq	r0, #4
  40120c:	d0f4      	beq.n	4011f8 <strlen+0x30>
  40120e:	f1c2 0100 	rsb	r1, r2, #0
  401212:	ea02 0201 	and.w	r2, r2, r1
  401216:	fab2 f282 	clz	r2, r2
  40121a:	f1c2 021f 	rsb	r2, r2, #31
  40121e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401222:	4770      	bx	lr

00401224 <__sprint_r.part.0>:
  401224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401228:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40122a:	4693      	mov	fp, r2
  40122c:	049c      	lsls	r4, r3, #18
  40122e:	d52f      	bpl.n	401290 <__sprint_r.part.0+0x6c>
  401230:	6893      	ldr	r3, [r2, #8]
  401232:	6812      	ldr	r2, [r2, #0]
  401234:	b353      	cbz	r3, 40128c <__sprint_r.part.0+0x68>
  401236:	460e      	mov	r6, r1
  401238:	4607      	mov	r7, r0
  40123a:	f102 0908 	add.w	r9, r2, #8
  40123e:	e919 0420 	ldmdb	r9, {r5, sl}
  401242:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401246:	d017      	beq.n	401278 <__sprint_r.part.0+0x54>
  401248:	2400      	movs	r4, #0
  40124a:	3d04      	subs	r5, #4
  40124c:	e001      	b.n	401252 <__sprint_r.part.0+0x2e>
  40124e:	45a0      	cmp	r8, r4
  401250:	d010      	beq.n	401274 <__sprint_r.part.0+0x50>
  401252:	4632      	mov	r2, r6
  401254:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401258:	4638      	mov	r0, r7
  40125a:	f001 f867 	bl	40232c <_fputwc_r>
  40125e:	1c43      	adds	r3, r0, #1
  401260:	f104 0401 	add.w	r4, r4, #1
  401264:	d1f3      	bne.n	40124e <__sprint_r.part.0+0x2a>
  401266:	2300      	movs	r3, #0
  401268:	f8cb 3008 	str.w	r3, [fp, #8]
  40126c:	f8cb 3004 	str.w	r3, [fp, #4]
  401270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401274:	f8db 3008 	ldr.w	r3, [fp, #8]
  401278:	f02a 0a03 	bic.w	sl, sl, #3
  40127c:	eba3 030a 	sub.w	r3, r3, sl
  401280:	f8cb 3008 	str.w	r3, [fp, #8]
  401284:	f109 0908 	add.w	r9, r9, #8
  401288:	2b00      	cmp	r3, #0
  40128a:	d1d8      	bne.n	40123e <__sprint_r.part.0+0x1a>
  40128c:	2000      	movs	r0, #0
  40128e:	e7ea      	b.n	401266 <__sprint_r.part.0+0x42>
  401290:	f001 f994 	bl	4025bc <__sfvwrite_r>
  401294:	2300      	movs	r3, #0
  401296:	f8cb 3008 	str.w	r3, [fp, #8]
  40129a:	f8cb 3004 	str.w	r3, [fp, #4]
  40129e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012a2:	bf00      	nop

004012a4 <_vfiprintf_r>:
  4012a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012a8:	b0ad      	sub	sp, #180	; 0xb4
  4012aa:	461d      	mov	r5, r3
  4012ac:	9101      	str	r1, [sp, #4]
  4012ae:	4691      	mov	r9, r2
  4012b0:	9308      	str	r3, [sp, #32]
  4012b2:	9006      	str	r0, [sp, #24]
  4012b4:	b118      	cbz	r0, 4012be <_vfiprintf_r+0x1a>
  4012b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4012b8:	2b00      	cmp	r3, #0
  4012ba:	f000 80e0 	beq.w	40147e <_vfiprintf_r+0x1da>
  4012be:	9c01      	ldr	r4, [sp, #4]
  4012c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4012c4:	b281      	uxth	r1, r0
  4012c6:	048b      	lsls	r3, r1, #18
  4012c8:	d407      	bmi.n	4012da <_vfiprintf_r+0x36>
  4012ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4012cc:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4012d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4012d4:	81a1      	strh	r1, [r4, #12]
  4012d6:	6663      	str	r3, [r4, #100]	; 0x64
  4012d8:	b289      	uxth	r1, r1
  4012da:	070f      	lsls	r7, r1, #28
  4012dc:	f140 80b1 	bpl.w	401442 <_vfiprintf_r+0x19e>
  4012e0:	9b01      	ldr	r3, [sp, #4]
  4012e2:	691b      	ldr	r3, [r3, #16]
  4012e4:	2b00      	cmp	r3, #0
  4012e6:	f000 80ac 	beq.w	401442 <_vfiprintf_r+0x19e>
  4012ea:	f001 011a 	and.w	r1, r1, #26
  4012ee:	290a      	cmp	r1, #10
  4012f0:	f000 80b5 	beq.w	40145e <_vfiprintf_r+0x1ba>
  4012f4:	2300      	movs	r3, #0
  4012f6:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
  4012fa:	46d3      	mov	fp, sl
  4012fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4012fe:	9304      	str	r3, [sp, #16]
  401300:	9311      	str	r3, [sp, #68]	; 0x44
  401302:	9310      	str	r3, [sp, #64]	; 0x40
  401304:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  401308:	f899 3000 	ldrb.w	r3, [r9]
  40130c:	464c      	mov	r4, r9
  40130e:	b1fb      	cbz	r3, 401350 <_vfiprintf_r+0xac>
  401310:	2b25      	cmp	r3, #37	; 0x25
  401312:	d102      	bne.n	40131a <_vfiprintf_r+0x76>
  401314:	e01c      	b.n	401350 <_vfiprintf_r+0xac>
  401316:	2b25      	cmp	r3, #37	; 0x25
  401318:	d003      	beq.n	401322 <_vfiprintf_r+0x7e>
  40131a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40131e:	2b00      	cmp	r3, #0
  401320:	d1f9      	bne.n	401316 <_vfiprintf_r+0x72>
  401322:	eba4 0509 	sub.w	r5, r4, r9
  401326:	b19d      	cbz	r5, 401350 <_vfiprintf_r+0xac>
  401328:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40132a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40132c:	3301      	adds	r3, #1
  40132e:	442a      	add	r2, r5
  401330:	2b07      	cmp	r3, #7
  401332:	f8cb 9000 	str.w	r9, [fp]
  401336:	f8cb 5004 	str.w	r5, [fp, #4]
  40133a:	9211      	str	r2, [sp, #68]	; 0x44
  40133c:	9310      	str	r3, [sp, #64]	; 0x40
  40133e:	dd7a      	ble.n	401436 <_vfiprintf_r+0x192>
  401340:	2a00      	cmp	r2, #0
  401342:	f040 8493 	bne.w	401c6c <_vfiprintf_r+0x9c8>
  401346:	46d3      	mov	fp, sl
  401348:	9b04      	ldr	r3, [sp, #16]
  40134a:	9210      	str	r2, [sp, #64]	; 0x40
  40134c:	442b      	add	r3, r5
  40134e:	9304      	str	r3, [sp, #16]
  401350:	7823      	ldrb	r3, [r4, #0]
  401352:	2b00      	cmp	r3, #0
  401354:	f000 83b6 	beq.w	401ac4 <_vfiprintf_r+0x820>
  401358:	2000      	movs	r0, #0
  40135a:	f04f 0300 	mov.w	r3, #0
  40135e:	f104 0901 	add.w	r9, r4, #1
  401362:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401366:	7862      	ldrb	r2, [r4, #1]
  401368:	4606      	mov	r6, r0
  40136a:	4605      	mov	r5, r0
  40136c:	4603      	mov	r3, r0
  40136e:	f04f 34ff 	mov.w	r4, #4294967295
  401372:	f109 0901 	add.w	r9, r9, #1
  401376:	f1a2 0120 	sub.w	r1, r2, #32
  40137a:	2958      	cmp	r1, #88	; 0x58
  40137c:	f200 830a 	bhi.w	401994 <_vfiprintf_r+0x6f0>
  401380:	e8df f011 	tbh	[pc, r1, lsl #1]
  401384:	0308023f 	.word	0x0308023f
  401388:	02e70308 	.word	0x02e70308
  40138c:	03080308 	.word	0x03080308
  401390:	03080308 	.word	0x03080308
  401394:	03080308 	.word	0x03080308
  401398:	02ec0080 	.word	0x02ec0080
  40139c:	00880308 	.word	0x00880308
  4013a0:	0308027f 	.word	0x0308027f
  4013a4:	01db01d6 	.word	0x01db01d6
  4013a8:	01db01db 	.word	0x01db01db
  4013ac:	01db01db 	.word	0x01db01db
  4013b0:	01db01db 	.word	0x01db01db
  4013b4:	01db01db 	.word	0x01db01db
  4013b8:	03080308 	.word	0x03080308
  4013bc:	03080308 	.word	0x03080308
  4013c0:	03080308 	.word	0x03080308
  4013c4:	03080308 	.word	0x03080308
  4013c8:	03080308 	.word	0x03080308
  4013cc:	03080247 	.word	0x03080247
  4013d0:	03080308 	.word	0x03080308
  4013d4:	03080308 	.word	0x03080308
  4013d8:	03080308 	.word	0x03080308
  4013dc:	03080308 	.word	0x03080308
  4013e0:	024e0308 	.word	0x024e0308
  4013e4:	03080308 	.word	0x03080308
  4013e8:	03080308 	.word	0x03080308
  4013ec:	02520308 	.word	0x02520308
  4013f0:	03080308 	.word	0x03080308
  4013f4:	0308025a 	.word	0x0308025a
  4013f8:	03080308 	.word	0x03080308
  4013fc:	03080308 	.word	0x03080308
  401400:	03080308 	.word	0x03080308
  401404:	03080308 	.word	0x03080308
  401408:	01e90308 	.word	0x01e90308
  40140c:	030801fe 	.word	0x030801fe
  401410:	03080308 	.word	0x03080308
  401414:	01fe0303 	.word	0x01fe0303
  401418:	03080308 	.word	0x03080308
  40141c:	03080299 	.word	0x03080299
  401420:	008d02f1 	.word	0x008d02f1
  401424:	02bf02ad 	.word	0x02bf02ad
  401428:	02c40308 	.word	0x02c40308
  40142c:	01c40308 	.word	0x01c40308
  401430:	03080308 	.word	0x03080308
  401434:	02a6      	.short	0x02a6
  401436:	f10b 0b08 	add.w	fp, fp, #8
  40143a:	9b04      	ldr	r3, [sp, #16]
  40143c:	442b      	add	r3, r5
  40143e:	9304      	str	r3, [sp, #16]
  401440:	e786      	b.n	401350 <_vfiprintf_r+0xac>
  401442:	9c01      	ldr	r4, [sp, #4]
  401444:	9806      	ldr	r0, [sp, #24]
  401446:	4621      	mov	r1, r4
  401448:	f000 fd5c 	bl	401f04 <__swsetup_r>
  40144c:	2800      	cmp	r0, #0
  40144e:	f040 8345 	bne.w	401adc <_vfiprintf_r+0x838>
  401452:	89a1      	ldrh	r1, [r4, #12]
  401454:	f001 011a 	and.w	r1, r1, #26
  401458:	290a      	cmp	r1, #10
  40145a:	f47f af4b 	bne.w	4012f4 <_vfiprintf_r+0x50>
  40145e:	9901      	ldr	r1, [sp, #4]
  401460:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  401464:	2b00      	cmp	r3, #0
  401466:	f6ff af45 	blt.w	4012f4 <_vfiprintf_r+0x50>
  40146a:	462b      	mov	r3, r5
  40146c:	464a      	mov	r2, r9
  40146e:	9806      	ldr	r0, [sp, #24]
  401470:	f000 fd12 	bl	401e98 <__sbprintf>
  401474:	9004      	str	r0, [sp, #16]
  401476:	9804      	ldr	r0, [sp, #16]
  401478:	b02d      	add	sp, #180	; 0xb4
  40147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40147e:	f000 fee5 	bl	40224c <__sinit>
  401482:	e71c      	b.n	4012be <_vfiprintf_r+0x1a>
  401484:	9908      	ldr	r1, [sp, #32]
  401486:	460a      	mov	r2, r1
  401488:	680d      	ldr	r5, [r1, #0]
  40148a:	3204      	adds	r2, #4
  40148c:	2d00      	cmp	r5, #0
  40148e:	9208      	str	r2, [sp, #32]
  401490:	da02      	bge.n	401498 <_vfiprintf_r+0x1f4>
  401492:	426d      	negs	r5, r5
  401494:	f043 0304 	orr.w	r3, r3, #4
  401498:	f899 2000 	ldrb.w	r2, [r9]
  40149c:	e769      	b.n	401372 <_vfiprintf_r+0xce>
  40149e:	9507      	str	r5, [sp, #28]
  4014a0:	f013 0220 	ands.w	r2, r3, #32
  4014a4:	f040 843d 	bne.w	401d22 <_vfiprintf_r+0xa7e>
  4014a8:	f013 0110 	ands.w	r1, r3, #16
  4014ac:	f040 83e9 	bne.w	401c82 <_vfiprintf_r+0x9de>
  4014b0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4014b4:	f000 83e5 	beq.w	401c82 <_vfiprintf_r+0x9de>
  4014b8:	9808      	ldr	r0, [sp, #32]
  4014ba:	460a      	mov	r2, r1
  4014bc:	4601      	mov	r1, r0
  4014be:	2700      	movs	r7, #0
  4014c0:	3104      	adds	r1, #4
  4014c2:	8806      	ldrh	r6, [r0, #0]
  4014c4:	9108      	str	r1, [sp, #32]
  4014c6:	f04f 0100 	mov.w	r1, #0
  4014ca:	2500      	movs	r5, #0
  4014cc:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4014d0:	1c61      	adds	r1, r4, #1
  4014d2:	f000 8177 	beq.w	4017c4 <_vfiprintf_r+0x520>
  4014d6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4014da:	9103      	str	r1, [sp, #12]
  4014dc:	ea56 0107 	orrs.w	r1, r6, r7
  4014e0:	f040 8175 	bne.w	4017ce <_vfiprintf_r+0x52a>
  4014e4:	2c00      	cmp	r4, #0
  4014e6:	f040 8354 	bne.w	401b92 <_vfiprintf_r+0x8ee>
  4014ea:	2a00      	cmp	r2, #0
  4014ec:	f040 8393 	bne.w	401c16 <_vfiprintf_r+0x972>
  4014f0:	f013 0301 	ands.w	r3, r3, #1
  4014f4:	9305      	str	r3, [sp, #20]
  4014f6:	f000 8442 	beq.w	401d7e <_vfiprintf_r+0xada>
  4014fa:	2330      	movs	r3, #48	; 0x30
  4014fc:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  401500:	f808 3d41 	strb.w	r3, [r8, #-65]!
  401504:	9b05      	ldr	r3, [sp, #20]
  401506:	42a3      	cmp	r3, r4
  401508:	bfb8      	it	lt
  40150a:	4623      	movlt	r3, r4
  40150c:	9302      	str	r3, [sp, #8]
  40150e:	b10d      	cbz	r5, 401514 <_vfiprintf_r+0x270>
  401510:	3301      	adds	r3, #1
  401512:	9302      	str	r3, [sp, #8]
  401514:	9b03      	ldr	r3, [sp, #12]
  401516:	f013 0302 	ands.w	r3, r3, #2
  40151a:	9309      	str	r3, [sp, #36]	; 0x24
  40151c:	d002      	beq.n	401524 <_vfiprintf_r+0x280>
  40151e:	9b02      	ldr	r3, [sp, #8]
  401520:	3302      	adds	r3, #2
  401522:	9302      	str	r3, [sp, #8]
  401524:	9b03      	ldr	r3, [sp, #12]
  401526:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40152a:	930a      	str	r3, [sp, #40]	; 0x28
  40152c:	f040 8261 	bne.w	4019f2 <_vfiprintf_r+0x74e>
  401530:	9b07      	ldr	r3, [sp, #28]
  401532:	9a02      	ldr	r2, [sp, #8]
  401534:	1a9d      	subs	r5, r3, r2
  401536:	2d00      	cmp	r5, #0
  401538:	f340 825b 	ble.w	4019f2 <_vfiprintf_r+0x74e>
  40153c:	2d10      	cmp	r5, #16
  40153e:	f340 8468 	ble.w	401e12 <_vfiprintf_r+0xb6e>
  401542:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401544:	46de      	mov	lr, fp
  401546:	2710      	movs	r7, #16
  401548:	46a3      	mov	fp, r4
  40154a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40154c:	4eb8      	ldr	r6, [pc, #736]	; (401830 <_vfiprintf_r+0x58c>)
  40154e:	4619      	mov	r1, r3
  401550:	9c06      	ldr	r4, [sp, #24]
  401552:	e007      	b.n	401564 <_vfiprintf_r+0x2c0>
  401554:	f101 0c02 	add.w	ip, r1, #2
  401558:	4601      	mov	r1, r0
  40155a:	f10e 0e08 	add.w	lr, lr, #8
  40155e:	3d10      	subs	r5, #16
  401560:	2d10      	cmp	r5, #16
  401562:	dd11      	ble.n	401588 <_vfiprintf_r+0x2e4>
  401564:	1c48      	adds	r0, r1, #1
  401566:	3210      	adds	r2, #16
  401568:	2807      	cmp	r0, #7
  40156a:	9211      	str	r2, [sp, #68]	; 0x44
  40156c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401570:	9010      	str	r0, [sp, #64]	; 0x40
  401572:	ddef      	ble.n	401554 <_vfiprintf_r+0x2b0>
  401574:	2a00      	cmp	r2, #0
  401576:	f040 8227 	bne.w	4019c8 <_vfiprintf_r+0x724>
  40157a:	3d10      	subs	r5, #16
  40157c:	2d10      	cmp	r5, #16
  40157e:	4611      	mov	r1, r2
  401580:	f04f 0c01 	mov.w	ip, #1
  401584:	46d6      	mov	lr, sl
  401586:	dced      	bgt.n	401564 <_vfiprintf_r+0x2c0>
  401588:	465c      	mov	r4, fp
  40158a:	4661      	mov	r1, ip
  40158c:	46f3      	mov	fp, lr
  40158e:	442a      	add	r2, r5
  401590:	2907      	cmp	r1, #7
  401592:	9211      	str	r2, [sp, #68]	; 0x44
  401594:	f8cb 6000 	str.w	r6, [fp]
  401598:	f8cb 5004 	str.w	r5, [fp, #4]
  40159c:	9110      	str	r1, [sp, #64]	; 0x40
  40159e:	f300 82e4 	bgt.w	401b6a <_vfiprintf_r+0x8c6>
  4015a2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4015a6:	f10b 0b08 	add.w	fp, fp, #8
  4015aa:	1c48      	adds	r0, r1, #1
  4015ac:	2d00      	cmp	r5, #0
  4015ae:	f040 8228 	bne.w	401a02 <_vfiprintf_r+0x75e>
  4015b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4015b4:	2b00      	cmp	r3, #0
  4015b6:	f000 8242 	beq.w	401a3e <_vfiprintf_r+0x79a>
  4015ba:	2102      	movs	r1, #2
  4015bc:	ab0e      	add	r3, sp, #56	; 0x38
  4015be:	440a      	add	r2, r1
  4015c0:	2807      	cmp	r0, #7
  4015c2:	9211      	str	r2, [sp, #68]	; 0x44
  4015c4:	9010      	str	r0, [sp, #64]	; 0x40
  4015c6:	f8cb 1004 	str.w	r1, [fp, #4]
  4015ca:	f8cb 3000 	str.w	r3, [fp]
  4015ce:	f340 8232 	ble.w	401a36 <_vfiprintf_r+0x792>
  4015d2:	2a00      	cmp	r2, #0
  4015d4:	f040 8378 	bne.w	401cc8 <_vfiprintf_r+0xa24>
  4015d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4015da:	2001      	movs	r0, #1
  4015dc:	2b80      	cmp	r3, #128	; 0x80
  4015de:	4611      	mov	r1, r2
  4015e0:	46d3      	mov	fp, sl
  4015e2:	f040 8230 	bne.w	401a46 <_vfiprintf_r+0x7a2>
  4015e6:	9b07      	ldr	r3, [sp, #28]
  4015e8:	9d02      	ldr	r5, [sp, #8]
  4015ea:	1b5e      	subs	r6, r3, r5
  4015ec:	2e00      	cmp	r6, #0
  4015ee:	f340 822a 	ble.w	401a46 <_vfiprintf_r+0x7a2>
  4015f2:	2e10      	cmp	r6, #16
  4015f4:	f340 8428 	ble.w	401e48 <_vfiprintf_r+0xba4>
  4015f8:	46dc      	mov	ip, fp
  4015fa:	2710      	movs	r7, #16
  4015fc:	46a3      	mov	fp, r4
  4015fe:	4d8d      	ldr	r5, [pc, #564]	; (401834 <_vfiprintf_r+0x590>)
  401600:	9c06      	ldr	r4, [sp, #24]
  401602:	e007      	b.n	401614 <_vfiprintf_r+0x370>
  401604:	f101 0e02 	add.w	lr, r1, #2
  401608:	4601      	mov	r1, r0
  40160a:	f10c 0c08 	add.w	ip, ip, #8
  40160e:	3e10      	subs	r6, #16
  401610:	2e10      	cmp	r6, #16
  401612:	dd11      	ble.n	401638 <_vfiprintf_r+0x394>
  401614:	1c48      	adds	r0, r1, #1
  401616:	3210      	adds	r2, #16
  401618:	2807      	cmp	r0, #7
  40161a:	9211      	str	r2, [sp, #68]	; 0x44
  40161c:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401620:	9010      	str	r0, [sp, #64]	; 0x40
  401622:	ddef      	ble.n	401604 <_vfiprintf_r+0x360>
  401624:	2a00      	cmp	r2, #0
  401626:	f040 8293 	bne.w	401b50 <_vfiprintf_r+0x8ac>
  40162a:	3e10      	subs	r6, #16
  40162c:	2e10      	cmp	r6, #16
  40162e:	f04f 0e01 	mov.w	lr, #1
  401632:	4611      	mov	r1, r2
  401634:	46d4      	mov	ip, sl
  401636:	dced      	bgt.n	401614 <_vfiprintf_r+0x370>
  401638:	465c      	mov	r4, fp
  40163a:	46e3      	mov	fp, ip
  40163c:	4432      	add	r2, r6
  40163e:	f1be 0f07 	cmp.w	lr, #7
  401642:	9211      	str	r2, [sp, #68]	; 0x44
  401644:	e88b 0060 	stmia.w	fp, {r5, r6}
  401648:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40164c:	f300 8356 	bgt.w	401cfc <_vfiprintf_r+0xa58>
  401650:	9b05      	ldr	r3, [sp, #20]
  401652:	f10b 0b08 	add.w	fp, fp, #8
  401656:	1ae4      	subs	r4, r4, r3
  401658:	2c00      	cmp	r4, #0
  40165a:	f10e 0001 	add.w	r0, lr, #1
  40165e:	4671      	mov	r1, lr
  401660:	f300 81f6 	bgt.w	401a50 <_vfiprintf_r+0x7ac>
  401664:	9905      	ldr	r1, [sp, #20]
  401666:	2807      	cmp	r0, #7
  401668:	440a      	add	r2, r1
  40166a:	9211      	str	r2, [sp, #68]	; 0x44
  40166c:	f8cb 8000 	str.w	r8, [fp]
  401670:	f8cb 1004 	str.w	r1, [fp, #4]
  401674:	9010      	str	r0, [sp, #64]	; 0x40
  401676:	f340 8252 	ble.w	401b1e <_vfiprintf_r+0x87a>
  40167a:	2a00      	cmp	r2, #0
  40167c:	f040 82eb 	bne.w	401c56 <_vfiprintf_r+0x9b2>
  401680:	9b03      	ldr	r3, [sp, #12]
  401682:	9210      	str	r2, [sp, #64]	; 0x40
  401684:	0758      	lsls	r0, r3, #29
  401686:	d538      	bpl.n	4016fa <_vfiprintf_r+0x456>
  401688:	9b07      	ldr	r3, [sp, #28]
  40168a:	9902      	ldr	r1, [sp, #8]
  40168c:	1a5c      	subs	r4, r3, r1
  40168e:	2c00      	cmp	r4, #0
  401690:	f340 82b7 	ble.w	401c02 <_vfiprintf_r+0x95e>
  401694:	46d3      	mov	fp, sl
  401696:	2c10      	cmp	r4, #16
  401698:	f340 83ca 	ble.w	401e30 <_vfiprintf_r+0xb8c>
  40169c:	2510      	movs	r5, #16
  40169e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4016a0:	4e63      	ldr	r6, [pc, #396]	; (401830 <_vfiprintf_r+0x58c>)
  4016a2:	9f06      	ldr	r7, [sp, #24]
  4016a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
  4016a8:	e006      	b.n	4016b8 <_vfiprintf_r+0x414>
  4016aa:	1c88      	adds	r0, r1, #2
  4016ac:	4619      	mov	r1, r3
  4016ae:	f10b 0b08 	add.w	fp, fp, #8
  4016b2:	3c10      	subs	r4, #16
  4016b4:	2c10      	cmp	r4, #16
  4016b6:	dd13      	ble.n	4016e0 <_vfiprintf_r+0x43c>
  4016b8:	1c4b      	adds	r3, r1, #1
  4016ba:	3210      	adds	r2, #16
  4016bc:	2b07      	cmp	r3, #7
  4016be:	9211      	str	r2, [sp, #68]	; 0x44
  4016c0:	f8cb 6000 	str.w	r6, [fp]
  4016c4:	f8cb 5004 	str.w	r5, [fp, #4]
  4016c8:	9310      	str	r3, [sp, #64]	; 0x40
  4016ca:	ddee      	ble.n	4016aa <_vfiprintf_r+0x406>
  4016cc:	2a00      	cmp	r2, #0
  4016ce:	f040 8209 	bne.w	401ae4 <_vfiprintf_r+0x840>
  4016d2:	3c10      	subs	r4, #16
  4016d4:	2c10      	cmp	r4, #16
  4016d6:	f04f 0001 	mov.w	r0, #1
  4016da:	4611      	mov	r1, r2
  4016dc:	46d3      	mov	fp, sl
  4016de:	dceb      	bgt.n	4016b8 <_vfiprintf_r+0x414>
  4016e0:	4422      	add	r2, r4
  4016e2:	2807      	cmp	r0, #7
  4016e4:	9211      	str	r2, [sp, #68]	; 0x44
  4016e6:	f8cb 6000 	str.w	r6, [fp]
  4016ea:	f8cb 4004 	str.w	r4, [fp, #4]
  4016ee:	9010      	str	r0, [sp, #64]	; 0x40
  4016f0:	f340 8220 	ble.w	401b34 <_vfiprintf_r+0x890>
  4016f4:	2a00      	cmp	r2, #0
  4016f6:	f040 8354 	bne.w	401da2 <_vfiprintf_r+0xafe>
  4016fa:	9b04      	ldr	r3, [sp, #16]
  4016fc:	9a07      	ldr	r2, [sp, #28]
  4016fe:	9902      	ldr	r1, [sp, #8]
  401700:	428a      	cmp	r2, r1
  401702:	bfac      	ite	ge
  401704:	189b      	addge	r3, r3, r2
  401706:	185b      	addlt	r3, r3, r1
  401708:	9304      	str	r3, [sp, #16]
  40170a:	e21c      	b.n	401b46 <_vfiprintf_r+0x8a2>
  40170c:	9507      	str	r5, [sp, #28]
  40170e:	069e      	lsls	r6, r3, #26
  401710:	f100 8313 	bmi.w	401d3a <_vfiprintf_r+0xa96>
  401714:	9908      	ldr	r1, [sp, #32]
  401716:	06dd      	lsls	r5, r3, #27
  401718:	460a      	mov	r2, r1
  40171a:	f100 82c5 	bmi.w	401ca8 <_vfiprintf_r+0xa04>
  40171e:	0658      	lsls	r0, r3, #25
  401720:	f140 82c2 	bpl.w	401ca8 <_vfiprintf_r+0xa04>
  401724:	880e      	ldrh	r6, [r1, #0]
  401726:	3104      	adds	r1, #4
  401728:	2700      	movs	r7, #0
  40172a:	2201      	movs	r2, #1
  40172c:	9108      	str	r1, [sp, #32]
  40172e:	e6ca      	b.n	4014c6 <_vfiprintf_r+0x222>
  401730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401734:	f899 2000 	ldrb.w	r2, [r9]
  401738:	e61b      	b.n	401372 <_vfiprintf_r+0xce>
  40173a:	2500      	movs	r5, #0
  40173c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401740:	f819 2b01 	ldrb.w	r2, [r9], #1
  401744:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401748:	eb01 0545 	add.w	r5, r1, r5, lsl #1
  40174c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401750:	2909      	cmp	r1, #9
  401752:	d9f5      	bls.n	401740 <_vfiprintf_r+0x49c>
  401754:	e60f      	b.n	401376 <_vfiprintf_r+0xd2>
  401756:	2201      	movs	r2, #1
  401758:	9808      	ldr	r0, [sp, #32]
  40175a:	4611      	mov	r1, r2
  40175c:	9202      	str	r2, [sp, #8]
  40175e:	6802      	ldr	r2, [r0, #0]
  401760:	f04f 0400 	mov.w	r4, #0
  401764:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401768:	4602      	mov	r2, r0
  40176a:	3204      	adds	r2, #4
  40176c:	9507      	str	r5, [sp, #28]
  40176e:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  401772:	9105      	str	r1, [sp, #20]
  401774:	9208      	str	r2, [sp, #32]
  401776:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  40177a:	9303      	str	r3, [sp, #12]
  40177c:	2400      	movs	r4, #0
  40177e:	e6c9      	b.n	401514 <_vfiprintf_r+0x270>
  401780:	9507      	str	r5, [sp, #28]
  401782:	2800      	cmp	r0, #0
  401784:	f040 837e 	bne.w	401e84 <_vfiprintf_r+0xbe0>
  401788:	069e      	lsls	r6, r3, #26
  40178a:	f100 82ec 	bmi.w	401d66 <_vfiprintf_r+0xac2>
  40178e:	9908      	ldr	r1, [sp, #32]
  401790:	06dd      	lsls	r5, r3, #27
  401792:	460a      	mov	r2, r1
  401794:	f100 8281 	bmi.w	401c9a <_vfiprintf_r+0x9f6>
  401798:	0658      	lsls	r0, r3, #25
  40179a:	f140 827e 	bpl.w	401c9a <_vfiprintf_r+0x9f6>
  40179e:	f9b1 6000 	ldrsh.w	r6, [r1]
  4017a2:	3204      	adds	r2, #4
  4017a4:	17f7      	asrs	r7, r6, #31
  4017a6:	4630      	mov	r0, r6
  4017a8:	4639      	mov	r1, r7
  4017aa:	9208      	str	r2, [sp, #32]
  4017ac:	2800      	cmp	r0, #0
  4017ae:	f171 0200 	sbcs.w	r2, r1, #0
  4017b2:	f2c0 82e7 	blt.w	401d84 <_vfiprintf_r+0xae0>
  4017b6:	1c61      	adds	r1, r4, #1
  4017b8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4017bc:	f04f 0201 	mov.w	r2, #1
  4017c0:	f47f ae89 	bne.w	4014d6 <_vfiprintf_r+0x232>
  4017c4:	ea56 0107 	orrs.w	r1, r6, r7
  4017c8:	f000 81e4 	beq.w	401b94 <_vfiprintf_r+0x8f0>
  4017cc:	9303      	str	r3, [sp, #12]
  4017ce:	2a01      	cmp	r2, #1
  4017d0:	f000 8224 	beq.w	401c1c <_vfiprintf_r+0x978>
  4017d4:	2a02      	cmp	r2, #2
  4017d6:	f040 81f1 	bne.w	401bbc <_vfiprintf_r+0x918>
  4017da:	46d0      	mov	r8, sl
  4017dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4017de:	0933      	lsrs	r3, r6, #4
  4017e0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4017e4:	0939      	lsrs	r1, r7, #4
  4017e6:	f006 020f 	and.w	r2, r6, #15
  4017ea:	460f      	mov	r7, r1
  4017ec:	461e      	mov	r6, r3
  4017ee:	5c83      	ldrb	r3, [r0, r2]
  4017f0:	f808 3d01 	strb.w	r3, [r8, #-1]!
  4017f4:	ea56 0307 	orrs.w	r3, r6, r7
  4017f8:	d1f1      	bne.n	4017de <_vfiprintf_r+0x53a>
  4017fa:	ebaa 0308 	sub.w	r3, sl, r8
  4017fe:	9305      	str	r3, [sp, #20]
  401800:	e680      	b.n	401504 <_vfiprintf_r+0x260>
  401802:	f899 2000 	ldrb.w	r2, [r9]
  401806:	2e00      	cmp	r6, #0
  401808:	f47f adb3 	bne.w	401372 <_vfiprintf_r+0xce>
  40180c:	2001      	movs	r0, #1
  40180e:	2620      	movs	r6, #32
  401810:	e5af      	b.n	401372 <_vfiprintf_r+0xce>
  401812:	9507      	str	r5, [sp, #28]
  401814:	2800      	cmp	r0, #0
  401816:	f040 8332 	bne.w	401e7e <_vfiprintf_r+0xbda>
  40181a:	f043 0310 	orr.w	r3, r3, #16
  40181e:	e7b3      	b.n	401788 <_vfiprintf_r+0x4e4>
  401820:	9507      	str	r5, [sp, #28]
  401822:	f043 0310 	orr.w	r3, r3, #16
  401826:	e63b      	b.n	4014a0 <_vfiprintf_r+0x1fc>
  401828:	9507      	str	r5, [sp, #28]
  40182a:	f043 0310 	orr.w	r3, r3, #16
  40182e:	e76e      	b.n	40170e <_vfiprintf_r+0x46a>
  401830:	00403d38 	.word	0x00403d38
  401834:	00403d48 	.word	0x00403d48
  401838:	9507      	str	r5, [sp, #28]
  40183a:	2800      	cmp	r0, #0
  40183c:	f040 8316 	bne.w	401e6c <_vfiprintf_r+0xbc8>
  401840:	49ae      	ldr	r1, [pc, #696]	; (401afc <_vfiprintf_r+0x858>)
  401842:	910b      	str	r1, [sp, #44]	; 0x2c
  401844:	069f      	lsls	r7, r3, #26
  401846:	f100 8284 	bmi.w	401d52 <_vfiprintf_r+0xaae>
  40184a:	9808      	ldr	r0, [sp, #32]
  40184c:	06de      	lsls	r6, r3, #27
  40184e:	4601      	mov	r1, r0
  401850:	f100 821e 	bmi.w	401c90 <_vfiprintf_r+0x9ec>
  401854:	065d      	lsls	r5, r3, #25
  401856:	f140 821b 	bpl.w	401c90 <_vfiprintf_r+0x9ec>
  40185a:	2700      	movs	r7, #0
  40185c:	3104      	adds	r1, #4
  40185e:	8806      	ldrh	r6, [r0, #0]
  401860:	9108      	str	r1, [sp, #32]
  401862:	07d8      	lsls	r0, r3, #31
  401864:	f140 81d5 	bpl.w	401c12 <_vfiprintf_r+0x96e>
  401868:	ea56 0107 	orrs.w	r1, r6, r7
  40186c:	f000 81d1 	beq.w	401c12 <_vfiprintf_r+0x96e>
  401870:	2130      	movs	r1, #48	; 0x30
  401872:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401876:	f043 0302 	orr.w	r3, r3, #2
  40187a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40187e:	2202      	movs	r2, #2
  401880:	e621      	b.n	4014c6 <_vfiprintf_r+0x222>
  401882:	f899 2000 	ldrb.w	r2, [r9]
  401886:	f109 0701 	add.w	r7, r9, #1
  40188a:	2a2a      	cmp	r2, #42	; 0x2a
  40188c:	f000 82e0 	beq.w	401e50 <_vfiprintf_r+0xbac>
  401890:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401894:	2909      	cmp	r1, #9
  401896:	46b9      	mov	r9, r7
  401898:	f04f 0400 	mov.w	r4, #0
  40189c:	f63f ad6b 	bhi.w	401376 <_vfiprintf_r+0xd2>
  4018a0:	f819 2b01 	ldrb.w	r2, [r9], #1
  4018a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4018a8:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4018ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4018b0:	2909      	cmp	r1, #9
  4018b2:	d9f5      	bls.n	4018a0 <_vfiprintf_r+0x5fc>
  4018b4:	e55f      	b.n	401376 <_vfiprintf_r+0xd2>
  4018b6:	f899 2000 	ldrb.w	r2, [r9]
  4018ba:	2a6c      	cmp	r2, #108	; 0x6c
  4018bc:	bf03      	ittte	eq
  4018be:	f899 2001 	ldrbeq.w	r2, [r9, #1]
  4018c2:	f043 0320 	orreq.w	r3, r3, #32
  4018c6:	f109 0901 	addeq.w	r9, r9, #1
  4018ca:	f043 0310 	orrne.w	r3, r3, #16
  4018ce:	e550      	b.n	401372 <_vfiprintf_r+0xce>
  4018d0:	9507      	str	r5, [sp, #28]
  4018d2:	2800      	cmp	r0, #0
  4018d4:	f040 82d0 	bne.w	401e78 <_vfiprintf_r+0xbd4>
  4018d8:	4989      	ldr	r1, [pc, #548]	; (401b00 <_vfiprintf_r+0x85c>)
  4018da:	910b      	str	r1, [sp, #44]	; 0x2c
  4018dc:	e7b2      	b.n	401844 <_vfiprintf_r+0x5a0>
  4018de:	2278      	movs	r2, #120	; 0x78
  4018e0:	2130      	movs	r1, #48	; 0x30
  4018e2:	9507      	str	r5, [sp, #28]
  4018e4:	9d08      	ldr	r5, [sp, #32]
  4018e6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4018ea:	1d2a      	adds	r2, r5, #4
  4018ec:	9208      	str	r2, [sp, #32]
  4018ee:	4a84      	ldr	r2, [pc, #528]	; (401b00 <_vfiprintf_r+0x85c>)
  4018f0:	682e      	ldr	r6, [r5, #0]
  4018f2:	920b      	str	r2, [sp, #44]	; 0x2c
  4018f4:	f043 0302 	orr.w	r3, r3, #2
  4018f8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4018fc:	2700      	movs	r7, #0
  4018fe:	2202      	movs	r2, #2
  401900:	e5e1      	b.n	4014c6 <_vfiprintf_r+0x222>
  401902:	f043 0320 	orr.w	r3, r3, #32
  401906:	f899 2000 	ldrb.w	r2, [r9]
  40190a:	e532      	b.n	401372 <_vfiprintf_r+0xce>
  40190c:	f04f 0200 	mov.w	r2, #0
  401910:	9908      	ldr	r1, [sp, #32]
  401912:	9507      	str	r5, [sp, #28]
  401914:	f8d1 8000 	ldr.w	r8, [r1]
  401918:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40191c:	1d0d      	adds	r5, r1, #4
  40191e:	f1b8 0f00 	cmp.w	r8, #0
  401922:	f000 827c 	beq.w	401e1e <_vfiprintf_r+0xb7a>
  401926:	1c67      	adds	r7, r4, #1
  401928:	f000 825b 	beq.w	401de2 <_vfiprintf_r+0xb3e>
  40192c:	4622      	mov	r2, r4
  40192e:	2100      	movs	r1, #0
  401930:	4640      	mov	r0, r8
  401932:	9302      	str	r3, [sp, #8]
  401934:	f001 fb24 	bl	402f80 <memchr>
  401938:	9b02      	ldr	r3, [sp, #8]
  40193a:	2800      	cmp	r0, #0
  40193c:	f000 827c 	beq.w	401e38 <_vfiprintf_r+0xb94>
  401940:	eba0 0208 	sub.w	r2, r0, r8
  401944:	9508      	str	r5, [sp, #32]
  401946:	9205      	str	r2, [sp, #20]
  401948:	9303      	str	r3, [sp, #12]
  40194a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40194e:	2400      	movs	r4, #0
  401950:	e5d8      	b.n	401504 <_vfiprintf_r+0x260>
  401952:	f043 0301 	orr.w	r3, r3, #1
  401956:	f899 2000 	ldrb.w	r2, [r9]
  40195a:	e50a      	b.n	401372 <_vfiprintf_r+0xce>
  40195c:	f899 2000 	ldrb.w	r2, [r9]
  401960:	2001      	movs	r0, #1
  401962:	262b      	movs	r6, #43	; 0x2b
  401964:	e505      	b.n	401372 <_vfiprintf_r+0xce>
  401966:	2800      	cmp	r0, #0
  401968:	f040 8283 	bne.w	401e72 <_vfiprintf_r+0xbce>
  40196c:	0699      	lsls	r1, r3, #26
  40196e:	f100 822b 	bmi.w	401dc8 <_vfiprintf_r+0xb24>
  401972:	06da      	lsls	r2, r3, #27
  401974:	d421      	bmi.n	4019ba <_vfiprintf_r+0x716>
  401976:	065b      	lsls	r3, r3, #25
  401978:	d51f      	bpl.n	4019ba <_vfiprintf_r+0x716>
  40197a:	9a08      	ldr	r2, [sp, #32]
  40197c:	6813      	ldr	r3, [r2, #0]
  40197e:	3204      	adds	r2, #4
  401980:	9208      	str	r2, [sp, #32]
  401982:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  401986:	801a      	strh	r2, [r3, #0]
  401988:	e4be      	b.n	401308 <_vfiprintf_r+0x64>
  40198a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40198e:	f899 2000 	ldrb.w	r2, [r9]
  401992:	e4ee      	b.n	401372 <_vfiprintf_r+0xce>
  401994:	9507      	str	r5, [sp, #28]
  401996:	2800      	cmp	r0, #0
  401998:	f040 8265 	bne.w	401e66 <_vfiprintf_r+0xbc2>
  40199c:	2a00      	cmp	r2, #0
  40199e:	f000 8091 	beq.w	401ac4 <_vfiprintf_r+0x820>
  4019a2:	2101      	movs	r1, #1
  4019a4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4019a8:	f04f 0200 	mov.w	r2, #0
  4019ac:	9102      	str	r1, [sp, #8]
  4019ae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4019b2:	9105      	str	r1, [sp, #20]
  4019b4:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  4019b8:	e6df      	b.n	40177a <_vfiprintf_r+0x4d6>
  4019ba:	9a08      	ldr	r2, [sp, #32]
  4019bc:	6813      	ldr	r3, [r2, #0]
  4019be:	3204      	adds	r2, #4
  4019c0:	9208      	str	r2, [sp, #32]
  4019c2:	9a04      	ldr	r2, [sp, #16]
  4019c4:	601a      	str	r2, [r3, #0]
  4019c6:	e49f      	b.n	401308 <_vfiprintf_r+0x64>
  4019c8:	aa0f      	add	r2, sp, #60	; 0x3c
  4019ca:	9901      	ldr	r1, [sp, #4]
  4019cc:	4620      	mov	r0, r4
  4019ce:	f7ff fc29 	bl	401224 <__sprint_r.part.0>
  4019d2:	2800      	cmp	r0, #0
  4019d4:	d17d      	bne.n	401ad2 <_vfiprintf_r+0x82e>
  4019d6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4019d8:	46d6      	mov	lr, sl
  4019da:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4019dc:	f101 0c01 	add.w	ip, r1, #1
  4019e0:	e5bd      	b.n	40155e <_vfiprintf_r+0x2ba>
  4019e2:	aa0f      	add	r2, sp, #60	; 0x3c
  4019e4:	9901      	ldr	r1, [sp, #4]
  4019e6:	9806      	ldr	r0, [sp, #24]
  4019e8:	f7ff fc1c 	bl	401224 <__sprint_r.part.0>
  4019ec:	2800      	cmp	r0, #0
  4019ee:	d170      	bne.n	401ad2 <_vfiprintf_r+0x82e>
  4019f0:	46d3      	mov	fp, sl
  4019f2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4019f4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4019f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4019fa:	1c48      	adds	r0, r1, #1
  4019fc:	2d00      	cmp	r5, #0
  4019fe:	f43f add8 	beq.w	4015b2 <_vfiprintf_r+0x30e>
  401a02:	2101      	movs	r1, #1
  401a04:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401a08:	440a      	add	r2, r1
  401a0a:	2807      	cmp	r0, #7
  401a0c:	9211      	str	r2, [sp, #68]	; 0x44
  401a0e:	9010      	str	r0, [sp, #64]	; 0x40
  401a10:	f8cb 1004 	str.w	r1, [fp, #4]
  401a14:	f8cb 5000 	str.w	r5, [fp]
  401a18:	f340 80b6 	ble.w	401b88 <_vfiprintf_r+0x8e4>
  401a1c:	2a00      	cmp	r2, #0
  401a1e:	f040 8160 	bne.w	401ce2 <_vfiprintf_r+0xa3e>
  401a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a24:	2b00      	cmp	r3, #0
  401a26:	f43f add7 	beq.w	4015d8 <_vfiprintf_r+0x334>
  401a2a:	2202      	movs	r2, #2
  401a2c:	4608      	mov	r0, r1
  401a2e:	46d3      	mov	fp, sl
  401a30:	ab0e      	add	r3, sp, #56	; 0x38
  401a32:	921d      	str	r2, [sp, #116]	; 0x74
  401a34:	931c      	str	r3, [sp, #112]	; 0x70
  401a36:	4601      	mov	r1, r0
  401a38:	f10b 0b08 	add.w	fp, fp, #8
  401a3c:	3001      	adds	r0, #1
  401a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401a40:	2b80      	cmp	r3, #128	; 0x80
  401a42:	f43f add0 	beq.w	4015e6 <_vfiprintf_r+0x342>
  401a46:	9b05      	ldr	r3, [sp, #20]
  401a48:	1ae4      	subs	r4, r4, r3
  401a4a:	2c00      	cmp	r4, #0
  401a4c:	f77f ae0a 	ble.w	401664 <_vfiprintf_r+0x3c0>
  401a50:	2c10      	cmp	r4, #16
  401a52:	f340 81b7 	ble.w	401dc4 <_vfiprintf_r+0xb20>
  401a56:	46de      	mov	lr, fp
  401a58:	2610      	movs	r6, #16
  401a5a:	4d2a      	ldr	r5, [pc, #168]	; (401b04 <_vfiprintf_r+0x860>)
  401a5c:	9f06      	ldr	r7, [sp, #24]
  401a5e:	f8dd b004 	ldr.w	fp, [sp, #4]
  401a62:	e006      	b.n	401a72 <_vfiprintf_r+0x7ce>
  401a64:	1c88      	adds	r0, r1, #2
  401a66:	4619      	mov	r1, r3
  401a68:	f10e 0e08 	add.w	lr, lr, #8
  401a6c:	3c10      	subs	r4, #16
  401a6e:	2c10      	cmp	r4, #16
  401a70:	dd0f      	ble.n	401a92 <_vfiprintf_r+0x7ee>
  401a72:	1c4b      	adds	r3, r1, #1
  401a74:	3210      	adds	r2, #16
  401a76:	2b07      	cmp	r3, #7
  401a78:	9211      	str	r2, [sp, #68]	; 0x44
  401a7a:	e88e 0060 	stmia.w	lr, {r5, r6}
  401a7e:	9310      	str	r3, [sp, #64]	; 0x40
  401a80:	ddf0      	ble.n	401a64 <_vfiprintf_r+0x7c0>
  401a82:	b9a2      	cbnz	r2, 401aae <_vfiprintf_r+0x80a>
  401a84:	3c10      	subs	r4, #16
  401a86:	2c10      	cmp	r4, #16
  401a88:	f04f 0001 	mov.w	r0, #1
  401a8c:	4611      	mov	r1, r2
  401a8e:	46d6      	mov	lr, sl
  401a90:	dcef      	bgt.n	401a72 <_vfiprintf_r+0x7ce>
  401a92:	46f3      	mov	fp, lr
  401a94:	4422      	add	r2, r4
  401a96:	2807      	cmp	r0, #7
  401a98:	9211      	str	r2, [sp, #68]	; 0x44
  401a9a:	f8cb 5000 	str.w	r5, [fp]
  401a9e:	f8cb 4004 	str.w	r4, [fp, #4]
  401aa2:	9010      	str	r0, [sp, #64]	; 0x40
  401aa4:	dc30      	bgt.n	401b08 <_vfiprintf_r+0x864>
  401aa6:	f10b 0b08 	add.w	fp, fp, #8
  401aaa:	3001      	adds	r0, #1
  401aac:	e5da      	b.n	401664 <_vfiprintf_r+0x3c0>
  401aae:	aa0f      	add	r2, sp, #60	; 0x3c
  401ab0:	4659      	mov	r1, fp
  401ab2:	4638      	mov	r0, r7
  401ab4:	f7ff fbb6 	bl	401224 <__sprint_r.part.0>
  401ab8:	b958      	cbnz	r0, 401ad2 <_vfiprintf_r+0x82e>
  401aba:	9910      	ldr	r1, [sp, #64]	; 0x40
  401abc:	46d6      	mov	lr, sl
  401abe:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ac0:	1c48      	adds	r0, r1, #1
  401ac2:	e7d3      	b.n	401a6c <_vfiprintf_r+0x7c8>
  401ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401ac6:	b123      	cbz	r3, 401ad2 <_vfiprintf_r+0x82e>
  401ac8:	9806      	ldr	r0, [sp, #24]
  401aca:	aa0f      	add	r2, sp, #60	; 0x3c
  401acc:	9901      	ldr	r1, [sp, #4]
  401ace:	f7ff fba9 	bl	401224 <__sprint_r.part.0>
  401ad2:	9b01      	ldr	r3, [sp, #4]
  401ad4:	899b      	ldrh	r3, [r3, #12]
  401ad6:	065b      	lsls	r3, r3, #25
  401ad8:	f57f accd 	bpl.w	401476 <_vfiprintf_r+0x1d2>
  401adc:	f04f 33ff 	mov.w	r3, #4294967295
  401ae0:	9304      	str	r3, [sp, #16]
  401ae2:	e4c8      	b.n	401476 <_vfiprintf_r+0x1d2>
  401ae4:	aa0f      	add	r2, sp, #60	; 0x3c
  401ae6:	4641      	mov	r1, r8
  401ae8:	4638      	mov	r0, r7
  401aea:	f7ff fb9b 	bl	401224 <__sprint_r.part.0>
  401aee:	2800      	cmp	r0, #0
  401af0:	d1ef      	bne.n	401ad2 <_vfiprintf_r+0x82e>
  401af2:	9910      	ldr	r1, [sp, #64]	; 0x40
  401af4:	46d3      	mov	fp, sl
  401af6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401af8:	1c48      	adds	r0, r1, #1
  401afa:	e5da      	b.n	4016b2 <_vfiprintf_r+0x40e>
  401afc:	00403d08 	.word	0x00403d08
  401b00:	00403d1c 	.word	0x00403d1c
  401b04:	00403d48 	.word	0x00403d48
  401b08:	2a00      	cmp	r2, #0
  401b0a:	f040 80fd 	bne.w	401d08 <_vfiprintf_r+0xa64>
  401b0e:	2301      	movs	r3, #1
  401b10:	46d3      	mov	fp, sl
  401b12:	9a05      	ldr	r2, [sp, #20]
  401b14:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  401b18:	921d      	str	r2, [sp, #116]	; 0x74
  401b1a:	9211      	str	r2, [sp, #68]	; 0x44
  401b1c:	9310      	str	r3, [sp, #64]	; 0x40
  401b1e:	f10b 0b08 	add.w	fp, fp, #8
  401b22:	9b03      	ldr	r3, [sp, #12]
  401b24:	0759      	lsls	r1, r3, #29
  401b26:	d505      	bpl.n	401b34 <_vfiprintf_r+0x890>
  401b28:	9b07      	ldr	r3, [sp, #28]
  401b2a:	9902      	ldr	r1, [sp, #8]
  401b2c:	1a5c      	subs	r4, r3, r1
  401b2e:	2c00      	cmp	r4, #0
  401b30:	f73f adb1 	bgt.w	401696 <_vfiprintf_r+0x3f2>
  401b34:	9b04      	ldr	r3, [sp, #16]
  401b36:	9907      	ldr	r1, [sp, #28]
  401b38:	9802      	ldr	r0, [sp, #8]
  401b3a:	4281      	cmp	r1, r0
  401b3c:	bfac      	ite	ge
  401b3e:	185b      	addge	r3, r3, r1
  401b40:	181b      	addlt	r3, r3, r0
  401b42:	9304      	str	r3, [sp, #16]
  401b44:	bb7a      	cbnz	r2, 401ba6 <_vfiprintf_r+0x902>
  401b46:	2300      	movs	r3, #0
  401b48:	46d3      	mov	fp, sl
  401b4a:	9310      	str	r3, [sp, #64]	; 0x40
  401b4c:	f7ff bbdc 	b.w	401308 <_vfiprintf_r+0x64>
  401b50:	aa0f      	add	r2, sp, #60	; 0x3c
  401b52:	9901      	ldr	r1, [sp, #4]
  401b54:	4620      	mov	r0, r4
  401b56:	f7ff fb65 	bl	401224 <__sprint_r.part.0>
  401b5a:	2800      	cmp	r0, #0
  401b5c:	d1b9      	bne.n	401ad2 <_vfiprintf_r+0x82e>
  401b5e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401b60:	46d4      	mov	ip, sl
  401b62:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401b64:	f101 0e01 	add.w	lr, r1, #1
  401b68:	e551      	b.n	40160e <_vfiprintf_r+0x36a>
  401b6a:	2a00      	cmp	r2, #0
  401b6c:	f47f af39 	bne.w	4019e2 <_vfiprintf_r+0x73e>
  401b70:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401b74:	2900      	cmp	r1, #0
  401b76:	f000 810e 	beq.w	401d96 <_vfiprintf_r+0xaf2>
  401b7a:	2201      	movs	r2, #1
  401b7c:	46d3      	mov	fp, sl
  401b7e:	4610      	mov	r0, r2
  401b80:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401b84:	921d      	str	r2, [sp, #116]	; 0x74
  401b86:	911c      	str	r1, [sp, #112]	; 0x70
  401b88:	4601      	mov	r1, r0
  401b8a:	f10b 0b08 	add.w	fp, fp, #8
  401b8e:	3001      	adds	r0, #1
  401b90:	e50f      	b.n	4015b2 <_vfiprintf_r+0x30e>
  401b92:	9b03      	ldr	r3, [sp, #12]
  401b94:	2a01      	cmp	r2, #1
  401b96:	f000 808e 	beq.w	401cb6 <_vfiprintf_r+0xa12>
  401b9a:	2a02      	cmp	r2, #2
  401b9c:	d10b      	bne.n	401bb6 <_vfiprintf_r+0x912>
  401b9e:	9303      	str	r3, [sp, #12]
  401ba0:	2600      	movs	r6, #0
  401ba2:	2700      	movs	r7, #0
  401ba4:	e619      	b.n	4017da <_vfiprintf_r+0x536>
  401ba6:	aa0f      	add	r2, sp, #60	; 0x3c
  401ba8:	9901      	ldr	r1, [sp, #4]
  401baa:	9806      	ldr	r0, [sp, #24]
  401bac:	f7ff fb3a 	bl	401224 <__sprint_r.part.0>
  401bb0:	2800      	cmp	r0, #0
  401bb2:	d0c8      	beq.n	401b46 <_vfiprintf_r+0x8a2>
  401bb4:	e78d      	b.n	401ad2 <_vfiprintf_r+0x82e>
  401bb6:	2600      	movs	r6, #0
  401bb8:	2700      	movs	r7, #0
  401bba:	9303      	str	r3, [sp, #12]
  401bbc:	4651      	mov	r1, sl
  401bbe:	e000      	b.n	401bc2 <_vfiprintf_r+0x91e>
  401bc0:	4641      	mov	r1, r8
  401bc2:	08f2      	lsrs	r2, r6, #3
  401bc4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401bc8:	08f8      	lsrs	r0, r7, #3
  401bca:	f006 0307 	and.w	r3, r6, #7
  401bce:	4607      	mov	r7, r0
  401bd0:	4616      	mov	r6, r2
  401bd2:	3330      	adds	r3, #48	; 0x30
  401bd4:	ea56 0207 	orrs.w	r2, r6, r7
  401bd8:	f801 3c01 	strb.w	r3, [r1, #-1]
  401bdc:	f101 38ff 	add.w	r8, r1, #4294967295
  401be0:	d1ee      	bne.n	401bc0 <_vfiprintf_r+0x91c>
  401be2:	9a03      	ldr	r2, [sp, #12]
  401be4:	07d6      	lsls	r6, r2, #31
  401be6:	f57f ae08 	bpl.w	4017fa <_vfiprintf_r+0x556>
  401bea:	2b30      	cmp	r3, #48	; 0x30
  401bec:	f43f ae05 	beq.w	4017fa <_vfiprintf_r+0x556>
  401bf0:	2330      	movs	r3, #48	; 0x30
  401bf2:	3902      	subs	r1, #2
  401bf4:	f808 3c01 	strb.w	r3, [r8, #-1]
  401bf8:	ebaa 0301 	sub.w	r3, sl, r1
  401bfc:	9305      	str	r3, [sp, #20]
  401bfe:	4688      	mov	r8, r1
  401c00:	e480      	b.n	401504 <_vfiprintf_r+0x260>
  401c02:	9b04      	ldr	r3, [sp, #16]
  401c04:	9a07      	ldr	r2, [sp, #28]
  401c06:	428a      	cmp	r2, r1
  401c08:	bfac      	ite	ge
  401c0a:	189b      	addge	r3, r3, r2
  401c0c:	185b      	addlt	r3, r3, r1
  401c0e:	9304      	str	r3, [sp, #16]
  401c10:	e799      	b.n	401b46 <_vfiprintf_r+0x8a2>
  401c12:	2202      	movs	r2, #2
  401c14:	e457      	b.n	4014c6 <_vfiprintf_r+0x222>
  401c16:	9405      	str	r4, [sp, #20]
  401c18:	46d0      	mov	r8, sl
  401c1a:	e473      	b.n	401504 <_vfiprintf_r+0x260>
  401c1c:	2f00      	cmp	r7, #0
  401c1e:	bf08      	it	eq
  401c20:	2e0a      	cmpeq	r6, #10
  401c22:	d347      	bcc.n	401cb4 <_vfiprintf_r+0xa10>
  401c24:	46d0      	mov	r8, sl
  401c26:	4630      	mov	r0, r6
  401c28:	4639      	mov	r1, r7
  401c2a:	220a      	movs	r2, #10
  401c2c:	2300      	movs	r3, #0
  401c2e:	f001 fe75 	bl	40391c <__aeabi_uldivmod>
  401c32:	3230      	adds	r2, #48	; 0x30
  401c34:	f808 2d01 	strb.w	r2, [r8, #-1]!
  401c38:	4630      	mov	r0, r6
  401c3a:	4639      	mov	r1, r7
  401c3c:	2300      	movs	r3, #0
  401c3e:	220a      	movs	r2, #10
  401c40:	f001 fe6c 	bl	40391c <__aeabi_uldivmod>
  401c44:	4606      	mov	r6, r0
  401c46:	460f      	mov	r7, r1
  401c48:	ea56 0307 	orrs.w	r3, r6, r7
  401c4c:	d1eb      	bne.n	401c26 <_vfiprintf_r+0x982>
  401c4e:	ebaa 0308 	sub.w	r3, sl, r8
  401c52:	9305      	str	r3, [sp, #20]
  401c54:	e456      	b.n	401504 <_vfiprintf_r+0x260>
  401c56:	aa0f      	add	r2, sp, #60	; 0x3c
  401c58:	9901      	ldr	r1, [sp, #4]
  401c5a:	9806      	ldr	r0, [sp, #24]
  401c5c:	f7ff fae2 	bl	401224 <__sprint_r.part.0>
  401c60:	2800      	cmp	r0, #0
  401c62:	f47f af36 	bne.w	401ad2 <_vfiprintf_r+0x82e>
  401c66:	46d3      	mov	fp, sl
  401c68:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c6a:	e75a      	b.n	401b22 <_vfiprintf_r+0x87e>
  401c6c:	aa0f      	add	r2, sp, #60	; 0x3c
  401c6e:	9901      	ldr	r1, [sp, #4]
  401c70:	9806      	ldr	r0, [sp, #24]
  401c72:	f7ff fad7 	bl	401224 <__sprint_r.part.0>
  401c76:	2800      	cmp	r0, #0
  401c78:	f47f af2b 	bne.w	401ad2 <_vfiprintf_r+0x82e>
  401c7c:	46d3      	mov	fp, sl
  401c7e:	f7ff bbdc 	b.w	40143a <_vfiprintf_r+0x196>
  401c82:	9808      	ldr	r0, [sp, #32]
  401c84:	2700      	movs	r7, #0
  401c86:	4601      	mov	r1, r0
  401c88:	3104      	adds	r1, #4
  401c8a:	6806      	ldr	r6, [r0, #0]
  401c8c:	9108      	str	r1, [sp, #32]
  401c8e:	e41a      	b.n	4014c6 <_vfiprintf_r+0x222>
  401c90:	680e      	ldr	r6, [r1, #0]
  401c92:	3104      	adds	r1, #4
  401c94:	9108      	str	r1, [sp, #32]
  401c96:	2700      	movs	r7, #0
  401c98:	e5e3      	b.n	401862 <_vfiprintf_r+0x5be>
  401c9a:	6816      	ldr	r6, [r2, #0]
  401c9c:	3204      	adds	r2, #4
  401c9e:	17f7      	asrs	r7, r6, #31
  401ca0:	9208      	str	r2, [sp, #32]
  401ca2:	4630      	mov	r0, r6
  401ca4:	4639      	mov	r1, r7
  401ca6:	e581      	b.n	4017ac <_vfiprintf_r+0x508>
  401ca8:	3104      	adds	r1, #4
  401caa:	6816      	ldr	r6, [r2, #0]
  401cac:	2700      	movs	r7, #0
  401cae:	2201      	movs	r2, #1
  401cb0:	9108      	str	r1, [sp, #32]
  401cb2:	e408      	b.n	4014c6 <_vfiprintf_r+0x222>
  401cb4:	9b03      	ldr	r3, [sp, #12]
  401cb6:	9303      	str	r3, [sp, #12]
  401cb8:	2301      	movs	r3, #1
  401cba:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  401cbe:	3630      	adds	r6, #48	; 0x30
  401cc0:	f808 6d41 	strb.w	r6, [r8, #-65]!
  401cc4:	9305      	str	r3, [sp, #20]
  401cc6:	e41d      	b.n	401504 <_vfiprintf_r+0x260>
  401cc8:	aa0f      	add	r2, sp, #60	; 0x3c
  401cca:	9901      	ldr	r1, [sp, #4]
  401ccc:	9806      	ldr	r0, [sp, #24]
  401cce:	f7ff faa9 	bl	401224 <__sprint_r.part.0>
  401cd2:	2800      	cmp	r0, #0
  401cd4:	f47f aefd 	bne.w	401ad2 <_vfiprintf_r+0x82e>
  401cd8:	9910      	ldr	r1, [sp, #64]	; 0x40
  401cda:	46d3      	mov	fp, sl
  401cdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401cde:	1c48      	adds	r0, r1, #1
  401ce0:	e6ad      	b.n	401a3e <_vfiprintf_r+0x79a>
  401ce2:	aa0f      	add	r2, sp, #60	; 0x3c
  401ce4:	9901      	ldr	r1, [sp, #4]
  401ce6:	9806      	ldr	r0, [sp, #24]
  401ce8:	f7ff fa9c 	bl	401224 <__sprint_r.part.0>
  401cec:	2800      	cmp	r0, #0
  401cee:	f47f aef0 	bne.w	401ad2 <_vfiprintf_r+0x82e>
  401cf2:	9910      	ldr	r1, [sp, #64]	; 0x40
  401cf4:	46d3      	mov	fp, sl
  401cf6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401cf8:	1c48      	adds	r0, r1, #1
  401cfa:	e45a      	b.n	4015b2 <_vfiprintf_r+0x30e>
  401cfc:	2a00      	cmp	r2, #0
  401cfe:	d17b      	bne.n	401df8 <_vfiprintf_r+0xb54>
  401d00:	2001      	movs	r0, #1
  401d02:	4611      	mov	r1, r2
  401d04:	46d3      	mov	fp, sl
  401d06:	e69e      	b.n	401a46 <_vfiprintf_r+0x7a2>
  401d08:	aa0f      	add	r2, sp, #60	; 0x3c
  401d0a:	9901      	ldr	r1, [sp, #4]
  401d0c:	9806      	ldr	r0, [sp, #24]
  401d0e:	f7ff fa89 	bl	401224 <__sprint_r.part.0>
  401d12:	2800      	cmp	r0, #0
  401d14:	f47f aedd 	bne.w	401ad2 <_vfiprintf_r+0x82e>
  401d18:	9810      	ldr	r0, [sp, #64]	; 0x40
  401d1a:	46d3      	mov	fp, sl
  401d1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d1e:	3001      	adds	r0, #1
  401d20:	e4a0      	b.n	401664 <_vfiprintf_r+0x3c0>
  401d22:	9d08      	ldr	r5, [sp, #32]
  401d24:	3507      	adds	r5, #7
  401d26:	f025 0207 	bic.w	r2, r5, #7
  401d2a:	f102 0108 	add.w	r1, r2, #8
  401d2e:	e9d2 6700 	ldrd	r6, r7, [r2]
  401d32:	9108      	str	r1, [sp, #32]
  401d34:	2200      	movs	r2, #0
  401d36:	f7ff bbc6 	b.w	4014c6 <_vfiprintf_r+0x222>
  401d3a:	9d08      	ldr	r5, [sp, #32]
  401d3c:	3507      	adds	r5, #7
  401d3e:	f025 0207 	bic.w	r2, r5, #7
  401d42:	f102 0108 	add.w	r1, r2, #8
  401d46:	e9d2 6700 	ldrd	r6, r7, [r2]
  401d4a:	9108      	str	r1, [sp, #32]
  401d4c:	2201      	movs	r2, #1
  401d4e:	f7ff bbba 	b.w	4014c6 <_vfiprintf_r+0x222>
  401d52:	9d08      	ldr	r5, [sp, #32]
  401d54:	3507      	adds	r5, #7
  401d56:	f025 0107 	bic.w	r1, r5, #7
  401d5a:	f101 0008 	add.w	r0, r1, #8
  401d5e:	9008      	str	r0, [sp, #32]
  401d60:	e9d1 6700 	ldrd	r6, r7, [r1]
  401d64:	e57d      	b.n	401862 <_vfiprintf_r+0x5be>
  401d66:	9d08      	ldr	r5, [sp, #32]
  401d68:	3507      	adds	r5, #7
  401d6a:	f025 0507 	bic.w	r5, r5, #7
  401d6e:	f105 0208 	add.w	r2, r5, #8
  401d72:	e9d5 0100 	ldrd	r0, r1, [r5]
  401d76:	9208      	str	r2, [sp, #32]
  401d78:	4606      	mov	r6, r0
  401d7a:	460f      	mov	r7, r1
  401d7c:	e516      	b.n	4017ac <_vfiprintf_r+0x508>
  401d7e:	46d0      	mov	r8, sl
  401d80:	f7ff bbc0 	b.w	401504 <_vfiprintf_r+0x260>
  401d84:	252d      	movs	r5, #45	; 0x2d
  401d86:	4276      	negs	r6, r6
  401d88:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401d8c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401d90:	2201      	movs	r2, #1
  401d92:	f7ff bb9d 	b.w	4014d0 <_vfiprintf_r+0x22c>
  401d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d98:	b96b      	cbnz	r3, 401db6 <_vfiprintf_r+0xb12>
  401d9a:	4611      	mov	r1, r2
  401d9c:	2001      	movs	r0, #1
  401d9e:	46d3      	mov	fp, sl
  401da0:	e651      	b.n	401a46 <_vfiprintf_r+0x7a2>
  401da2:	aa0f      	add	r2, sp, #60	; 0x3c
  401da4:	9901      	ldr	r1, [sp, #4]
  401da6:	9806      	ldr	r0, [sp, #24]
  401da8:	f7ff fa3c 	bl	401224 <__sprint_r.part.0>
  401dac:	2800      	cmp	r0, #0
  401dae:	f47f ae90 	bne.w	401ad2 <_vfiprintf_r+0x82e>
  401db2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401db4:	e6be      	b.n	401b34 <_vfiprintf_r+0x890>
  401db6:	2202      	movs	r2, #2
  401db8:	ab0e      	add	r3, sp, #56	; 0x38
  401dba:	921d      	str	r2, [sp, #116]	; 0x74
  401dbc:	931c      	str	r3, [sp, #112]	; 0x70
  401dbe:	2001      	movs	r0, #1
  401dc0:	46d3      	mov	fp, sl
  401dc2:	e638      	b.n	401a36 <_vfiprintf_r+0x792>
  401dc4:	4d31      	ldr	r5, [pc, #196]	; (401e8c <_vfiprintf_r+0xbe8>)
  401dc6:	e665      	b.n	401a94 <_vfiprintf_r+0x7f0>
  401dc8:	9a08      	ldr	r2, [sp, #32]
  401dca:	4613      	mov	r3, r2
  401dcc:	3304      	adds	r3, #4
  401dce:	9308      	str	r3, [sp, #32]
  401dd0:	9b04      	ldr	r3, [sp, #16]
  401dd2:	6811      	ldr	r1, [r2, #0]
  401dd4:	17dd      	asrs	r5, r3, #31
  401dd6:	461a      	mov	r2, r3
  401dd8:	462b      	mov	r3, r5
  401dda:	e9c1 2300 	strd	r2, r3, [r1]
  401dde:	f7ff ba93 	b.w	401308 <_vfiprintf_r+0x64>
  401de2:	4640      	mov	r0, r8
  401de4:	9508      	str	r5, [sp, #32]
  401de6:	9303      	str	r3, [sp, #12]
  401de8:	f7ff f9ee 	bl	4011c8 <strlen>
  401dec:	2400      	movs	r4, #0
  401dee:	9005      	str	r0, [sp, #20]
  401df0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401df4:	f7ff bb86 	b.w	401504 <_vfiprintf_r+0x260>
  401df8:	aa0f      	add	r2, sp, #60	; 0x3c
  401dfa:	9901      	ldr	r1, [sp, #4]
  401dfc:	9806      	ldr	r0, [sp, #24]
  401dfe:	f7ff fa11 	bl	401224 <__sprint_r.part.0>
  401e02:	2800      	cmp	r0, #0
  401e04:	f47f ae65 	bne.w	401ad2 <_vfiprintf_r+0x82e>
  401e08:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e0a:	46d3      	mov	fp, sl
  401e0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e0e:	1c48      	adds	r0, r1, #1
  401e10:	e619      	b.n	401a46 <_vfiprintf_r+0x7a2>
  401e12:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e16:	3101      	adds	r1, #1
  401e18:	4e1d      	ldr	r6, [pc, #116]	; (401e90 <_vfiprintf_r+0xbec>)
  401e1a:	f7ff bbb8 	b.w	40158e <_vfiprintf_r+0x2ea>
  401e1e:	2c06      	cmp	r4, #6
  401e20:	bf28      	it	cs
  401e22:	2406      	movcs	r4, #6
  401e24:	9508      	str	r5, [sp, #32]
  401e26:	9405      	str	r4, [sp, #20]
  401e28:	9402      	str	r4, [sp, #8]
  401e2a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 401e94 <_vfiprintf_r+0xbf0>
  401e2e:	e4a4      	b.n	40177a <_vfiprintf_r+0x4d6>
  401e30:	9810      	ldr	r0, [sp, #64]	; 0x40
  401e32:	4e17      	ldr	r6, [pc, #92]	; (401e90 <_vfiprintf_r+0xbec>)
  401e34:	3001      	adds	r0, #1
  401e36:	e453      	b.n	4016e0 <_vfiprintf_r+0x43c>
  401e38:	9405      	str	r4, [sp, #20]
  401e3a:	9508      	str	r5, [sp, #32]
  401e3c:	9303      	str	r3, [sp, #12]
  401e3e:	4604      	mov	r4, r0
  401e40:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401e44:	f7ff bb5e 	b.w	401504 <_vfiprintf_r+0x260>
  401e48:	4686      	mov	lr, r0
  401e4a:	4d10      	ldr	r5, [pc, #64]	; (401e8c <_vfiprintf_r+0xbe8>)
  401e4c:	f7ff bbf6 	b.w	40163c <_vfiprintf_r+0x398>
  401e50:	9908      	ldr	r1, [sp, #32]
  401e52:	f899 2001 	ldrb.w	r2, [r9, #1]
  401e56:	680c      	ldr	r4, [r1, #0]
  401e58:	3104      	adds	r1, #4
  401e5a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  401e5e:	46b9      	mov	r9, r7
  401e60:	9108      	str	r1, [sp, #32]
  401e62:	f7ff ba86 	b.w	401372 <_vfiprintf_r+0xce>
  401e66:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
  401e6a:	e597      	b.n	40199c <_vfiprintf_r+0x6f8>
  401e6c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
  401e70:	e4e6      	b.n	401840 <_vfiprintf_r+0x59c>
  401e72:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
  401e76:	e579      	b.n	40196c <_vfiprintf_r+0x6c8>
  401e78:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
  401e7c:	e52c      	b.n	4018d8 <_vfiprintf_r+0x634>
  401e7e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
  401e82:	e4ca      	b.n	40181a <_vfiprintf_r+0x576>
  401e84:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
  401e88:	e47e      	b.n	401788 <_vfiprintf_r+0x4e4>
  401e8a:	bf00      	nop
  401e8c:	00403d48 	.word	0x00403d48
  401e90:	00403d38 	.word	0x00403d38
  401e94:	00403d30 	.word	0x00403d30

00401e98 <__sbprintf>:
  401e98:	b570      	push	{r4, r5, r6, lr}
  401e9a:	460c      	mov	r4, r1
  401e9c:	2600      	movs	r6, #0
  401e9e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  401ea2:	8989      	ldrh	r1, [r1, #12]
  401ea4:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  401ea8:	f021 0102 	bic.w	r1, r1, #2
  401eac:	f8ad 100c 	strh.w	r1, [sp, #12]
  401eb0:	9606      	str	r6, [sp, #24]
  401eb2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401eb4:	89e6      	ldrh	r6, [r4, #14]
  401eb6:	9119      	str	r1, [sp, #100]	; 0x64
  401eb8:	f8ad 600e 	strh.w	r6, [sp, #14]
  401ebc:	69e1      	ldr	r1, [r4, #28]
  401ebe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401ec0:	9107      	str	r1, [sp, #28]
  401ec2:	9609      	str	r6, [sp, #36]	; 0x24
  401ec4:	4669      	mov	r1, sp
  401ec6:	ae1a      	add	r6, sp, #104	; 0x68
  401ec8:	9600      	str	r6, [sp, #0]
  401eca:	9604      	str	r6, [sp, #16]
  401ecc:	9502      	str	r5, [sp, #8]
  401ece:	9505      	str	r5, [sp, #20]
  401ed0:	4606      	mov	r6, r0
  401ed2:	f7ff f9e7 	bl	4012a4 <_vfiprintf_r>
  401ed6:	1e05      	subs	r5, r0, #0
  401ed8:	db07      	blt.n	401eea <__sbprintf+0x52>
  401eda:	4630      	mov	r0, r6
  401edc:	4669      	mov	r1, sp
  401ede:	f000 f921 	bl	402124 <_fflush_r>
  401ee2:	2800      	cmp	r0, #0
  401ee4:	bf18      	it	ne
  401ee6:	f04f 35ff 	movne.w	r5, #4294967295
  401eea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  401eee:	065b      	lsls	r3, r3, #25
  401ef0:	d503      	bpl.n	401efa <__sbprintf+0x62>
  401ef2:	89a3      	ldrh	r3, [r4, #12]
  401ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401ef8:	81a3      	strh	r3, [r4, #12]
  401efa:	4628      	mov	r0, r5
  401efc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  401f00:	bd70      	pop	{r4, r5, r6, pc}
  401f02:	bf00      	nop

00401f04 <__swsetup_r>:
  401f04:	b538      	push	{r3, r4, r5, lr}
  401f06:	4b30      	ldr	r3, [pc, #192]	; (401fc8 <__swsetup_r+0xc4>)
  401f08:	4605      	mov	r5, r0
  401f0a:	6818      	ldr	r0, [r3, #0]
  401f0c:	460c      	mov	r4, r1
  401f0e:	b110      	cbz	r0, 401f16 <__swsetup_r+0x12>
  401f10:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401f12:	2b00      	cmp	r3, #0
  401f14:	d038      	beq.n	401f88 <__swsetup_r+0x84>
  401f16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401f1a:	b293      	uxth	r3, r2
  401f1c:	0718      	lsls	r0, r3, #28
  401f1e:	d50c      	bpl.n	401f3a <__swsetup_r+0x36>
  401f20:	6920      	ldr	r0, [r4, #16]
  401f22:	b1a8      	cbz	r0, 401f50 <__swsetup_r+0x4c>
  401f24:	f013 0201 	ands.w	r2, r3, #1
  401f28:	d01e      	beq.n	401f68 <__swsetup_r+0x64>
  401f2a:	2200      	movs	r2, #0
  401f2c:	6963      	ldr	r3, [r4, #20]
  401f2e:	60a2      	str	r2, [r4, #8]
  401f30:	425b      	negs	r3, r3
  401f32:	61a3      	str	r3, [r4, #24]
  401f34:	b1f0      	cbz	r0, 401f74 <__swsetup_r+0x70>
  401f36:	2000      	movs	r0, #0
  401f38:	bd38      	pop	{r3, r4, r5, pc}
  401f3a:	06d9      	lsls	r1, r3, #27
  401f3c:	d53b      	bpl.n	401fb6 <__swsetup_r+0xb2>
  401f3e:	0758      	lsls	r0, r3, #29
  401f40:	d425      	bmi.n	401f8e <__swsetup_r+0x8a>
  401f42:	6920      	ldr	r0, [r4, #16]
  401f44:	f042 0308 	orr.w	r3, r2, #8
  401f48:	81a3      	strh	r3, [r4, #12]
  401f4a:	b29b      	uxth	r3, r3
  401f4c:	2800      	cmp	r0, #0
  401f4e:	d1e9      	bne.n	401f24 <__swsetup_r+0x20>
  401f50:	f403 7220 	and.w	r2, r3, #640	; 0x280
  401f54:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  401f58:	d0e4      	beq.n	401f24 <__swsetup_r+0x20>
  401f5a:	4628      	mov	r0, r5
  401f5c:	4621      	mov	r1, r4
  401f5e:	f000 fd0b 	bl	402978 <__smakebuf_r>
  401f62:	89a3      	ldrh	r3, [r4, #12]
  401f64:	6920      	ldr	r0, [r4, #16]
  401f66:	e7dd      	b.n	401f24 <__swsetup_r+0x20>
  401f68:	0799      	lsls	r1, r3, #30
  401f6a:	bf58      	it	pl
  401f6c:	6962      	ldrpl	r2, [r4, #20]
  401f6e:	60a2      	str	r2, [r4, #8]
  401f70:	2800      	cmp	r0, #0
  401f72:	d1e0      	bne.n	401f36 <__swsetup_r+0x32>
  401f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401f78:	061a      	lsls	r2, r3, #24
  401f7a:	d5dd      	bpl.n	401f38 <__swsetup_r+0x34>
  401f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401f80:	81a3      	strh	r3, [r4, #12]
  401f82:	f04f 30ff 	mov.w	r0, #4294967295
  401f86:	bd38      	pop	{r3, r4, r5, pc}
  401f88:	f000 f960 	bl	40224c <__sinit>
  401f8c:	e7c3      	b.n	401f16 <__swsetup_r+0x12>
  401f8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401f90:	b151      	cbz	r1, 401fa8 <__swsetup_r+0xa4>
  401f92:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401f96:	4299      	cmp	r1, r3
  401f98:	d004      	beq.n	401fa4 <__swsetup_r+0xa0>
  401f9a:	4628      	mov	r0, r5
  401f9c:	f000 fa28 	bl	4023f0 <_free_r>
  401fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401fa4:	2300      	movs	r3, #0
  401fa6:	6323      	str	r3, [r4, #48]	; 0x30
  401fa8:	2300      	movs	r3, #0
  401faa:	6920      	ldr	r0, [r4, #16]
  401fac:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  401fb0:	e884 0009 	stmia.w	r4, {r0, r3}
  401fb4:	e7c6      	b.n	401f44 <__swsetup_r+0x40>
  401fb6:	2309      	movs	r3, #9
  401fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  401fbc:	602b      	str	r3, [r5, #0]
  401fbe:	f04f 30ff 	mov.w	r0, #4294967295
  401fc2:	81a2      	strh	r2, [r4, #12]
  401fc4:	bd38      	pop	{r3, r4, r5, pc}
  401fc6:	bf00      	nop
  401fc8:	200000ec 	.word	0x200000ec

00401fcc <register_fini>:
  401fcc:	4b02      	ldr	r3, [pc, #8]	; (401fd8 <register_fini+0xc>)
  401fce:	b113      	cbz	r3, 401fd6 <register_fini+0xa>
  401fd0:	4802      	ldr	r0, [pc, #8]	; (401fdc <register_fini+0x10>)
  401fd2:	f000 b805 	b.w	401fe0 <atexit>
  401fd6:	4770      	bx	lr
  401fd8:	00000000 	.word	0x00000000
  401fdc:	00402261 	.word	0x00402261

00401fe0 <atexit>:
  401fe0:	2300      	movs	r3, #0
  401fe2:	4601      	mov	r1, r0
  401fe4:	461a      	mov	r2, r3
  401fe6:	4618      	mov	r0, r3
  401fe8:	f001 bb9e 	b.w	403728 <__register_exitproc>

00401fec <__sflush_r>:
  401fec:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ff4:	b29a      	uxth	r2, r3
  401ff6:	460d      	mov	r5, r1
  401ff8:	0711      	lsls	r1, r2, #28
  401ffa:	4680      	mov	r8, r0
  401ffc:	d43a      	bmi.n	402074 <__sflush_r+0x88>
  401ffe:	686a      	ldr	r2, [r5, #4]
  402000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402004:	2a00      	cmp	r2, #0
  402006:	81ab      	strh	r3, [r5, #12]
  402008:	dd70      	ble.n	4020ec <__sflush_r+0x100>
  40200a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40200c:	2c00      	cmp	r4, #0
  40200e:	d04a      	beq.n	4020a6 <__sflush_r+0xba>
  402010:	2200      	movs	r2, #0
  402012:	b29b      	uxth	r3, r3
  402014:	f8d8 6000 	ldr.w	r6, [r8]
  402018:	f8c8 2000 	str.w	r2, [r8]
  40201c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402020:	d068      	beq.n	4020f4 <__sflush_r+0x108>
  402022:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402024:	075f      	lsls	r7, r3, #29
  402026:	d505      	bpl.n	402034 <__sflush_r+0x48>
  402028:	6869      	ldr	r1, [r5, #4]
  40202a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40202c:	1a52      	subs	r2, r2, r1
  40202e:	b10b      	cbz	r3, 402034 <__sflush_r+0x48>
  402030:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402032:	1ad2      	subs	r2, r2, r3
  402034:	2300      	movs	r3, #0
  402036:	69e9      	ldr	r1, [r5, #28]
  402038:	4640      	mov	r0, r8
  40203a:	47a0      	blx	r4
  40203c:	1c44      	adds	r4, r0, #1
  40203e:	d03d      	beq.n	4020bc <__sflush_r+0xd0>
  402040:	2100      	movs	r1, #0
  402042:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402046:	692a      	ldr	r2, [r5, #16]
  402048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40204c:	81ab      	strh	r3, [r5, #12]
  40204e:	04db      	lsls	r3, r3, #19
  402050:	6069      	str	r1, [r5, #4]
  402052:	602a      	str	r2, [r5, #0]
  402054:	d448      	bmi.n	4020e8 <__sflush_r+0xfc>
  402056:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402058:	f8c8 6000 	str.w	r6, [r8]
  40205c:	b319      	cbz	r1, 4020a6 <__sflush_r+0xba>
  40205e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402062:	4299      	cmp	r1, r3
  402064:	d002      	beq.n	40206c <__sflush_r+0x80>
  402066:	4640      	mov	r0, r8
  402068:	f000 f9c2 	bl	4023f0 <_free_r>
  40206c:	2000      	movs	r0, #0
  40206e:	6328      	str	r0, [r5, #48]	; 0x30
  402070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402074:	692e      	ldr	r6, [r5, #16]
  402076:	b1b6      	cbz	r6, 4020a6 <__sflush_r+0xba>
  402078:	0791      	lsls	r1, r2, #30
  40207a:	bf18      	it	ne
  40207c:	2300      	movne	r3, #0
  40207e:	682c      	ldr	r4, [r5, #0]
  402080:	bf08      	it	eq
  402082:	696b      	ldreq	r3, [r5, #20]
  402084:	602e      	str	r6, [r5, #0]
  402086:	1ba4      	subs	r4, r4, r6
  402088:	60ab      	str	r3, [r5, #8]
  40208a:	e00a      	b.n	4020a2 <__sflush_r+0xb6>
  40208c:	4623      	mov	r3, r4
  40208e:	4632      	mov	r2, r6
  402090:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402092:	69e9      	ldr	r1, [r5, #28]
  402094:	4640      	mov	r0, r8
  402096:	47b8      	blx	r7
  402098:	2800      	cmp	r0, #0
  40209a:	eba4 0400 	sub.w	r4, r4, r0
  40209e:	4406      	add	r6, r0
  4020a0:	dd04      	ble.n	4020ac <__sflush_r+0xc0>
  4020a2:	2c00      	cmp	r4, #0
  4020a4:	dcf2      	bgt.n	40208c <__sflush_r+0xa0>
  4020a6:	2000      	movs	r0, #0
  4020a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4020ac:	89ab      	ldrh	r3, [r5, #12]
  4020ae:	f04f 30ff 	mov.w	r0, #4294967295
  4020b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4020b6:	81ab      	strh	r3, [r5, #12]
  4020b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4020bc:	f8d8 4000 	ldr.w	r4, [r8]
  4020c0:	2c1d      	cmp	r4, #29
  4020c2:	d8f3      	bhi.n	4020ac <__sflush_r+0xc0>
  4020c4:	4b16      	ldr	r3, [pc, #88]	; (402120 <__sflush_r+0x134>)
  4020c6:	40e3      	lsrs	r3, r4
  4020c8:	43db      	mvns	r3, r3
  4020ca:	f013 0301 	ands.w	r3, r3, #1
  4020ce:	d1ed      	bne.n	4020ac <__sflush_r+0xc0>
  4020d0:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4020d4:	6929      	ldr	r1, [r5, #16]
  4020d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4020da:	81aa      	strh	r2, [r5, #12]
  4020dc:	04d2      	lsls	r2, r2, #19
  4020de:	606b      	str	r3, [r5, #4]
  4020e0:	6029      	str	r1, [r5, #0]
  4020e2:	d5b8      	bpl.n	402056 <__sflush_r+0x6a>
  4020e4:	2c00      	cmp	r4, #0
  4020e6:	d1b6      	bne.n	402056 <__sflush_r+0x6a>
  4020e8:	6528      	str	r0, [r5, #80]	; 0x50
  4020ea:	e7b4      	b.n	402056 <__sflush_r+0x6a>
  4020ec:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4020ee:	2a00      	cmp	r2, #0
  4020f0:	dc8b      	bgt.n	40200a <__sflush_r+0x1e>
  4020f2:	e7d8      	b.n	4020a6 <__sflush_r+0xba>
  4020f4:	2301      	movs	r3, #1
  4020f6:	69e9      	ldr	r1, [r5, #28]
  4020f8:	4640      	mov	r0, r8
  4020fa:	47a0      	blx	r4
  4020fc:	1c43      	adds	r3, r0, #1
  4020fe:	4602      	mov	r2, r0
  402100:	d002      	beq.n	402108 <__sflush_r+0x11c>
  402102:	89ab      	ldrh	r3, [r5, #12]
  402104:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402106:	e78d      	b.n	402024 <__sflush_r+0x38>
  402108:	f8d8 3000 	ldr.w	r3, [r8]
  40210c:	2b00      	cmp	r3, #0
  40210e:	d0f8      	beq.n	402102 <__sflush_r+0x116>
  402110:	2b1d      	cmp	r3, #29
  402112:	d001      	beq.n	402118 <__sflush_r+0x12c>
  402114:	2b16      	cmp	r3, #22
  402116:	d1c9      	bne.n	4020ac <__sflush_r+0xc0>
  402118:	f8c8 6000 	str.w	r6, [r8]
  40211c:	e7c3      	b.n	4020a6 <__sflush_r+0xba>
  40211e:	bf00      	nop
  402120:	20400001 	.word	0x20400001

00402124 <_fflush_r>:
  402124:	b510      	push	{r4, lr}
  402126:	4604      	mov	r4, r0
  402128:	b082      	sub	sp, #8
  40212a:	b108      	cbz	r0, 402130 <_fflush_r+0xc>
  40212c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40212e:	b153      	cbz	r3, 402146 <_fflush_r+0x22>
  402130:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  402134:	b908      	cbnz	r0, 40213a <_fflush_r+0x16>
  402136:	b002      	add	sp, #8
  402138:	bd10      	pop	{r4, pc}
  40213a:	4620      	mov	r0, r4
  40213c:	b002      	add	sp, #8
  40213e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402142:	f7ff bf53 	b.w	401fec <__sflush_r>
  402146:	9101      	str	r1, [sp, #4]
  402148:	f000 f880 	bl	40224c <__sinit>
  40214c:	9901      	ldr	r1, [sp, #4]
  40214e:	e7ef      	b.n	402130 <_fflush_r+0xc>

00402150 <_cleanup_r>:
  402150:	4901      	ldr	r1, [pc, #4]	; (402158 <_cleanup_r+0x8>)
  402152:	f000 bbad 	b.w	4028b0 <_fwalk_reent>
  402156:	bf00      	nop
  402158:	004037f9 	.word	0x004037f9

0040215c <__sinit.part.1>:
  40215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402160:	4607      	mov	r7, r0
  402162:	2400      	movs	r4, #0
  402164:	2304      	movs	r3, #4
  402166:	2103      	movs	r1, #3
  402168:	687d      	ldr	r5, [r7, #4]
  40216a:	4833      	ldr	r0, [pc, #204]	; (402238 <__sinit.part.1+0xdc>)
  40216c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  402170:	63f8      	str	r0, [r7, #60]	; 0x3c
  402172:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  402176:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  40217a:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  40217e:	b083      	sub	sp, #12
  402180:	602c      	str	r4, [r5, #0]
  402182:	606c      	str	r4, [r5, #4]
  402184:	60ac      	str	r4, [r5, #8]
  402186:	666c      	str	r4, [r5, #100]	; 0x64
  402188:	81ec      	strh	r4, [r5, #14]
  40218a:	612c      	str	r4, [r5, #16]
  40218c:	616c      	str	r4, [r5, #20]
  40218e:	61ac      	str	r4, [r5, #24]
  402190:	81ab      	strh	r3, [r5, #12]
  402192:	4621      	mov	r1, r4
  402194:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402198:	2208      	movs	r2, #8
  40219a:	f7fe fedd 	bl	400f58 <memset>
  40219e:	2301      	movs	r3, #1
  4021a0:	2209      	movs	r2, #9
  4021a2:	68be      	ldr	r6, [r7, #8]
  4021a4:	f8df b094 	ldr.w	fp, [pc, #148]	; 40223c <__sinit.part.1+0xe0>
  4021a8:	f8df a094 	ldr.w	sl, [pc, #148]	; 402240 <__sinit.part.1+0xe4>
  4021ac:	f8df 9094 	ldr.w	r9, [pc, #148]	; 402244 <__sinit.part.1+0xe8>
  4021b0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 402248 <__sinit.part.1+0xec>
  4021b4:	f8c5 b020 	str.w	fp, [r5, #32]
  4021b8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4021bc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4021c0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4021c4:	61ed      	str	r5, [r5, #28]
  4021c6:	4621      	mov	r1, r4
  4021c8:	81f3      	strh	r3, [r6, #14]
  4021ca:	81b2      	strh	r2, [r6, #12]
  4021cc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4021d0:	6034      	str	r4, [r6, #0]
  4021d2:	6074      	str	r4, [r6, #4]
  4021d4:	60b4      	str	r4, [r6, #8]
  4021d6:	6674      	str	r4, [r6, #100]	; 0x64
  4021d8:	6134      	str	r4, [r6, #16]
  4021da:	6174      	str	r4, [r6, #20]
  4021dc:	61b4      	str	r4, [r6, #24]
  4021de:	2208      	movs	r2, #8
  4021e0:	9301      	str	r3, [sp, #4]
  4021e2:	f7fe feb9 	bl	400f58 <memset>
  4021e6:	2012      	movs	r0, #18
  4021e8:	2202      	movs	r2, #2
  4021ea:	68fd      	ldr	r5, [r7, #12]
  4021ec:	4621      	mov	r1, r4
  4021ee:	61f6      	str	r6, [r6, #28]
  4021f0:	f8c6 b020 	str.w	fp, [r6, #32]
  4021f4:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4021f8:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4021fc:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  402200:	81a8      	strh	r0, [r5, #12]
  402202:	81ea      	strh	r2, [r5, #14]
  402204:	602c      	str	r4, [r5, #0]
  402206:	606c      	str	r4, [r5, #4]
  402208:	60ac      	str	r4, [r5, #8]
  40220a:	666c      	str	r4, [r5, #100]	; 0x64
  40220c:	612c      	str	r4, [r5, #16]
  40220e:	616c      	str	r4, [r5, #20]
  402210:	61ac      	str	r4, [r5, #24]
  402212:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402216:	2208      	movs	r2, #8
  402218:	f7fe fe9e 	bl	400f58 <memset>
  40221c:	9b01      	ldr	r3, [sp, #4]
  40221e:	61ed      	str	r5, [r5, #28]
  402220:	f8c5 b020 	str.w	fp, [r5, #32]
  402224:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402228:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40222c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402230:	63bb      	str	r3, [r7, #56]	; 0x38
  402232:	b003      	add	sp, #12
  402234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402238:	00402151 	.word	0x00402151
  40223c:	00403559 	.word	0x00403559
  402240:	0040357d 	.word	0x0040357d
  402244:	004035b9 	.word	0x004035b9
  402248:	004035d9 	.word	0x004035d9

0040224c <__sinit>:
  40224c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40224e:	b103      	cbz	r3, 402252 <__sinit+0x6>
  402250:	4770      	bx	lr
  402252:	f7ff bf83 	b.w	40215c <__sinit.part.1>
  402256:	bf00      	nop

00402258 <__sfp_lock_acquire>:
  402258:	4770      	bx	lr
  40225a:	bf00      	nop

0040225c <__sfp_lock_release>:
  40225c:	4770      	bx	lr
  40225e:	bf00      	nop

00402260 <__libc_fini_array>:
  402260:	b538      	push	{r3, r4, r5, lr}
  402262:	4c0a      	ldr	r4, [pc, #40]	; (40228c <__libc_fini_array+0x2c>)
  402264:	4d0a      	ldr	r5, [pc, #40]	; (402290 <__libc_fini_array+0x30>)
  402266:	1b64      	subs	r4, r4, r5
  402268:	10a4      	asrs	r4, r4, #2
  40226a:	d00a      	beq.n	402282 <__libc_fini_array+0x22>
  40226c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402270:	3b01      	subs	r3, #1
  402272:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402276:	3c01      	subs	r4, #1
  402278:	f855 3904 	ldr.w	r3, [r5], #-4
  40227c:	4798      	blx	r3
  40227e:	2c00      	cmp	r4, #0
  402280:	d1f9      	bne.n	402276 <__libc_fini_array+0x16>
  402282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402286:	f001 bdfb 	b.w	403e80 <_fini>
  40228a:	bf00      	nop
  40228c:	00403e90 	.word	0x00403e90
  402290:	00403e8c 	.word	0x00403e8c

00402294 <__fputwc>:
  402294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402298:	b083      	sub	sp, #12
  40229a:	4607      	mov	r7, r0
  40229c:	4688      	mov	r8, r1
  40229e:	4614      	mov	r4, r2
  4022a0:	f000 fb2e 	bl	402900 <__locale_mb_cur_max>
  4022a4:	2801      	cmp	r0, #1
  4022a6:	d033      	beq.n	402310 <__fputwc+0x7c>
  4022a8:	4642      	mov	r2, r8
  4022aa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4022ae:	a901      	add	r1, sp, #4
  4022b0:	4638      	mov	r0, r7
  4022b2:	f001 f9ed 	bl	403690 <_wcrtomb_r>
  4022b6:	1c42      	adds	r2, r0, #1
  4022b8:	4606      	mov	r6, r0
  4022ba:	d022      	beq.n	402302 <__fputwc+0x6e>
  4022bc:	b390      	cbz	r0, 402324 <__fputwc+0x90>
  4022be:	f89d 1004 	ldrb.w	r1, [sp, #4]
  4022c2:	2500      	movs	r5, #0
  4022c4:	f10d 0904 	add.w	r9, sp, #4
  4022c8:	e008      	b.n	4022dc <__fputwc+0x48>
  4022ca:	6823      	ldr	r3, [r4, #0]
  4022cc:	1c5a      	adds	r2, r3, #1
  4022ce:	6022      	str	r2, [r4, #0]
  4022d0:	7019      	strb	r1, [r3, #0]
  4022d2:	3501      	adds	r5, #1
  4022d4:	42b5      	cmp	r5, r6
  4022d6:	d225      	bcs.n	402324 <__fputwc+0x90>
  4022d8:	f815 1009 	ldrb.w	r1, [r5, r9]
  4022dc:	68a3      	ldr	r3, [r4, #8]
  4022de:	3b01      	subs	r3, #1
  4022e0:	2b00      	cmp	r3, #0
  4022e2:	60a3      	str	r3, [r4, #8]
  4022e4:	daf1      	bge.n	4022ca <__fputwc+0x36>
  4022e6:	69a2      	ldr	r2, [r4, #24]
  4022e8:	4293      	cmp	r3, r2
  4022ea:	db01      	blt.n	4022f0 <__fputwc+0x5c>
  4022ec:	290a      	cmp	r1, #10
  4022ee:	d1ec      	bne.n	4022ca <__fputwc+0x36>
  4022f0:	4622      	mov	r2, r4
  4022f2:	4638      	mov	r0, r7
  4022f4:	f001 f974 	bl	4035e0 <__swbuf_r>
  4022f8:	1c43      	adds	r3, r0, #1
  4022fa:	d1ea      	bne.n	4022d2 <__fputwc+0x3e>
  4022fc:	b003      	add	sp, #12
  4022fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402302:	89a3      	ldrh	r3, [r4, #12]
  402304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402308:	81a3      	strh	r3, [r4, #12]
  40230a:	b003      	add	sp, #12
  40230c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402310:	f108 33ff 	add.w	r3, r8, #4294967295
  402314:	2bfe      	cmp	r3, #254	; 0xfe
  402316:	d8c7      	bhi.n	4022a8 <__fputwc+0x14>
  402318:	fa5f f188 	uxtb.w	r1, r8
  40231c:	4606      	mov	r6, r0
  40231e:	f88d 1004 	strb.w	r1, [sp, #4]
  402322:	e7ce      	b.n	4022c2 <__fputwc+0x2e>
  402324:	4640      	mov	r0, r8
  402326:	b003      	add	sp, #12
  402328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0040232c <_fputwc_r>:
  40232c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402330:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402334:	d10a      	bne.n	40234c <_fputwc_r+0x20>
  402336:	b410      	push	{r4}
  402338:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40233a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40233e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  402342:	6654      	str	r4, [r2, #100]	; 0x64
  402344:	8193      	strh	r3, [r2, #12]
  402346:	bc10      	pop	{r4}
  402348:	f7ff bfa4 	b.w	402294 <__fputwc>
  40234c:	f7ff bfa2 	b.w	402294 <__fputwc>

00402350 <_malloc_trim_r>:
  402350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402352:	460c      	mov	r4, r1
  402354:	4f23      	ldr	r7, [pc, #140]	; (4023e4 <_malloc_trim_r+0x94>)
  402356:	4606      	mov	r6, r0
  402358:	f000 ff32 	bl	4031c0 <__malloc_lock>
  40235c:	68bb      	ldr	r3, [r7, #8]
  40235e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402362:	685d      	ldr	r5, [r3, #4]
  402364:	310f      	adds	r1, #15
  402366:	f025 0503 	bic.w	r5, r5, #3
  40236a:	4429      	add	r1, r5
  40236c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402370:	f021 010f 	bic.w	r1, r1, #15
  402374:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402378:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40237c:	db07      	blt.n	40238e <_malloc_trim_r+0x3e>
  40237e:	2100      	movs	r1, #0
  402380:	4630      	mov	r0, r6
  402382:	f001 f8d7 	bl	403534 <_sbrk_r>
  402386:	68bb      	ldr	r3, [r7, #8]
  402388:	442b      	add	r3, r5
  40238a:	4298      	cmp	r0, r3
  40238c:	d004      	beq.n	402398 <_malloc_trim_r+0x48>
  40238e:	4630      	mov	r0, r6
  402390:	f000 ff18 	bl	4031c4 <__malloc_unlock>
  402394:	2000      	movs	r0, #0
  402396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402398:	4261      	negs	r1, r4
  40239a:	4630      	mov	r0, r6
  40239c:	f001 f8ca 	bl	403534 <_sbrk_r>
  4023a0:	3001      	adds	r0, #1
  4023a2:	d00d      	beq.n	4023c0 <_malloc_trim_r+0x70>
  4023a4:	4b10      	ldr	r3, [pc, #64]	; (4023e8 <_malloc_trim_r+0x98>)
  4023a6:	68ba      	ldr	r2, [r7, #8]
  4023a8:	6819      	ldr	r1, [r3, #0]
  4023aa:	1b2d      	subs	r5, r5, r4
  4023ac:	f045 0501 	orr.w	r5, r5, #1
  4023b0:	4630      	mov	r0, r6
  4023b2:	1b09      	subs	r1, r1, r4
  4023b4:	6055      	str	r5, [r2, #4]
  4023b6:	6019      	str	r1, [r3, #0]
  4023b8:	f000 ff04 	bl	4031c4 <__malloc_unlock>
  4023bc:	2001      	movs	r0, #1
  4023be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023c0:	2100      	movs	r1, #0
  4023c2:	4630      	mov	r0, r6
  4023c4:	f001 f8b6 	bl	403534 <_sbrk_r>
  4023c8:	68ba      	ldr	r2, [r7, #8]
  4023ca:	1a83      	subs	r3, r0, r2
  4023cc:	2b0f      	cmp	r3, #15
  4023ce:	ddde      	ble.n	40238e <_malloc_trim_r+0x3e>
  4023d0:	4c06      	ldr	r4, [pc, #24]	; (4023ec <_malloc_trim_r+0x9c>)
  4023d2:	4905      	ldr	r1, [pc, #20]	; (4023e8 <_malloc_trim_r+0x98>)
  4023d4:	6824      	ldr	r4, [r4, #0]
  4023d6:	f043 0301 	orr.w	r3, r3, #1
  4023da:	1b00      	subs	r0, r0, r4
  4023dc:	6053      	str	r3, [r2, #4]
  4023de:	6008      	str	r0, [r1, #0]
  4023e0:	e7d5      	b.n	40238e <_malloc_trim_r+0x3e>
  4023e2:	bf00      	nop
  4023e4:	20000684 	.word	0x20000684
  4023e8:	20000b34 	.word	0x20000b34
  4023ec:	20000a8c 	.word	0x20000a8c

004023f0 <_free_r>:
  4023f0:	2900      	cmp	r1, #0
  4023f2:	d044      	beq.n	40247e <_free_r+0x8e>
  4023f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4023f8:	460d      	mov	r5, r1
  4023fa:	4680      	mov	r8, r0
  4023fc:	f000 fee0 	bl	4031c0 <__malloc_lock>
  402400:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402404:	4969      	ldr	r1, [pc, #420]	; (4025ac <_free_r+0x1bc>)
  402406:	f1a5 0408 	sub.w	r4, r5, #8
  40240a:	f027 0301 	bic.w	r3, r7, #1
  40240e:	18e2      	adds	r2, r4, r3
  402410:	688e      	ldr	r6, [r1, #8]
  402412:	6850      	ldr	r0, [r2, #4]
  402414:	42b2      	cmp	r2, r6
  402416:	f020 0003 	bic.w	r0, r0, #3
  40241a:	d05e      	beq.n	4024da <_free_r+0xea>
  40241c:	07fe      	lsls	r6, r7, #31
  40241e:	6050      	str	r0, [r2, #4]
  402420:	d40b      	bmi.n	40243a <_free_r+0x4a>
  402422:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402426:	f101 0e08 	add.w	lr, r1, #8
  40242a:	1be4      	subs	r4, r4, r7
  40242c:	68a5      	ldr	r5, [r4, #8]
  40242e:	443b      	add	r3, r7
  402430:	4575      	cmp	r5, lr
  402432:	d06d      	beq.n	402510 <_free_r+0x120>
  402434:	68e7      	ldr	r7, [r4, #12]
  402436:	60ef      	str	r7, [r5, #12]
  402438:	60bd      	str	r5, [r7, #8]
  40243a:	1815      	adds	r5, r2, r0
  40243c:	686d      	ldr	r5, [r5, #4]
  40243e:	07ed      	lsls	r5, r5, #31
  402440:	d53e      	bpl.n	4024c0 <_free_r+0xd0>
  402442:	f043 0201 	orr.w	r2, r3, #1
  402446:	6062      	str	r2, [r4, #4]
  402448:	50e3      	str	r3, [r4, r3]
  40244a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40244e:	d217      	bcs.n	402480 <_free_r+0x90>
  402450:	2201      	movs	r2, #1
  402452:	08db      	lsrs	r3, r3, #3
  402454:	1098      	asrs	r0, r3, #2
  402456:	684d      	ldr	r5, [r1, #4]
  402458:	4413      	add	r3, r2
  40245a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
  40245e:	4082      	lsls	r2, r0
  402460:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  402464:	432a      	orrs	r2, r5
  402466:	3808      	subs	r0, #8
  402468:	60e0      	str	r0, [r4, #12]
  40246a:	60a7      	str	r7, [r4, #8]
  40246c:	604a      	str	r2, [r1, #4]
  40246e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
  402472:	60fc      	str	r4, [r7, #12]
  402474:	4640      	mov	r0, r8
  402476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40247a:	f000 bea3 	b.w	4031c4 <__malloc_unlock>
  40247e:	4770      	bx	lr
  402480:	0a5a      	lsrs	r2, r3, #9
  402482:	2a04      	cmp	r2, #4
  402484:	d852      	bhi.n	40252c <_free_r+0x13c>
  402486:	099a      	lsrs	r2, r3, #6
  402488:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40248c:	00ff      	lsls	r7, r7, #3
  40248e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402492:	19c8      	adds	r0, r1, r7
  402494:	59ca      	ldr	r2, [r1, r7]
  402496:	3808      	subs	r0, #8
  402498:	4290      	cmp	r0, r2
  40249a:	d04f      	beq.n	40253c <_free_r+0x14c>
  40249c:	6851      	ldr	r1, [r2, #4]
  40249e:	f021 0103 	bic.w	r1, r1, #3
  4024a2:	428b      	cmp	r3, r1
  4024a4:	d232      	bcs.n	40250c <_free_r+0x11c>
  4024a6:	6892      	ldr	r2, [r2, #8]
  4024a8:	4290      	cmp	r0, r2
  4024aa:	d1f7      	bne.n	40249c <_free_r+0xac>
  4024ac:	68c3      	ldr	r3, [r0, #12]
  4024ae:	60a0      	str	r0, [r4, #8]
  4024b0:	60e3      	str	r3, [r4, #12]
  4024b2:	609c      	str	r4, [r3, #8]
  4024b4:	60c4      	str	r4, [r0, #12]
  4024b6:	4640      	mov	r0, r8
  4024b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4024bc:	f000 be82 	b.w	4031c4 <__malloc_unlock>
  4024c0:	6895      	ldr	r5, [r2, #8]
  4024c2:	4f3b      	ldr	r7, [pc, #236]	; (4025b0 <_free_r+0x1c0>)
  4024c4:	4403      	add	r3, r0
  4024c6:	42bd      	cmp	r5, r7
  4024c8:	d040      	beq.n	40254c <_free_r+0x15c>
  4024ca:	68d0      	ldr	r0, [r2, #12]
  4024cc:	f043 0201 	orr.w	r2, r3, #1
  4024d0:	60e8      	str	r0, [r5, #12]
  4024d2:	6085      	str	r5, [r0, #8]
  4024d4:	6062      	str	r2, [r4, #4]
  4024d6:	50e3      	str	r3, [r4, r3]
  4024d8:	e7b7      	b.n	40244a <_free_r+0x5a>
  4024da:	07ff      	lsls	r7, r7, #31
  4024dc:	4403      	add	r3, r0
  4024de:	d407      	bmi.n	4024f0 <_free_r+0x100>
  4024e0:	f855 5c08 	ldr.w	r5, [r5, #-8]
  4024e4:	1b64      	subs	r4, r4, r5
  4024e6:	68e2      	ldr	r2, [r4, #12]
  4024e8:	68a0      	ldr	r0, [r4, #8]
  4024ea:	442b      	add	r3, r5
  4024ec:	60c2      	str	r2, [r0, #12]
  4024ee:	6090      	str	r0, [r2, #8]
  4024f0:	4a30      	ldr	r2, [pc, #192]	; (4025b4 <_free_r+0x1c4>)
  4024f2:	f043 0001 	orr.w	r0, r3, #1
  4024f6:	6812      	ldr	r2, [r2, #0]
  4024f8:	6060      	str	r0, [r4, #4]
  4024fa:	4293      	cmp	r3, r2
  4024fc:	608c      	str	r4, [r1, #8]
  4024fe:	d3b9      	bcc.n	402474 <_free_r+0x84>
  402500:	4b2d      	ldr	r3, [pc, #180]	; (4025b8 <_free_r+0x1c8>)
  402502:	4640      	mov	r0, r8
  402504:	6819      	ldr	r1, [r3, #0]
  402506:	f7ff ff23 	bl	402350 <_malloc_trim_r>
  40250a:	e7b3      	b.n	402474 <_free_r+0x84>
  40250c:	4610      	mov	r0, r2
  40250e:	e7cd      	b.n	4024ac <_free_r+0xbc>
  402510:	1811      	adds	r1, r2, r0
  402512:	6849      	ldr	r1, [r1, #4]
  402514:	07c9      	lsls	r1, r1, #31
  402516:	d444      	bmi.n	4025a2 <_free_r+0x1b2>
  402518:	6891      	ldr	r1, [r2, #8]
  40251a:	4403      	add	r3, r0
  40251c:	68d2      	ldr	r2, [r2, #12]
  40251e:	f043 0001 	orr.w	r0, r3, #1
  402522:	60ca      	str	r2, [r1, #12]
  402524:	6091      	str	r1, [r2, #8]
  402526:	6060      	str	r0, [r4, #4]
  402528:	50e3      	str	r3, [r4, r3]
  40252a:	e7a3      	b.n	402474 <_free_r+0x84>
  40252c:	2a14      	cmp	r2, #20
  40252e:	d816      	bhi.n	40255e <_free_r+0x16e>
  402530:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402534:	00ff      	lsls	r7, r7, #3
  402536:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40253a:	e7aa      	b.n	402492 <_free_r+0xa2>
  40253c:	2301      	movs	r3, #1
  40253e:	10aa      	asrs	r2, r5, #2
  402540:	684d      	ldr	r5, [r1, #4]
  402542:	4093      	lsls	r3, r2
  402544:	432b      	orrs	r3, r5
  402546:	604b      	str	r3, [r1, #4]
  402548:	4603      	mov	r3, r0
  40254a:	e7b0      	b.n	4024ae <_free_r+0xbe>
  40254c:	f043 0201 	orr.w	r2, r3, #1
  402550:	614c      	str	r4, [r1, #20]
  402552:	610c      	str	r4, [r1, #16]
  402554:	60e5      	str	r5, [r4, #12]
  402556:	60a5      	str	r5, [r4, #8]
  402558:	6062      	str	r2, [r4, #4]
  40255a:	50e3      	str	r3, [r4, r3]
  40255c:	e78a      	b.n	402474 <_free_r+0x84>
  40255e:	2a54      	cmp	r2, #84	; 0x54
  402560:	d806      	bhi.n	402570 <_free_r+0x180>
  402562:	0b1a      	lsrs	r2, r3, #12
  402564:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402568:	00ff      	lsls	r7, r7, #3
  40256a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40256e:	e790      	b.n	402492 <_free_r+0xa2>
  402570:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402574:	d806      	bhi.n	402584 <_free_r+0x194>
  402576:	0bda      	lsrs	r2, r3, #15
  402578:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40257c:	00ff      	lsls	r7, r7, #3
  40257e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402582:	e786      	b.n	402492 <_free_r+0xa2>
  402584:	f240 5054 	movw	r0, #1364	; 0x554
  402588:	4282      	cmp	r2, r0
  40258a:	d806      	bhi.n	40259a <_free_r+0x1aa>
  40258c:	0c9a      	lsrs	r2, r3, #18
  40258e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402592:	00ff      	lsls	r7, r7, #3
  402594:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402598:	e77b      	b.n	402492 <_free_r+0xa2>
  40259a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40259e:	257e      	movs	r5, #126	; 0x7e
  4025a0:	e777      	b.n	402492 <_free_r+0xa2>
  4025a2:	f043 0101 	orr.w	r1, r3, #1
  4025a6:	6061      	str	r1, [r4, #4]
  4025a8:	6013      	str	r3, [r2, #0]
  4025aa:	e763      	b.n	402474 <_free_r+0x84>
  4025ac:	20000684 	.word	0x20000684
  4025b0:	2000068c 	.word	0x2000068c
  4025b4:	20000a90 	.word	0x20000a90
  4025b8:	20000b64 	.word	0x20000b64

004025bc <__sfvwrite_r>:
  4025bc:	6893      	ldr	r3, [r2, #8]
  4025be:	2b00      	cmp	r3, #0
  4025c0:	d071      	beq.n	4026a6 <__sfvwrite_r+0xea>
  4025c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025c6:	898b      	ldrh	r3, [r1, #12]
  4025c8:	b083      	sub	sp, #12
  4025ca:	460c      	mov	r4, r1
  4025cc:	0719      	lsls	r1, r3, #28
  4025ce:	9000      	str	r0, [sp, #0]
  4025d0:	4616      	mov	r6, r2
  4025d2:	d525      	bpl.n	402620 <__sfvwrite_r+0x64>
  4025d4:	6922      	ldr	r2, [r4, #16]
  4025d6:	b31a      	cbz	r2, 402620 <__sfvwrite_r+0x64>
  4025d8:	f013 0002 	ands.w	r0, r3, #2
  4025dc:	6835      	ldr	r5, [r6, #0]
  4025de:	d02b      	beq.n	402638 <__sfvwrite_r+0x7c>
  4025e0:	f04f 0900 	mov.w	r9, #0
  4025e4:	46b0      	mov	r8, r6
  4025e6:	464f      	mov	r7, r9
  4025e8:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 4028ac <__sfvwrite_r+0x2f0>
  4025ec:	2f00      	cmp	r7, #0
  4025ee:	d055      	beq.n	40269c <__sfvwrite_r+0xe0>
  4025f0:	4557      	cmp	r7, sl
  4025f2:	463b      	mov	r3, r7
  4025f4:	464a      	mov	r2, r9
  4025f6:	bf28      	it	cs
  4025f8:	4653      	movcs	r3, sl
  4025fa:	69e1      	ldr	r1, [r4, #28]
  4025fc:	9800      	ldr	r0, [sp, #0]
  4025fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402600:	47b0      	blx	r6
  402602:	2800      	cmp	r0, #0
  402604:	dd56      	ble.n	4026b4 <__sfvwrite_r+0xf8>
  402606:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40260a:	4481      	add	r9, r0
  40260c:	1a1b      	subs	r3, r3, r0
  40260e:	1a3f      	subs	r7, r7, r0
  402610:	f8c8 3008 	str.w	r3, [r8, #8]
  402614:	2b00      	cmp	r3, #0
  402616:	d1e9      	bne.n	4025ec <__sfvwrite_r+0x30>
  402618:	2000      	movs	r0, #0
  40261a:	b003      	add	sp, #12
  40261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402620:	4621      	mov	r1, r4
  402622:	9800      	ldr	r0, [sp, #0]
  402624:	f7ff fc6e 	bl	401f04 <__swsetup_r>
  402628:	2800      	cmp	r0, #0
  40262a:	f040 8135 	bne.w	402898 <__sfvwrite_r+0x2dc>
  40262e:	89a3      	ldrh	r3, [r4, #12]
  402630:	6835      	ldr	r5, [r6, #0]
  402632:	f013 0002 	ands.w	r0, r3, #2
  402636:	d1d3      	bne.n	4025e0 <__sfvwrite_r+0x24>
  402638:	f013 0901 	ands.w	r9, r3, #1
  40263c:	d144      	bne.n	4026c8 <__sfvwrite_r+0x10c>
  40263e:	464f      	mov	r7, r9
  402640:	9601      	str	r6, [sp, #4]
  402642:	b337      	cbz	r7, 402692 <__sfvwrite_r+0xd6>
  402644:	059a      	lsls	r2, r3, #22
  402646:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40264a:	f140 8085 	bpl.w	402758 <__sfvwrite_r+0x19c>
  40264e:	4547      	cmp	r7, r8
  402650:	46c3      	mov	fp, r8
  402652:	f0c0 80ad 	bcc.w	4027b0 <__sfvwrite_r+0x1f4>
  402656:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40265a:	f040 80ae 	bne.w	4027ba <__sfvwrite_r+0x1fe>
  40265e:	46ba      	mov	sl, r7
  402660:	6820      	ldr	r0, [r4, #0]
  402662:	465a      	mov	r2, fp
  402664:	4649      	mov	r1, r9
  402666:	f000 fd47 	bl	4030f8 <memmove>
  40266a:	68a2      	ldr	r2, [r4, #8]
  40266c:	6823      	ldr	r3, [r4, #0]
  40266e:	eba2 0208 	sub.w	r2, r2, r8
  402672:	445b      	add	r3, fp
  402674:	60a2      	str	r2, [r4, #8]
  402676:	6023      	str	r3, [r4, #0]
  402678:	9a01      	ldr	r2, [sp, #4]
  40267a:	44d1      	add	r9, sl
  40267c:	6893      	ldr	r3, [r2, #8]
  40267e:	eba7 070a 	sub.w	r7, r7, sl
  402682:	eba3 030a 	sub.w	r3, r3, sl
  402686:	6093      	str	r3, [r2, #8]
  402688:	2b00      	cmp	r3, #0
  40268a:	d0c5      	beq.n	402618 <__sfvwrite_r+0x5c>
  40268c:	89a3      	ldrh	r3, [r4, #12]
  40268e:	2f00      	cmp	r7, #0
  402690:	d1d8      	bne.n	402644 <__sfvwrite_r+0x88>
  402692:	f8d5 9000 	ldr.w	r9, [r5]
  402696:	686f      	ldr	r7, [r5, #4]
  402698:	3508      	adds	r5, #8
  40269a:	e7d2      	b.n	402642 <__sfvwrite_r+0x86>
  40269c:	f8d5 9000 	ldr.w	r9, [r5]
  4026a0:	686f      	ldr	r7, [r5, #4]
  4026a2:	3508      	adds	r5, #8
  4026a4:	e7a2      	b.n	4025ec <__sfvwrite_r+0x30>
  4026a6:	2000      	movs	r0, #0
  4026a8:	4770      	bx	lr
  4026aa:	4621      	mov	r1, r4
  4026ac:	9800      	ldr	r0, [sp, #0]
  4026ae:	f7ff fd39 	bl	402124 <_fflush_r>
  4026b2:	b378      	cbz	r0, 402714 <__sfvwrite_r+0x158>
  4026b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4026b8:	f04f 30ff 	mov.w	r0, #4294967295
  4026bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4026c0:	81a3      	strh	r3, [r4, #12]
  4026c2:	b003      	add	sp, #12
  4026c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026c8:	4681      	mov	r9, r0
  4026ca:	4633      	mov	r3, r6
  4026cc:	464e      	mov	r6, r9
  4026ce:	46a8      	mov	r8, r5
  4026d0:	469a      	mov	sl, r3
  4026d2:	464d      	mov	r5, r9
  4026d4:	b356      	cbz	r6, 40272c <__sfvwrite_r+0x170>
  4026d6:	2800      	cmp	r0, #0
  4026d8:	d032      	beq.n	402740 <__sfvwrite_r+0x184>
  4026da:	45b1      	cmp	r9, r6
  4026dc:	46cb      	mov	fp, r9
  4026de:	bf28      	it	cs
  4026e0:	46b3      	movcs	fp, r6
  4026e2:	6820      	ldr	r0, [r4, #0]
  4026e4:	6923      	ldr	r3, [r4, #16]
  4026e6:	465f      	mov	r7, fp
  4026e8:	4298      	cmp	r0, r3
  4026ea:	6962      	ldr	r2, [r4, #20]
  4026ec:	d904      	bls.n	4026f8 <__sfvwrite_r+0x13c>
  4026ee:	68a3      	ldr	r3, [r4, #8]
  4026f0:	4413      	add	r3, r2
  4026f2:	459b      	cmp	fp, r3
  4026f4:	f300 80a8 	bgt.w	402848 <__sfvwrite_r+0x28c>
  4026f8:	4593      	cmp	fp, r2
  4026fa:	db4d      	blt.n	402798 <__sfvwrite_r+0x1dc>
  4026fc:	4613      	mov	r3, r2
  4026fe:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402700:	462a      	mov	r2, r5
  402702:	69e1      	ldr	r1, [r4, #28]
  402704:	9800      	ldr	r0, [sp, #0]
  402706:	47b8      	blx	r7
  402708:	1e07      	subs	r7, r0, #0
  40270a:	ddd3      	ble.n	4026b4 <__sfvwrite_r+0xf8>
  40270c:	ebb9 0907 	subs.w	r9, r9, r7
  402710:	d0cb      	beq.n	4026aa <__sfvwrite_r+0xee>
  402712:	2001      	movs	r0, #1
  402714:	f8da 3008 	ldr.w	r3, [sl, #8]
  402718:	443d      	add	r5, r7
  40271a:	1bdb      	subs	r3, r3, r7
  40271c:	1bf6      	subs	r6, r6, r7
  40271e:	f8ca 3008 	str.w	r3, [sl, #8]
  402722:	2b00      	cmp	r3, #0
  402724:	f43f af78 	beq.w	402618 <__sfvwrite_r+0x5c>
  402728:	2e00      	cmp	r6, #0
  40272a:	d1d4      	bne.n	4026d6 <__sfvwrite_r+0x11a>
  40272c:	f108 0308 	add.w	r3, r8, #8
  402730:	f853 6c04 	ldr.w	r6, [r3, #-4]
  402734:	4698      	mov	r8, r3
  402736:	f853 5c08 	ldr.w	r5, [r3, #-8]
  40273a:	3308      	adds	r3, #8
  40273c:	2e00      	cmp	r6, #0
  40273e:	d0f7      	beq.n	402730 <__sfvwrite_r+0x174>
  402740:	4632      	mov	r2, r6
  402742:	210a      	movs	r1, #10
  402744:	4628      	mov	r0, r5
  402746:	f000 fc1b 	bl	402f80 <memchr>
  40274a:	2800      	cmp	r0, #0
  40274c:	f000 80a1 	beq.w	402892 <__sfvwrite_r+0x2d6>
  402750:	3001      	adds	r0, #1
  402752:	eba0 0905 	sub.w	r9, r0, r5
  402756:	e7c0      	b.n	4026da <__sfvwrite_r+0x11e>
  402758:	6820      	ldr	r0, [r4, #0]
  40275a:	6923      	ldr	r3, [r4, #16]
  40275c:	4298      	cmp	r0, r3
  40275e:	d802      	bhi.n	402766 <__sfvwrite_r+0x1aa>
  402760:	6963      	ldr	r3, [r4, #20]
  402762:	429f      	cmp	r7, r3
  402764:	d25d      	bcs.n	402822 <__sfvwrite_r+0x266>
  402766:	45b8      	cmp	r8, r7
  402768:	bf28      	it	cs
  40276a:	46b8      	movcs	r8, r7
  40276c:	4649      	mov	r1, r9
  40276e:	4642      	mov	r2, r8
  402770:	f000 fcc2 	bl	4030f8 <memmove>
  402774:	68a3      	ldr	r3, [r4, #8]
  402776:	6822      	ldr	r2, [r4, #0]
  402778:	eba3 0308 	sub.w	r3, r3, r8
  40277c:	4442      	add	r2, r8
  40277e:	60a3      	str	r3, [r4, #8]
  402780:	6022      	str	r2, [r4, #0]
  402782:	b10b      	cbz	r3, 402788 <__sfvwrite_r+0x1cc>
  402784:	46c2      	mov	sl, r8
  402786:	e777      	b.n	402678 <__sfvwrite_r+0xbc>
  402788:	4621      	mov	r1, r4
  40278a:	9800      	ldr	r0, [sp, #0]
  40278c:	f7ff fcca 	bl	402124 <_fflush_r>
  402790:	2800      	cmp	r0, #0
  402792:	d18f      	bne.n	4026b4 <__sfvwrite_r+0xf8>
  402794:	46c2      	mov	sl, r8
  402796:	e76f      	b.n	402678 <__sfvwrite_r+0xbc>
  402798:	465a      	mov	r2, fp
  40279a:	4629      	mov	r1, r5
  40279c:	f000 fcac 	bl	4030f8 <memmove>
  4027a0:	68a2      	ldr	r2, [r4, #8]
  4027a2:	6823      	ldr	r3, [r4, #0]
  4027a4:	eba2 020b 	sub.w	r2, r2, fp
  4027a8:	445b      	add	r3, fp
  4027aa:	60a2      	str	r2, [r4, #8]
  4027ac:	6023      	str	r3, [r4, #0]
  4027ae:	e7ad      	b.n	40270c <__sfvwrite_r+0x150>
  4027b0:	46b8      	mov	r8, r7
  4027b2:	46ba      	mov	sl, r7
  4027b4:	46bb      	mov	fp, r7
  4027b6:	6820      	ldr	r0, [r4, #0]
  4027b8:	e753      	b.n	402662 <__sfvwrite_r+0xa6>
  4027ba:	6962      	ldr	r2, [r4, #20]
  4027bc:	6820      	ldr	r0, [r4, #0]
  4027be:	6921      	ldr	r1, [r4, #16]
  4027c0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4027c4:	eba0 0a01 	sub.w	sl, r0, r1
  4027c8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4027cc:	f10a 0001 	add.w	r0, sl, #1
  4027d0:	ea4f 0868 	mov.w	r8, r8, asr #1
  4027d4:	4438      	add	r0, r7
  4027d6:	4540      	cmp	r0, r8
  4027d8:	4642      	mov	r2, r8
  4027da:	bf84      	itt	hi
  4027dc:	4680      	movhi	r8, r0
  4027de:	4642      	movhi	r2, r8
  4027e0:	055b      	lsls	r3, r3, #21
  4027e2:	d544      	bpl.n	40286e <__sfvwrite_r+0x2b2>
  4027e4:	4611      	mov	r1, r2
  4027e6:	9800      	ldr	r0, [sp, #0]
  4027e8:	f000 f912 	bl	402a10 <_malloc_r>
  4027ec:	4683      	mov	fp, r0
  4027ee:	2800      	cmp	r0, #0
  4027f0:	d055      	beq.n	40289e <__sfvwrite_r+0x2e2>
  4027f2:	4652      	mov	r2, sl
  4027f4:	6921      	ldr	r1, [r4, #16]
  4027f6:	f000 fc09 	bl	40300c <memcpy>
  4027fa:	89a3      	ldrh	r3, [r4, #12]
  4027fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402804:	81a3      	strh	r3, [r4, #12]
  402806:	eb0b 000a 	add.w	r0, fp, sl
  40280a:	eba8 030a 	sub.w	r3, r8, sl
  40280e:	f8c4 b010 	str.w	fp, [r4, #16]
  402812:	f8c4 8014 	str.w	r8, [r4, #20]
  402816:	6020      	str	r0, [r4, #0]
  402818:	60a3      	str	r3, [r4, #8]
  40281a:	46b8      	mov	r8, r7
  40281c:	46ba      	mov	sl, r7
  40281e:	46bb      	mov	fp, r7
  402820:	e71f      	b.n	402662 <__sfvwrite_r+0xa6>
  402822:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  402826:	42ba      	cmp	r2, r7
  402828:	bf28      	it	cs
  40282a:	463a      	movcs	r2, r7
  40282c:	fb92 f2f3 	sdiv	r2, r2, r3
  402830:	69e1      	ldr	r1, [r4, #28]
  402832:	fb03 f302 	mul.w	r3, r3, r2
  402836:	9800      	ldr	r0, [sp, #0]
  402838:	464a      	mov	r2, r9
  40283a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40283c:	47b0      	blx	r6
  40283e:	f1b0 0a00 	subs.w	sl, r0, #0
  402842:	f73f af19 	bgt.w	402678 <__sfvwrite_r+0xbc>
  402846:	e735      	b.n	4026b4 <__sfvwrite_r+0xf8>
  402848:	461a      	mov	r2, r3
  40284a:	4629      	mov	r1, r5
  40284c:	9301      	str	r3, [sp, #4]
  40284e:	f000 fc53 	bl	4030f8 <memmove>
  402852:	6822      	ldr	r2, [r4, #0]
  402854:	9b01      	ldr	r3, [sp, #4]
  402856:	4621      	mov	r1, r4
  402858:	441a      	add	r2, r3
  40285a:	6022      	str	r2, [r4, #0]
  40285c:	9800      	ldr	r0, [sp, #0]
  40285e:	f7ff fc61 	bl	402124 <_fflush_r>
  402862:	9b01      	ldr	r3, [sp, #4]
  402864:	2800      	cmp	r0, #0
  402866:	f47f af25 	bne.w	4026b4 <__sfvwrite_r+0xf8>
  40286a:	461f      	mov	r7, r3
  40286c:	e74e      	b.n	40270c <__sfvwrite_r+0x150>
  40286e:	9800      	ldr	r0, [sp, #0]
  402870:	f000 fcaa 	bl	4031c8 <_realloc_r>
  402874:	4683      	mov	fp, r0
  402876:	2800      	cmp	r0, #0
  402878:	d1c5      	bne.n	402806 <__sfvwrite_r+0x24a>
  40287a:	9d00      	ldr	r5, [sp, #0]
  40287c:	6921      	ldr	r1, [r4, #16]
  40287e:	4628      	mov	r0, r5
  402880:	f7ff fdb6 	bl	4023f0 <_free_r>
  402884:	220c      	movs	r2, #12
  402886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40288a:	602a      	str	r2, [r5, #0]
  40288c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402890:	e712      	b.n	4026b8 <__sfvwrite_r+0xfc>
  402892:	f106 0901 	add.w	r9, r6, #1
  402896:	e720      	b.n	4026da <__sfvwrite_r+0x11e>
  402898:	f04f 30ff 	mov.w	r0, #4294967295
  40289c:	e6bd      	b.n	40261a <__sfvwrite_r+0x5e>
  40289e:	220c      	movs	r2, #12
  4028a0:	9900      	ldr	r1, [sp, #0]
  4028a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4028a6:	600a      	str	r2, [r1, #0]
  4028a8:	e706      	b.n	4026b8 <__sfvwrite_r+0xfc>
  4028aa:	bf00      	nop
  4028ac:	7ffffc00 	.word	0x7ffffc00

004028b0 <_fwalk_reent>:
  4028b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4028b4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
  4028b8:	d01e      	beq.n	4028f8 <_fwalk_reent+0x48>
  4028ba:	4688      	mov	r8, r1
  4028bc:	4607      	mov	r7, r0
  4028be:	f04f 0900 	mov.w	r9, #0
  4028c2:	6875      	ldr	r5, [r6, #4]
  4028c4:	68b4      	ldr	r4, [r6, #8]
  4028c6:	3d01      	subs	r5, #1
  4028c8:	d410      	bmi.n	4028ec <_fwalk_reent+0x3c>
  4028ca:	89a3      	ldrh	r3, [r4, #12]
  4028cc:	3d01      	subs	r5, #1
  4028ce:	2b01      	cmp	r3, #1
  4028d0:	d908      	bls.n	4028e4 <_fwalk_reent+0x34>
  4028d2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4028d6:	3301      	adds	r3, #1
  4028d8:	d004      	beq.n	4028e4 <_fwalk_reent+0x34>
  4028da:	4621      	mov	r1, r4
  4028dc:	4638      	mov	r0, r7
  4028de:	47c0      	blx	r8
  4028e0:	ea49 0900 	orr.w	r9, r9, r0
  4028e4:	1c6b      	adds	r3, r5, #1
  4028e6:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4028ea:	d1ee      	bne.n	4028ca <_fwalk_reent+0x1a>
  4028ec:	6836      	ldr	r6, [r6, #0]
  4028ee:	2e00      	cmp	r6, #0
  4028f0:	d1e7      	bne.n	4028c2 <_fwalk_reent+0x12>
  4028f2:	4648      	mov	r0, r9
  4028f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4028f8:	46b1      	mov	r9, r6
  4028fa:	4648      	mov	r0, r9
  4028fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00402900 <__locale_mb_cur_max>:
  402900:	4b04      	ldr	r3, [pc, #16]	; (402914 <__locale_mb_cur_max+0x14>)
  402902:	4a05      	ldr	r2, [pc, #20]	; (402918 <__locale_mb_cur_max+0x18>)
  402904:	681b      	ldr	r3, [r3, #0]
  402906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402908:	2b00      	cmp	r3, #0
  40290a:	bf08      	it	eq
  40290c:	4613      	moveq	r3, r2
  40290e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402912:	4770      	bx	lr
  402914:	200000ec 	.word	0x200000ec
  402918:	20000518 	.word	0x20000518

0040291c <__swhatbuf_r>:
  40291c:	b570      	push	{r4, r5, r6, lr}
  40291e:	460c      	mov	r4, r1
  402920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402924:	b090      	sub	sp, #64	; 0x40
  402926:	2900      	cmp	r1, #0
  402928:	4615      	mov	r5, r2
  40292a:	461e      	mov	r6, r3
  40292c:	db14      	blt.n	402958 <__swhatbuf_r+0x3c>
  40292e:	aa01      	add	r2, sp, #4
  402930:	f000 ffa2 	bl	403878 <_fstat_r>
  402934:	2800      	cmp	r0, #0
  402936:	db0f      	blt.n	402958 <__swhatbuf_r+0x3c>
  402938:	9a02      	ldr	r2, [sp, #8]
  40293a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40293e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402942:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402946:	fab2 f282 	clz	r2, r2
  40294a:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40294e:	0952      	lsrs	r2, r2, #5
  402950:	6032      	str	r2, [r6, #0]
  402952:	602b      	str	r3, [r5, #0]
  402954:	b010      	add	sp, #64	; 0x40
  402956:	bd70      	pop	{r4, r5, r6, pc}
  402958:	2300      	movs	r3, #0
  40295a:	89a2      	ldrh	r2, [r4, #12]
  40295c:	6033      	str	r3, [r6, #0]
  40295e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402962:	d004      	beq.n	40296e <__swhatbuf_r+0x52>
  402964:	2240      	movs	r2, #64	; 0x40
  402966:	4618      	mov	r0, r3
  402968:	602a      	str	r2, [r5, #0]
  40296a:	b010      	add	sp, #64	; 0x40
  40296c:	bd70      	pop	{r4, r5, r6, pc}
  40296e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402972:	602b      	str	r3, [r5, #0]
  402974:	b010      	add	sp, #64	; 0x40
  402976:	bd70      	pop	{r4, r5, r6, pc}

00402978 <__smakebuf_r>:
  402978:	898a      	ldrh	r2, [r1, #12]
  40297a:	460b      	mov	r3, r1
  40297c:	0792      	lsls	r2, r2, #30
  40297e:	d506      	bpl.n	40298e <__smakebuf_r+0x16>
  402980:	2101      	movs	r1, #1
  402982:	f103 0243 	add.w	r2, r3, #67	; 0x43
  402986:	6159      	str	r1, [r3, #20]
  402988:	601a      	str	r2, [r3, #0]
  40298a:	611a      	str	r2, [r3, #16]
  40298c:	4770      	bx	lr
  40298e:	b5f0      	push	{r4, r5, r6, r7, lr}
  402990:	b083      	sub	sp, #12
  402992:	ab01      	add	r3, sp, #4
  402994:	466a      	mov	r2, sp
  402996:	460c      	mov	r4, r1
  402998:	4605      	mov	r5, r0
  40299a:	f7ff ffbf 	bl	40291c <__swhatbuf_r>
  40299e:	9900      	ldr	r1, [sp, #0]
  4029a0:	4606      	mov	r6, r0
  4029a2:	4628      	mov	r0, r5
  4029a4:	f000 f834 	bl	402a10 <_malloc_r>
  4029a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029ac:	b1d0      	cbz	r0, 4029e4 <__smakebuf_r+0x6c>
  4029ae:	e89d 0006 	ldmia.w	sp, {r1, r2}
  4029b2:	4f12      	ldr	r7, [pc, #72]	; (4029fc <__smakebuf_r+0x84>)
  4029b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4029b8:	63ef      	str	r7, [r5, #60]	; 0x3c
  4029ba:	81a3      	strh	r3, [r4, #12]
  4029bc:	6020      	str	r0, [r4, #0]
  4029be:	6120      	str	r0, [r4, #16]
  4029c0:	6161      	str	r1, [r4, #20]
  4029c2:	b91a      	cbnz	r2, 4029cc <__smakebuf_r+0x54>
  4029c4:	4333      	orrs	r3, r6
  4029c6:	81a3      	strh	r3, [r4, #12]
  4029c8:	b003      	add	sp, #12
  4029ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029cc:	4628      	mov	r0, r5
  4029ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4029d2:	f000 ff65 	bl	4038a0 <_isatty_r>
  4029d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029da:	2800      	cmp	r0, #0
  4029dc:	d0f2      	beq.n	4029c4 <__smakebuf_r+0x4c>
  4029de:	f043 0301 	orr.w	r3, r3, #1
  4029e2:	e7ef      	b.n	4029c4 <__smakebuf_r+0x4c>
  4029e4:	059a      	lsls	r2, r3, #22
  4029e6:	d4ef      	bmi.n	4029c8 <__smakebuf_r+0x50>
  4029e8:	2101      	movs	r1, #1
  4029ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4029ee:	f043 0302 	orr.w	r3, r3, #2
  4029f2:	81a3      	strh	r3, [r4, #12]
  4029f4:	6161      	str	r1, [r4, #20]
  4029f6:	6022      	str	r2, [r4, #0]
  4029f8:	6122      	str	r2, [r4, #16]
  4029fa:	e7e5      	b.n	4029c8 <__smakebuf_r+0x50>
  4029fc:	00402151 	.word	0x00402151

00402a00 <malloc>:
  402a00:	4b02      	ldr	r3, [pc, #8]	; (402a0c <malloc+0xc>)
  402a02:	4601      	mov	r1, r0
  402a04:	6818      	ldr	r0, [r3, #0]
  402a06:	f000 b803 	b.w	402a10 <_malloc_r>
  402a0a:	bf00      	nop
  402a0c:	200000ec 	.word	0x200000ec

00402a10 <_malloc_r>:
  402a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a14:	f101 060b 	add.w	r6, r1, #11
  402a18:	2e16      	cmp	r6, #22
  402a1a:	b083      	sub	sp, #12
  402a1c:	4605      	mov	r5, r0
  402a1e:	f240 809e 	bls.w	402b5e <_malloc_r+0x14e>
  402a22:	f036 0607 	bics.w	r6, r6, #7
  402a26:	f100 80bd 	bmi.w	402ba4 <_malloc_r+0x194>
  402a2a:	42b1      	cmp	r1, r6
  402a2c:	f200 80ba 	bhi.w	402ba4 <_malloc_r+0x194>
  402a30:	f000 fbc6 	bl	4031c0 <__malloc_lock>
  402a34:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402a38:	f0c0 8285 	bcc.w	402f46 <_malloc_r+0x536>
  402a3c:	0a73      	lsrs	r3, r6, #9
  402a3e:	f000 80b8 	beq.w	402bb2 <_malloc_r+0x1a2>
  402a42:	2b04      	cmp	r3, #4
  402a44:	f200 816c 	bhi.w	402d20 <_malloc_r+0x310>
  402a48:	09b3      	lsrs	r3, r6, #6
  402a4a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402a4e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402a52:	00c1      	lsls	r1, r0, #3
  402a54:	4fb8      	ldr	r7, [pc, #736]	; (402d38 <_malloc_r+0x328>)
  402a56:	4439      	add	r1, r7
  402a58:	684c      	ldr	r4, [r1, #4]
  402a5a:	3908      	subs	r1, #8
  402a5c:	42a1      	cmp	r1, r4
  402a5e:	d106      	bne.n	402a6e <_malloc_r+0x5e>
  402a60:	e00c      	b.n	402a7c <_malloc_r+0x6c>
  402a62:	2a00      	cmp	r2, #0
  402a64:	f280 80ab 	bge.w	402bbe <_malloc_r+0x1ae>
  402a68:	68e4      	ldr	r4, [r4, #12]
  402a6a:	42a1      	cmp	r1, r4
  402a6c:	d006      	beq.n	402a7c <_malloc_r+0x6c>
  402a6e:	6863      	ldr	r3, [r4, #4]
  402a70:	f023 0303 	bic.w	r3, r3, #3
  402a74:	1b9a      	subs	r2, r3, r6
  402a76:	2a0f      	cmp	r2, #15
  402a78:	ddf3      	ble.n	402a62 <_malloc_r+0x52>
  402a7a:	4670      	mov	r0, lr
  402a7c:	693c      	ldr	r4, [r7, #16]
  402a7e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 402d4c <_malloc_r+0x33c>
  402a82:	4574      	cmp	r4, lr
  402a84:	f000 819e 	beq.w	402dc4 <_malloc_r+0x3b4>
  402a88:	6863      	ldr	r3, [r4, #4]
  402a8a:	f023 0303 	bic.w	r3, r3, #3
  402a8e:	1b9a      	subs	r2, r3, r6
  402a90:	2a0f      	cmp	r2, #15
  402a92:	f300 8183 	bgt.w	402d9c <_malloc_r+0x38c>
  402a96:	2a00      	cmp	r2, #0
  402a98:	f8c7 e014 	str.w	lr, [r7, #20]
  402a9c:	f8c7 e010 	str.w	lr, [r7, #16]
  402aa0:	f280 8091 	bge.w	402bc6 <_malloc_r+0x1b6>
  402aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402aa8:	f080 8154 	bcs.w	402d54 <_malloc_r+0x344>
  402aac:	2201      	movs	r2, #1
  402aae:	08db      	lsrs	r3, r3, #3
  402ab0:	6879      	ldr	r1, [r7, #4]
  402ab2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  402ab6:	4413      	add	r3, r2
  402ab8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
  402abc:	fa02 f20c 	lsl.w	r2, r2, ip
  402ac0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
  402ac4:	430a      	orrs	r2, r1
  402ac6:	f1ac 0108 	sub.w	r1, ip, #8
  402aca:	60e1      	str	r1, [r4, #12]
  402acc:	f8c4 8008 	str.w	r8, [r4, #8]
  402ad0:	607a      	str	r2, [r7, #4]
  402ad2:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  402ad6:	f8c8 400c 	str.w	r4, [r8, #12]
  402ada:	2401      	movs	r4, #1
  402adc:	1083      	asrs	r3, r0, #2
  402ade:	409c      	lsls	r4, r3
  402ae0:	4294      	cmp	r4, r2
  402ae2:	d87d      	bhi.n	402be0 <_malloc_r+0x1d0>
  402ae4:	4214      	tst	r4, r2
  402ae6:	d106      	bne.n	402af6 <_malloc_r+0xe6>
  402ae8:	f020 0003 	bic.w	r0, r0, #3
  402aec:	0064      	lsls	r4, r4, #1
  402aee:	4214      	tst	r4, r2
  402af0:	f100 0004 	add.w	r0, r0, #4
  402af4:	d0fa      	beq.n	402aec <_malloc_r+0xdc>
  402af6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402afa:	46cc      	mov	ip, r9
  402afc:	4680      	mov	r8, r0
  402afe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402b02:	459c      	cmp	ip, r3
  402b04:	d107      	bne.n	402b16 <_malloc_r+0x106>
  402b06:	e15f      	b.n	402dc8 <_malloc_r+0x3b8>
  402b08:	2a00      	cmp	r2, #0
  402b0a:	f280 816d 	bge.w	402de8 <_malloc_r+0x3d8>
  402b0e:	68db      	ldr	r3, [r3, #12]
  402b10:	459c      	cmp	ip, r3
  402b12:	f000 8159 	beq.w	402dc8 <_malloc_r+0x3b8>
  402b16:	6859      	ldr	r1, [r3, #4]
  402b18:	f021 0103 	bic.w	r1, r1, #3
  402b1c:	1b8a      	subs	r2, r1, r6
  402b1e:	2a0f      	cmp	r2, #15
  402b20:	ddf2      	ble.n	402b08 <_malloc_r+0xf8>
  402b22:	68dc      	ldr	r4, [r3, #12]
  402b24:	f8d3 c008 	ldr.w	ip, [r3, #8]
  402b28:	f046 0801 	orr.w	r8, r6, #1
  402b2c:	4628      	mov	r0, r5
  402b2e:	441e      	add	r6, r3
  402b30:	f042 0501 	orr.w	r5, r2, #1
  402b34:	f8c3 8004 	str.w	r8, [r3, #4]
  402b38:	f8cc 400c 	str.w	r4, [ip, #12]
  402b3c:	f8c4 c008 	str.w	ip, [r4, #8]
  402b40:	617e      	str	r6, [r7, #20]
  402b42:	613e      	str	r6, [r7, #16]
  402b44:	f8c6 e00c 	str.w	lr, [r6, #12]
  402b48:	f8c6 e008 	str.w	lr, [r6, #8]
  402b4c:	6075      	str	r5, [r6, #4]
  402b4e:	505a      	str	r2, [r3, r1]
  402b50:	9300      	str	r3, [sp, #0]
  402b52:	f000 fb37 	bl	4031c4 <__malloc_unlock>
  402b56:	9b00      	ldr	r3, [sp, #0]
  402b58:	f103 0408 	add.w	r4, r3, #8
  402b5c:	e01e      	b.n	402b9c <_malloc_r+0x18c>
  402b5e:	2910      	cmp	r1, #16
  402b60:	d820      	bhi.n	402ba4 <_malloc_r+0x194>
  402b62:	f000 fb2d 	bl	4031c0 <__malloc_lock>
  402b66:	2610      	movs	r6, #16
  402b68:	2318      	movs	r3, #24
  402b6a:	2002      	movs	r0, #2
  402b6c:	4f72      	ldr	r7, [pc, #456]	; (402d38 <_malloc_r+0x328>)
  402b6e:	443b      	add	r3, r7
  402b70:	685c      	ldr	r4, [r3, #4]
  402b72:	f1a3 0208 	sub.w	r2, r3, #8
  402b76:	4294      	cmp	r4, r2
  402b78:	f000 812f 	beq.w	402dda <_malloc_r+0x3ca>
  402b7c:	6863      	ldr	r3, [r4, #4]
  402b7e:	68e1      	ldr	r1, [r4, #12]
  402b80:	f023 0303 	bic.w	r3, r3, #3
  402b84:	4423      	add	r3, r4
  402b86:	685a      	ldr	r2, [r3, #4]
  402b88:	68a6      	ldr	r6, [r4, #8]
  402b8a:	f042 0201 	orr.w	r2, r2, #1
  402b8e:	60f1      	str	r1, [r6, #12]
  402b90:	4628      	mov	r0, r5
  402b92:	608e      	str	r6, [r1, #8]
  402b94:	605a      	str	r2, [r3, #4]
  402b96:	f000 fb15 	bl	4031c4 <__malloc_unlock>
  402b9a:	3408      	adds	r4, #8
  402b9c:	4620      	mov	r0, r4
  402b9e:	b003      	add	sp, #12
  402ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ba4:	2400      	movs	r4, #0
  402ba6:	230c      	movs	r3, #12
  402ba8:	4620      	mov	r0, r4
  402baa:	602b      	str	r3, [r5, #0]
  402bac:	b003      	add	sp, #12
  402bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bb2:	2040      	movs	r0, #64	; 0x40
  402bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
  402bb8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402bbc:	e74a      	b.n	402a54 <_malloc_r+0x44>
  402bbe:	4423      	add	r3, r4
  402bc0:	685a      	ldr	r2, [r3, #4]
  402bc2:	68e1      	ldr	r1, [r4, #12]
  402bc4:	e7e0      	b.n	402b88 <_malloc_r+0x178>
  402bc6:	4423      	add	r3, r4
  402bc8:	685a      	ldr	r2, [r3, #4]
  402bca:	4628      	mov	r0, r5
  402bcc:	f042 0201 	orr.w	r2, r2, #1
  402bd0:	605a      	str	r2, [r3, #4]
  402bd2:	3408      	adds	r4, #8
  402bd4:	f000 faf6 	bl	4031c4 <__malloc_unlock>
  402bd8:	4620      	mov	r0, r4
  402bda:	b003      	add	sp, #12
  402bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402be0:	68bc      	ldr	r4, [r7, #8]
  402be2:	6863      	ldr	r3, [r4, #4]
  402be4:	f023 0803 	bic.w	r8, r3, #3
  402be8:	45b0      	cmp	r8, r6
  402bea:	d304      	bcc.n	402bf6 <_malloc_r+0x1e6>
  402bec:	eba8 0306 	sub.w	r3, r8, r6
  402bf0:	2b0f      	cmp	r3, #15
  402bf2:	f300 8085 	bgt.w	402d00 <_malloc_r+0x2f0>
  402bf6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402d50 <_malloc_r+0x340>
  402bfa:	4b50      	ldr	r3, [pc, #320]	; (402d3c <_malloc_r+0x32c>)
  402bfc:	f8d9 2000 	ldr.w	r2, [r9]
  402c00:	681b      	ldr	r3, [r3, #0]
  402c02:	3201      	adds	r2, #1
  402c04:	4433      	add	r3, r6
  402c06:	eb04 0a08 	add.w	sl, r4, r8
  402c0a:	f000 8154 	beq.w	402eb6 <_malloc_r+0x4a6>
  402c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402c12:	330f      	adds	r3, #15
  402c14:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402c18:	f02b 0b0f 	bic.w	fp, fp, #15
  402c1c:	4659      	mov	r1, fp
  402c1e:	4628      	mov	r0, r5
  402c20:	f000 fc88 	bl	403534 <_sbrk_r>
  402c24:	1c41      	adds	r1, r0, #1
  402c26:	4602      	mov	r2, r0
  402c28:	f000 80fb 	beq.w	402e22 <_malloc_r+0x412>
  402c2c:	4582      	cmp	sl, r0
  402c2e:	f200 80f6 	bhi.w	402e1e <_malloc_r+0x40e>
  402c32:	4b43      	ldr	r3, [pc, #268]	; (402d40 <_malloc_r+0x330>)
  402c34:	6819      	ldr	r1, [r3, #0]
  402c36:	4459      	add	r1, fp
  402c38:	6019      	str	r1, [r3, #0]
  402c3a:	f000 814c 	beq.w	402ed6 <_malloc_r+0x4c6>
  402c3e:	f8d9 0000 	ldr.w	r0, [r9]
  402c42:	3001      	adds	r0, #1
  402c44:	bf1b      	ittet	ne
  402c46:	eba2 0a0a 	subne.w	sl, r2, sl
  402c4a:	4451      	addne	r1, sl
  402c4c:	f8c9 2000 	streq.w	r2, [r9]
  402c50:	6019      	strne	r1, [r3, #0]
  402c52:	f012 0107 	ands.w	r1, r2, #7
  402c56:	f000 8114 	beq.w	402e82 <_malloc_r+0x472>
  402c5a:	f1c1 0008 	rsb	r0, r1, #8
  402c5e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402c62:	4402      	add	r2, r0
  402c64:	3108      	adds	r1, #8
  402c66:	eb02 090b 	add.w	r9, r2, fp
  402c6a:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402c6e:	eba1 0909 	sub.w	r9, r1, r9
  402c72:	4649      	mov	r1, r9
  402c74:	4628      	mov	r0, r5
  402c76:	9301      	str	r3, [sp, #4]
  402c78:	9200      	str	r2, [sp, #0]
  402c7a:	f000 fc5b 	bl	403534 <_sbrk_r>
  402c7e:	1c43      	adds	r3, r0, #1
  402c80:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402c84:	f000 8142 	beq.w	402f0c <_malloc_r+0x4fc>
  402c88:	1a80      	subs	r0, r0, r2
  402c8a:	4448      	add	r0, r9
  402c8c:	f040 0001 	orr.w	r0, r0, #1
  402c90:	6819      	ldr	r1, [r3, #0]
  402c92:	42bc      	cmp	r4, r7
  402c94:	4449      	add	r1, r9
  402c96:	60ba      	str	r2, [r7, #8]
  402c98:	6019      	str	r1, [r3, #0]
  402c9a:	6050      	str	r0, [r2, #4]
  402c9c:	d017      	beq.n	402cce <_malloc_r+0x2be>
  402c9e:	f1b8 0f0f 	cmp.w	r8, #15
  402ca2:	f240 80fa 	bls.w	402e9a <_malloc_r+0x48a>
  402ca6:	f04f 0c05 	mov.w	ip, #5
  402caa:	6862      	ldr	r2, [r4, #4]
  402cac:	f1a8 000c 	sub.w	r0, r8, #12
  402cb0:	f020 0007 	bic.w	r0, r0, #7
  402cb4:	f002 0201 	and.w	r2, r2, #1
  402cb8:	eb04 0e00 	add.w	lr, r4, r0
  402cbc:	4302      	orrs	r2, r0
  402cbe:	280f      	cmp	r0, #15
  402cc0:	6062      	str	r2, [r4, #4]
  402cc2:	f8ce c004 	str.w	ip, [lr, #4]
  402cc6:	f8ce c008 	str.w	ip, [lr, #8]
  402cca:	f200 8116 	bhi.w	402efa <_malloc_r+0x4ea>
  402cce:	4b1d      	ldr	r3, [pc, #116]	; (402d44 <_malloc_r+0x334>)
  402cd0:	68bc      	ldr	r4, [r7, #8]
  402cd2:	681a      	ldr	r2, [r3, #0]
  402cd4:	4291      	cmp	r1, r2
  402cd6:	bf88      	it	hi
  402cd8:	6019      	strhi	r1, [r3, #0]
  402cda:	4b1b      	ldr	r3, [pc, #108]	; (402d48 <_malloc_r+0x338>)
  402cdc:	681a      	ldr	r2, [r3, #0]
  402cde:	4291      	cmp	r1, r2
  402ce0:	6862      	ldr	r2, [r4, #4]
  402ce2:	bf88      	it	hi
  402ce4:	6019      	strhi	r1, [r3, #0]
  402ce6:	f022 0203 	bic.w	r2, r2, #3
  402cea:	4296      	cmp	r6, r2
  402cec:	eba2 0306 	sub.w	r3, r2, r6
  402cf0:	d801      	bhi.n	402cf6 <_malloc_r+0x2e6>
  402cf2:	2b0f      	cmp	r3, #15
  402cf4:	dc04      	bgt.n	402d00 <_malloc_r+0x2f0>
  402cf6:	4628      	mov	r0, r5
  402cf8:	f000 fa64 	bl	4031c4 <__malloc_unlock>
  402cfc:	2400      	movs	r4, #0
  402cfe:	e74d      	b.n	402b9c <_malloc_r+0x18c>
  402d00:	f046 0201 	orr.w	r2, r6, #1
  402d04:	f043 0301 	orr.w	r3, r3, #1
  402d08:	4426      	add	r6, r4
  402d0a:	6062      	str	r2, [r4, #4]
  402d0c:	4628      	mov	r0, r5
  402d0e:	60be      	str	r6, [r7, #8]
  402d10:	3408      	adds	r4, #8
  402d12:	6073      	str	r3, [r6, #4]
  402d14:	f000 fa56 	bl	4031c4 <__malloc_unlock>
  402d18:	4620      	mov	r0, r4
  402d1a:	b003      	add	sp, #12
  402d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d20:	2b14      	cmp	r3, #20
  402d22:	d970      	bls.n	402e06 <_malloc_r+0x3f6>
  402d24:	2b54      	cmp	r3, #84	; 0x54
  402d26:	f200 80a2 	bhi.w	402e6e <_malloc_r+0x45e>
  402d2a:	0b33      	lsrs	r3, r6, #12
  402d2c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402d30:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402d34:	00c1      	lsls	r1, r0, #3
  402d36:	e68d      	b.n	402a54 <_malloc_r+0x44>
  402d38:	20000684 	.word	0x20000684
  402d3c:	20000b64 	.word	0x20000b64
  402d40:	20000b34 	.word	0x20000b34
  402d44:	20000b5c 	.word	0x20000b5c
  402d48:	20000b60 	.word	0x20000b60
  402d4c:	2000068c 	.word	0x2000068c
  402d50:	20000a8c 	.word	0x20000a8c
  402d54:	0a5a      	lsrs	r2, r3, #9
  402d56:	2a04      	cmp	r2, #4
  402d58:	d95b      	bls.n	402e12 <_malloc_r+0x402>
  402d5a:	2a14      	cmp	r2, #20
  402d5c:	f200 80ae 	bhi.w	402ebc <_malloc_r+0x4ac>
  402d60:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402d64:	00c9      	lsls	r1, r1, #3
  402d66:	325b      	adds	r2, #91	; 0x5b
  402d68:	eb07 0c01 	add.w	ip, r7, r1
  402d6c:	5879      	ldr	r1, [r7, r1]
  402d6e:	f1ac 0c08 	sub.w	ip, ip, #8
  402d72:	458c      	cmp	ip, r1
  402d74:	f000 8088 	beq.w	402e88 <_malloc_r+0x478>
  402d78:	684a      	ldr	r2, [r1, #4]
  402d7a:	f022 0203 	bic.w	r2, r2, #3
  402d7e:	4293      	cmp	r3, r2
  402d80:	d273      	bcs.n	402e6a <_malloc_r+0x45a>
  402d82:	6889      	ldr	r1, [r1, #8]
  402d84:	458c      	cmp	ip, r1
  402d86:	d1f7      	bne.n	402d78 <_malloc_r+0x368>
  402d88:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402d8c:	687a      	ldr	r2, [r7, #4]
  402d8e:	60e3      	str	r3, [r4, #12]
  402d90:	f8c4 c008 	str.w	ip, [r4, #8]
  402d94:	609c      	str	r4, [r3, #8]
  402d96:	f8cc 400c 	str.w	r4, [ip, #12]
  402d9a:	e69e      	b.n	402ada <_malloc_r+0xca>
  402d9c:	f046 0c01 	orr.w	ip, r6, #1
  402da0:	f042 0101 	orr.w	r1, r2, #1
  402da4:	4426      	add	r6, r4
  402da6:	f8c4 c004 	str.w	ip, [r4, #4]
  402daa:	4628      	mov	r0, r5
  402dac:	617e      	str	r6, [r7, #20]
  402dae:	613e      	str	r6, [r7, #16]
  402db0:	f8c6 e00c 	str.w	lr, [r6, #12]
  402db4:	f8c6 e008 	str.w	lr, [r6, #8]
  402db8:	6071      	str	r1, [r6, #4]
  402dba:	50e2      	str	r2, [r4, r3]
  402dbc:	f000 fa02 	bl	4031c4 <__malloc_unlock>
  402dc0:	3408      	adds	r4, #8
  402dc2:	e6eb      	b.n	402b9c <_malloc_r+0x18c>
  402dc4:	687a      	ldr	r2, [r7, #4]
  402dc6:	e688      	b.n	402ada <_malloc_r+0xca>
  402dc8:	f108 0801 	add.w	r8, r8, #1
  402dcc:	f018 0f03 	tst.w	r8, #3
  402dd0:	f10c 0c08 	add.w	ip, ip, #8
  402dd4:	f47f ae93 	bne.w	402afe <_malloc_r+0xee>
  402dd8:	e02d      	b.n	402e36 <_malloc_r+0x426>
  402dda:	68dc      	ldr	r4, [r3, #12]
  402ddc:	42a3      	cmp	r3, r4
  402dde:	bf08      	it	eq
  402de0:	3002      	addeq	r0, #2
  402de2:	f43f ae4b 	beq.w	402a7c <_malloc_r+0x6c>
  402de6:	e6c9      	b.n	402b7c <_malloc_r+0x16c>
  402de8:	461c      	mov	r4, r3
  402dea:	4419      	add	r1, r3
  402dec:	684a      	ldr	r2, [r1, #4]
  402dee:	68db      	ldr	r3, [r3, #12]
  402df0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402df4:	f042 0201 	orr.w	r2, r2, #1
  402df8:	604a      	str	r2, [r1, #4]
  402dfa:	4628      	mov	r0, r5
  402dfc:	60f3      	str	r3, [r6, #12]
  402dfe:	609e      	str	r6, [r3, #8]
  402e00:	f000 f9e0 	bl	4031c4 <__malloc_unlock>
  402e04:	e6ca      	b.n	402b9c <_malloc_r+0x18c>
  402e06:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402e0a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402e0e:	00c1      	lsls	r1, r0, #3
  402e10:	e620      	b.n	402a54 <_malloc_r+0x44>
  402e12:	099a      	lsrs	r2, r3, #6
  402e14:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402e18:	00c9      	lsls	r1, r1, #3
  402e1a:	3238      	adds	r2, #56	; 0x38
  402e1c:	e7a4      	b.n	402d68 <_malloc_r+0x358>
  402e1e:	42bc      	cmp	r4, r7
  402e20:	d054      	beq.n	402ecc <_malloc_r+0x4bc>
  402e22:	68bc      	ldr	r4, [r7, #8]
  402e24:	6862      	ldr	r2, [r4, #4]
  402e26:	f022 0203 	bic.w	r2, r2, #3
  402e2a:	e75e      	b.n	402cea <_malloc_r+0x2da>
  402e2c:	f859 3908 	ldr.w	r3, [r9], #-8
  402e30:	4599      	cmp	r9, r3
  402e32:	f040 8086 	bne.w	402f42 <_malloc_r+0x532>
  402e36:	f010 0f03 	tst.w	r0, #3
  402e3a:	f100 30ff 	add.w	r0, r0, #4294967295
  402e3e:	d1f5      	bne.n	402e2c <_malloc_r+0x41c>
  402e40:	687b      	ldr	r3, [r7, #4]
  402e42:	ea23 0304 	bic.w	r3, r3, r4
  402e46:	607b      	str	r3, [r7, #4]
  402e48:	0064      	lsls	r4, r4, #1
  402e4a:	429c      	cmp	r4, r3
  402e4c:	f63f aec8 	bhi.w	402be0 <_malloc_r+0x1d0>
  402e50:	2c00      	cmp	r4, #0
  402e52:	f43f aec5 	beq.w	402be0 <_malloc_r+0x1d0>
  402e56:	421c      	tst	r4, r3
  402e58:	4640      	mov	r0, r8
  402e5a:	f47f ae4c 	bne.w	402af6 <_malloc_r+0xe6>
  402e5e:	0064      	lsls	r4, r4, #1
  402e60:	421c      	tst	r4, r3
  402e62:	f100 0004 	add.w	r0, r0, #4
  402e66:	d0fa      	beq.n	402e5e <_malloc_r+0x44e>
  402e68:	e645      	b.n	402af6 <_malloc_r+0xe6>
  402e6a:	468c      	mov	ip, r1
  402e6c:	e78c      	b.n	402d88 <_malloc_r+0x378>
  402e6e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402e72:	d815      	bhi.n	402ea0 <_malloc_r+0x490>
  402e74:	0bf3      	lsrs	r3, r6, #15
  402e76:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402e7a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402e7e:	00c1      	lsls	r1, r0, #3
  402e80:	e5e8      	b.n	402a54 <_malloc_r+0x44>
  402e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402e86:	e6ee      	b.n	402c66 <_malloc_r+0x256>
  402e88:	2101      	movs	r1, #1
  402e8a:	687b      	ldr	r3, [r7, #4]
  402e8c:	1092      	asrs	r2, r2, #2
  402e8e:	fa01 f202 	lsl.w	r2, r1, r2
  402e92:	431a      	orrs	r2, r3
  402e94:	607a      	str	r2, [r7, #4]
  402e96:	4663      	mov	r3, ip
  402e98:	e779      	b.n	402d8e <_malloc_r+0x37e>
  402e9a:	2301      	movs	r3, #1
  402e9c:	6053      	str	r3, [r2, #4]
  402e9e:	e72a      	b.n	402cf6 <_malloc_r+0x2e6>
  402ea0:	f240 5254 	movw	r2, #1364	; 0x554
  402ea4:	4293      	cmp	r3, r2
  402ea6:	d822      	bhi.n	402eee <_malloc_r+0x4de>
  402ea8:	0cb3      	lsrs	r3, r6, #18
  402eaa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402eae:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402eb2:	00c1      	lsls	r1, r0, #3
  402eb4:	e5ce      	b.n	402a54 <_malloc_r+0x44>
  402eb6:	f103 0b10 	add.w	fp, r3, #16
  402eba:	e6af      	b.n	402c1c <_malloc_r+0x20c>
  402ebc:	2a54      	cmp	r2, #84	; 0x54
  402ebe:	d829      	bhi.n	402f14 <_malloc_r+0x504>
  402ec0:	0b1a      	lsrs	r2, r3, #12
  402ec2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402ec6:	00c9      	lsls	r1, r1, #3
  402ec8:	326e      	adds	r2, #110	; 0x6e
  402eca:	e74d      	b.n	402d68 <_malloc_r+0x358>
  402ecc:	4b20      	ldr	r3, [pc, #128]	; (402f50 <_malloc_r+0x540>)
  402ece:	6819      	ldr	r1, [r3, #0]
  402ed0:	4459      	add	r1, fp
  402ed2:	6019      	str	r1, [r3, #0]
  402ed4:	e6b3      	b.n	402c3e <_malloc_r+0x22e>
  402ed6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402eda:	2800      	cmp	r0, #0
  402edc:	f47f aeaf 	bne.w	402c3e <_malloc_r+0x22e>
  402ee0:	eb08 030b 	add.w	r3, r8, fp
  402ee4:	68ba      	ldr	r2, [r7, #8]
  402ee6:	f043 0301 	orr.w	r3, r3, #1
  402eea:	6053      	str	r3, [r2, #4]
  402eec:	e6ef      	b.n	402cce <_malloc_r+0x2be>
  402eee:	207f      	movs	r0, #127	; 0x7f
  402ef0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402ef4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402ef8:	e5ac      	b.n	402a54 <_malloc_r+0x44>
  402efa:	f104 0108 	add.w	r1, r4, #8
  402efe:	4628      	mov	r0, r5
  402f00:	9300      	str	r3, [sp, #0]
  402f02:	f7ff fa75 	bl	4023f0 <_free_r>
  402f06:	9b00      	ldr	r3, [sp, #0]
  402f08:	6819      	ldr	r1, [r3, #0]
  402f0a:	e6e0      	b.n	402cce <_malloc_r+0x2be>
  402f0c:	2001      	movs	r0, #1
  402f0e:	f04f 0900 	mov.w	r9, #0
  402f12:	e6bd      	b.n	402c90 <_malloc_r+0x280>
  402f14:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402f18:	d805      	bhi.n	402f26 <_malloc_r+0x516>
  402f1a:	0bda      	lsrs	r2, r3, #15
  402f1c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402f20:	00c9      	lsls	r1, r1, #3
  402f22:	3277      	adds	r2, #119	; 0x77
  402f24:	e720      	b.n	402d68 <_malloc_r+0x358>
  402f26:	f240 5154 	movw	r1, #1364	; 0x554
  402f2a:	428a      	cmp	r2, r1
  402f2c:	d805      	bhi.n	402f3a <_malloc_r+0x52a>
  402f2e:	0c9a      	lsrs	r2, r3, #18
  402f30:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402f34:	00c9      	lsls	r1, r1, #3
  402f36:	327c      	adds	r2, #124	; 0x7c
  402f38:	e716      	b.n	402d68 <_malloc_r+0x358>
  402f3a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402f3e:	227e      	movs	r2, #126	; 0x7e
  402f40:	e712      	b.n	402d68 <_malloc_r+0x358>
  402f42:	687b      	ldr	r3, [r7, #4]
  402f44:	e780      	b.n	402e48 <_malloc_r+0x438>
  402f46:	08f0      	lsrs	r0, r6, #3
  402f48:	f106 0308 	add.w	r3, r6, #8
  402f4c:	e60e      	b.n	402b6c <_malloc_r+0x15c>
  402f4e:	bf00      	nop
  402f50:	20000b34 	.word	0x20000b34

00402f54 <__ascii_mbtowc>:
  402f54:	b082      	sub	sp, #8
  402f56:	b149      	cbz	r1, 402f6c <__ascii_mbtowc+0x18>
  402f58:	b15a      	cbz	r2, 402f72 <__ascii_mbtowc+0x1e>
  402f5a:	b16b      	cbz	r3, 402f78 <__ascii_mbtowc+0x24>
  402f5c:	7813      	ldrb	r3, [r2, #0]
  402f5e:	600b      	str	r3, [r1, #0]
  402f60:	7812      	ldrb	r2, [r2, #0]
  402f62:	1c10      	adds	r0, r2, #0
  402f64:	bf18      	it	ne
  402f66:	2001      	movne	r0, #1
  402f68:	b002      	add	sp, #8
  402f6a:	4770      	bx	lr
  402f6c:	a901      	add	r1, sp, #4
  402f6e:	2a00      	cmp	r2, #0
  402f70:	d1f3      	bne.n	402f5a <__ascii_mbtowc+0x6>
  402f72:	4610      	mov	r0, r2
  402f74:	b002      	add	sp, #8
  402f76:	4770      	bx	lr
  402f78:	f06f 0001 	mvn.w	r0, #1
  402f7c:	e7f4      	b.n	402f68 <__ascii_mbtowc+0x14>
  402f7e:	bf00      	nop

00402f80 <memchr>:
  402f80:	0783      	lsls	r3, r0, #30
  402f82:	b470      	push	{r4, r5, r6}
  402f84:	b2cd      	uxtb	r5, r1
  402f86:	d03d      	beq.n	403004 <memchr+0x84>
  402f88:	1e54      	subs	r4, r2, #1
  402f8a:	b30a      	cbz	r2, 402fd0 <memchr+0x50>
  402f8c:	7803      	ldrb	r3, [r0, #0]
  402f8e:	42ab      	cmp	r3, r5
  402f90:	d01f      	beq.n	402fd2 <memchr+0x52>
  402f92:	1c43      	adds	r3, r0, #1
  402f94:	e005      	b.n	402fa2 <memchr+0x22>
  402f96:	f114 34ff 	adds.w	r4, r4, #4294967295
  402f9a:	d319      	bcc.n	402fd0 <memchr+0x50>
  402f9c:	7802      	ldrb	r2, [r0, #0]
  402f9e:	42aa      	cmp	r2, r5
  402fa0:	d017      	beq.n	402fd2 <memchr+0x52>
  402fa2:	f013 0f03 	tst.w	r3, #3
  402fa6:	4618      	mov	r0, r3
  402fa8:	f103 0301 	add.w	r3, r3, #1
  402fac:	d1f3      	bne.n	402f96 <memchr+0x16>
  402fae:	2c03      	cmp	r4, #3
  402fb0:	d811      	bhi.n	402fd6 <memchr+0x56>
  402fb2:	b34c      	cbz	r4, 403008 <memchr+0x88>
  402fb4:	7803      	ldrb	r3, [r0, #0]
  402fb6:	42ab      	cmp	r3, r5
  402fb8:	d00b      	beq.n	402fd2 <memchr+0x52>
  402fba:	4404      	add	r4, r0
  402fbc:	1c43      	adds	r3, r0, #1
  402fbe:	e002      	b.n	402fc6 <memchr+0x46>
  402fc0:	7802      	ldrb	r2, [r0, #0]
  402fc2:	42aa      	cmp	r2, r5
  402fc4:	d005      	beq.n	402fd2 <memchr+0x52>
  402fc6:	429c      	cmp	r4, r3
  402fc8:	4618      	mov	r0, r3
  402fca:	f103 0301 	add.w	r3, r3, #1
  402fce:	d1f7      	bne.n	402fc0 <memchr+0x40>
  402fd0:	2000      	movs	r0, #0
  402fd2:	bc70      	pop	{r4, r5, r6}
  402fd4:	4770      	bx	lr
  402fd6:	0209      	lsls	r1, r1, #8
  402fd8:	b289      	uxth	r1, r1
  402fda:	4329      	orrs	r1, r5
  402fdc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402fe0:	6803      	ldr	r3, [r0, #0]
  402fe2:	4606      	mov	r6, r0
  402fe4:	404b      	eors	r3, r1
  402fe6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402fea:	ea22 0303 	bic.w	r3, r2, r3
  402fee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  402ff2:	f100 0004 	add.w	r0, r0, #4
  402ff6:	d103      	bne.n	403000 <memchr+0x80>
  402ff8:	3c04      	subs	r4, #4
  402ffa:	2c03      	cmp	r4, #3
  402ffc:	d8f0      	bhi.n	402fe0 <memchr+0x60>
  402ffe:	e7d8      	b.n	402fb2 <memchr+0x32>
  403000:	4630      	mov	r0, r6
  403002:	e7d7      	b.n	402fb4 <memchr+0x34>
  403004:	4614      	mov	r4, r2
  403006:	e7d2      	b.n	402fae <memchr+0x2e>
  403008:	4620      	mov	r0, r4
  40300a:	e7e2      	b.n	402fd2 <memchr+0x52>

0040300c <memcpy>:
  40300c:	4684      	mov	ip, r0
  40300e:	ea41 0300 	orr.w	r3, r1, r0
  403012:	f013 0303 	ands.w	r3, r3, #3
  403016:	d149      	bne.n	4030ac <memcpy+0xa0>
  403018:	3a40      	subs	r2, #64	; 0x40
  40301a:	d323      	bcc.n	403064 <memcpy+0x58>
  40301c:	680b      	ldr	r3, [r1, #0]
  40301e:	6003      	str	r3, [r0, #0]
  403020:	684b      	ldr	r3, [r1, #4]
  403022:	6043      	str	r3, [r0, #4]
  403024:	688b      	ldr	r3, [r1, #8]
  403026:	6083      	str	r3, [r0, #8]
  403028:	68cb      	ldr	r3, [r1, #12]
  40302a:	60c3      	str	r3, [r0, #12]
  40302c:	690b      	ldr	r3, [r1, #16]
  40302e:	6103      	str	r3, [r0, #16]
  403030:	694b      	ldr	r3, [r1, #20]
  403032:	6143      	str	r3, [r0, #20]
  403034:	698b      	ldr	r3, [r1, #24]
  403036:	6183      	str	r3, [r0, #24]
  403038:	69cb      	ldr	r3, [r1, #28]
  40303a:	61c3      	str	r3, [r0, #28]
  40303c:	6a0b      	ldr	r3, [r1, #32]
  40303e:	6203      	str	r3, [r0, #32]
  403040:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  403042:	6243      	str	r3, [r0, #36]	; 0x24
  403044:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  403046:	6283      	str	r3, [r0, #40]	; 0x28
  403048:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  40304a:	62c3      	str	r3, [r0, #44]	; 0x2c
  40304c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40304e:	6303      	str	r3, [r0, #48]	; 0x30
  403050:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  403052:	6343      	str	r3, [r0, #52]	; 0x34
  403054:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  403056:	6383      	str	r3, [r0, #56]	; 0x38
  403058:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  40305a:	63c3      	str	r3, [r0, #60]	; 0x3c
  40305c:	3040      	adds	r0, #64	; 0x40
  40305e:	3140      	adds	r1, #64	; 0x40
  403060:	3a40      	subs	r2, #64	; 0x40
  403062:	d2db      	bcs.n	40301c <memcpy+0x10>
  403064:	3230      	adds	r2, #48	; 0x30
  403066:	d30b      	bcc.n	403080 <memcpy+0x74>
  403068:	680b      	ldr	r3, [r1, #0]
  40306a:	6003      	str	r3, [r0, #0]
  40306c:	684b      	ldr	r3, [r1, #4]
  40306e:	6043      	str	r3, [r0, #4]
  403070:	688b      	ldr	r3, [r1, #8]
  403072:	6083      	str	r3, [r0, #8]
  403074:	68cb      	ldr	r3, [r1, #12]
  403076:	60c3      	str	r3, [r0, #12]
  403078:	3010      	adds	r0, #16
  40307a:	3110      	adds	r1, #16
  40307c:	3a10      	subs	r2, #16
  40307e:	d2f3      	bcs.n	403068 <memcpy+0x5c>
  403080:	320c      	adds	r2, #12
  403082:	d305      	bcc.n	403090 <memcpy+0x84>
  403084:	f851 3b04 	ldr.w	r3, [r1], #4
  403088:	f840 3b04 	str.w	r3, [r0], #4
  40308c:	3a04      	subs	r2, #4
  40308e:	d2f9      	bcs.n	403084 <memcpy+0x78>
  403090:	3204      	adds	r2, #4
  403092:	d008      	beq.n	4030a6 <memcpy+0x9a>
  403094:	07d2      	lsls	r2, r2, #31
  403096:	bf1c      	itt	ne
  403098:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40309c:	f800 3b01 	strbne.w	r3, [r0], #1
  4030a0:	d301      	bcc.n	4030a6 <memcpy+0x9a>
  4030a2:	880b      	ldrh	r3, [r1, #0]
  4030a4:	8003      	strh	r3, [r0, #0]
  4030a6:	4660      	mov	r0, ip
  4030a8:	4770      	bx	lr
  4030aa:	bf00      	nop
  4030ac:	2a08      	cmp	r2, #8
  4030ae:	d313      	bcc.n	4030d8 <memcpy+0xcc>
  4030b0:	078b      	lsls	r3, r1, #30
  4030b2:	d0b1      	beq.n	403018 <memcpy+0xc>
  4030b4:	f010 0303 	ands.w	r3, r0, #3
  4030b8:	d0ae      	beq.n	403018 <memcpy+0xc>
  4030ba:	f1c3 0304 	rsb	r3, r3, #4
  4030be:	1ad2      	subs	r2, r2, r3
  4030c0:	07db      	lsls	r3, r3, #31
  4030c2:	bf1c      	itt	ne
  4030c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4030c8:	f800 3b01 	strbne.w	r3, [r0], #1
  4030cc:	d3a4      	bcc.n	403018 <memcpy+0xc>
  4030ce:	f831 3b02 	ldrh.w	r3, [r1], #2
  4030d2:	f820 3b02 	strh.w	r3, [r0], #2
  4030d6:	e79f      	b.n	403018 <memcpy+0xc>
  4030d8:	3a04      	subs	r2, #4
  4030da:	d3d9      	bcc.n	403090 <memcpy+0x84>
  4030dc:	3a01      	subs	r2, #1
  4030de:	f811 3b01 	ldrb.w	r3, [r1], #1
  4030e2:	f800 3b01 	strb.w	r3, [r0], #1
  4030e6:	d2f9      	bcs.n	4030dc <memcpy+0xd0>
  4030e8:	780b      	ldrb	r3, [r1, #0]
  4030ea:	7003      	strb	r3, [r0, #0]
  4030ec:	784b      	ldrb	r3, [r1, #1]
  4030ee:	7043      	strb	r3, [r0, #1]
  4030f0:	788b      	ldrb	r3, [r1, #2]
  4030f2:	7083      	strb	r3, [r0, #2]
  4030f4:	4660      	mov	r0, ip
  4030f6:	4770      	bx	lr

004030f8 <memmove>:
  4030f8:	4288      	cmp	r0, r1
  4030fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4030fc:	d90d      	bls.n	40311a <memmove+0x22>
  4030fe:	188b      	adds	r3, r1, r2
  403100:	4298      	cmp	r0, r3
  403102:	d20a      	bcs.n	40311a <memmove+0x22>
  403104:	1884      	adds	r4, r0, r2
  403106:	2a00      	cmp	r2, #0
  403108:	d051      	beq.n	4031ae <memmove+0xb6>
  40310a:	4622      	mov	r2, r4
  40310c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403110:	4299      	cmp	r1, r3
  403112:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403116:	d1f9      	bne.n	40310c <memmove+0x14>
  403118:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40311a:	2a0f      	cmp	r2, #15
  40311c:	d948      	bls.n	4031b0 <memmove+0xb8>
  40311e:	ea41 0300 	orr.w	r3, r1, r0
  403122:	079b      	lsls	r3, r3, #30
  403124:	d146      	bne.n	4031b4 <memmove+0xbc>
  403126:	4615      	mov	r5, r2
  403128:	f100 0410 	add.w	r4, r0, #16
  40312c:	f101 0310 	add.w	r3, r1, #16
  403130:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403134:	3d10      	subs	r5, #16
  403136:	f844 6c10 	str.w	r6, [r4, #-16]
  40313a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40313e:	2d0f      	cmp	r5, #15
  403140:	f844 6c0c 	str.w	r6, [r4, #-12]
  403144:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403148:	f104 0410 	add.w	r4, r4, #16
  40314c:	f844 6c18 	str.w	r6, [r4, #-24]
  403150:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403154:	f103 0310 	add.w	r3, r3, #16
  403158:	f844 6c14 	str.w	r6, [r4, #-20]
  40315c:	d8e8      	bhi.n	403130 <memmove+0x38>
  40315e:	f1a2 0310 	sub.w	r3, r2, #16
  403162:	f023 030f 	bic.w	r3, r3, #15
  403166:	f002 0e0f 	and.w	lr, r2, #15
  40316a:	3310      	adds	r3, #16
  40316c:	f1be 0f03 	cmp.w	lr, #3
  403170:	4419      	add	r1, r3
  403172:	4403      	add	r3, r0
  403174:	d921      	bls.n	4031ba <memmove+0xc2>
  403176:	460e      	mov	r6, r1
  403178:	4674      	mov	r4, lr
  40317a:	1f1d      	subs	r5, r3, #4
  40317c:	f856 7b04 	ldr.w	r7, [r6], #4
  403180:	3c04      	subs	r4, #4
  403182:	2c03      	cmp	r4, #3
  403184:	f845 7f04 	str.w	r7, [r5, #4]!
  403188:	d8f8      	bhi.n	40317c <memmove+0x84>
  40318a:	f1ae 0404 	sub.w	r4, lr, #4
  40318e:	f024 0403 	bic.w	r4, r4, #3
  403192:	3404      	adds	r4, #4
  403194:	4421      	add	r1, r4
  403196:	4423      	add	r3, r4
  403198:	f002 0203 	and.w	r2, r2, #3
  40319c:	b162      	cbz	r2, 4031b8 <memmove+0xc0>
  40319e:	3b01      	subs	r3, #1
  4031a0:	440a      	add	r2, r1
  4031a2:	f811 4b01 	ldrb.w	r4, [r1], #1
  4031a6:	428a      	cmp	r2, r1
  4031a8:	f803 4f01 	strb.w	r4, [r3, #1]!
  4031ac:	d1f9      	bne.n	4031a2 <memmove+0xaa>
  4031ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4031b0:	4603      	mov	r3, r0
  4031b2:	e7f3      	b.n	40319c <memmove+0xa4>
  4031b4:	4603      	mov	r3, r0
  4031b6:	e7f2      	b.n	40319e <memmove+0xa6>
  4031b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4031ba:	4672      	mov	r2, lr
  4031bc:	e7ee      	b.n	40319c <memmove+0xa4>
  4031be:	bf00      	nop

004031c0 <__malloc_lock>:
  4031c0:	4770      	bx	lr
  4031c2:	bf00      	nop

004031c4 <__malloc_unlock>:
  4031c4:	4770      	bx	lr
  4031c6:	bf00      	nop

004031c8 <_realloc_r>:
  4031c8:	2900      	cmp	r1, #0
  4031ca:	f000 8094 	beq.w	4032f6 <_realloc_r+0x12e>
  4031ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4031d2:	460c      	mov	r4, r1
  4031d4:	4615      	mov	r5, r2
  4031d6:	b083      	sub	sp, #12
  4031d8:	4680      	mov	r8, r0
  4031da:	f105 060b 	add.w	r6, r5, #11
  4031de:	f7ff ffef 	bl	4031c0 <__malloc_lock>
  4031e2:	f854 ec04 	ldr.w	lr, [r4, #-4]
  4031e6:	2e16      	cmp	r6, #22
  4031e8:	f02e 0703 	bic.w	r7, lr, #3
  4031ec:	f1a4 0908 	sub.w	r9, r4, #8
  4031f0:	d83c      	bhi.n	40326c <_realloc_r+0xa4>
  4031f2:	2210      	movs	r2, #16
  4031f4:	4616      	mov	r6, r2
  4031f6:	42b5      	cmp	r5, r6
  4031f8:	d83d      	bhi.n	403276 <_realloc_r+0xae>
  4031fa:	4297      	cmp	r7, r2
  4031fc:	da43      	bge.n	403286 <_realloc_r+0xbe>
  4031fe:	4bc6      	ldr	r3, [pc, #792]	; (403518 <_realloc_r+0x350>)
  403200:	eb09 0007 	add.w	r0, r9, r7
  403204:	6899      	ldr	r1, [r3, #8]
  403206:	4288      	cmp	r0, r1
  403208:	f000 80c3 	beq.w	403392 <_realloc_r+0x1ca>
  40320c:	6843      	ldr	r3, [r0, #4]
  40320e:	f023 0101 	bic.w	r1, r3, #1
  403212:	4401      	add	r1, r0
  403214:	6849      	ldr	r1, [r1, #4]
  403216:	07c9      	lsls	r1, r1, #31
  403218:	d54d      	bpl.n	4032b6 <_realloc_r+0xee>
  40321a:	f01e 0f01 	tst.w	lr, #1
  40321e:	f000 809b 	beq.w	403358 <_realloc_r+0x190>
  403222:	4629      	mov	r1, r5
  403224:	4640      	mov	r0, r8
  403226:	f7ff fbf3 	bl	402a10 <_malloc_r>
  40322a:	4605      	mov	r5, r0
  40322c:	2800      	cmp	r0, #0
  40322e:	d03b      	beq.n	4032a8 <_realloc_r+0xe0>
  403230:	f854 3c04 	ldr.w	r3, [r4, #-4]
  403234:	f1a0 0208 	sub.w	r2, r0, #8
  403238:	f023 0301 	bic.w	r3, r3, #1
  40323c:	444b      	add	r3, r9
  40323e:	429a      	cmp	r2, r3
  403240:	f000 812b 	beq.w	40349a <_realloc_r+0x2d2>
  403244:	1f3a      	subs	r2, r7, #4
  403246:	2a24      	cmp	r2, #36	; 0x24
  403248:	f200 8118 	bhi.w	40347c <_realloc_r+0x2b4>
  40324c:	2a13      	cmp	r2, #19
  40324e:	f200 80eb 	bhi.w	403428 <_realloc_r+0x260>
  403252:	4603      	mov	r3, r0
  403254:	4622      	mov	r2, r4
  403256:	6811      	ldr	r1, [r2, #0]
  403258:	6019      	str	r1, [r3, #0]
  40325a:	6851      	ldr	r1, [r2, #4]
  40325c:	6059      	str	r1, [r3, #4]
  40325e:	6892      	ldr	r2, [r2, #8]
  403260:	609a      	str	r2, [r3, #8]
  403262:	4621      	mov	r1, r4
  403264:	4640      	mov	r0, r8
  403266:	f7ff f8c3 	bl	4023f0 <_free_r>
  40326a:	e01d      	b.n	4032a8 <_realloc_r+0xe0>
  40326c:	f026 0607 	bic.w	r6, r6, #7
  403270:	2e00      	cmp	r6, #0
  403272:	4632      	mov	r2, r6
  403274:	dabf      	bge.n	4031f6 <_realloc_r+0x2e>
  403276:	2500      	movs	r5, #0
  403278:	230c      	movs	r3, #12
  40327a:	4628      	mov	r0, r5
  40327c:	f8c8 3000 	str.w	r3, [r8]
  403280:	b003      	add	sp, #12
  403282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403286:	4625      	mov	r5, r4
  403288:	1bbb      	subs	r3, r7, r6
  40328a:	2b0f      	cmp	r3, #15
  40328c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403290:	d81d      	bhi.n	4032ce <_realloc_r+0x106>
  403292:	f002 0201 	and.w	r2, r2, #1
  403296:	433a      	orrs	r2, r7
  403298:	eb09 0107 	add.w	r1, r9, r7
  40329c:	f8c9 2004 	str.w	r2, [r9, #4]
  4032a0:	684b      	ldr	r3, [r1, #4]
  4032a2:	f043 0301 	orr.w	r3, r3, #1
  4032a6:	604b      	str	r3, [r1, #4]
  4032a8:	4640      	mov	r0, r8
  4032aa:	f7ff ff8b 	bl	4031c4 <__malloc_unlock>
  4032ae:	4628      	mov	r0, r5
  4032b0:	b003      	add	sp, #12
  4032b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032b6:	f023 0303 	bic.w	r3, r3, #3
  4032ba:	18f9      	adds	r1, r7, r3
  4032bc:	4291      	cmp	r1, r2
  4032be:	db1d      	blt.n	4032fc <_realloc_r+0x134>
  4032c0:	68c3      	ldr	r3, [r0, #12]
  4032c2:	6882      	ldr	r2, [r0, #8]
  4032c4:	4625      	mov	r5, r4
  4032c6:	60d3      	str	r3, [r2, #12]
  4032c8:	460f      	mov	r7, r1
  4032ca:	609a      	str	r2, [r3, #8]
  4032cc:	e7dc      	b.n	403288 <_realloc_r+0xc0>
  4032ce:	f002 0201 	and.w	r2, r2, #1
  4032d2:	eb09 0106 	add.w	r1, r9, r6
  4032d6:	f043 0301 	orr.w	r3, r3, #1
  4032da:	4332      	orrs	r2, r6
  4032dc:	f8c9 2004 	str.w	r2, [r9, #4]
  4032e0:	444f      	add	r7, r9
  4032e2:	604b      	str	r3, [r1, #4]
  4032e4:	687b      	ldr	r3, [r7, #4]
  4032e6:	3108      	adds	r1, #8
  4032e8:	f043 0301 	orr.w	r3, r3, #1
  4032ec:	607b      	str	r3, [r7, #4]
  4032ee:	4640      	mov	r0, r8
  4032f0:	f7ff f87e 	bl	4023f0 <_free_r>
  4032f4:	e7d8      	b.n	4032a8 <_realloc_r+0xe0>
  4032f6:	4611      	mov	r1, r2
  4032f8:	f7ff bb8a 	b.w	402a10 <_malloc_r>
  4032fc:	f01e 0f01 	tst.w	lr, #1
  403300:	d18f      	bne.n	403222 <_realloc_r+0x5a>
  403302:	f854 1c08 	ldr.w	r1, [r4, #-8]
  403306:	eba9 0a01 	sub.w	sl, r9, r1
  40330a:	f8da 1004 	ldr.w	r1, [sl, #4]
  40330e:	f021 0103 	bic.w	r1, r1, #3
  403312:	440b      	add	r3, r1
  403314:	443b      	add	r3, r7
  403316:	4293      	cmp	r3, r2
  403318:	db26      	blt.n	403368 <_realloc_r+0x1a0>
  40331a:	4655      	mov	r5, sl
  40331c:	68c1      	ldr	r1, [r0, #12]
  40331e:	6880      	ldr	r0, [r0, #8]
  403320:	1f3a      	subs	r2, r7, #4
  403322:	60c1      	str	r1, [r0, #12]
  403324:	6088      	str	r0, [r1, #8]
  403326:	f855 0f08 	ldr.w	r0, [r5, #8]!
  40332a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40332e:	2a24      	cmp	r2, #36	; 0x24
  403330:	60c1      	str	r1, [r0, #12]
  403332:	6088      	str	r0, [r1, #8]
  403334:	d826      	bhi.n	403384 <_realloc_r+0x1bc>
  403336:	2a13      	cmp	r2, #19
  403338:	f240 8081 	bls.w	40343e <_realloc_r+0x276>
  40333c:	6821      	ldr	r1, [r4, #0]
  40333e:	2a1b      	cmp	r2, #27
  403340:	f8ca 1008 	str.w	r1, [sl, #8]
  403344:	6861      	ldr	r1, [r4, #4]
  403346:	f8ca 100c 	str.w	r1, [sl, #12]
  40334a:	f200 80ad 	bhi.w	4034a8 <_realloc_r+0x2e0>
  40334e:	f104 0008 	add.w	r0, r4, #8
  403352:	f10a 0210 	add.w	r2, sl, #16
  403356:	e074      	b.n	403442 <_realloc_r+0x27a>
  403358:	f854 3c08 	ldr.w	r3, [r4, #-8]
  40335c:	eba9 0a03 	sub.w	sl, r9, r3
  403360:	f8da 1004 	ldr.w	r1, [sl, #4]
  403364:	f021 0103 	bic.w	r1, r1, #3
  403368:	187b      	adds	r3, r7, r1
  40336a:	4293      	cmp	r3, r2
  40336c:	f6ff af59 	blt.w	403222 <_realloc_r+0x5a>
  403370:	4655      	mov	r5, sl
  403372:	f8da 100c 	ldr.w	r1, [sl, #12]
  403376:	f855 0f08 	ldr.w	r0, [r5, #8]!
  40337a:	1f3a      	subs	r2, r7, #4
  40337c:	2a24      	cmp	r2, #36	; 0x24
  40337e:	60c1      	str	r1, [r0, #12]
  403380:	6088      	str	r0, [r1, #8]
  403382:	d9d8      	bls.n	403336 <_realloc_r+0x16e>
  403384:	4621      	mov	r1, r4
  403386:	4628      	mov	r0, r5
  403388:	461f      	mov	r7, r3
  40338a:	46d1      	mov	r9, sl
  40338c:	f7ff feb4 	bl	4030f8 <memmove>
  403390:	e77a      	b.n	403288 <_realloc_r+0xc0>
  403392:	6841      	ldr	r1, [r0, #4]
  403394:	f106 0010 	add.w	r0, r6, #16
  403398:	f021 0b03 	bic.w	fp, r1, #3
  40339c:	44bb      	add	fp, r7
  40339e:	4583      	cmp	fp, r0
  4033a0:	da58      	bge.n	403454 <_realloc_r+0x28c>
  4033a2:	f01e 0f01 	tst.w	lr, #1
  4033a6:	f47f af3c 	bne.w	403222 <_realloc_r+0x5a>
  4033aa:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4033ae:	eba9 0a01 	sub.w	sl, r9, r1
  4033b2:	f8da 1004 	ldr.w	r1, [sl, #4]
  4033b6:	f021 0103 	bic.w	r1, r1, #3
  4033ba:	448b      	add	fp, r1
  4033bc:	4558      	cmp	r0, fp
  4033be:	dcd3      	bgt.n	403368 <_realloc_r+0x1a0>
  4033c0:	4655      	mov	r5, sl
  4033c2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4033c6:	f855 0f08 	ldr.w	r0, [r5, #8]!
  4033ca:	1f3a      	subs	r2, r7, #4
  4033cc:	2a24      	cmp	r2, #36	; 0x24
  4033ce:	60c1      	str	r1, [r0, #12]
  4033d0:	6088      	str	r0, [r1, #8]
  4033d2:	f200 808d 	bhi.w	4034f0 <_realloc_r+0x328>
  4033d6:	2a13      	cmp	r2, #19
  4033d8:	f240 8087 	bls.w	4034ea <_realloc_r+0x322>
  4033dc:	6821      	ldr	r1, [r4, #0]
  4033de:	2a1b      	cmp	r2, #27
  4033e0:	f8ca 1008 	str.w	r1, [sl, #8]
  4033e4:	6861      	ldr	r1, [r4, #4]
  4033e6:	f8ca 100c 	str.w	r1, [sl, #12]
  4033ea:	f200 8088 	bhi.w	4034fe <_realloc_r+0x336>
  4033ee:	f104 0108 	add.w	r1, r4, #8
  4033f2:	f10a 0210 	add.w	r2, sl, #16
  4033f6:	6808      	ldr	r0, [r1, #0]
  4033f8:	6010      	str	r0, [r2, #0]
  4033fa:	6848      	ldr	r0, [r1, #4]
  4033fc:	6050      	str	r0, [r2, #4]
  4033fe:	6889      	ldr	r1, [r1, #8]
  403400:	6091      	str	r1, [r2, #8]
  403402:	ebab 0206 	sub.w	r2, fp, r6
  403406:	eb0a 0106 	add.w	r1, sl, r6
  40340a:	f042 0201 	orr.w	r2, r2, #1
  40340e:	6099      	str	r1, [r3, #8]
  403410:	604a      	str	r2, [r1, #4]
  403412:	f8da 3004 	ldr.w	r3, [sl, #4]
  403416:	4640      	mov	r0, r8
  403418:	f003 0301 	and.w	r3, r3, #1
  40341c:	431e      	orrs	r6, r3
  40341e:	f8ca 6004 	str.w	r6, [sl, #4]
  403422:	f7ff fecf 	bl	4031c4 <__malloc_unlock>
  403426:	e742      	b.n	4032ae <_realloc_r+0xe6>
  403428:	6823      	ldr	r3, [r4, #0]
  40342a:	2a1b      	cmp	r2, #27
  40342c:	6003      	str	r3, [r0, #0]
  40342e:	6863      	ldr	r3, [r4, #4]
  403430:	6043      	str	r3, [r0, #4]
  403432:	d827      	bhi.n	403484 <_realloc_r+0x2bc>
  403434:	f100 0308 	add.w	r3, r0, #8
  403438:	f104 0208 	add.w	r2, r4, #8
  40343c:	e70b      	b.n	403256 <_realloc_r+0x8e>
  40343e:	4620      	mov	r0, r4
  403440:	462a      	mov	r2, r5
  403442:	6801      	ldr	r1, [r0, #0]
  403444:	461f      	mov	r7, r3
  403446:	6011      	str	r1, [r2, #0]
  403448:	6841      	ldr	r1, [r0, #4]
  40344a:	46d1      	mov	r9, sl
  40344c:	6051      	str	r1, [r2, #4]
  40344e:	6883      	ldr	r3, [r0, #8]
  403450:	6093      	str	r3, [r2, #8]
  403452:	e719      	b.n	403288 <_realloc_r+0xc0>
  403454:	ebab 0b06 	sub.w	fp, fp, r6
  403458:	eb09 0106 	add.w	r1, r9, r6
  40345c:	f04b 0201 	orr.w	r2, fp, #1
  403460:	6099      	str	r1, [r3, #8]
  403462:	604a      	str	r2, [r1, #4]
  403464:	f854 3c04 	ldr.w	r3, [r4, #-4]
  403468:	4640      	mov	r0, r8
  40346a:	f003 0301 	and.w	r3, r3, #1
  40346e:	431e      	orrs	r6, r3
  403470:	f844 6c04 	str.w	r6, [r4, #-4]
  403474:	f7ff fea6 	bl	4031c4 <__malloc_unlock>
  403478:	4625      	mov	r5, r4
  40347a:	e718      	b.n	4032ae <_realloc_r+0xe6>
  40347c:	4621      	mov	r1, r4
  40347e:	f7ff fe3b 	bl	4030f8 <memmove>
  403482:	e6ee      	b.n	403262 <_realloc_r+0x9a>
  403484:	68a3      	ldr	r3, [r4, #8]
  403486:	2a24      	cmp	r2, #36	; 0x24
  403488:	6083      	str	r3, [r0, #8]
  40348a:	68e3      	ldr	r3, [r4, #12]
  40348c:	60c3      	str	r3, [r0, #12]
  40348e:	d018      	beq.n	4034c2 <_realloc_r+0x2fa>
  403490:	f100 0310 	add.w	r3, r0, #16
  403494:	f104 0210 	add.w	r2, r4, #16
  403498:	e6dd      	b.n	403256 <_realloc_r+0x8e>
  40349a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40349e:	4625      	mov	r5, r4
  4034a0:	f023 0303 	bic.w	r3, r3, #3
  4034a4:	441f      	add	r7, r3
  4034a6:	e6ef      	b.n	403288 <_realloc_r+0xc0>
  4034a8:	68a1      	ldr	r1, [r4, #8]
  4034aa:	2a24      	cmp	r2, #36	; 0x24
  4034ac:	f8ca 1010 	str.w	r1, [sl, #16]
  4034b0:	68e1      	ldr	r1, [r4, #12]
  4034b2:	f8ca 1014 	str.w	r1, [sl, #20]
  4034b6:	d00d      	beq.n	4034d4 <_realloc_r+0x30c>
  4034b8:	f104 0010 	add.w	r0, r4, #16
  4034bc:	f10a 0218 	add.w	r2, sl, #24
  4034c0:	e7bf      	b.n	403442 <_realloc_r+0x27a>
  4034c2:	6922      	ldr	r2, [r4, #16]
  4034c4:	f100 0318 	add.w	r3, r0, #24
  4034c8:	6102      	str	r2, [r0, #16]
  4034ca:	6961      	ldr	r1, [r4, #20]
  4034cc:	f104 0218 	add.w	r2, r4, #24
  4034d0:	6141      	str	r1, [r0, #20]
  4034d2:	e6c0      	b.n	403256 <_realloc_r+0x8e>
  4034d4:	6922      	ldr	r2, [r4, #16]
  4034d6:	f104 0018 	add.w	r0, r4, #24
  4034da:	f8ca 2018 	str.w	r2, [sl, #24]
  4034de:	6961      	ldr	r1, [r4, #20]
  4034e0:	f10a 0220 	add.w	r2, sl, #32
  4034e4:	f8ca 101c 	str.w	r1, [sl, #28]
  4034e8:	e7ab      	b.n	403442 <_realloc_r+0x27a>
  4034ea:	4621      	mov	r1, r4
  4034ec:	462a      	mov	r2, r5
  4034ee:	e782      	b.n	4033f6 <_realloc_r+0x22e>
  4034f0:	4621      	mov	r1, r4
  4034f2:	4628      	mov	r0, r5
  4034f4:	9301      	str	r3, [sp, #4]
  4034f6:	f7ff fdff 	bl	4030f8 <memmove>
  4034fa:	9b01      	ldr	r3, [sp, #4]
  4034fc:	e781      	b.n	403402 <_realloc_r+0x23a>
  4034fe:	68a1      	ldr	r1, [r4, #8]
  403500:	2a24      	cmp	r2, #36	; 0x24
  403502:	f8ca 1010 	str.w	r1, [sl, #16]
  403506:	68e1      	ldr	r1, [r4, #12]
  403508:	f8ca 1014 	str.w	r1, [sl, #20]
  40350c:	d006      	beq.n	40351c <_realloc_r+0x354>
  40350e:	f104 0110 	add.w	r1, r4, #16
  403512:	f10a 0218 	add.w	r2, sl, #24
  403516:	e76e      	b.n	4033f6 <_realloc_r+0x22e>
  403518:	20000684 	.word	0x20000684
  40351c:	6922      	ldr	r2, [r4, #16]
  40351e:	f104 0118 	add.w	r1, r4, #24
  403522:	f8ca 2018 	str.w	r2, [sl, #24]
  403526:	6960      	ldr	r0, [r4, #20]
  403528:	f10a 0220 	add.w	r2, sl, #32
  40352c:	f8ca 001c 	str.w	r0, [sl, #28]
  403530:	e761      	b.n	4033f6 <_realloc_r+0x22e>
  403532:	bf00      	nop

00403534 <_sbrk_r>:
  403534:	b538      	push	{r3, r4, r5, lr}
  403536:	2300      	movs	r3, #0
  403538:	4c06      	ldr	r4, [pc, #24]	; (403554 <_sbrk_r+0x20>)
  40353a:	4605      	mov	r5, r0
  40353c:	4608      	mov	r0, r1
  40353e:	6023      	str	r3, [r4, #0]
  403540:	f7fd fada 	bl	400af8 <_sbrk>
  403544:	1c43      	adds	r3, r0, #1
  403546:	d000      	beq.n	40354a <_sbrk_r+0x16>
  403548:	bd38      	pop	{r3, r4, r5, pc}
  40354a:	6823      	ldr	r3, [r4, #0]
  40354c:	2b00      	cmp	r3, #0
  40354e:	d0fb      	beq.n	403548 <_sbrk_r+0x14>
  403550:	602b      	str	r3, [r5, #0]
  403552:	bd38      	pop	{r3, r4, r5, pc}
  403554:	20000b88 	.word	0x20000b88

00403558 <__sread>:
  403558:	b510      	push	{r4, lr}
  40355a:	460c      	mov	r4, r1
  40355c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403560:	f000 f9c6 	bl	4038f0 <_read_r>
  403564:	2800      	cmp	r0, #0
  403566:	db03      	blt.n	403570 <__sread+0x18>
  403568:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40356a:	4403      	add	r3, r0
  40356c:	6523      	str	r3, [r4, #80]	; 0x50
  40356e:	bd10      	pop	{r4, pc}
  403570:	89a3      	ldrh	r3, [r4, #12]
  403572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403576:	81a3      	strh	r3, [r4, #12]
  403578:	bd10      	pop	{r4, pc}
  40357a:	bf00      	nop

0040357c <__swrite>:
  40357c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403580:	460c      	mov	r4, r1
  403582:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
  403586:	461f      	mov	r7, r3
  403588:	05cb      	lsls	r3, r1, #23
  40358a:	4616      	mov	r6, r2
  40358c:	4605      	mov	r5, r0
  40358e:	d507      	bpl.n	4035a0 <__swrite+0x24>
  403590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403594:	2302      	movs	r3, #2
  403596:	2200      	movs	r2, #0
  403598:	f000 f994 	bl	4038c4 <_lseek_r>
  40359c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
  4035a0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4035a4:	81a1      	strh	r1, [r4, #12]
  4035a6:	463b      	mov	r3, r7
  4035a8:	4632      	mov	r2, r6
  4035aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4035ae:	4628      	mov	r0, r5
  4035b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4035b4:	f000 b8a2 	b.w	4036fc <_write_r>

004035b8 <__sseek>:
  4035b8:	b510      	push	{r4, lr}
  4035ba:	460c      	mov	r4, r1
  4035bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4035c0:	f000 f980 	bl	4038c4 <_lseek_r>
  4035c4:	89a3      	ldrh	r3, [r4, #12]
  4035c6:	1c42      	adds	r2, r0, #1
  4035c8:	bf0e      	itee	eq
  4035ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4035ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4035d2:	6520      	strne	r0, [r4, #80]	; 0x50
  4035d4:	81a3      	strh	r3, [r4, #12]
  4035d6:	bd10      	pop	{r4, pc}

004035d8 <__sclose>:
  4035d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4035dc:	f000 b8fa 	b.w	4037d4 <_close_r>

004035e0 <__swbuf_r>:
  4035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4035e2:	460d      	mov	r5, r1
  4035e4:	4614      	mov	r4, r2
  4035e6:	4606      	mov	r6, r0
  4035e8:	b110      	cbz	r0, 4035f0 <__swbuf_r+0x10>
  4035ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4035ec:	2b00      	cmp	r3, #0
  4035ee:	d04b      	beq.n	403688 <__swbuf_r+0xa8>
  4035f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4035f4:	69a3      	ldr	r3, [r4, #24]
  4035f6:	b291      	uxth	r1, r2
  4035f8:	0708      	lsls	r0, r1, #28
  4035fa:	60a3      	str	r3, [r4, #8]
  4035fc:	d539      	bpl.n	403672 <__swbuf_r+0x92>
  4035fe:	6923      	ldr	r3, [r4, #16]
  403600:	2b00      	cmp	r3, #0
  403602:	d036      	beq.n	403672 <__swbuf_r+0x92>
  403604:	b2ed      	uxtb	r5, r5
  403606:	0489      	lsls	r1, r1, #18
  403608:	462f      	mov	r7, r5
  40360a:	d515      	bpl.n	403638 <__swbuf_r+0x58>
  40360c:	6822      	ldr	r2, [r4, #0]
  40360e:	6961      	ldr	r1, [r4, #20]
  403610:	1ad3      	subs	r3, r2, r3
  403612:	428b      	cmp	r3, r1
  403614:	da1c      	bge.n	403650 <__swbuf_r+0x70>
  403616:	3301      	adds	r3, #1
  403618:	68a1      	ldr	r1, [r4, #8]
  40361a:	1c50      	adds	r0, r2, #1
  40361c:	3901      	subs	r1, #1
  40361e:	60a1      	str	r1, [r4, #8]
  403620:	6020      	str	r0, [r4, #0]
  403622:	7015      	strb	r5, [r2, #0]
  403624:	6962      	ldr	r2, [r4, #20]
  403626:	429a      	cmp	r2, r3
  403628:	d01a      	beq.n	403660 <__swbuf_r+0x80>
  40362a:	89a3      	ldrh	r3, [r4, #12]
  40362c:	07db      	lsls	r3, r3, #31
  40362e:	d501      	bpl.n	403634 <__swbuf_r+0x54>
  403630:	2d0a      	cmp	r5, #10
  403632:	d015      	beq.n	403660 <__swbuf_r+0x80>
  403634:	4638      	mov	r0, r7
  403636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403638:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40363a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40363e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403642:	81a2      	strh	r2, [r4, #12]
  403644:	6822      	ldr	r2, [r4, #0]
  403646:	6661      	str	r1, [r4, #100]	; 0x64
  403648:	6961      	ldr	r1, [r4, #20]
  40364a:	1ad3      	subs	r3, r2, r3
  40364c:	428b      	cmp	r3, r1
  40364e:	dbe2      	blt.n	403616 <__swbuf_r+0x36>
  403650:	4621      	mov	r1, r4
  403652:	4630      	mov	r0, r6
  403654:	f7fe fd66 	bl	402124 <_fflush_r>
  403658:	b940      	cbnz	r0, 40366c <__swbuf_r+0x8c>
  40365a:	2301      	movs	r3, #1
  40365c:	6822      	ldr	r2, [r4, #0]
  40365e:	e7db      	b.n	403618 <__swbuf_r+0x38>
  403660:	4621      	mov	r1, r4
  403662:	4630      	mov	r0, r6
  403664:	f7fe fd5e 	bl	402124 <_fflush_r>
  403668:	2800      	cmp	r0, #0
  40366a:	d0e3      	beq.n	403634 <__swbuf_r+0x54>
  40366c:	f04f 37ff 	mov.w	r7, #4294967295
  403670:	e7e0      	b.n	403634 <__swbuf_r+0x54>
  403672:	4621      	mov	r1, r4
  403674:	4630      	mov	r0, r6
  403676:	f7fe fc45 	bl	401f04 <__swsetup_r>
  40367a:	2800      	cmp	r0, #0
  40367c:	d1f6      	bne.n	40366c <__swbuf_r+0x8c>
  40367e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403682:	6923      	ldr	r3, [r4, #16]
  403684:	b291      	uxth	r1, r2
  403686:	e7bd      	b.n	403604 <__swbuf_r+0x24>
  403688:	f7fe fde0 	bl	40224c <__sinit>
  40368c:	e7b0      	b.n	4035f0 <__swbuf_r+0x10>
  40368e:	bf00      	nop

00403690 <_wcrtomb_r>:
  403690:	b5f0      	push	{r4, r5, r6, r7, lr}
  403692:	4606      	mov	r6, r0
  403694:	b085      	sub	sp, #20
  403696:	461f      	mov	r7, r3
  403698:	b189      	cbz	r1, 4036be <_wcrtomb_r+0x2e>
  40369a:	4c10      	ldr	r4, [pc, #64]	; (4036dc <_wcrtomb_r+0x4c>)
  40369c:	4d10      	ldr	r5, [pc, #64]	; (4036e0 <_wcrtomb_r+0x50>)
  40369e:	6824      	ldr	r4, [r4, #0]
  4036a0:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4036a2:	2c00      	cmp	r4, #0
  4036a4:	bf08      	it	eq
  4036a6:	462c      	moveq	r4, r5
  4036a8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4036ac:	47a0      	blx	r4
  4036ae:	1c43      	adds	r3, r0, #1
  4036b0:	d103      	bne.n	4036ba <_wcrtomb_r+0x2a>
  4036b2:	2200      	movs	r2, #0
  4036b4:	238a      	movs	r3, #138	; 0x8a
  4036b6:	603a      	str	r2, [r7, #0]
  4036b8:	6033      	str	r3, [r6, #0]
  4036ba:	b005      	add	sp, #20
  4036bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036be:	460c      	mov	r4, r1
  4036c0:	4a06      	ldr	r2, [pc, #24]	; (4036dc <_wcrtomb_r+0x4c>)
  4036c2:	4d07      	ldr	r5, [pc, #28]	; (4036e0 <_wcrtomb_r+0x50>)
  4036c4:	6811      	ldr	r1, [r2, #0]
  4036c6:	4622      	mov	r2, r4
  4036c8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
  4036ca:	a901      	add	r1, sp, #4
  4036cc:	2c00      	cmp	r4, #0
  4036ce:	bf08      	it	eq
  4036d0:	462c      	moveq	r4, r5
  4036d2:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4036d6:	47a0      	blx	r4
  4036d8:	e7e9      	b.n	4036ae <_wcrtomb_r+0x1e>
  4036da:	bf00      	nop
  4036dc:	200000ec 	.word	0x200000ec
  4036e0:	20000518 	.word	0x20000518

004036e4 <__ascii_wctomb>:
  4036e4:	b119      	cbz	r1, 4036ee <__ascii_wctomb+0xa>
  4036e6:	2aff      	cmp	r2, #255	; 0xff
  4036e8:	d803      	bhi.n	4036f2 <__ascii_wctomb+0xe>
  4036ea:	700a      	strb	r2, [r1, #0]
  4036ec:	2101      	movs	r1, #1
  4036ee:	4608      	mov	r0, r1
  4036f0:	4770      	bx	lr
  4036f2:	238a      	movs	r3, #138	; 0x8a
  4036f4:	f04f 31ff 	mov.w	r1, #4294967295
  4036f8:	6003      	str	r3, [r0, #0]
  4036fa:	e7f8      	b.n	4036ee <__ascii_wctomb+0xa>

004036fc <_write_r>:
  4036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4036fe:	460e      	mov	r6, r1
  403700:	2500      	movs	r5, #0
  403702:	4c08      	ldr	r4, [pc, #32]	; (403724 <_write_r+0x28>)
  403704:	4611      	mov	r1, r2
  403706:	4607      	mov	r7, r0
  403708:	461a      	mov	r2, r3
  40370a:	4630      	mov	r0, r6
  40370c:	6025      	str	r5, [r4, #0]
  40370e:	f7fc fd5f 	bl	4001d0 <_write>
  403712:	1c43      	adds	r3, r0, #1
  403714:	d000      	beq.n	403718 <_write_r+0x1c>
  403716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403718:	6823      	ldr	r3, [r4, #0]
  40371a:	2b00      	cmp	r3, #0
  40371c:	d0fb      	beq.n	403716 <_write_r+0x1a>
  40371e:	603b      	str	r3, [r7, #0]
  403720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403722:	bf00      	nop
  403724:	20000b88 	.word	0x20000b88

00403728 <__register_exitproc>:
  403728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40372c:	4c27      	ldr	r4, [pc, #156]	; (4037cc <__register_exitproc+0xa4>)
  40372e:	4607      	mov	r7, r0
  403730:	6826      	ldr	r6, [r4, #0]
  403732:	4688      	mov	r8, r1
  403734:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  403738:	4692      	mov	sl, r2
  40373a:	4699      	mov	r9, r3
  40373c:	2c00      	cmp	r4, #0
  40373e:	d03c      	beq.n	4037ba <__register_exitproc+0x92>
  403740:	6865      	ldr	r5, [r4, #4]
  403742:	2d1f      	cmp	r5, #31
  403744:	dc1a      	bgt.n	40377c <__register_exitproc+0x54>
  403746:	f105 0e01 	add.w	lr, r5, #1
  40374a:	b17f      	cbz	r7, 40376c <__register_exitproc+0x44>
  40374c:	2001      	movs	r0, #1
  40374e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  403752:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
  403756:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40375a:	fa00 f205 	lsl.w	r2, r0, r5
  40375e:	4311      	orrs	r1, r2
  403760:	2f02      	cmp	r7, #2
  403762:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  403766:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
  40376a:	d020      	beq.n	4037ae <__register_exitproc+0x86>
  40376c:	3502      	adds	r5, #2
  40376e:	f8c4 e004 	str.w	lr, [r4, #4]
  403772:	2000      	movs	r0, #0
  403774:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
  403778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40377c:	4b14      	ldr	r3, [pc, #80]	; (4037d0 <__register_exitproc+0xa8>)
  40377e:	b30b      	cbz	r3, 4037c4 <__register_exitproc+0x9c>
  403780:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403784:	f7ff f93c 	bl	402a00 <malloc>
  403788:	4604      	mov	r4, r0
  40378a:	b1d8      	cbz	r0, 4037c4 <__register_exitproc+0x9c>
  40378c:	2000      	movs	r0, #0
  40378e:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
  403792:	f04f 0e01 	mov.w	lr, #1
  403796:	6060      	str	r0, [r4, #4]
  403798:	6023      	str	r3, [r4, #0]
  40379a:	4605      	mov	r5, r0
  40379c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  4037a0:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  4037a4:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  4037a8:	2f00      	cmp	r7, #0
  4037aa:	d0df      	beq.n	40376c <__register_exitproc+0x44>
  4037ac:	e7ce      	b.n	40374c <__register_exitproc+0x24>
  4037ae:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4037b2:	431a      	orrs	r2, r3
  4037b4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4037b8:	e7d8      	b.n	40376c <__register_exitproc+0x44>
  4037ba:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  4037be:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  4037c2:	e7bd      	b.n	403740 <__register_exitproc+0x18>
  4037c4:	f04f 30ff 	mov.w	r0, #4294967295
  4037c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037cc:	00403d04 	.word	0x00403d04
  4037d0:	00402a01 	.word	0x00402a01

004037d4 <_close_r>:
  4037d4:	b538      	push	{r3, r4, r5, lr}
  4037d6:	2300      	movs	r3, #0
  4037d8:	4c06      	ldr	r4, [pc, #24]	; (4037f4 <_close_r+0x20>)
  4037da:	4605      	mov	r5, r0
  4037dc:	4608      	mov	r0, r1
  4037de:	6023      	str	r3, [r4, #0]
  4037e0:	f7fd f9a6 	bl	400b30 <_close>
  4037e4:	1c43      	adds	r3, r0, #1
  4037e6:	d000      	beq.n	4037ea <_close_r+0x16>
  4037e8:	bd38      	pop	{r3, r4, r5, pc}
  4037ea:	6823      	ldr	r3, [r4, #0]
  4037ec:	2b00      	cmp	r3, #0
  4037ee:	d0fb      	beq.n	4037e8 <_close_r+0x14>
  4037f0:	602b      	str	r3, [r5, #0]
  4037f2:	bd38      	pop	{r3, r4, r5, pc}
  4037f4:	20000b88 	.word	0x20000b88

004037f8 <_fclose_r>:
  4037f8:	b570      	push	{r4, r5, r6, lr}
  4037fa:	b139      	cbz	r1, 40380c <_fclose_r+0x14>
  4037fc:	4605      	mov	r5, r0
  4037fe:	460c      	mov	r4, r1
  403800:	b108      	cbz	r0, 403806 <_fclose_r+0xe>
  403802:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403804:	b383      	cbz	r3, 403868 <_fclose_r+0x70>
  403806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40380a:	b913      	cbnz	r3, 403812 <_fclose_r+0x1a>
  40380c:	2600      	movs	r6, #0
  40380e:	4630      	mov	r0, r6
  403810:	bd70      	pop	{r4, r5, r6, pc}
  403812:	4621      	mov	r1, r4
  403814:	4628      	mov	r0, r5
  403816:	f7fe fbe9 	bl	401fec <__sflush_r>
  40381a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40381c:	4606      	mov	r6, r0
  40381e:	b133      	cbz	r3, 40382e <_fclose_r+0x36>
  403820:	69e1      	ldr	r1, [r4, #28]
  403822:	4628      	mov	r0, r5
  403824:	4798      	blx	r3
  403826:	2800      	cmp	r0, #0
  403828:	bfb8      	it	lt
  40382a:	f04f 36ff 	movlt.w	r6, #4294967295
  40382e:	89a3      	ldrh	r3, [r4, #12]
  403830:	061b      	lsls	r3, r3, #24
  403832:	d41c      	bmi.n	40386e <_fclose_r+0x76>
  403834:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403836:	b141      	cbz	r1, 40384a <_fclose_r+0x52>
  403838:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40383c:	4299      	cmp	r1, r3
  40383e:	d002      	beq.n	403846 <_fclose_r+0x4e>
  403840:	4628      	mov	r0, r5
  403842:	f7fe fdd5 	bl	4023f0 <_free_r>
  403846:	2300      	movs	r3, #0
  403848:	6323      	str	r3, [r4, #48]	; 0x30
  40384a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40384c:	b121      	cbz	r1, 403858 <_fclose_r+0x60>
  40384e:	4628      	mov	r0, r5
  403850:	f7fe fdce 	bl	4023f0 <_free_r>
  403854:	2300      	movs	r3, #0
  403856:	6463      	str	r3, [r4, #68]	; 0x44
  403858:	f7fe fcfe 	bl	402258 <__sfp_lock_acquire>
  40385c:	2300      	movs	r3, #0
  40385e:	81a3      	strh	r3, [r4, #12]
  403860:	f7fe fcfc 	bl	40225c <__sfp_lock_release>
  403864:	4630      	mov	r0, r6
  403866:	bd70      	pop	{r4, r5, r6, pc}
  403868:	f7fe fcf0 	bl	40224c <__sinit>
  40386c:	e7cb      	b.n	403806 <_fclose_r+0xe>
  40386e:	6921      	ldr	r1, [r4, #16]
  403870:	4628      	mov	r0, r5
  403872:	f7fe fdbd 	bl	4023f0 <_free_r>
  403876:	e7dd      	b.n	403834 <_fclose_r+0x3c>

00403878 <_fstat_r>:
  403878:	b570      	push	{r4, r5, r6, lr}
  40387a:	460d      	mov	r5, r1
  40387c:	2300      	movs	r3, #0
  40387e:	4c07      	ldr	r4, [pc, #28]	; (40389c <_fstat_r+0x24>)
  403880:	4606      	mov	r6, r0
  403882:	4611      	mov	r1, r2
  403884:	4628      	mov	r0, r5
  403886:	6023      	str	r3, [r4, #0]
  403888:	f7fd f955 	bl	400b36 <_fstat>
  40388c:	1c43      	adds	r3, r0, #1
  40388e:	d000      	beq.n	403892 <_fstat_r+0x1a>
  403890:	bd70      	pop	{r4, r5, r6, pc}
  403892:	6823      	ldr	r3, [r4, #0]
  403894:	2b00      	cmp	r3, #0
  403896:	d0fb      	beq.n	403890 <_fstat_r+0x18>
  403898:	6033      	str	r3, [r6, #0]
  40389a:	bd70      	pop	{r4, r5, r6, pc}
  40389c:	20000b88 	.word	0x20000b88

004038a0 <_isatty_r>:
  4038a0:	b538      	push	{r3, r4, r5, lr}
  4038a2:	2300      	movs	r3, #0
  4038a4:	4c06      	ldr	r4, [pc, #24]	; (4038c0 <_isatty_r+0x20>)
  4038a6:	4605      	mov	r5, r0
  4038a8:	4608      	mov	r0, r1
  4038aa:	6023      	str	r3, [r4, #0]
  4038ac:	f7fd f948 	bl	400b40 <_isatty>
  4038b0:	1c43      	adds	r3, r0, #1
  4038b2:	d000      	beq.n	4038b6 <_isatty_r+0x16>
  4038b4:	bd38      	pop	{r3, r4, r5, pc}
  4038b6:	6823      	ldr	r3, [r4, #0]
  4038b8:	2b00      	cmp	r3, #0
  4038ba:	d0fb      	beq.n	4038b4 <_isatty_r+0x14>
  4038bc:	602b      	str	r3, [r5, #0]
  4038be:	bd38      	pop	{r3, r4, r5, pc}
  4038c0:	20000b88 	.word	0x20000b88

004038c4 <_lseek_r>:
  4038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4038c6:	460e      	mov	r6, r1
  4038c8:	2500      	movs	r5, #0
  4038ca:	4c08      	ldr	r4, [pc, #32]	; (4038ec <_lseek_r+0x28>)
  4038cc:	4611      	mov	r1, r2
  4038ce:	4607      	mov	r7, r0
  4038d0:	461a      	mov	r2, r3
  4038d2:	4630      	mov	r0, r6
  4038d4:	6025      	str	r5, [r4, #0]
  4038d6:	f7fd f935 	bl	400b44 <_lseek>
  4038da:	1c43      	adds	r3, r0, #1
  4038dc:	d000      	beq.n	4038e0 <_lseek_r+0x1c>
  4038de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4038e0:	6823      	ldr	r3, [r4, #0]
  4038e2:	2b00      	cmp	r3, #0
  4038e4:	d0fb      	beq.n	4038de <_lseek_r+0x1a>
  4038e6:	603b      	str	r3, [r7, #0]
  4038e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4038ea:	bf00      	nop
  4038ec:	20000b88 	.word	0x20000b88

004038f0 <_read_r>:
  4038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4038f2:	460e      	mov	r6, r1
  4038f4:	2500      	movs	r5, #0
  4038f6:	4c08      	ldr	r4, [pc, #32]	; (403918 <_read_r+0x28>)
  4038f8:	4611      	mov	r1, r2
  4038fa:	4607      	mov	r7, r0
  4038fc:	461a      	mov	r2, r3
  4038fe:	4630      	mov	r0, r6
  403900:	6025      	str	r5, [r4, #0]
  403902:	f7fc fc47 	bl	400194 <_read>
  403906:	1c43      	adds	r3, r0, #1
  403908:	d000      	beq.n	40390c <_read_r+0x1c>
  40390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40390c:	6823      	ldr	r3, [r4, #0]
  40390e:	2b00      	cmp	r3, #0
  403910:	d0fb      	beq.n	40390a <_read_r+0x1a>
  403912:	603b      	str	r3, [r7, #0]
  403914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403916:	bf00      	nop
  403918:	20000b88 	.word	0x20000b88

0040391c <__aeabi_uldivmod>:
  40391c:	b953      	cbnz	r3, 403934 <__aeabi_uldivmod+0x18>
  40391e:	b94a      	cbnz	r2, 403934 <__aeabi_uldivmod+0x18>
  403920:	2900      	cmp	r1, #0
  403922:	bf08      	it	eq
  403924:	2800      	cmpeq	r0, #0
  403926:	bf1c      	itt	ne
  403928:	f04f 31ff 	movne.w	r1, #4294967295
  40392c:	f04f 30ff 	movne.w	r0, #4294967295
  403930:	f000 b97a 	b.w	403c28 <__aeabi_idiv0>
  403934:	f1ad 0c08 	sub.w	ip, sp, #8
  403938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40393c:	f000 f806 	bl	40394c <__udivmoddi4>
  403940:	f8dd e004 	ldr.w	lr, [sp, #4]
  403944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403948:	b004      	add	sp, #16
  40394a:	4770      	bx	lr

0040394c <__udivmoddi4>:
  40394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403950:	468c      	mov	ip, r1
  403952:	460e      	mov	r6, r1
  403954:	4604      	mov	r4, r0
  403956:	9d08      	ldr	r5, [sp, #32]
  403958:	2b00      	cmp	r3, #0
  40395a:	d150      	bne.n	4039fe <__udivmoddi4+0xb2>
  40395c:	428a      	cmp	r2, r1
  40395e:	4617      	mov	r7, r2
  403960:	d96c      	bls.n	403a3c <__udivmoddi4+0xf0>
  403962:	fab2 fe82 	clz	lr, r2
  403966:	f1be 0f00 	cmp.w	lr, #0
  40396a:	d00b      	beq.n	403984 <__udivmoddi4+0x38>
  40396c:	f1ce 0c20 	rsb	ip, lr, #32
  403970:	fa01 f60e 	lsl.w	r6, r1, lr
  403974:	fa20 fc0c 	lsr.w	ip, r0, ip
  403978:	fa02 f70e 	lsl.w	r7, r2, lr
  40397c:	ea4c 0c06 	orr.w	ip, ip, r6
  403980:	fa00 f40e 	lsl.w	r4, r0, lr
  403984:	0c3a      	lsrs	r2, r7, #16
  403986:	fbbc f9f2 	udiv	r9, ip, r2
  40398a:	b2bb      	uxth	r3, r7
  40398c:	fb02 cc19 	mls	ip, r2, r9, ip
  403990:	fb09 fa03 	mul.w	sl, r9, r3
  403994:	ea4f 4814 	mov.w	r8, r4, lsr #16
  403998:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
  40399c:	45b2      	cmp	sl, r6
  40399e:	d90a      	bls.n	4039b6 <__udivmoddi4+0x6a>
  4039a0:	19f6      	adds	r6, r6, r7
  4039a2:	f109 31ff 	add.w	r1, r9, #4294967295
  4039a6:	f080 8125 	bcs.w	403bf4 <__udivmoddi4+0x2a8>
  4039aa:	45b2      	cmp	sl, r6
  4039ac:	f240 8122 	bls.w	403bf4 <__udivmoddi4+0x2a8>
  4039b0:	f1a9 0902 	sub.w	r9, r9, #2
  4039b4:	443e      	add	r6, r7
  4039b6:	eba6 060a 	sub.w	r6, r6, sl
  4039ba:	fbb6 f0f2 	udiv	r0, r6, r2
  4039be:	fb02 6610 	mls	r6, r2, r0, r6
  4039c2:	fb00 f303 	mul.w	r3, r0, r3
  4039c6:	b2a4      	uxth	r4, r4
  4039c8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4039cc:	42a3      	cmp	r3, r4
  4039ce:	d909      	bls.n	4039e4 <__udivmoddi4+0x98>
  4039d0:	19e4      	adds	r4, r4, r7
  4039d2:	f100 32ff 	add.w	r2, r0, #4294967295
  4039d6:	f080 810b 	bcs.w	403bf0 <__udivmoddi4+0x2a4>
  4039da:	42a3      	cmp	r3, r4
  4039dc:	f240 8108 	bls.w	403bf0 <__udivmoddi4+0x2a4>
  4039e0:	3802      	subs	r0, #2
  4039e2:	443c      	add	r4, r7
  4039e4:	2100      	movs	r1, #0
  4039e6:	1ae4      	subs	r4, r4, r3
  4039e8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4039ec:	2d00      	cmp	r5, #0
  4039ee:	d062      	beq.n	403ab6 <__udivmoddi4+0x16a>
  4039f0:	2300      	movs	r3, #0
  4039f2:	fa24 f40e 	lsr.w	r4, r4, lr
  4039f6:	602c      	str	r4, [r5, #0]
  4039f8:	606b      	str	r3, [r5, #4]
  4039fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4039fe:	428b      	cmp	r3, r1
  403a00:	d907      	bls.n	403a12 <__udivmoddi4+0xc6>
  403a02:	2d00      	cmp	r5, #0
  403a04:	d055      	beq.n	403ab2 <__udivmoddi4+0x166>
  403a06:	2100      	movs	r1, #0
  403a08:	e885 0041 	stmia.w	r5, {r0, r6}
  403a0c:	4608      	mov	r0, r1
  403a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a12:	fab3 f183 	clz	r1, r3
  403a16:	2900      	cmp	r1, #0
  403a18:	f040 808f 	bne.w	403b3a <__udivmoddi4+0x1ee>
  403a1c:	42b3      	cmp	r3, r6
  403a1e:	d302      	bcc.n	403a26 <__udivmoddi4+0xda>
  403a20:	4282      	cmp	r2, r0
  403a22:	f200 80fc 	bhi.w	403c1e <__udivmoddi4+0x2d2>
  403a26:	1a84      	subs	r4, r0, r2
  403a28:	eb66 0603 	sbc.w	r6, r6, r3
  403a2c:	2001      	movs	r0, #1
  403a2e:	46b4      	mov	ip, r6
  403a30:	2d00      	cmp	r5, #0
  403a32:	d040      	beq.n	403ab6 <__udivmoddi4+0x16a>
  403a34:	e885 1010 	stmia.w	r5, {r4, ip}
  403a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a3c:	b912      	cbnz	r2, 403a44 <__udivmoddi4+0xf8>
  403a3e:	2701      	movs	r7, #1
  403a40:	fbb7 f7f2 	udiv	r7, r7, r2
  403a44:	fab7 fe87 	clz	lr, r7
  403a48:	f1be 0f00 	cmp.w	lr, #0
  403a4c:	d135      	bne.n	403aba <__udivmoddi4+0x16e>
  403a4e:	2101      	movs	r1, #1
  403a50:	1bf6      	subs	r6, r6, r7
  403a52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
  403a56:	fa1f f887 	uxth.w	r8, r7
  403a5a:	fbb6 f2fc 	udiv	r2, r6, ip
  403a5e:	fb0c 6612 	mls	r6, ip, r2, r6
  403a62:	fb08 f002 	mul.w	r0, r8, r2
  403a66:	0c23      	lsrs	r3, r4, #16
  403a68:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
  403a6c:	42b0      	cmp	r0, r6
  403a6e:	d907      	bls.n	403a80 <__udivmoddi4+0x134>
  403a70:	19f6      	adds	r6, r6, r7
  403a72:	f102 33ff 	add.w	r3, r2, #4294967295
  403a76:	d202      	bcs.n	403a7e <__udivmoddi4+0x132>
  403a78:	42b0      	cmp	r0, r6
  403a7a:	f200 80d2 	bhi.w	403c22 <__udivmoddi4+0x2d6>
  403a7e:	461a      	mov	r2, r3
  403a80:	1a36      	subs	r6, r6, r0
  403a82:	fbb6 f0fc 	udiv	r0, r6, ip
  403a86:	fb0c 6610 	mls	r6, ip, r0, r6
  403a8a:	fb08 f800 	mul.w	r8, r8, r0
  403a8e:	b2a3      	uxth	r3, r4
  403a90:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
  403a94:	45a0      	cmp	r8, r4
  403a96:	d907      	bls.n	403aa8 <__udivmoddi4+0x15c>
  403a98:	19e4      	adds	r4, r4, r7
  403a9a:	f100 33ff 	add.w	r3, r0, #4294967295
  403a9e:	d202      	bcs.n	403aa6 <__udivmoddi4+0x15a>
  403aa0:	45a0      	cmp	r8, r4
  403aa2:	f200 80b9 	bhi.w	403c18 <__udivmoddi4+0x2cc>
  403aa6:	4618      	mov	r0, r3
  403aa8:	eba4 0408 	sub.w	r4, r4, r8
  403aac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  403ab0:	e79c      	b.n	4039ec <__udivmoddi4+0xa0>
  403ab2:	4629      	mov	r1, r5
  403ab4:	4628      	mov	r0, r5
  403ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403aba:	fa07 f70e 	lsl.w	r7, r7, lr
  403abe:	f1ce 0320 	rsb	r3, lr, #32
  403ac2:	fa26 f203 	lsr.w	r2, r6, r3
  403ac6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
  403aca:	fbb2 f1fc 	udiv	r1, r2, ip
  403ace:	fa1f f887 	uxth.w	r8, r7
  403ad2:	fb0c 2211 	mls	r2, ip, r1, r2
  403ad6:	fa06 f60e 	lsl.w	r6, r6, lr
  403ada:	fa20 f303 	lsr.w	r3, r0, r3
  403ade:	fb01 f908 	mul.w	r9, r1, r8
  403ae2:	4333      	orrs	r3, r6
  403ae4:	0c1e      	lsrs	r6, r3, #16
  403ae6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
  403aea:	45b1      	cmp	r9, r6
  403aec:	fa00 f40e 	lsl.w	r4, r0, lr
  403af0:	d909      	bls.n	403b06 <__udivmoddi4+0x1ba>
  403af2:	19f6      	adds	r6, r6, r7
  403af4:	f101 32ff 	add.w	r2, r1, #4294967295
  403af8:	f080 808c 	bcs.w	403c14 <__udivmoddi4+0x2c8>
  403afc:	45b1      	cmp	r9, r6
  403afe:	f240 8089 	bls.w	403c14 <__udivmoddi4+0x2c8>
  403b02:	3902      	subs	r1, #2
  403b04:	443e      	add	r6, r7
  403b06:	eba6 0609 	sub.w	r6, r6, r9
  403b0a:	fbb6 f0fc 	udiv	r0, r6, ip
  403b0e:	fb0c 6210 	mls	r2, ip, r0, r6
  403b12:	fb00 f908 	mul.w	r9, r0, r8
  403b16:	b29e      	uxth	r6, r3
  403b18:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
  403b1c:	45b1      	cmp	r9, r6
  403b1e:	d907      	bls.n	403b30 <__udivmoddi4+0x1e4>
  403b20:	19f6      	adds	r6, r6, r7
  403b22:	f100 33ff 	add.w	r3, r0, #4294967295
  403b26:	d271      	bcs.n	403c0c <__udivmoddi4+0x2c0>
  403b28:	45b1      	cmp	r9, r6
  403b2a:	d96f      	bls.n	403c0c <__udivmoddi4+0x2c0>
  403b2c:	3802      	subs	r0, #2
  403b2e:	443e      	add	r6, r7
  403b30:	eba6 0609 	sub.w	r6, r6, r9
  403b34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403b38:	e78f      	b.n	403a5a <__udivmoddi4+0x10e>
  403b3a:	f1c1 0720 	rsb	r7, r1, #32
  403b3e:	fa22 f807 	lsr.w	r8, r2, r7
  403b42:	408b      	lsls	r3, r1
  403b44:	ea48 0303 	orr.w	r3, r8, r3
  403b48:	fa26 f407 	lsr.w	r4, r6, r7
  403b4c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  403b50:	fbb4 f9fe 	udiv	r9, r4, lr
  403b54:	fa1f fc83 	uxth.w	ip, r3
  403b58:	fb0e 4419 	mls	r4, lr, r9, r4
  403b5c:	408e      	lsls	r6, r1
  403b5e:	fa20 f807 	lsr.w	r8, r0, r7
  403b62:	fb09 fa0c 	mul.w	sl, r9, ip
  403b66:	ea48 0806 	orr.w	r8, r8, r6
  403b6a:	ea4f 4618 	mov.w	r6, r8, lsr #16
  403b6e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
  403b72:	45a2      	cmp	sl, r4
  403b74:	fa02 f201 	lsl.w	r2, r2, r1
  403b78:	fa00 f601 	lsl.w	r6, r0, r1
  403b7c:	d908      	bls.n	403b90 <__udivmoddi4+0x244>
  403b7e:	18e4      	adds	r4, r4, r3
  403b80:	f109 30ff 	add.w	r0, r9, #4294967295
  403b84:	d244      	bcs.n	403c10 <__udivmoddi4+0x2c4>
  403b86:	45a2      	cmp	sl, r4
  403b88:	d942      	bls.n	403c10 <__udivmoddi4+0x2c4>
  403b8a:	f1a9 0902 	sub.w	r9, r9, #2
  403b8e:	441c      	add	r4, r3
  403b90:	eba4 040a 	sub.w	r4, r4, sl
  403b94:	fbb4 f0fe 	udiv	r0, r4, lr
  403b98:	fb0e 4410 	mls	r4, lr, r0, r4
  403b9c:	fb00 fc0c 	mul.w	ip, r0, ip
  403ba0:	fa1f f888 	uxth.w	r8, r8
  403ba4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
  403ba8:	45a4      	cmp	ip, r4
  403baa:	d907      	bls.n	403bbc <__udivmoddi4+0x270>
  403bac:	18e4      	adds	r4, r4, r3
  403bae:	f100 3eff 	add.w	lr, r0, #4294967295
  403bb2:	d229      	bcs.n	403c08 <__udivmoddi4+0x2bc>
  403bb4:	45a4      	cmp	ip, r4
  403bb6:	d927      	bls.n	403c08 <__udivmoddi4+0x2bc>
  403bb8:	3802      	subs	r0, #2
  403bba:	441c      	add	r4, r3
  403bbc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403bc0:	fba0 8902 	umull	r8, r9, r0, r2
  403bc4:	eba4 0c0c 	sub.w	ip, r4, ip
  403bc8:	45cc      	cmp	ip, r9
  403bca:	46c2      	mov	sl, r8
  403bcc:	46ce      	mov	lr, r9
  403bce:	d315      	bcc.n	403bfc <__udivmoddi4+0x2b0>
  403bd0:	d012      	beq.n	403bf8 <__udivmoddi4+0x2ac>
  403bd2:	b155      	cbz	r5, 403bea <__udivmoddi4+0x29e>
  403bd4:	ebb6 030a 	subs.w	r3, r6, sl
  403bd8:	eb6c 060e 	sbc.w	r6, ip, lr
  403bdc:	fa06 f707 	lsl.w	r7, r6, r7
  403be0:	40cb      	lsrs	r3, r1
  403be2:	431f      	orrs	r7, r3
  403be4:	40ce      	lsrs	r6, r1
  403be6:	602f      	str	r7, [r5, #0]
  403be8:	606e      	str	r6, [r5, #4]
  403bea:	2100      	movs	r1, #0
  403bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403bf0:	4610      	mov	r0, r2
  403bf2:	e6f7      	b.n	4039e4 <__udivmoddi4+0x98>
  403bf4:	4689      	mov	r9, r1
  403bf6:	e6de      	b.n	4039b6 <__udivmoddi4+0x6a>
  403bf8:	4546      	cmp	r6, r8
  403bfa:	d2ea      	bcs.n	403bd2 <__udivmoddi4+0x286>
  403bfc:	ebb8 0a02 	subs.w	sl, r8, r2
  403c00:	eb69 0e03 	sbc.w	lr, r9, r3
  403c04:	3801      	subs	r0, #1
  403c06:	e7e4      	b.n	403bd2 <__udivmoddi4+0x286>
  403c08:	4670      	mov	r0, lr
  403c0a:	e7d7      	b.n	403bbc <__udivmoddi4+0x270>
  403c0c:	4618      	mov	r0, r3
  403c0e:	e78f      	b.n	403b30 <__udivmoddi4+0x1e4>
  403c10:	4681      	mov	r9, r0
  403c12:	e7bd      	b.n	403b90 <__udivmoddi4+0x244>
  403c14:	4611      	mov	r1, r2
  403c16:	e776      	b.n	403b06 <__udivmoddi4+0x1ba>
  403c18:	3802      	subs	r0, #2
  403c1a:	443c      	add	r4, r7
  403c1c:	e744      	b.n	403aa8 <__udivmoddi4+0x15c>
  403c1e:	4608      	mov	r0, r1
  403c20:	e706      	b.n	403a30 <__udivmoddi4+0xe4>
  403c22:	3a02      	subs	r2, #2
  403c24:	443e      	add	r6, r7
  403c26:	e72b      	b.n	403a80 <__udivmoddi4+0x134>

00403c28 <__aeabi_idiv0>:
  403c28:	4770      	bx	lr
  403c2a:	bf00      	nop
  403c2c:	00000001 	.word	0x00000001
  403c30:	00000002 	.word	0x00000002
  403c34:	00000004 	.word	0x00000004
  403c38:	00000008 	.word	0x00000008
  403c3c:	00000010 	.word	0x00000010
  403c40:	00000020 	.word	0x00000020
  403c44:	00000040 	.word	0x00000040
  403c48:	00000080 	.word	0x00000080
  403c4c:	00000100 	.word	0x00000100
  403c50:	00000200 	.word	0x00000200
  403c54:	00000400 	.word	0x00000400
  403c58:	50202d2d 	.word	0x50202d2d
  403c5c:	4c204d57 	.word	0x4c204d57
  403c60:	45204445 	.word	0x45204445
  403c64:	706d6178 	.word	0x706d6178
  403c68:	2d20656c 	.word	0x2d20656c
  403c6c:	2d0a0d2d 	.word	0x2d0a0d2d
  403c70:	4153202d 	.word	0x4153202d
  403c74:	2d4e334d 	.word	0x2d4e334d
  403c78:	2d204b45 	.word	0x2d204b45
  403c7c:	2d0a0d2d 	.word	0x2d0a0d2d
  403c80:	6f43202d 	.word	0x6f43202d
  403c84:	6c69706d 	.word	0x6c69706d
  403c88:	203a6465 	.word	0x203a6465
  403c8c:	2074634f 	.word	0x2074634f
  403c90:	32203731 	.word	0x32203731
  403c94:	20373130 	.word	0x20373130
  403c98:	333a3831 	.word	0x333a3831
  403c9c:	31303a33 	.word	0x31303a33
  403ca0:	0d2d2d20 	.word	0x0d2d2d20
  403ca4:	00000000 	.word	0x00000000
  403ca8:	666e6f43 	.word	0x666e6f43
  403cac:	72756769 	.word	0x72756769
  403cb0:	6f616361 	.word	0x6f616361
  403cb4:	6e655320 	.word	0x6e655320
  403cb8:	20726f73 	.word	0x20726f73
  403cbc:	20525349 	.word	0x20525349
  403cc0:	00000a0d 	.word	0x00000a0d
  403cc4:	6d726554 	.word	0x6d726554
  403cc8:	69656e69 	.word	0x69656e69
  403ccc:	6e6f4320 	.word	0x6e6f4320
  403cd0:	20676966 	.word	0x20676966
  403cd4:	736e6553 	.word	0x736e6553
  403cd8:	4920726f 	.word	0x4920726f
  403cdc:	0d205253 	.word	0x0d205253
  403ce0:	0000000a 	.word	0x0000000a
  403ce4:	72746e45 	.word	0x72746e45
  403ce8:	49206965 	.word	0x49206965
  403cec:	0d205253 	.word	0x0d205253
  403cf0:	0000000a 	.word	0x0000000a
  403cf4:	6d726554 	.word	0x6d726554
  403cf8:	69656e69 	.word	0x69656e69
  403cfc:	52534920 	.word	0x52534920
  403d00:	000a0d20 	.word	0x000a0d20

00403d04 <_global_impure_ptr>:
  403d04:	200000f0 33323130 37363534 42413938     ... 0123456789AB
  403d14:	46454443 00000000 33323130 37363534     CDEF....01234567
  403d24:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  403d34:	0000296c                                l)..

00403d38 <blanks.7202>:
  403d38:	20202020 20202020 20202020 20202020                     

00403d48 <zeroes.7203>:
  403d48:	30303030 30303030 30303030 30303030     0000000000000000
  403d58:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00403d68 <_ctype_>:
  403d68:	20202000 20202020 28282020 20282828     .         ((((( 
  403d78:	20202020 20202020 20202020 20202020                     
  403d88:	10108820 10101010 10101010 10101010      ...............
  403d98:	04040410 04040404 10040404 10101010     ................
  403da8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  403db8:	01010101 01010101 01010101 10101010     ................
  403dc8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  403dd8:	02020202 02020202 02020202 10101010     ................
  403de8:	00000020 00000000 00000000 00000000      ...............
	...

00403e6c <_init>:
  403e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403e6e:	bf00      	nop
  403e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403e72:	bc08      	pop	{r3}
  403e74:	469e      	mov	lr, r3
  403e76:	4770      	bx	lr

00403e78 <__init_array_start>:
  403e78:	00401fcd 	.word	0x00401fcd

00403e7c <__frame_dummy_init_array_entry>:
  403e7c:	004000e9                                ..@.

00403e80 <_fini>:
  403e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403e82:	bf00      	nop
  403e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403e86:	bc08      	pop	{r3}
  403e88:	469e      	mov	lr, r3
  403e8a:	4770      	bx	lr

00403e8c <__fini_array_start>:
  403e8c:	004000c5 	.word	0x004000c5

Disassembly of section .relocate:

20000000 <SystemInit>:
	EFC->EEFC_FMR = EEFC_FMR_FWS(3);
20000000:	f44f 7240 	mov.w	r2, #768	; 0x300
20000004:	4b1f      	ldr	r3, [pc, #124]	; (20000084 <SystemInit+0x84>)
20000006:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000008:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
2000000c:	6a1b      	ldr	r3, [r3, #32]
2000000e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000012:	d107      	bne.n	20000024 <SystemInit+0x24>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000014:	4a1c      	ldr	r2, [pc, #112]	; (20000088 <SystemInit+0x88>)
20000016:	4b1d      	ldr	r3, [pc, #116]	; (2000008c <SystemInit+0x8c>)
20000018:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2000001a:	461a      	mov	r2, r3
2000001c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000001e:	f013 0f01 	tst.w	r3, #1
20000022:	d0fb      	beq.n	2000001c <SystemInit+0x1c>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000024:	4a1a      	ldr	r2, [pc, #104]	; (20000090 <SystemInit+0x90>)
20000026:	4b19      	ldr	r3, [pc, #100]	; (2000008c <SystemInit+0x8c>)
20000028:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2000002a:	461a      	mov	r2, r3
2000002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000002e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000032:	d0fb      	beq.n	2000002c <SystemInit+0x2c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000034:	4a15      	ldr	r2, [pc, #84]	; (2000008c <SystemInit+0x8c>)
20000036:	6b13      	ldr	r3, [r2, #48]	; 0x30
20000038:	f023 0303 	bic.w	r3, r3, #3
2000003c:	f043 0301 	orr.w	r3, r3, #1
20000040:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000042:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000044:	f013 0f08 	tst.w	r3, #8
20000048:	d0fb      	beq.n	20000042 <SystemInit+0x42>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2000004a:	4a12      	ldr	r2, [pc, #72]	; (20000094 <SystemInit+0x94>)
2000004c:	4b0f      	ldr	r3, [pc, #60]	; (2000008c <SystemInit+0x8c>)
2000004e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000050:	461a      	mov	r2, r3
20000052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000054:	f013 0f02 	tst.w	r3, #2
20000058:	d0fb      	beq.n	20000052 <SystemInit+0x52>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | 
2000005a:	2211      	movs	r2, #17
2000005c:	4b0b      	ldr	r3, [pc, #44]	; (2000008c <SystemInit+0x8c>)
2000005e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000060:	461a      	mov	r2, r3
20000062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000064:	f013 0f08 	tst.w	r3, #8
20000068:	d0fb      	beq.n	20000062 <SystemInit+0x62>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000006a:	2212      	movs	r2, #18
2000006c:	4b07      	ldr	r3, [pc, #28]	; (2000008c <SystemInit+0x8c>)
2000006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000070:	461a      	mov	r2, r3
20000072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000074:	f013 0f08 	tst.w	r3, #8
20000078:	d0fb      	beq.n	20000072 <SystemInit+0x72>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000007a:	4a07      	ldr	r2, [pc, #28]	; (20000098 <SystemInit+0x98>)
2000007c:	4b07      	ldr	r3, [pc, #28]	; (2000009c <SystemInit+0x9c>)
2000007e:	601a      	str	r2, [r3, #0]
20000080:	4770      	bx	lr
20000082:	bf00      	nop
20000084:	400e0a00 	.word	0x400e0a00
20000088:	00370809 	.word	0x00370809
2000008c:	400e0400 	.word	0x400e0400
20000090:	01370809 	.word	0x01370809
20000094:	20073f01 	.word	0x20073f01
20000098:	02dc6c00 	.word	0x02dc6c00
2000009c:	200000e4 	.word	0x200000e4

200000a0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000a0:	4b0c      	ldr	r3, [pc, #48]	; (200000d4 <system_init_flash+0x34>)
200000a2:	4298      	cmp	r0, r3
200000a4:	d90c      	bls.n	200000c0 <system_init_flash+0x20>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000a6:	4b0c      	ldr	r3, [pc, #48]	; (200000d8 <system_init_flash+0x38>)
200000a8:	4298      	cmp	r0, r3
200000aa:	d90d      	bls.n	200000c8 <system_init_flash+0x28>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000ac:	4b0b      	ldr	r3, [pc, #44]	; (200000dc <system_init_flash+0x3c>)
200000ae:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
200000b0:	bf94      	ite	ls
200000b2:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
200000b6:	f44f 7240 	movhi.w	r2, #768	; 0x300
200000ba:	4b09      	ldr	r3, [pc, #36]	; (200000e0 <system_init_flash+0x40>)
200000bc:	601a      	str	r2, [r3, #0]
200000be:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
200000c0:	2200      	movs	r2, #0
200000c2:	4b07      	ldr	r3, [pc, #28]	; (200000e0 <system_init_flash+0x40>)
200000c4:	601a      	str	r2, [r3, #0]
200000c6:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
200000c8:	f44f 7280 	mov.w	r2, #256	; 0x100
200000cc:	4b04      	ldr	r3, [pc, #16]	; (200000e0 <system_init_flash+0x40>)
200000ce:	601a      	str	r2, [r3, #0]
200000d0:	4770      	bx	lr
200000d2:	bf00      	nop
200000d4:	01406f3f 	.word	0x01406f3f
200000d8:	01e847ff 	.word	0x01e847ff
200000dc:	02dc6bff 	.word	0x02dc6bff
200000e0:	400e0a00 	.word	0x400e0a00

200000e4 <SystemCoreClock>:
200000e4:	003d0900                                ..=.

200000e8 <fade_in.7674>:
200000e8:	00000001                                ....

200000ec <_impure_ptr>:
200000ec:	200000f0                                ... 

200000f0 <impure_data>:
200000f0:	00000000 200003dc 20000444 200004ac     ....... D.. ... 
	...
20000198:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200001a8:	0005deec 0000000b 00000000 00000000     ................
	...

20000518 <__global_locale>:
20000518:	00000043 00000000 00000000 00000000     C...............
	...
20000538:	00000043 00000000 00000000 00000000     C...............
	...
20000558:	00000043 00000000 00000000 00000000     C...............
	...
20000578:	00000043 00000000 00000000 00000000     C...............
	...
20000598:	00000043 00000000 00000000 00000000     C...............
	...
200005b8:	00000043 00000000 00000000 00000000     C...............
	...
200005d8:	00000043 00000000 00000000 00000000     C...............
	...
200005f8:	004036e5 00402f55 00000000 00403d68     .6@.U/@.....h=@.
20000608:	00403d64 00403ca4 00403ca4 00403ca4     d=@..<@..<@..<@.
20000618:	00403ca4 00403ca4 00403ca4 00403ca4     .<@..<@..<@..<@.
20000628:	00403ca4 00403ca4 ffffffff ffffffff     .<@..<@.........
20000638:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000660:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000684 <__malloc_av_>:
	...
2000068c:	20000684 20000684 2000068c 2000068c     ... ... ... ... 
2000069c:	20000694 20000694 2000069c 2000069c     ... ... ... ... 
200006ac:	200006a4 200006a4 200006ac 200006ac     ... ... ... ... 
200006bc:	200006b4 200006b4 200006bc 200006bc     ... ... ... ... 
200006cc:	200006c4 200006c4 200006cc 200006cc     ... ... ... ... 
200006dc:	200006d4 200006d4 200006dc 200006dc     ... ... ... ... 
200006ec:	200006e4 200006e4 200006ec 200006ec     ... ... ... ... 
200006fc:	200006f4 200006f4 200006fc 200006fc     ... ... ... ... 
2000070c:	20000704 20000704 2000070c 2000070c     ... ... ... ... 
2000071c:	20000714 20000714 2000071c 2000071c     ... ... ... ... 
2000072c:	20000724 20000724 2000072c 2000072c     $.. $.. ,.. ,.. 
2000073c:	20000734 20000734 2000073c 2000073c     4.. 4.. <.. <.. 
2000074c:	20000744 20000744 2000074c 2000074c     D.. D.. L.. L.. 
2000075c:	20000754 20000754 2000075c 2000075c     T.. T.. \.. \.. 
2000076c:	20000764 20000764 2000076c 2000076c     d.. d.. l.. l.. 
2000077c:	20000774 20000774 2000077c 2000077c     t.. t.. |.. |.. 
2000078c:	20000784 20000784 2000078c 2000078c     ... ... ... ... 
2000079c:	20000794 20000794 2000079c 2000079c     ... ... ... ... 
200007ac:	200007a4 200007a4 200007ac 200007ac     ... ... ... ... 
200007bc:	200007b4 200007b4 200007bc 200007bc     ... ... ... ... 
200007cc:	200007c4 200007c4 200007cc 200007cc     ... ... ... ... 
200007dc:	200007d4 200007d4 200007dc 200007dc     ... ... ... ... 
200007ec:	200007e4 200007e4 200007ec 200007ec     ... ... ... ... 
200007fc:	200007f4 200007f4 200007fc 200007fc     ... ... ... ... 
2000080c:	20000804 20000804 2000080c 2000080c     ... ... ... ... 
2000081c:	20000814 20000814 2000081c 2000081c     ... ... ... ... 
2000082c:	20000824 20000824 2000082c 2000082c     $.. $.. ,.. ,.. 
2000083c:	20000834 20000834 2000083c 2000083c     4.. 4.. <.. <.. 
2000084c:	20000844 20000844 2000084c 2000084c     D.. D.. L.. L.. 
2000085c:	20000854 20000854 2000085c 2000085c     T.. T.. \.. \.. 
2000086c:	20000864 20000864 2000086c 2000086c     d.. d.. l.. l.. 
2000087c:	20000874 20000874 2000087c 2000087c     t.. t.. |.. |.. 
2000088c:	20000884 20000884 2000088c 2000088c     ... ... ... ... 
2000089c:	20000894 20000894 2000089c 2000089c     ... ... ... ... 
200008ac:	200008a4 200008a4 200008ac 200008ac     ... ... ... ... 
200008bc:	200008b4 200008b4 200008bc 200008bc     ... ... ... ... 
200008cc:	200008c4 200008c4 200008cc 200008cc     ... ... ... ... 
200008dc:	200008d4 200008d4 200008dc 200008dc     ... ... ... ... 
200008ec:	200008e4 200008e4 200008ec 200008ec     ... ... ... ... 
200008fc:	200008f4 200008f4 200008fc 200008fc     ... ... ... ... 
2000090c:	20000904 20000904 2000090c 2000090c     ... ... ... ... 
2000091c:	20000914 20000914 2000091c 2000091c     ... ... ... ... 
2000092c:	20000924 20000924 2000092c 2000092c     $.. $.. ,.. ,.. 
2000093c:	20000934 20000934 2000093c 2000093c     4.. 4.. <.. <.. 
2000094c:	20000944 20000944 2000094c 2000094c     D.. D.. L.. L.. 
2000095c:	20000954 20000954 2000095c 2000095c     T.. T.. \.. \.. 
2000096c:	20000964 20000964 2000096c 2000096c     d.. d.. l.. l.. 
2000097c:	20000974 20000974 2000097c 2000097c     t.. t.. |.. |.. 
2000098c:	20000984 20000984 2000098c 2000098c     ... ... ... ... 
2000099c:	20000994 20000994 2000099c 2000099c     ... ... ... ... 
200009ac:	200009a4 200009a4 200009ac 200009ac     ... ... ... ... 
200009bc:	200009b4 200009b4 200009bc 200009bc     ... ... ... ... 
200009cc:	200009c4 200009c4 200009cc 200009cc     ... ... ... ... 
200009dc:	200009d4 200009d4 200009dc 200009dc     ... ... ... ... 
200009ec:	200009e4 200009e4 200009ec 200009ec     ... ... ... ... 
200009fc:	200009f4 200009f4 200009fc 200009fc     ... ... ... ... 
20000a0c:	20000a04 20000a04 20000a0c 20000a0c     ... ... ... ... 
20000a1c:	20000a14 20000a14 20000a1c 20000a1c     ... ... ... ... 
20000a2c:	20000a24 20000a24 20000a2c 20000a2c     $.. $.. ,.. ,.. 
20000a3c:	20000a34 20000a34 20000a3c 20000a3c     4.. 4.. <.. <.. 
20000a4c:	20000a44 20000a44 20000a4c 20000a4c     D.. D.. L.. L.. 
20000a5c:	20000a54 20000a54 20000a5c 20000a5c     T.. T.. \.. \.. 
20000a6c:	20000a64 20000a64 20000a6c 20000a6c     d.. d.. l.. l.. 
20000a7c:	20000a74 20000a74 20000a7c 20000a7c     t.. t.. |.. |.. 

20000a8c <__malloc_sbrk_base>:
20000a8c:	ffffffff                                ....

20000a90 <__malloc_trim_threshold>:
20000a90:	00020000                                ....
