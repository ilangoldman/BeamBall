
BeamBall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000436c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000948  20000000  0040436c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000264  20000948  00404cb4  00020948  2**2
                  ALLOC
  3 .stack        00000804  20000bac  00404f18  00020948  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020948  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020971  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c16c  00000000  00000000  000209ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040c8  00000000  00000000  0003cb36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000067bf  00000000  00000000  00040bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bc8  00000000  00000000  000473bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b20  00000000  00000000  00047f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013798  00000000  00000000  00048aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010a49  00000000  00000000  0005c23d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00043c23  00000000  00000000  0006cc86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002464  00000000  00000000  000b08ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b0 13 00 20 8d 19 40 00 89 19 40 00 89 19 40 00     ... ..@...@...@.
  400010:	89 19 40 00 89 19 40 00 89 19 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	89 19 40 00 89 19 40 00 00 00 00 00 89 19 40 00     ..@...@.......@.
  40003c:	89 19 40 00 89 19 40 00 89 19 40 00 89 19 40 00     ..@...@...@...@.
  40004c:	89 19 40 00 89 19 40 00 89 19 40 00 89 19 40 00     ..@...@...@...@.
  40005c:	89 19 40 00 89 19 40 00 89 19 40 00 89 19 40 00     ..@...@...@...@.
  40006c:	39 18 40 00 4d 18 40 00 61 18 40 00 89 19 40 00     9.@.M.@.a.@...@.
  40007c:	89 19 40 00 89 19 40 00 89 19 40 00 89 19 40 00     ..@...@...@...@.
  40008c:	89 19 40 00 89 19 40 00 01 0f 40 00 89 19 40 00     ..@...@...@...@.
  40009c:	bd 0f 40 00 e9 0f 40 00 89 19 40 00 89 19 40 00     ..@...@...@...@.
  4000ac:	89 19 40 00 89 19 40 00 89 19 40 00 89 19 40 00     ..@...@...@...@.
  4000bc:	89 19 40 00 89 19 40 00                             ..@...@.

004000c4 <__do_global_dtors_aux>:
  4000c4:	b510      	push	{r4, lr}
  4000c6:	4c05      	ldr	r4, [pc, #20]	; (4000dc <__do_global_dtors_aux+0x18>)
  4000c8:	7823      	ldrb	r3, [r4, #0]
  4000ca:	b933      	cbnz	r3, 4000da <__do_global_dtors_aux+0x16>
  4000cc:	4b04      	ldr	r3, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x1c>)
  4000ce:	b113      	cbz	r3, 4000d6 <__do_global_dtors_aux+0x12>
  4000d0:	4804      	ldr	r0, [pc, #16]	; (4000e4 <__do_global_dtors_aux+0x20>)
  4000d2:	f3af 8000 	nop.w
  4000d6:	2301      	movs	r3, #1
  4000d8:	7023      	strb	r3, [r4, #0]
  4000da:	bd10      	pop	{r4, pc}
  4000dc:	20000948 	.word	0x20000948
  4000e0:	00000000 	.word	0x00000000
  4000e4:	0040436c 	.word	0x0040436c

004000e8 <frame_dummy>:
  4000e8:	4b0c      	ldr	r3, [pc, #48]	; (40011c <frame_dummy+0x34>)
  4000ea:	b143      	cbz	r3, 4000fe <frame_dummy+0x16>
  4000ec:	480c      	ldr	r0, [pc, #48]	; (400120 <frame_dummy+0x38>)
  4000ee:	b510      	push	{r4, lr}
  4000f0:	490c      	ldr	r1, [pc, #48]	; (400124 <frame_dummy+0x3c>)
  4000f2:	f3af 8000 	nop.w
  4000f6:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x40>)
  4000f8:	6803      	ldr	r3, [r0, #0]
  4000fa:	b923      	cbnz	r3, 400106 <frame_dummy+0x1e>
  4000fc:	bd10      	pop	{r4, pc}
  4000fe:	480a      	ldr	r0, [pc, #40]	; (400128 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b933      	cbnz	r3, 400112 <frame_dummy+0x2a>
  400104:	4770      	bx	lr
  400106:	4b09      	ldr	r3, [pc, #36]	; (40012c <frame_dummy+0x44>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0f7      	beq.n	4000fc <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	4b06      	ldr	r3, [pc, #24]	; (40012c <frame_dummy+0x44>)
  400114:	2b00      	cmp	r3, #0
  400116:	d0f5      	beq.n	400104 <frame_dummy+0x1c>
  400118:	4718      	bx	r3
  40011a:	bf00      	nop
  40011c:	00000000 	.word	0x00000000
  400120:	0040436c 	.word	0x0040436c
  400124:	2000094c 	.word	0x2000094c
  400128:	0040436c 	.word	0x0040436c
  40012c:	00000000 	.word	0x00000000

00400130 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400130:	b510      	push	{r4, lr}
  400132:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  400134:	4b10      	ldr	r3, [pc, #64]	; (400178 <spi_master_init+0x48>)
  400136:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400138:	2380      	movs	r3, #128	; 0x80
  40013a:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40013c:	6863      	ldr	r3, [r4, #4]
  40013e:	f043 0301 	orr.w	r3, r3, #1
  400142:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400144:	6863      	ldr	r3, [r4, #4]
  400146:	f043 0310 	orr.w	r3, r3, #16
  40014a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40014c:	6863      	ldr	r3, [r4, #4]
  40014e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400152:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  400154:	2100      	movs	r1, #0
  400156:	4620      	mov	r0, r4
  400158:	4b08      	ldr	r3, [pc, #32]	; (40017c <spi_master_init+0x4c>)
  40015a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  40015c:	6863      	ldr	r3, [r4, #4]
  40015e:	f023 0302 	bic.w	r3, r3, #2
  400162:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  400164:	6863      	ldr	r3, [r4, #4]
  400166:	f023 0304 	bic.w	r3, r3, #4
  40016a:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  40016c:	2100      	movs	r1, #0
  40016e:	4620      	mov	r0, r4
  400170:	4b03      	ldr	r3, [pc, #12]	; (400180 <spi_master_init+0x50>)
  400172:	4798      	blx	r3
  400174:	bd10      	pop	{r4, pc}
  400176:	bf00      	nop
  400178:	00400271 	.word	0x00400271
  40017c:	00400281 	.word	0x00400281
  400180:	00400297 	.word	0x00400297

00400184 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400188:	4604      	mov	r4, r0
  40018a:	460d      	mov	r5, r1
  40018c:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  40018e:	4915      	ldr	r1, [pc, #84]	; (4001e4 <spi_master_setup_device+0x60>)
  400190:	4618      	mov	r0, r3
  400192:	4b15      	ldr	r3, [pc, #84]	; (4001e8 <spi_master_setup_device+0x64>)
  400194:	4798      	blx	r3
  400196:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400198:	2300      	movs	r3, #0
  40019a:	461a      	mov	r2, r3
  40019c:	6829      	ldr	r1, [r5, #0]
  40019e:	4620      	mov	r0, r4
  4001a0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400200 <spi_master_setup_device+0x7c>
  4001a4:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  4001a6:	2208      	movs	r2, #8
  4001a8:	6829      	ldr	r1, [r5, #0]
  4001aa:	4620      	mov	r0, r4
  4001ac:	4b0f      	ldr	r3, [pc, #60]	; (4001ec <spi_master_setup_device+0x68>)
  4001ae:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  4001b0:	b2fa      	uxtb	r2, r7
  4001b2:	6829      	ldr	r1, [r5, #0]
  4001b4:	4620      	mov	r0, r4
  4001b6:	4b0e      	ldr	r3, [pc, #56]	; (4001f0 <spi_master_setup_device+0x6c>)
  4001b8:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  4001ba:	2208      	movs	r2, #8
  4001bc:	6829      	ldr	r1, [r5, #0]
  4001be:	4620      	mov	r0, r4
  4001c0:	4b0c      	ldr	r3, [pc, #48]	; (4001f4 <spi_master_setup_device+0x70>)
  4001c2:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4001c4:	0872      	lsrs	r2, r6, #1
  4001c6:	6829      	ldr	r1, [r5, #0]
  4001c8:	4620      	mov	r0, r4
  4001ca:	4b0b      	ldr	r3, [pc, #44]	; (4001f8 <spi_master_setup_device+0x74>)
  4001cc:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  4001ce:	f086 0201 	eor.w	r2, r6, #1
  4001d2:	f002 0201 	and.w	r2, r2, #1
  4001d6:	6829      	ldr	r1, [r5, #0]
  4001d8:	4620      	mov	r0, r4
  4001da:	4b08      	ldr	r3, [pc, #32]	; (4001fc <spi_master_setup_device+0x78>)
  4001dc:	4798      	blx	r3
  4001de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001e2:	bf00      	nop
  4001e4:	02dc6c00 	.word	0x02dc6c00
  4001e8:	00400373 	.word	0x00400373
  4001ec:	0040035f 	.word	0x0040035f
  4001f0:	00400389 	.word	0x00400389
  4001f4:	00400319 	.word	0x00400319
  4001f8:	004002dd 	.word	0x004002dd
  4001fc:	004002fb 	.word	0x004002fb
  400200:	004003af 	.word	0x004003af

00400204 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400204:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  400206:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400208:	f013 0f04 	tst.w	r3, #4
  40020c:	d006      	beq.n	40021c <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  40020e:	6809      	ldr	r1, [r1, #0]
  400210:	290f      	cmp	r1, #15
  400212:	d900      	bls.n	400216 <spi_select_device+0x12>
  400214:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <spi_select_device+0x2c>)
  400218:	4798      	blx	r3
  40021a:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  40021c:	6809      	ldr	r1, [r1, #0]
  40021e:	2903      	cmp	r1, #3
  400220:	d8f8      	bhi.n	400214 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400222:	2301      	movs	r3, #1
  400224:	fa03 f101 	lsl.w	r1, r3, r1
  400228:	43c9      	mvns	r1, r1
  40022a:	4b01      	ldr	r3, [pc, #4]	; (400230 <spi_select_device+0x2c>)
  40022c:	4798      	blx	r3
		}
	}
}
  40022e:	e7f1      	b.n	400214 <spi_select_device+0x10>
  400230:	00400281 	.word	0x00400281

00400234 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400238:	b980      	cbnz	r0, 40025c <_read+0x28>
  40023a:	460c      	mov	r4, r1
  40023c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40023e:	2a00      	cmp	r2, #0
  400240:	dd0f      	ble.n	400262 <_read+0x2e>
  400242:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400244:	4e08      	ldr	r6, [pc, #32]	; (400268 <_read+0x34>)
  400246:	4d09      	ldr	r5, [pc, #36]	; (40026c <_read+0x38>)
  400248:	6830      	ldr	r0, [r6, #0]
  40024a:	4621      	mov	r1, r4
  40024c:	682b      	ldr	r3, [r5, #0]
  40024e:	4798      	blx	r3
		ptr++;
  400250:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400252:	42bc      	cmp	r4, r7
  400254:	d1f8      	bne.n	400248 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400256:	4640      	mov	r0, r8
  400258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40025c:	f04f 38ff 	mov.w	r8, #4294967295
  400260:	e7f9      	b.n	400256 <_read+0x22>
	for (; len > 0; --len) {
  400262:	4680      	mov	r8, r0
  400264:	e7f7      	b.n	400256 <_read+0x22>
  400266:	bf00      	nop
  400268:	20000b80 	.word	0x20000b80
  40026c:	20000b78 	.word	0x20000b78

00400270 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400270:	b508      	push	{r3, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400272:	2015      	movs	r0, #21
  400274:	4b01      	ldr	r3, [pc, #4]	; (40027c <spi_enable_clock+0xc>)
  400276:	4798      	blx	r3
  400278:	bd08      	pop	{r3, pc}
  40027a:	bf00      	nop
  40027c:	0040195d 	.word	0x0040195d

00400280 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400280:	6843      	ldr	r3, [r0, #4]
  400282:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400286:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400288:	6843      	ldr	r3, [r0, #4]
  40028a:	0409      	lsls	r1, r1, #16
  40028c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400290:	4319      	orrs	r1, r3
  400292:	6041      	str	r1, [r0, #4]
  400294:	4770      	bx	lr

00400296 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  400296:	6843      	ldr	r3, [r0, #4]
  400298:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40029c:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  40029e:	6843      	ldr	r3, [r0, #4]
  4002a0:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  4002a4:	6041      	str	r1, [r0, #4]
  4002a6:	4770      	bx	lr

004002a8 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4002a8:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4002aa:	f643 2499 	movw	r4, #15001	; 0x3a99
  4002ae:	6905      	ldr	r5, [r0, #16]
  4002b0:	f015 0f02 	tst.w	r5, #2
  4002b4:	d103      	bne.n	4002be <spi_write+0x16>
		if (!timeout--) {
  4002b6:	3c01      	subs	r4, #1
  4002b8:	d1f9      	bne.n	4002ae <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4002ba:	2001      	movs	r0, #1
  4002bc:	e00c      	b.n	4002d8 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4002be:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4002c0:	f014 0f02 	tst.w	r4, #2
  4002c4:	d006      	beq.n	4002d4 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4002c6:	0412      	lsls	r2, r2, #16
  4002c8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4002cc:	4311      	orrs	r1, r2
		if (uc_last) {
  4002ce:	b10b      	cbz	r3, 4002d4 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4002d0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4002d4:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4002d6:	2000      	movs	r0, #0
}
  4002d8:	bc30      	pop	{r4, r5}
  4002da:	4770      	bx	lr

004002dc <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4002dc:	b932      	cbnz	r2, 4002ec <spi_set_clock_polarity+0x10>
  4002de:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4002e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002e4:	f023 0301 	bic.w	r3, r3, #1
  4002e8:	6303      	str	r3, [r0, #48]	; 0x30
  4002ea:	4770      	bx	lr
  4002ec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002f2:	f043 0301 	orr.w	r3, r3, #1
  4002f6:	6303      	str	r3, [r0, #48]	; 0x30
  4002f8:	4770      	bx	lr

004002fa <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4002fa:	b932      	cbnz	r2, 40030a <spi_set_clock_phase+0x10>
  4002fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400300:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400302:	f023 0302 	bic.w	r3, r3, #2
  400306:	6303      	str	r3, [r0, #48]	; 0x30
  400308:	4770      	bx	lr
  40030a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40030e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400310:	f043 0302 	orr.w	r3, r3, #2
  400314:	6303      	str	r3, [r0, #48]	; 0x30
  400316:	4770      	bx	lr

00400318 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400318:	2a04      	cmp	r2, #4
  40031a:	d003      	beq.n	400324 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40031c:	b16a      	cbz	r2, 40033a <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  40031e:	2a08      	cmp	r2, #8
  400320:	d016      	beq.n	400350 <spi_configure_cs_behavior+0x38>
  400322:	4770      	bx	lr
  400324:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400328:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40032a:	f023 0308 	bic.w	r3, r3, #8
  40032e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400330:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400332:	f043 0304 	orr.w	r3, r3, #4
  400336:	6303      	str	r3, [r0, #48]	; 0x30
  400338:	4770      	bx	lr
  40033a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40033e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400340:	f023 0308 	bic.w	r3, r3, #8
  400344:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400346:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400348:	f023 0304 	bic.w	r3, r3, #4
  40034c:	6303      	str	r3, [r0, #48]	; 0x30
  40034e:	4770      	bx	lr
  400350:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400354:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400356:	f043 0308 	orr.w	r3, r3, #8
  40035a:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40035c:	e7e1      	b.n	400322 <spi_configure_cs_behavior+0xa>

0040035e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40035e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400362:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400368:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40036a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40036c:	431a      	orrs	r2, r3
  40036e:	630a      	str	r2, [r1, #48]	; 0x30
  400370:	4770      	bx	lr

00400372 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400372:	1e43      	subs	r3, r0, #1
  400374:	4419      	add	r1, r3
  400376:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40037a:	1e43      	subs	r3, r0, #1
  40037c:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40037e:	bf94      	ite	ls
  400380:	b200      	sxthls	r0, r0
		return -1;
  400382:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400386:	4770      	bx	lr

00400388 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400388:	b172      	cbz	r2, 4003a8 <spi_set_baudrate_div+0x20>
{
  40038a:	b410      	push	{r4}
  40038c:	4614      	mov	r4, r2
  40038e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400392:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400394:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400398:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40039a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40039c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4003a0:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4003a2:	2000      	movs	r0, #0
}
  4003a4:	bc10      	pop	{r4}
  4003a6:	4770      	bx	lr
        return -1;
  4003a8:	f04f 30ff 	mov.w	r0, #4294967295
  4003ac:	4770      	bx	lr

004003ae <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4003ae:	b410      	push	{r4}
  4003b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4003b4:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4003b6:	b280      	uxth	r0, r0
  4003b8:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4003ba:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4003bc:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4003c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4003c4:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4003c6:	bc10      	pop	{r4}
  4003c8:	4770      	bx	lr

004003ca <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4003ca:	6943      	ldr	r3, [r0, #20]
  4003cc:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4003d0:	bf1d      	ittte	ne
  4003d2:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4003d6:	61c1      	strne	r1, [r0, #28]
	return 0;
  4003d8:	2000      	movne	r0, #0
		return 1;
  4003da:	2001      	moveq	r0, #1
}
  4003dc:	4770      	bx	lr

004003de <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4003de:	6943      	ldr	r3, [r0, #20]
  4003e0:	f013 0f01 	tst.w	r3, #1
  4003e4:	d005      	beq.n	4003f2 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4003e6:	6983      	ldr	r3, [r0, #24]
  4003e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4003ec:	600b      	str	r3, [r1, #0]

	return 0;
  4003ee:	2000      	movs	r0, #0
  4003f0:	4770      	bx	lr
		return 1;
  4003f2:	2001      	movs	r0, #1
}
  4003f4:	4770      	bx	lr
	...

004003f8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4003f8:	3801      	subs	r0, #1
  4003fa:	2802      	cmp	r0, #2
  4003fc:	d815      	bhi.n	40042a <_write+0x32>
{
  4003fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400402:	460e      	mov	r6, r1
  400404:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400406:	b19a      	cbz	r2, 400430 <_write+0x38>
  400408:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40040a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400444 <_write+0x4c>
  40040e:	4f0c      	ldr	r7, [pc, #48]	; (400440 <_write+0x48>)
  400410:	f8d8 0000 	ldr.w	r0, [r8]
  400414:	f815 1b01 	ldrb.w	r1, [r5], #1
  400418:	683b      	ldr	r3, [r7, #0]
  40041a:	4798      	blx	r3
  40041c:	2800      	cmp	r0, #0
  40041e:	db0a      	blt.n	400436 <_write+0x3e>
  400420:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400422:	3c01      	subs	r4, #1
  400424:	d1f4      	bne.n	400410 <_write+0x18>
  400426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40042a:	f04f 30ff 	mov.w	r0, #4294967295
  40042e:	4770      	bx	lr
	for (; len != 0; --len) {
  400430:	4610      	mov	r0, r2
  400432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400436:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40043a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40043e:	bf00      	nop
  400440:	20000b7c 	.word	0x20000b7c
  400444:	20000b80 	.word	0x20000b80

00400448 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400448:	b4f0      	push	{r4, r5, r6, r7}
  40044a:	b082      	sub	sp, #8
#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  40044c:	f1c0 0011 	rsb	r0, r0, #17
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  400450:	2810      	cmp	r0, #16
  400452:	bf28      	it	cs
  400454:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  400456:	2800      	cmp	r0, #0
  400458:	bf08      	it	eq
  40045a:	2001      	moveq	r0, #1
{
  40045c:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40045e:	4d10      	ldr	r5, [pc, #64]	; (4004a0 <aat31xx_set_backlight+0x58>)
  400460:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  400464:	4637      	mov	r7, r6

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  400466:	2418      	movs	r4, #24
  400468:	636f      	str	r7, [r5, #52]	; 0x34
  40046a:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40046c:	9b01      	ldr	r3, [sp, #4]
  40046e:	1e5a      	subs	r2, r3, #1
  400470:	9201      	str	r2, [sp, #4]
  400472:	2b00      	cmp	r3, #0
  400474:	d1fa      	bne.n	40046c <aat31xx_set_backlight+0x24>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400476:	632e      	str	r6, [r5, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  400478:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40047a:	9b01      	ldr	r3, [sp, #4]
  40047c:	1e5a      	subs	r2, r3, #1
  40047e:	9201      	str	r2, [sp, #4]
  400480:	2b00      	cmp	r3, #0
  400482:	d1fa      	bne.n	40047a <aat31xx_set_backlight+0x32>
	for (i = 0; i < ul_level; i++) {
  400484:	3101      	adds	r1, #1
  400486:	4281      	cmp	r1, r0
  400488:	d3ee      	bcc.n	400468 <aat31xx_set_backlight+0x20>
		}
	}

	ul_delay = DELAY_ENABLE;
  40048a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40048e:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400490:	9b01      	ldr	r3, [sp, #4]
  400492:	1e5a      	subs	r2, r3, #1
  400494:	9201      	str	r2, [sp, #4]
  400496:	2b00      	cmp	r3, #0
  400498:	d1fa      	bne.n	400490 <aat31xx_set_backlight+0x48>
	}
}
  40049a:	b002      	add	sp, #8
  40049c:	bcf0      	pop	{r4, r5, r6, r7}
  40049e:	4770      	bx	lr
  4004a0:	400e1200 	.word	0x400e1200

004004a4 <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  4004a4:	b082      	sub	sp, #8
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4004a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4004aa:	4b06      	ldr	r3, [pc, #24]	; (4004c4 <aat31xx_disable_backlight+0x20>)
  4004ac:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  4004ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4004b2:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4004b4:	9b01      	ldr	r3, [sp, #4]
  4004b6:	1e5a      	subs	r2, r3, #1
  4004b8:	9201      	str	r2, [sp, #4]
  4004ba:	2b00      	cmp	r3, #0
  4004bc:	d1fa      	bne.n	4004b4 <aat31xx_disable_backlight+0x10>
	}
}
  4004be:	b002      	add	sp, #8
  4004c0:	4770      	bx	lr
  4004c2:	bf00      	nop
  4004c4:	400e1200 	.word	0x400e1200

004004c8 <ili9225_delay>:

/**
 * \brief Delay function.
 */
static void ili9225_delay(uint32_t ul_ms)
{
  4004c8:	b082      	sub	sp, #8
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  4004ca:	2300      	movs	r3, #0
  4004cc:	9301      	str	r3, [sp, #4]
  4004ce:	9b01      	ldr	r3, [sp, #4]
  4004d0:	4298      	cmp	r0, r3
  4004d2:	d911      	bls.n	4004f8 <ili9225_delay+0x30>
		for(i = 0; i < 100000; i++) {
  4004d4:	2100      	movs	r1, #0
  4004d6:	4a09      	ldr	r2, [pc, #36]	; (4004fc <ili9225_delay+0x34>)
  4004d8:	9101      	str	r1, [sp, #4]
  4004da:	9b01      	ldr	r3, [sp, #4]
  4004dc:	4293      	cmp	r3, r2
  4004de:	d805      	bhi.n	4004ec <ili9225_delay+0x24>
  4004e0:	9b01      	ldr	r3, [sp, #4]
  4004e2:	3301      	adds	r3, #1
  4004e4:	9301      	str	r3, [sp, #4]
  4004e6:	9b01      	ldr	r3, [sp, #4]
  4004e8:	4293      	cmp	r3, r2
  4004ea:	d9f9      	bls.n	4004e0 <ili9225_delay+0x18>
	for(i = 0; i < ul_ms; i++) {
  4004ec:	9b01      	ldr	r3, [sp, #4]
  4004ee:	3301      	adds	r3, #1
  4004f0:	9301      	str	r3, [sp, #4]
  4004f2:	9b01      	ldr	r3, [sp, #4]
  4004f4:	4283      	cmp	r3, r0
  4004f6:	d3ef      	bcc.n	4004d8 <ili9225_delay+0x10>
		}
	}
}
  4004f8:	b002      	add	sp, #8
  4004fa:	4770      	bx	lr
  4004fc:	0001869f 	.word	0x0001869f

00400500 <ili9225_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9225_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400500:	b430      	push	{r4, r5}
	uint32_t ul;

	if (*p_ul_x1 >= ILI9225_LCD_WIDTH) {
  400502:	6804      	ldr	r4, [r0, #0]
  400504:	2caf      	cmp	r4, #175	; 0xaf
		*p_ul_x1 = ILI9225_LCD_WIDTH - 1;
  400506:	bf84      	itt	hi
  400508:	24af      	movhi	r4, #175	; 0xaf
  40050a:	6004      	strhi	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9225_LCD_WIDTH) {
  40050c:	6814      	ldr	r4, [r2, #0]
  40050e:	2caf      	cmp	r4, #175	; 0xaf
		*p_ul_x2 = ILI9225_LCD_WIDTH - 1;
  400510:	bf84      	itt	hi
  400512:	24af      	movhi	r4, #175	; 0xaf
  400514:	6014      	strhi	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9225_LCD_HEIGHT) {
  400516:	680c      	ldr	r4, [r1, #0]
  400518:	2cdb      	cmp	r4, #219	; 0xdb
		*p_ul_y1 = ILI9225_LCD_HEIGHT - 1;
  40051a:	bf84      	itt	hi
  40051c:	24db      	movhi	r4, #219	; 0xdb
  40051e:	600c      	strhi	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9225_LCD_HEIGHT) {
  400520:	681c      	ldr	r4, [r3, #0]
  400522:	2cdb      	cmp	r4, #219	; 0xdb
		*p_ul_y2 = ILI9225_LCD_HEIGHT - 1;
  400524:	bf84      	itt	hi
  400526:	24db      	movhi	r4, #219	; 0xdb
  400528:	601c      	strhi	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  40052a:	6804      	ldr	r4, [r0, #0]
  40052c:	6815      	ldr	r5, [r2, #0]
  40052e:	42ac      	cmp	r4, r5
		ul = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400530:	bf84      	itt	hi
  400532:	6005      	strhi	r5, [r0, #0]
		*p_ul_x2 = ul;
  400534:	6014      	strhi	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400536:	680a      	ldr	r2, [r1, #0]
  400538:	6818      	ldr	r0, [r3, #0]
  40053a:	4282      	cmp	r2, r0
		ul = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  40053c:	bf84      	itt	hi
  40053e:	6008      	strhi	r0, [r1, #0]
		*p_ul_y2 = ul;
  400540:	601a      	strhi	r2, [r3, #0]
	}
}
  400542:	bc30      	pop	{r4, r5}
  400544:	4770      	bx	lr
	...

00400548 <ili9225_write_cmd>:
{
  400548:	b570      	push	{r4, r5, r6, lr}
  40054a:	4606      	mov	r6, r0
	spi_set_bits_per_transfer(BOARD_ILI9225_SPI, BOARD_ILI9225_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  40054c:	4c0b      	ldr	r4, [pc, #44]	; (40057c <ili9225_write_cmd+0x34>)
  40054e:	2200      	movs	r2, #0
  400550:	2102      	movs	r1, #2
  400552:	4620      	mov	r0, r4
  400554:	4d0a      	ldr	r5, [pc, #40]	; (400580 <ili9225_write_cmd+0x38>)
  400556:	47a8      	blx	r5
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400558:	2301      	movs	r3, #1
  40055a:	6023      	str	r3, [r4, #0]
	gpio_set_pin_low(BOARD_ILI9225_RS_GPIO);
  40055c:	201c      	movs	r0, #28
  40055e:	4b09      	ldr	r3, [pc, #36]	; (400584 <ili9225_write_cmd+0x3c>)
  400560:	4798      	blx	r3
	spi_write(BOARD_ILI9225_SPI, uc_cmd, BOARD_ILI9225_SPI_NPCS, 0);
  400562:	2300      	movs	r3, #0
  400564:	2202      	movs	r2, #2
  400566:	4631      	mov	r1, r6
  400568:	4620      	mov	r0, r4
  40056a:	4e07      	ldr	r6, [pc, #28]	; (400588 <ili9225_write_cmd+0x40>)
  40056c:	47b0      	blx	r6
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40056e:	2102      	movs	r1, #2
  400570:	6021      	str	r1, [r4, #0]
	spi_set_bits_per_transfer(BOARD_ILI9225_SPI, BOARD_ILI9225_SPI_NPCS, SPI_CSR_BITS_16_BIT);
  400572:	2280      	movs	r2, #128	; 0x80
  400574:	4620      	mov	r0, r4
  400576:	47a8      	blx	r5
  400578:	bd70      	pop	{r4, r5, r6, pc}
  40057a:	bf00      	nop
  40057c:	40008000 	.word	0x40008000
  400580:	0040035f 	.word	0x0040035f
  400584:	00401565 	.word	0x00401565
  400588:	004002a9 	.word	0x004002a9

0040058c <ili9225_write_ram>:
{
  40058c:	b538      	push	{r3, r4, r5, lr}
  40058e:	4605      	mov	r5, r0
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400590:	4c07      	ldr	r4, [pc, #28]	; (4005b0 <ili9225_write_ram+0x24>)
  400592:	2301      	movs	r3, #1
  400594:	6023      	str	r3, [r4, #0]
	gpio_set_pin_high(BOARD_ILI9225_RS_GPIO);
  400596:	201c      	movs	r0, #28
  400598:	4b06      	ldr	r3, [pc, #24]	; (4005b4 <ili9225_write_ram+0x28>)
  40059a:	4798      	blx	r3
	spi_write(BOARD_ILI9225_SPI, us_data, BOARD_ILI9225_SPI_NPCS, 0);
  40059c:	2300      	movs	r3, #0
  40059e:	2202      	movs	r2, #2
  4005a0:	4629      	mov	r1, r5
  4005a2:	4620      	mov	r0, r4
  4005a4:	4d04      	ldr	r5, [pc, #16]	; (4005b8 <ili9225_write_ram+0x2c>)
  4005a6:	47a8      	blx	r5
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4005a8:	2302      	movs	r3, #2
  4005aa:	6023      	str	r3, [r4, #0]
  4005ac:	bd38      	pop	{r3, r4, r5, pc}
  4005ae:	bf00      	nop
  4005b0:	40008000 	.word	0x40008000
  4005b4:	0040154b 	.word	0x0040154b
  4005b8:	004002a9 	.word	0x004002a9

004005bc <ili9225_write_register>:
{
  4005bc:	b510      	push	{r4, lr}
  4005be:	460c      	mov	r4, r1
	ili9225_write_cmd(uc_reg);
  4005c0:	4b02      	ldr	r3, [pc, #8]	; (4005cc <ili9225_write_register+0x10>)
  4005c2:	4798      	blx	r3
	ili9225_write_ram(us_data);
  4005c4:	4620      	mov	r0, r4
  4005c6:	4b02      	ldr	r3, [pc, #8]	; (4005d0 <ili9225_write_register+0x14>)
  4005c8:	4798      	blx	r3
  4005ca:	bd10      	pop	{r4, pc}
  4005cc:	00400549 	.word	0x00400549
  4005d0:	0040058d 	.word	0x0040058d

004005d4 <ili9225_write_ram_buffer>:
	if (ul_size == 0)
  4005d4:	b901      	cbnz	r1, 4005d8 <ili9225_write_ram_buffer+0x4>
  4005d6:	4770      	bx	lr
{
  4005d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005dc:	b082      	sub	sp, #8
  4005de:	460c      	mov	r4, r1
  4005e0:	4605      	mov	r5, r0
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4005e2:	2201      	movs	r2, #1
  4005e4:	4b10      	ldr	r3, [pc, #64]	; (400628 <ili9225_write_ram_buffer+0x54>)
  4005e6:	601a      	str	r2, [r3, #0]
	gpio_set_pin_high(BOARD_ILI9225_RS_GPIO);
  4005e8:	201c      	movs	r0, #28
  4005ea:	4b10      	ldr	r3, [pc, #64]	; (40062c <ili9225_write_ram_buffer+0x58>)
  4005ec:	4798      	blx	r3
	for(i = 0; i < ul_size; i++){
  4005ee:	2300      	movs	r3, #0
  4005f0:	9301      	str	r3, [sp, #4]
  4005f2:	9b01      	ldr	r3, [sp, #4]
  4005f4:	429c      	cmp	r4, r3
  4005f6:	d910      	bls.n	40061a <ili9225_write_ram_buffer+0x46>
		spi_write(BOARD_ILI9225_SPI, p_us_buf[i], BOARD_ILI9225_SPI_NPCS, 0);
  4005f8:	f8df 802c 	ldr.w	r8, [pc, #44]	; 400628 <ili9225_write_ram_buffer+0x54>
  4005fc:	2700      	movs	r7, #0
  4005fe:	4e0c      	ldr	r6, [pc, #48]	; (400630 <ili9225_write_ram_buffer+0x5c>)
  400600:	9901      	ldr	r1, [sp, #4]
  400602:	463b      	mov	r3, r7
  400604:	2202      	movs	r2, #2
  400606:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
  40060a:	4640      	mov	r0, r8
  40060c:	47b0      	blx	r6
	for(i = 0; i < ul_size; i++){
  40060e:	9b01      	ldr	r3, [sp, #4]
  400610:	3301      	adds	r3, #1
  400612:	9301      	str	r3, [sp, #4]
  400614:	9b01      	ldr	r3, [sp, #4]
  400616:	429c      	cmp	r4, r3
  400618:	d8f2      	bhi.n	400600 <ili9225_write_ram_buffer+0x2c>
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40061a:	2202      	movs	r2, #2
  40061c:	4b02      	ldr	r3, [pc, #8]	; (400628 <ili9225_write_ram_buffer+0x54>)
  40061e:	601a      	str	r2, [r3, #0]
}
  400620:	b002      	add	sp, #8
  400622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400626:	bf00      	nop
  400628:	40008000 	.word	0x40008000
  40062c:	0040154b 	.word	0x0040154b
  400630:	004002a9 	.word	0x004002a9

00400634 <ili9225_spi_handler>:
 *
 * \return The interrupt mask value.
 */
static inline uint32_t spi_read_interrupt_mask(Spi *p_spi)
{
	return p_spi->SPI_IMR;
  400634:	4b03      	ldr	r3, [pc, #12]	; (400644 <ili9225_spi_handler+0x10>)
  400636:	69da      	ldr	r2, [r3, #28]
	p_spi->SPI_IDR = ul_sources;
  400638:	619a      	str	r2, [r3, #24]
	/* Disable interrupts */
	ul_spi_reg = spi_read_interrupt_mask(BOARD_ILI9225_SPI);
	spi_disable_interrupt(BOARD_ILI9225_SPI, ul_spi_reg);

	/* Set the flag to notify the end of transfer */
	g_by_transfend_flag = 1;
  40063a:	2201      	movs	r2, #1
  40063c:	4b02      	ldr	r3, [pc, #8]	; (400648 <ili9225_spi_handler+0x14>)
  40063e:	701a      	strb	r2, [r3, #0]
  400640:	4770      	bx	lr
  400642:	bf00      	nop
  400644:	40008000 	.word	0x40008000
  400648:	20000964 	.word	0x20000964

0040064c <ili9225_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9225_display_on(void)
{
  40064c:	b508      	push	{r3, lr}
	ili9225_write_register(ILI9225_DISP_CTRL1,
  40064e:	f241 0117 	movw	r1, #4119	; 0x1017
  400652:	2007      	movs	r0, #7
  400654:	4b01      	ldr	r3, [pc, #4]	; (40065c <ili9225_display_on+0x10>)
  400656:	4798      	blx	r3
  400658:	bd08      	pop	{r3, pc}
  40065a:	bf00      	nop
  40065c:	004005bd 	.word	0x004005bd

00400660 <ili9225_display_off>:

/**
 * \brief Turn off the LCD.
 */
void ili9225_display_off(void)
{
  400660:	b508      	push	{r3, lr}
	ili9225_write_register(ILI9225_DISP_CTRL1, 0x0000);
  400662:	2100      	movs	r1, #0
  400664:	2007      	movs	r0, #7
  400666:	4b01      	ldr	r3, [pc, #4]	; (40066c <ili9225_display_off+0xc>)
  400668:	4798      	blx	r3
  40066a:	bd08      	pop	{r3, pc}
  40066c:	004005bd 	.word	0x004005bd

00400670 <ili9225_set_foreground_color>:
{
	uint32_t i;
	ili9225_color_t w_color;

	/* Convert 24 bit RGB color into 5-6-5 RGB color */
	w_color = (ul_rgb24bits & 0xF80000) >> 8 |
  400670:	0a02      	lsrs	r2, r0, #8
  400672:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
  400676:	f022 0207 	bic.w	r2, r2, #7
			(ul_rgb24bits & 0x00FC00) >> 5 |
  40067a:	0943      	lsrs	r3, r0, #5
  40067c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
	w_color = (ul_rgb24bits & 0xF80000) >> 8 |
  400680:	431a      	orrs	r2, r3
			(ul_rgb24bits & 0x0000F8) >> 3;
  400682:	f3c0 00c4 	ubfx	r0, r0, #3, #5
	w_color = (ul_rgb24bits & 0xF80000) >> 8 |
  400686:	4302      	orrs	r2, r0
  400688:	b292      	uxth	r2, r2
  40068a:	4904      	ldr	r1, [pc, #16]	; (40069c <ili9225_set_foreground_color+0x2c>)
  40068c:	1e8b      	subs	r3, r1, #2
  40068e:	f501 71af 	add.w	r1, r1, #350	; 0x15e

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = w_color;
  400692:	f823 2f02 	strh.w	r2, [r3, #2]!
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  400696:	428b      	cmp	r3, r1
  400698:	d1fb      	bne.n	400692 <ili9225_set_foreground_color+0x22>
	}
}
  40069a:	4770      	bx	lr
  40069c:	20000968 	.word	0x20000968

004006a0 <ili9225_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9225_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  4006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006a2:	460e      	mov	r6, r1
  4006a4:	461c      	mov	r4, r3
	Assert(ul_width <= (0xB0 - ul_x));
	Assert(ul_height <= (0xDC - ul_y));

	/* Set Horizontal Address End Position */
	ili9225_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,
			ILI9225_HORIZONTAL_WINDOW_ADDR1_HEA((uint16_t)(ul_x + ul_width - 1)));
  4006a6:	b287      	uxth	r7, r0
  4006a8:	3a01      	subs	r2, #1
  4006aa:	18b9      	adds	r1, r7, r2
	ili9225_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,
  4006ac:	b2c9      	uxtb	r1, r1
  4006ae:	2036      	movs	r0, #54	; 0x36
  4006b0:	4d07      	ldr	r5, [pc, #28]	; (4006d0 <ili9225_set_window+0x30>)
  4006b2:	47a8      	blx	r5

	/* Set Horizontal Address Start Position */
	ili9225_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,
  4006b4:	b2f9      	uxtb	r1, r7
  4006b6:	2037      	movs	r0, #55	; 0x37
  4006b8:	47a8      	blx	r5
			ILI9225_HORIZONTAL_WINDOW_ADDR2_HSA((uint16_t)ul_x));

	/* Set Vertical Address End Position */
	ili9225_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,
			ILI9225_VERTICAL_WINDOW_ADDR1_VEA((uint16_t)(ul_y + ul_height - 1)));
  4006ba:	b2b6      	uxth	r6, r6
  4006bc:	3c01      	subs	r4, #1
  4006be:	1931      	adds	r1, r6, r4
	ili9225_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,
  4006c0:	b2c9      	uxtb	r1, r1
  4006c2:	2038      	movs	r0, #56	; 0x38
  4006c4:	47a8      	blx	r5

	/* Set Vertical Address Start Position */
	ili9225_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,
  4006c6:	b2f1      	uxtb	r1, r6
  4006c8:	2039      	movs	r0, #57	; 0x39
  4006ca:	47a8      	blx	r5
  4006cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006ce:	bf00      	nop
  4006d0:	004005bd 	.word	0x004005bd

004006d4 <ili9225_set_cursor_position>:
 *
 * \param ul_x X coordinate of upper-left corner on LCD.
 * \param ul_y Y coordinate of upper-left corner on LCD.
 */
void ili9225_set_cursor_position(uint16_t ul_x, uint16_t ul_y)
{
  4006d4:	b538      	push	{r3, r4, r5, lr}
  4006d6:	460d      	mov	r5, r1
	/* GRAM Horizontal/Vertical Address Set (R20h, R21h) */
	ili9225_write_register(ILI9225_RAM_ADDR_SET1, ILI9225_RAM_ADDR_SET1_AD(ul_x));  /* column */
  4006d8:	b2c1      	uxtb	r1, r0
  4006da:	2020      	movs	r0, #32
  4006dc:	4c02      	ldr	r4, [pc, #8]	; (4006e8 <ili9225_set_cursor_position+0x14>)
  4006de:	47a0      	blx	r4
	ili9225_write_register(ILI9225_RAM_ADDR_SET2, ILI9225_RAM_ADDR_SET2_AD(ul_y));  /* row */
  4006e0:	b2e9      	uxtb	r1, r5
  4006e2:	2021      	movs	r0, #33	; 0x21
  4006e4:	47a0      	blx	r4
  4006e6:	bd38      	pop	{r3, r4, r5, pc}
  4006e8:	004005bd 	.word	0x004005bd

004006ec <ili9225_init>:
{
  4006ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4006f0:	b084      	sub	sp, #16
  4006f2:	4681      	mov	r9, r0
	struct spi_device ILI9225_SPI_DEVICE = {
  4006f4:	f04f 0802 	mov.w	r8, #2
  4006f8:	af04      	add	r7, sp, #16
  4006fa:	f847 8d04 	str.w	r8, [r7, #-4]!
	gpio_set_pin_high(BOARD_ILI9225_RSTN_GPIO);
  4006fe:	201d      	movs	r0, #29
  400700:	4c5e      	ldr	r4, [pc, #376]	; (40087c <ili9225_init+0x190>)
  400702:	47a0      	blx	r4
	ili9225_delay(2); /* wait for at least 2ms */
  400704:	4640      	mov	r0, r8
  400706:	4e5e      	ldr	r6, [pc, #376]	; (400880 <ili9225_init+0x194>)
  400708:	47b0      	blx	r6
	gpio_set_pin_low(BOARD_ILI9225_RSTN_GPIO);
  40070a:	201d      	movs	r0, #29
  40070c:	4b5d      	ldr	r3, [pc, #372]	; (400884 <ili9225_init+0x198>)
  40070e:	4798      	blx	r3
	ili9225_delay(20); /* wait for at least 20ms */
  400710:	2014      	movs	r0, #20
  400712:	47b0      	blx	r6
	gpio_set_pin_high(BOARD_ILI9225_RSTN_GPIO);
  400714:	201d      	movs	r0, #29
  400716:	47a0      	blx	r4
	ili9225_delay(50); /* wait for at least 50ms */
  400718:	2032      	movs	r0, #50	; 0x32
  40071a:	47b0      	blx	r6
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40071c:	4c5a      	ldr	r4, [pc, #360]	; (400888 <ili9225_init+0x19c>)
  40071e:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400722:	2380      	movs	r3, #128	; 0x80
  400724:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  400726:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40072a:	6023      	str	r3, [r4, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40072c:	4b57      	ldr	r3, [pc, #348]	; (40088c <ili9225_init+0x1a0>)
  40072e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400736:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40073a:	2500      	movs	r5, #0
  40073c:	f883 5315 	strb.w	r5, [r3, #789]	; 0x315
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  400740:	601a      	str	r2, [r3, #0]
	spi_master_init(BOARD_ILI9225_SPI);
  400742:	4620      	mov	r0, r4
  400744:	4b52      	ldr	r3, [pc, #328]	; (400890 <ili9225_init+0x1a4>)
  400746:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9225_SPI, &ILI9225_SPI_DEVICE, SPI_MODE_0, ILI9225_SPI_BAUDRATE, 0);
  400748:	9500      	str	r5, [sp, #0]
  40074a:	4b52      	ldr	r3, [pc, #328]	; (400894 <ili9225_init+0x1a8>)
  40074c:	462a      	mov	r2, r5
  40074e:	4639      	mov	r1, r7
  400750:	4620      	mov	r0, r4
  400752:	f8df a15c 	ldr.w	sl, [pc, #348]	; 4008b0 <ili9225_init+0x1c4>
  400756:	47d0      	blx	sl
	spi_select_device(BOARD_ILI9225_SPI, &ILI9225_SPI_DEVICE);
  400758:	4639      	mov	r1, r7
  40075a:	4620      	mov	r0, r4
  40075c:	4b4e      	ldr	r3, [pc, #312]	; (400898 <ili9225_init+0x1ac>)
  40075e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400760:	2701      	movs	r7, #1
  400762:	6027      	str	r7, [r4, #0]
	p_spi->SPI_IER = ul_sources;
  400764:	6167      	str	r7, [r4, #20]
	ili9225_display_off();
  400766:	4b4d      	ldr	r3, [pc, #308]	; (40089c <ili9225_init+0x1b0>)
  400768:	4798      	blx	r3
	ili9225_write_register(ILI9225_DRIVER_OUTPUT_CTRL, ILI9225_DRIVER_OUTPUT_CTRL_SS |
  40076a:	f44f 718e 	mov.w	r1, #284	; 0x11c
  40076e:	4638      	mov	r0, r7
  400770:	4c4b      	ldr	r4, [pc, #300]	; (4008a0 <ili9225_init+0x1b4>)
  400772:	47a0      	blx	r4
	ili9225_write_register(ILI9225_LCD_AC_DRIVING_CTRL, ILI9225_LCD_AC_DRIVING_CTRL_INV(0x01));
  400774:	f44f 7180 	mov.w	r1, #256	; 0x100
  400778:	4640      	mov	r0, r8
  40077a:	47a0      	blx	r4
	ili9225_write_register(ILI9225_ENTRY_MODE, ILI9225_ENTRY_MODE_BGR | ILI9225_ENTRY_MODE_ID(0x03));
  40077c:	f241 0130 	movw	r1, #4144	; 0x1030
  400780:	2003      	movs	r0, #3
  400782:	47a0      	blx	r4
	ili9225_write_register(ILI9225_BLANK_PERIOD_CTRL1, ILI9225_BLANK_PERIOD_CTRL1_BP(0x08) |
  400784:	f640 0108 	movw	r1, #2056	; 0x808
  400788:	2008      	movs	r0, #8
  40078a:	47a0      	blx	r4
	ili9225_write_register(ILI9225_INTERFACE_CTRL, ILI9225_INTERFACE_CTRL_RIM(0x01));
  40078c:	4639      	mov	r1, r7
  40078e:	200c      	movs	r0, #12
  400790:	47a0      	blx	r4
	ili9225_write_register(ILI9225_OSC_CTRL, ILI9225_OSC_CTRL_ON | ILI9225_OSC_CTRL_FOSC(0x0a));
  400792:	f640 2101 	movw	r1, #2561	; 0xa01
  400796:	200f      	movs	r0, #15
  400798:	47a0      	blx	r4
	ili9225_write_register(ILI9225_RAM_ADDR_SET1, ILI9225_RAM_ADDR_SET1_AD(ILI9225_LCD_WIDTH));
  40079a:	21b0      	movs	r1, #176	; 0xb0
  40079c:	2020      	movs	r0, #32
  40079e:	47a0      	blx	r4
	ili9225_write_register(ILI9225_RAM_ADDR_SET2, ILI9225_RAM_ADDR_SET2_AD(ILI9225_LCD_HEIGHT));
  4007a0:	21dc      	movs	r1, #220	; 0xdc
  4007a2:	2021      	movs	r0, #33	; 0x21
  4007a4:	47a0      	blx	r4
	ili9225_write_register(ILI9225_POWER_CTRL1, ILI9225_POWER_CTRL1_SAP(0x0A));
  4007a6:	f44f 6120 	mov.w	r1, #2560	; 0xa00
  4007aa:	2010      	movs	r0, #16
  4007ac:	47a0      	blx	r4
	ili9225_write_register(ILI9225_POWER_CTRL2, ILI9225_POWER_CTRL2_APON | ILI9225_POWER_CTRL2_AON |
  4007ae:	f241 0138 	movw	r1, #4152	; 0x1038
  4007b2:	2011      	movs	r0, #17
  4007b4:	47a0      	blx	r4
	ili9225_delay(50); /* Wait for at least 50ms */
  4007b6:	2032      	movs	r0, #50	; 0x32
  4007b8:	47b0      	blx	r6
	ili9225_write_register(ILI9225_POWER_CTRL3, ILI9225_POWER_CTRL3_BT(0x01) |
  4007ba:	f241 1121 	movw	r1, #4385	; 0x1121
  4007be:	2012      	movs	r0, #18
  4007c0:	47a0      	blx	r4
	ili9225_write_register(ILI9225_POWER_CTRL4, ILI9225_POWER_CTRL4_GVD(0x4e));
  4007c2:	214e      	movs	r1, #78	; 0x4e
  4007c4:	2013      	movs	r0, #19
  4007c6:	47a0      	blx	r4
	ili9225_write_register(ILI9225_POWER_CTRL5, ILI9225_POWER_CTRL5_VCM(0x67) |
  4007c8:	f246 716f 	movw	r1, #26479	; 0x676f
  4007cc:	2014      	movs	r0, #20
  4007ce:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000);
  4007d0:	4629      	mov	r1, r5
  4007d2:	2030      	movs	r0, #48	; 0x30
  4007d4:	47a0      	blx	r4
	ili9225_write_register(ILI9225_VERTICAL_SCROLL_CTRL1,
  4007d6:	21db      	movs	r1, #219	; 0xdb
  4007d8:	2031      	movs	r0, #49	; 0x31
  4007da:	47a0      	blx	r4
	ili9225_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000);
  4007dc:	4629      	mov	r1, r5
  4007de:	2032      	movs	r0, #50	; 0x32
  4007e0:	47a0      	blx	r4
	ili9225_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000);
  4007e2:	4629      	mov	r1, r5
  4007e4:	2033      	movs	r0, #51	; 0x33
  4007e6:	47a0      	blx	r4
	ili9225_write_register(ILI9225_PARTIAL_DRIVING_POS1,
  4007e8:	21db      	movs	r1, #219	; 0xdb
  4007ea:	2034      	movs	r0, #52	; 0x34
  4007ec:	47a0      	blx	r4
	ili9225_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000);
  4007ee:	4629      	mov	r1, r5
  4007f0:	2035      	movs	r0, #53	; 0x35
  4007f2:	47a0      	blx	r4
	ili9225_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,
  4007f4:	21b0      	movs	r1, #176	; 0xb0
  4007f6:	2036      	movs	r0, #54	; 0x36
  4007f8:	47a0      	blx	r4
	ili9225_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000);
  4007fa:	4629      	mov	r1, r5
  4007fc:	2037      	movs	r0, #55	; 0x37
  4007fe:	47a0      	blx	r4
	ili9225_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,
  400800:	21dc      	movs	r1, #220	; 0xdc
  400802:	2038      	movs	r0, #56	; 0x38
  400804:	47a0      	blx	r4
	ili9225_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000);
  400806:	4629      	mov	r1, r5
  400808:	2039      	movs	r0, #57	; 0x39
  40080a:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL1, 0x0000);
  40080c:	4629      	mov	r1, r5
  40080e:	2050      	movs	r0, #80	; 0x50
  400810:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL2, ILI9225_GAMMA_CTRL2_KP3(0x06) |
  400812:	f240 610a 	movw	r1, #1546	; 0x60a
  400816:	2051      	movs	r0, #81	; 0x51
  400818:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL3, ILI9225_GAMMA_CTRL3_KP5(0x0D) |
  40081a:	f640 510a 	movw	r1, #3338	; 0xd0a
  40081e:	2052      	movs	r0, #82	; 0x52
  400820:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL4, ILI9225_GAMMA_CTRL4_RP1(0x03) |
  400822:	f240 3103 	movw	r1, #771	; 0x303
  400826:	2053      	movs	r0, #83	; 0x53
  400828:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL5, ILI9225_GAMMA_CTRL5_KN1(0x0A) |
  40082a:	f640 210d 	movw	r1, #2573	; 0xa0d
  40082e:	2054      	movs	r0, #84	; 0x54
  400830:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL6, ILI9225_GAMMA_CTRL6_KN3(0x0A) |
  400832:	f640 2106 	movw	r1, #2566	; 0xa06
  400836:	2055      	movs	r0, #85	; 0x55
  400838:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL7, 0x0000);
  40083a:	4629      	mov	r1, r5
  40083c:	2056      	movs	r0, #86	; 0x56
  40083e:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL8, ILI9225_GAMMA_CTRL8_RN1(0x03) |
  400840:	f240 3103 	movw	r1, #771	; 0x303
  400844:	2057      	movs	r0, #87	; 0x57
  400846:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL9, 0x0000);
  400848:	4629      	mov	r1, r5
  40084a:	2058      	movs	r0, #88	; 0x58
  40084c:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL10, 0x0000);
  40084e:	4629      	mov	r1, r5
  400850:	2059      	movs	r0, #89	; 0x59
  400852:	47a0      	blx	r4
	ili9225_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  400854:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400858:	f8d9 2000 	ldr.w	r2, [r9]
  40085c:	4629      	mov	r1, r5
  40085e:	4628      	mov	r0, r5
  400860:	4c10      	ldr	r4, [pc, #64]	; (4008a4 <ili9225_init+0x1b8>)
  400862:	47a0      	blx	r4
	ili9225_set_foreground_color(p_opt->foreground_color);
  400864:	f8d9 0008 	ldr.w	r0, [r9, #8]
  400868:	4b0f      	ldr	r3, [pc, #60]	; (4008a8 <ili9225_init+0x1bc>)
  40086a:	4798      	blx	r3
	ili9225_set_cursor_position(0, 0);
  40086c:	4629      	mov	r1, r5
  40086e:	4628      	mov	r0, r5
  400870:	4b0e      	ldr	r3, [pc, #56]	; (4008ac <ili9225_init+0x1c0>)
  400872:	4798      	blx	r3
}
  400874:	4628      	mov	r0, r5
  400876:	b004      	add	sp, #16
  400878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40087c:	0040154b 	.word	0x0040154b
  400880:	004004c9 	.word	0x004004c9
  400884:	00401565 	.word	0x00401565
  400888:	40008000 	.word	0x40008000
  40088c:	e000e100 	.word	0xe000e100
  400890:	00400131 	.word	0x00400131
  400894:	00bebc20 	.word	0x00bebc20
  400898:	00400205 	.word	0x00400205
  40089c:	00400661 	.word	0x00400661
  4008a0:	004005bd 	.word	0x004005bd
  4008a4:	004006a1 	.word	0x004006a1
  4008a8:	00400671 	.word	0x00400671
  4008ac:	004006d5 	.word	0x004006d5
  4008b0:	00400185 	.word	0x00400185

004008b4 <ili9225_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9225_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9225_LCD_WIDTH) || (ul_y >= ILI9225_LCD_HEIGHT)) {
  4008b4:	28af      	cmp	r0, #175	; 0xaf
  4008b6:	d811      	bhi.n	4008dc <ili9225_draw_pixel+0x28>
  4008b8:	29db      	cmp	r1, #219	; 0xdb
  4008ba:	d901      	bls.n	4008c0 <ili9225_draw_pixel+0xc>
		return 1;
  4008bc:	2001      	movs	r0, #1
  4008be:	4770      	bx	lr
{
  4008c0:	b508      	push	{r3, lr}
	}

	/* Set cursor */
	ili9225_set_cursor_position(ul_x, ul_y);
  4008c2:	b289      	uxth	r1, r1
  4008c4:	b280      	uxth	r0, r0
  4008c6:	4b06      	ldr	r3, [pc, #24]	; (4008e0 <ili9225_draw_pixel+0x2c>)
  4008c8:	4798      	blx	r3
	ili9225_write_cmd(ILI9225_GRAM_DATA_REG);
  4008ca:	2022      	movs	r0, #34	; 0x22
  4008cc:	4b05      	ldr	r3, [pc, #20]	; (4008e4 <ili9225_draw_pixel+0x30>)
  4008ce:	4798      	blx	r3

	/* Prepare to write in GRAM */
	ili9225_write_ram_prepare();
	ili9225_write_ram(*g_ul_pixel_cache);
  4008d0:	4b05      	ldr	r3, [pc, #20]	; (4008e8 <ili9225_draw_pixel+0x34>)
  4008d2:	8818      	ldrh	r0, [r3, #0]
  4008d4:	4b05      	ldr	r3, [pc, #20]	; (4008ec <ili9225_draw_pixel+0x38>)
  4008d6:	4798      	blx	r3
	return 0;
  4008d8:	2000      	movs	r0, #0
  4008da:	bd08      	pop	{r3, pc}
		return 1;
  4008dc:	2001      	movs	r0, #1
  4008de:	4770      	bx	lr
  4008e0:	004006d5 	.word	0x004006d5
  4008e4:	00400549 	.word	0x00400549
  4008e8:	20000968 	.word	0x20000968
  4008ec:	0040058d 	.word	0x0040058d

004008f0 <ili9225_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9225_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  4008f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008f4:	b084      	sub	sp, #16
  4008f6:	9003      	str	r0, [sp, #12]
  4008f8:	9102      	str	r1, [sp, #8]
  4008fa:	9201      	str	r2, [sp, #4]
  4008fc:	aa04      	add	r2, sp, #16
  4008fe:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9225_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  400902:	4613      	mov	r3, r2
  400904:	aa01      	add	r2, sp, #4
  400906:	a902      	add	r1, sp, #8
  400908:	a803      	add	r0, sp, #12
  40090a:	4c21      	ldr	r4, [pc, #132]	; (400990 <ili9225_draw_filled_rectangle+0xa0>)
  40090c:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9225_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  40090e:	9803      	ldr	r0, [sp, #12]
  400910:	9902      	ldr	r1, [sp, #8]
  400912:	9b00      	ldr	r3, [sp, #0]
  400914:	3301      	adds	r3, #1
  400916:	9a01      	ldr	r2, [sp, #4]
  400918:	3201      	adds	r2, #1
  40091a:	1a5b      	subs	r3, r3, r1
  40091c:	1a12      	subs	r2, r2, r0
  40091e:	4c1d      	ldr	r4, [pc, #116]	; (400994 <ili9225_draw_filled_rectangle+0xa4>)
  400920:	47a0      	blx	r4

	/* Set cursor */
	ili9225_set_cursor_position(ul_x1, ul_y1);
  400922:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  400926:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40092a:	4b1b      	ldr	r3, [pc, #108]	; (400998 <ili9225_draw_filled_rectangle+0xa8>)
  40092c:	4798      	blx	r3
	ili9225_write_cmd(ILI9225_GRAM_DATA_REG);
  40092e:	2022      	movs	r0, #34	; 0x22
  400930:	4b1a      	ldr	r3, [pc, #104]	; (40099c <ili9225_draw_filled_rectangle+0xac>)
  400932:	4798      	blx	r3

	/* Prepare to write in GRAM */
	ili9225_write_ram_prepare();

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  400934:	9a03      	ldr	r2, [sp, #12]
  400936:	9b01      	ldr	r3, [sp, #4]
  400938:	1a9a      	subs	r2, r3, r2
  40093a:	9b00      	ldr	r3, [sp, #0]
  40093c:	f103 0801 	add.w	r8, r3, #1
  400940:	9b02      	ldr	r3, [sp, #8]
  400942:	eba8 0803 	sub.w	r8, r8, r3
  400946:	fb02 8808 	mla	r8, r2, r8, r8
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  40094a:	4b15      	ldr	r3, [pc, #84]	; (4009a0 <ili9225_draw_filled_rectangle+0xb0>)
  40094c:	fba3 2308 	umull	r2, r3, r3, r8
  400950:	09db      	lsrs	r3, r3, #7
	while (blocks--) {
  400952:	b153      	cbz	r3, 40096a <ili9225_draw_filled_rectangle+0x7a>
  400954:	1e5c      	subs	r4, r3, #1
		ili9225_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE);
  400956:	4f13      	ldr	r7, [pc, #76]	; (4009a4 <ili9225_draw_filled_rectangle+0xb4>)
  400958:	26b0      	movs	r6, #176	; 0xb0
  40095a:	4d13      	ldr	r5, [pc, #76]	; (4009a8 <ili9225_draw_filled_rectangle+0xb8>)
  40095c:	4631      	mov	r1, r6
  40095e:	4638      	mov	r0, r7
  400960:	47a8      	blx	r5
	while (blocks--) {
  400962:	3c01      	subs	r4, #1
  400964:	f1b4 3fff 	cmp.w	r4, #4294967295
  400968:	d1f8      	bne.n	40095c <ili9225_draw_filled_rectangle+0x6c>
	}
	/* Send remaining pixels */
	ili9225_write_ram_buffer(g_ul_pixel_cache, size % LCD_DATA_CACHE_SIZE);
  40096a:	490d      	ldr	r1, [pc, #52]	; (4009a0 <ili9225_draw_filled_rectangle+0xb0>)
  40096c:	fba1 3108 	umull	r3, r1, r1, r8
  400970:	09c9      	lsrs	r1, r1, #7
  400972:	24b0      	movs	r4, #176	; 0xb0
  400974:	fb04 8111 	mls	r1, r4, r1, r8
  400978:	480a      	ldr	r0, [pc, #40]	; (4009a4 <ili9225_draw_filled_rectangle+0xb4>)
  40097a:	4b0b      	ldr	r3, [pc, #44]	; (4009a8 <ili9225_draw_filled_rectangle+0xb8>)
  40097c:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9225_set_window(0, 0, ILI9225_LCD_WIDTH, ILI9225_LCD_HEIGHT);
  40097e:	23dc      	movs	r3, #220	; 0xdc
  400980:	4622      	mov	r2, r4
  400982:	2100      	movs	r1, #0
  400984:	4608      	mov	r0, r1
  400986:	4c03      	ldr	r4, [pc, #12]	; (400994 <ili9225_draw_filled_rectangle+0xa4>)
  400988:	47a0      	blx	r4
}
  40098a:	b004      	add	sp, #16
  40098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400990:	00400501 	.word	0x00400501
  400994:	004006a1 	.word	0x004006a1
  400998:	004006d5 	.word	0x004006d5
  40099c:	00400549 	.word	0x00400549
  4009a0:	ba2e8ba3 	.word	0xba2e8ba3
  4009a4:	20000968 	.word	0x20000968
  4009a8:	004005d5 	.word	0x004005d5

004009ac <ili9225_draw_circle>:
{
	int32_t   d;    /* Decision Variable */
	uint32_t  curX; /* Current X Value */
	uint32_t  curY; /* Current Y Value */

	if (ul_r == 0) {
  4009ac:	2a00      	cmp	r2, #0
  4009ae:	d049      	beq.n	400a44 <ili9225_draw_circle+0x98>
{
  4009b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009b4:	b083      	sub	sp, #12
  4009b6:	4680      	mov	r8, r0
  4009b8:	4689      	mov	r9, r1
  4009ba:	4616      	mov	r6, r2
		return 1;
	}

	d = 3 - (ul_r << 1);
  4009bc:	0057      	lsls	r7, r2, #1
  4009be:	f1c7 0703 	rsb	r7, r7, #3
	curX = 0;
  4009c2:	2500      	movs	r5, #0
	curY = ul_r;

	while (curX <= curY) {
		ili9225_draw_pixel(ul_x + curX, ul_y + curY);
  4009c4:	4c20      	ldr	r4, [pc, #128]	; (400a48 <ili9225_draw_circle+0x9c>)
  4009c6:	e005      	b.n	4009d4 <ili9225_draw_circle+0x28>
		ili9225_draw_pixel(ul_x + curY, ul_y - curX);
		ili9225_draw_pixel(ul_x - curY, ul_y + curX);
		ili9225_draw_pixel(ul_x - curY, ul_y - curX);

		if (d < 0) {
			d += (curX << 2) + 6;
  4009c8:	3706      	adds	r7, #6
  4009ca:	eb07 0785 	add.w	r7, r7, r5, lsl #2
		} else {
			d += ((curX - curY) << 2) + 10;
			curY--;
		}
		curX++;
  4009ce:	3501      	adds	r5, #1
	while (curX <= curY) {
  4009d0:	42ae      	cmp	r6, r5
  4009d2:	d333      	bcc.n	400a3c <ili9225_draw_circle+0x90>
		ili9225_draw_pixel(ul_x + curX, ul_y + curY);
  4009d4:	eb08 0305 	add.w	r3, r8, r5
  4009d8:	eb09 0b06 	add.w	fp, r9, r6
  4009dc:	4659      	mov	r1, fp
  4009de:	9301      	str	r3, [sp, #4]
  4009e0:	4618      	mov	r0, r3
  4009e2:	47a0      	blx	r4
		ili9225_draw_pixel(ul_x + curX, ul_y - curY);
  4009e4:	eba9 0a06 	sub.w	sl, r9, r6
  4009e8:	4651      	mov	r1, sl
  4009ea:	9801      	ldr	r0, [sp, #4]
  4009ec:	47a0      	blx	r4
		ili9225_draw_pixel(ul_x - curX, ul_y + curY);
  4009ee:	eba8 0305 	sub.w	r3, r8, r5
  4009f2:	4659      	mov	r1, fp
  4009f4:	469b      	mov	fp, r3
  4009f6:	4618      	mov	r0, r3
  4009f8:	47a0      	blx	r4
		ili9225_draw_pixel(ul_x - curX, ul_y - curY);
  4009fa:	4651      	mov	r1, sl
  4009fc:	4658      	mov	r0, fp
  4009fe:	47a0      	blx	r4
		ili9225_draw_pixel(ul_x + curY, ul_y + curX);
  400a00:	eb08 0306 	add.w	r3, r8, r6
  400a04:	eb09 0b05 	add.w	fp, r9, r5
  400a08:	4659      	mov	r1, fp
  400a0a:	9301      	str	r3, [sp, #4]
  400a0c:	4618      	mov	r0, r3
  400a0e:	47a0      	blx	r4
		ili9225_draw_pixel(ul_x + curY, ul_y - curX);
  400a10:	eba9 0a05 	sub.w	sl, r9, r5
  400a14:	4651      	mov	r1, sl
  400a16:	9801      	ldr	r0, [sp, #4]
  400a18:	47a0      	blx	r4
		ili9225_draw_pixel(ul_x - curY, ul_y + curX);
  400a1a:	eba8 0306 	sub.w	r3, r8, r6
  400a1e:	4659      	mov	r1, fp
  400a20:	469b      	mov	fp, r3
  400a22:	4618      	mov	r0, r3
  400a24:	47a0      	blx	r4
		ili9225_draw_pixel(ul_x - curY, ul_y - curX);
  400a26:	4651      	mov	r1, sl
  400a28:	4658      	mov	r0, fp
  400a2a:	47a0      	blx	r4
		if (d < 0) {
  400a2c:	2f00      	cmp	r7, #0
  400a2e:	dbcb      	blt.n	4009c8 <ili9225_draw_circle+0x1c>
			d += ((curX - curY) << 2) + 10;
  400a30:	1bab      	subs	r3, r5, r6
  400a32:	370a      	adds	r7, #10
  400a34:	eb07 0783 	add.w	r7, r7, r3, lsl #2
			curY--;
  400a38:	3e01      	subs	r6, #1
  400a3a:	e7c8      	b.n	4009ce <ili9225_draw_circle+0x22>
	}

	return 0;
  400a3c:	2000      	movs	r0, #0
}
  400a3e:	b003      	add	sp, #12
  400a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 1;
  400a44:	2001      	movs	r0, #1
  400a46:	4770      	bx	lr
  400a48:	004008b5 	.word	0x004008b5

00400a4c <ili9225_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9225_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  400a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a50:	b085      	sub	sp, #20
  400a52:	9003      	str	r0, [sp, #12]
  400a54:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400a56:	7813      	ldrb	r3, [r2, #0]
  400a58:	2b00      	cmp	r3, #0
  400a5a:	d048      	beq.n	400aee <ili9225_draw_string+0xa2>
  400a5c:	468b      	mov	fp, r1
  400a5e:	9001      	str	r0, [sp, #4]
				ili9225_draw_pixel(ul_x + col, ul_y + row);
  400a60:	f8df 8094 	ldr.w	r8, [pc, #148]	; 400af8 <ili9225_draw_string+0xac>
  400a64:	e033      	b.n	400ace <ili9225_draw_string+0x82>
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
			ul_y += gfont.height + 2;
  400a66:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  400a6a:	9b03      	ldr	r3, [sp, #12]
  400a6c:	9301      	str	r3, [sp, #4]
  400a6e:	e029      	b.n	400ac4 <ili9225_draw_string+0x78>
  400a70:	3c01      	subs	r4, #1
		for (row = 0; row < 8; row++) {
  400a72:	f1b4 3fff 	cmp.w	r4, #4294967295
  400a76:	d009      	beq.n	400a8c <ili9225_draw_string+0x40>
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  400a78:	782b      	ldrb	r3, [r5, #0]
  400a7a:	4123      	asrs	r3, r4
  400a7c:	f013 0f01 	tst.w	r3, #1
  400a80:	d0f6      	beq.n	400a70 <ili9225_draw_string+0x24>
				ili9225_draw_pixel(ul_x + col, ul_y + row);
  400a82:	ebaa 0104 	sub.w	r1, sl, r4
  400a86:	4630      	mov	r0, r6
  400a88:	47c0      	blx	r8
  400a8a:	e7f1      	b.n	400a70 <ili9225_draw_string+0x24>
		for (row = 0; row < 8; row++) {
  400a8c:	2407      	movs	r4, #7
				ili9225_draw_pixel(ul_x + col, ul_y + row + 8);
  400a8e:	f10b 090f 	add.w	r9, fp, #15
  400a92:	e002      	b.n	400a9a <ili9225_draw_string+0x4e>
  400a94:	3c01      	subs	r4, #1
		for (row = 0; row < 6; row++) {
  400a96:	2c01      	cmp	r4, #1
  400a98:	d009      	beq.n	400aae <ili9225_draw_string+0x62>
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  400a9a:	787b      	ldrb	r3, [r7, #1]
  400a9c:	4123      	asrs	r3, r4
  400a9e:	f013 0f01 	tst.w	r3, #1
  400aa2:	d0f7      	beq.n	400a94 <ili9225_draw_string+0x48>
				ili9225_draw_pixel(ul_x + col, ul_y + row + 8);
  400aa4:	eba9 0104 	sub.w	r1, r9, r4
  400aa8:	4630      	mov	r0, r6
  400aaa:	47c0      	blx	r8
  400aac:	e7f2      	b.n	400a94 <ili9225_draw_string+0x48>
  400aae:	3502      	adds	r5, #2
  400ab0:	3601      	adds	r6, #1
	for (col = 0; col < 10; col++) {
  400ab2:	9b00      	ldr	r3, [sp, #0]
  400ab4:	42b3      	cmp	r3, r6
  400ab6:	d002      	beq.n	400abe <ili9225_draw_string+0x72>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400ab8:	2407      	movs	r4, #7
  400aba:	462f      	mov	r7, r5
  400abc:	e7dc      	b.n	400a78 <ili9225_draw_string+0x2c>
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9225_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  400abe:	9b01      	ldr	r3, [sp, #4]
  400ac0:	330c      	adds	r3, #12
  400ac2:	9301      	str	r3, [sp, #4]
	while (*p_str != 0) {
  400ac4:	9a02      	ldr	r2, [sp, #8]
  400ac6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  400aca:	9202      	str	r2, [sp, #8]
  400acc:	b17b      	cbz	r3, 400aee <ili9225_draw_string+0xa2>
		if (*p_str == '\n') {
  400ace:	2b0a      	cmp	r3, #10
  400ad0:	d0c9      	beq.n	400a66 <ili9225_draw_string+0x1a>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400ad2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400ad6:	4d07      	ldr	r5, [pc, #28]	; (400af4 <ili9225_draw_string+0xa8>)
  400ad8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  400adc:	f5a3 7520 	sub.w	r5, r3, #640	; 0x280
  400ae0:	9e01      	ldr	r6, [sp, #4]
  400ae2:	4633      	mov	r3, r6
  400ae4:	330a      	adds	r3, #10
  400ae6:	9300      	str	r3, [sp, #0]
				ili9225_draw_pixel(ul_x + col, ul_y + row);
  400ae8:	f10b 0a07 	add.w	sl, fp, #7
  400aec:	e7e4      	b.n	400ab8 <ili9225_draw_string+0x6c>
		}
		p_str++;
	}
}
  400aee:	b005      	add	sp, #20
  400af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400af4:	00403a8c 	.word	0x00403a8c
  400af8:	004008b5 	.word	0x004008b5

00400afc <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  400afc:	b4f0      	push	{r4, r5, r6, r7}
  400afe:	b08c      	sub	sp, #48	; 0x30
  400b00:	4607      	mov	r7, r0
  400b02:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  400b04:	ac01      	add	r4, sp, #4
  400b06:	4d11      	ldr	r5, [pc, #68]	; (400b4c <pwm_clocks_generate+0x50>)
  400b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400b10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400b14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  400b18:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  400b1a:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400b1c:	f852 0b04 	ldr.w	r0, [r2], #4
  400b20:	fbb6 f0f0 	udiv	r0, r6, r0
  400b24:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400b28:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  400b2c:	d907      	bls.n	400b3e <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  400b2e:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  400b30:	2b0b      	cmp	r3, #11
  400b32:	d1f3      	bne.n	400b1c <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  400b34:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  400b38:	b00c      	add	sp, #48	; 0x30
  400b3a:	bcf0      	pop	{r4, r5, r6, r7}
  400b3c:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  400b3e:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  400b40:	bf94      	ite	ls
  400b42:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  400b46:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  400b4a:	e7f5      	b.n	400b38 <pwm_clocks_generate+0x3c>
  400b4c:	0040420c 	.word	0x0040420c

00400b50 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  400b50:	b570      	push	{r4, r5, r6, lr}
  400b52:	4606      	mov	r6, r0
  400b54:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  400b56:	680c      	ldr	r4, [r1, #0]
  400b58:	b144      	cbz	r4, 400b6c <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  400b5a:	6889      	ldr	r1, [r1, #8]
  400b5c:	4620      	mov	r0, r4
  400b5e:	4b0c      	ldr	r3, [pc, #48]	; (400b90 <pwm_init+0x40>)
  400b60:	4798      	blx	r3
  400b62:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  400b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400b68:	4298      	cmp	r0, r3
  400b6a:	d00c      	beq.n	400b86 <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  400b6c:	6868      	ldr	r0, [r5, #4]
  400b6e:	b140      	cbz	r0, 400b82 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  400b70:	68a9      	ldr	r1, [r5, #8]
  400b72:	4b07      	ldr	r3, [pc, #28]	; (400b90 <pwm_init+0x40>)
  400b74:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  400b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400b7a:	4298      	cmp	r0, r3
  400b7c:	d005      	beq.n	400b8a <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  400b7e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
  400b82:	6034      	str	r4, [r6, #0]
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
  400b84:	2400      	movs	r4, #0
}
  400b86:	4620      	mov	r0, r4
  400b88:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  400b8a:	4604      	mov	r4, r0
  400b8c:	e7fb      	b.n	400b86 <pwm_init+0x36>
  400b8e:	bf00      	nop
  400b90:	00400afd 	.word	0x00400afd

00400b94 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  400b94:	b410      	push	{r4}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  400b96:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400b98:	684b      	ldr	r3, [r1, #4]
  400b9a:	f003 030f 	and.w	r3, r3, #15
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  400b9e:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400ba0:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  400ba2:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400ba4:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
  400ba8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  400bac:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  400bb0:	68cb      	ldr	r3, [r1, #12]
  400bb2:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  400bb6:	690b      	ldr	r3, [r1, #16]
  400bb8:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  400bbc:	2000      	movs	r0, #0
  400bbe:	bc10      	pop	{r4}
  400bc0:	4770      	bx	lr

00400bc2 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  400bc2:	690b      	ldr	r3, [r1, #16]
  400bc4:	4293      	cmp	r3, r2
  400bc6:	d202      	bcs.n	400bce <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
  400bc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  400bcc:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
  400bce:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
  400bd0:	60ca      	str	r2, [r1, #12]
  400bd2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		uint32_t mode = p_pwm->PWM_CH_NUM[ch_num].PWM_CMR;
  400bd6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
		mode &= ~PWM_CMR_CPD;
  400bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;
  400bde:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
  400be2:	f8c0 2210 	str.w	r2, [r0, #528]	; 0x210
	return 0;
  400be6:	2000      	movs	r0, #0
  400be8:	4770      	bx	lr

00400bea <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  400bea:	2301      	movs	r3, #1
  400bec:	fa03 f101 	lsl.w	r1, r3, r1
  400bf0:	6041      	str	r1, [r0, #4]
  400bf2:	4770      	bx	lr

00400bf4 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  400bf4:	2301      	movs	r3, #1
  400bf6:	fa03 f101 	lsl.w	r1, r3, r1
  400bfa:	6081      	str	r1, [r0, #8]
  400bfc:	4770      	bx	lr

00400bfe <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400bfe:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400c00:	0189      	lsls	r1, r1, #6
  400c02:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400c04:	2402      	movs	r4, #2
  400c06:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400c08:	f04f 31ff 	mov.w	r1, #4294967295
  400c0c:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400c0e:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400c10:	605a      	str	r2, [r3, #4]
}
  400c12:	bc10      	pop	{r4}
  400c14:	4770      	bx	lr

00400c16 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400c16:	0189      	lsls	r1, r1, #6
  400c18:	2305      	movs	r3, #5
  400c1a:	5043      	str	r3, [r0, r1]
  400c1c:	4770      	bx	lr

00400c1e <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400c1e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400c22:	61ca      	str	r2, [r1, #28]
  400c24:	4770      	bx	lr

00400c26 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400c26:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400c2a:	624a      	str	r2, [r1, #36]	; 0x24
  400c2c:	4770      	bx	lr

00400c2e <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400c2e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400c32:	6a08      	ldr	r0, [r1, #32]
}
  400c34:	4770      	bx	lr

00400c36 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400c36:	b4f0      	push	{r4, r5, r6, r7}
  400c38:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c3a:	2402      	movs	r4, #2
  400c3c:	9401      	str	r4, [sp, #4]
  400c3e:	2408      	movs	r4, #8
  400c40:	9402      	str	r4, [sp, #8]
  400c42:	2420      	movs	r4, #32
  400c44:	9403      	str	r4, [sp, #12]
  400c46:	2480      	movs	r4, #128	; 0x80
  400c48:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400c4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400c4c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c4e:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400c50:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400c54:	d814      	bhi.n	400c80 <tc_find_mck_divisor+0x4a>
  400c56:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400c58:	42a0      	cmp	r0, r4
  400c5a:	d217      	bcs.n	400c8c <tc_find_mck_divisor+0x56>
  400c5c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400c5e:	af01      	add	r7, sp, #4
  400c60:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400c64:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400c68:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400c6a:	4284      	cmp	r4, r0
  400c6c:	d30a      	bcc.n	400c84 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400c6e:	4286      	cmp	r6, r0
  400c70:	d90d      	bls.n	400c8e <tc_find_mck_divisor+0x58>
			ul_index++) {
  400c72:	3501      	adds	r5, #1
	for (ul_index = 0;
  400c74:	2d05      	cmp	r5, #5
  400c76:	d1f3      	bne.n	400c60 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400c78:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400c7a:	b006      	add	sp, #24
  400c7c:	bcf0      	pop	{r4, r5, r6, r7}
  400c7e:	4770      	bx	lr
			return 0;
  400c80:	2000      	movs	r0, #0
  400c82:	e7fa      	b.n	400c7a <tc_find_mck_divisor+0x44>
  400c84:	2000      	movs	r0, #0
  400c86:	e7f8      	b.n	400c7a <tc_find_mck_divisor+0x44>
	return 1;
  400c88:	2001      	movs	r0, #1
  400c8a:	e7f6      	b.n	400c7a <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400c8c:	2500      	movs	r5, #0
	if (p_uldiv) {
  400c8e:	b12a      	cbz	r2, 400c9c <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400c90:	a906      	add	r1, sp, #24
  400c92:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400c96:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400c9a:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400c9c:	2b00      	cmp	r3, #0
  400c9e:	d0f3      	beq.n	400c88 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400ca0:	601d      	str	r5, [r3, #0]
	return 1;
  400ca2:	2001      	movs	r0, #1
  400ca4:	e7e9      	b.n	400c7a <tc_find_mck_divisor+0x44>

00400ca6 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400ca6:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400ca8:	23ac      	movs	r3, #172	; 0xac
  400caa:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400cac:	680b      	ldr	r3, [r1, #0]
  400cae:	684a      	ldr	r2, [r1, #4]
  400cb0:	fbb3 f3f2 	udiv	r3, r3, r2
  400cb4:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400cb6:	1e5c      	subs	r4, r3, #1
  400cb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400cbc:	4294      	cmp	r4, r2
  400cbe:	d80b      	bhi.n	400cd8 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  400cc0:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400cc2:	688b      	ldr	r3, [r1, #8]
  400cc4:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400cc6:	f240 2302 	movw	r3, #514	; 0x202
  400cca:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400cce:	2350      	movs	r3, #80	; 0x50
  400cd0:	6003      	str	r3, [r0, #0]

	return 0;
  400cd2:	2000      	movs	r0, #0
}
  400cd4:	bc10      	pop	{r4}
  400cd6:	4770      	bx	lr
		return 1;
  400cd8:	2001      	movs	r0, #1
  400cda:	e7fb      	b.n	400cd4 <uart_init+0x2e>

00400cdc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400cdc:	6943      	ldr	r3, [r0, #20]
  400cde:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400ce2:	bf1a      	itte	ne
  400ce4:	61c1      	strne	r1, [r0, #28]
	return 0;
  400ce6:	2000      	movne	r0, #0
		return 1;
  400ce8:	2001      	moveq	r0, #1
}
  400cea:	4770      	bx	lr

00400cec <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400cec:	6943      	ldr	r3, [r0, #20]
  400cee:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400cf2:	bf1d      	ittte	ne
  400cf4:	6983      	ldrne	r3, [r0, #24]
  400cf6:	700b      	strbne	r3, [r1, #0]
	return 0;
  400cf8:	2000      	movne	r0, #0
		return 1;
  400cfa:	2001      	moveq	r0, #1
}
  400cfc:	4770      	bx	lr
	...

00400d00 <vReadSensor>:

#include <asf.h>
#include "BeamBall.h"


void vReadSensor(void) {
  400d00:	b510      	push	{r4, lr}
	puts("Iniciando Leitura do Sensor\r\n");
  400d02:	4809      	ldr	r0, [pc, #36]	; (400d28 <vReadSensor+0x28>)
  400d04:	4b09      	ldr	r3, [pc, #36]	; (400d2c <vReadSensor+0x2c>)
  400d06:	4798      	blx	r3
	
	// clear timer
	tc_get_status(TC_SENSOR,CHANNEL_SENSOR);
  400d08:	2101      	movs	r1, #1
  400d0a:	4809      	ldr	r0, [pc, #36]	; (400d30 <vReadSensor+0x30>)
  400d0c:	4b09      	ldr	r3, [pc, #36]	; (400d34 <vReadSensor+0x34>)
  400d0e:	4798      	blx	r3
	vClearSensorCounter();
  400d10:	4b09      	ldr	r3, [pc, #36]	; (400d38 <vReadSensor+0x38>)
  400d12:	4798      	blx	r3
	
	gpio_pin_is_high(PIO_TRIGGER);
  400d14:	2017      	movs	r0, #23
  400d16:	4c09      	ldr	r4, [pc, #36]	; (400d3c <vReadSensor+0x3c>)
  400d18:	47a0      	blx	r4
	delay_us(10);
  400d1a:	2023      	movs	r0, #35	; 0x23
  400d1c:	4b08      	ldr	r3, [pc, #32]	; (400d40 <vReadSensor+0x40>)
  400d1e:	4798      	blx	r3
	gpio_pin_is_low(PIO_TRIGGER);
  400d20:	2017      	movs	r0, #23
  400d22:	47a0      	blx	r4
  400d24:	bd10      	pop	{r4, pc}
  400d26:	bf00      	nop
  400d28:	00404238 	.word	0x00404238
  400d2c:	004020cd 	.word	0x004020cd
  400d30:	40014000 	.word	0x40014000
  400d34:	00400c2f 	.word	0x00400c2f
  400d38:	00400e4d 	.word	0x00400e4d
  400d3c:	0040152f 	.word	0x0040152f
  400d40:	20000001 	.word	0x20000001

00400d44 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400d44:	b5f0      	push	{r4, r5, r6, r7, lr}
  400d46:	b083      	sub	sp, #12
  400d48:	4605      	mov	r5, r0
  400d4a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400d4c:	2300      	movs	r3, #0
  400d4e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400d50:	4b18      	ldr	r3, [pc, #96]	; (400db4 <usart_serial_getchar+0x70>)
  400d52:	4298      	cmp	r0, r3
  400d54:	d00a      	beq.n	400d6c <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400d56:	4b18      	ldr	r3, [pc, #96]	; (400db8 <usart_serial_getchar+0x74>)
  400d58:	4298      	cmp	r0, r3
  400d5a:	d00f      	beq.n	400d7c <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400d5c:	4b17      	ldr	r3, [pc, #92]	; (400dbc <usart_serial_getchar+0x78>)
  400d5e:	4298      	cmp	r0, r3
  400d60:	d014      	beq.n	400d8c <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400d62:	4b17      	ldr	r3, [pc, #92]	; (400dc0 <usart_serial_getchar+0x7c>)
  400d64:	429d      	cmp	r5, r3
  400d66:	d01b      	beq.n	400da0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400d68:	b003      	add	sp, #12
  400d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400d6c:	461f      	mov	r7, r3
  400d6e:	4e15      	ldr	r6, [pc, #84]	; (400dc4 <usart_serial_getchar+0x80>)
  400d70:	4621      	mov	r1, r4
  400d72:	4638      	mov	r0, r7
  400d74:	47b0      	blx	r6
  400d76:	2800      	cmp	r0, #0
  400d78:	d1fa      	bne.n	400d70 <usart_serial_getchar+0x2c>
  400d7a:	e7f2      	b.n	400d62 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400d7c:	461e      	mov	r6, r3
  400d7e:	4d11      	ldr	r5, [pc, #68]	; (400dc4 <usart_serial_getchar+0x80>)
  400d80:	4621      	mov	r1, r4
  400d82:	4630      	mov	r0, r6
  400d84:	47a8      	blx	r5
  400d86:	2800      	cmp	r0, #0
  400d88:	d1fa      	bne.n	400d80 <usart_serial_getchar+0x3c>
  400d8a:	e7ed      	b.n	400d68 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400d8c:	461e      	mov	r6, r3
  400d8e:	4d0e      	ldr	r5, [pc, #56]	; (400dc8 <usart_serial_getchar+0x84>)
  400d90:	a901      	add	r1, sp, #4
  400d92:	4630      	mov	r0, r6
  400d94:	47a8      	blx	r5
  400d96:	2800      	cmp	r0, #0
  400d98:	d1fa      	bne.n	400d90 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400d9a:	9b01      	ldr	r3, [sp, #4]
  400d9c:	7023      	strb	r3, [r4, #0]
  400d9e:	e7e3      	b.n	400d68 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400da0:	461e      	mov	r6, r3
  400da2:	4d09      	ldr	r5, [pc, #36]	; (400dc8 <usart_serial_getchar+0x84>)
  400da4:	a901      	add	r1, sp, #4
  400da6:	4630      	mov	r0, r6
  400da8:	47a8      	blx	r5
  400daa:	2800      	cmp	r0, #0
  400dac:	d1fa      	bne.n	400da4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400dae:	9b01      	ldr	r3, [sp, #4]
  400db0:	7023      	strb	r3, [r4, #0]
}
  400db2:	e7d9      	b.n	400d68 <usart_serial_getchar+0x24>
  400db4:	400e0600 	.word	0x400e0600
  400db8:	400e0800 	.word	0x400e0800
  400dbc:	40024000 	.word	0x40024000
  400dc0:	40028000 	.word	0x40028000
  400dc4:	00400ced 	.word	0x00400ced
  400dc8:	004003df 	.word	0x004003df

00400dcc <usart_serial_putchar>:
{
  400dcc:	b570      	push	{r4, r5, r6, lr}
  400dce:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400dd0:	4b18      	ldr	r3, [pc, #96]	; (400e34 <usart_serial_putchar+0x68>)
  400dd2:	4298      	cmp	r0, r3
  400dd4:	d00a      	beq.n	400dec <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400dd6:	4b18      	ldr	r3, [pc, #96]	; (400e38 <usart_serial_putchar+0x6c>)
  400dd8:	4298      	cmp	r0, r3
  400dda:	d010      	beq.n	400dfe <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400ddc:	4b17      	ldr	r3, [pc, #92]	; (400e3c <usart_serial_putchar+0x70>)
  400dde:	4298      	cmp	r0, r3
  400de0:	d016      	beq.n	400e10 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400de2:	4b17      	ldr	r3, [pc, #92]	; (400e40 <usart_serial_putchar+0x74>)
  400de4:	4298      	cmp	r0, r3
  400de6:	d01c      	beq.n	400e22 <usart_serial_putchar+0x56>
	return 0;
  400de8:	2000      	movs	r0, #0
}
  400dea:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400dec:	461e      	mov	r6, r3
  400dee:	4d15      	ldr	r5, [pc, #84]	; (400e44 <usart_serial_putchar+0x78>)
  400df0:	4621      	mov	r1, r4
  400df2:	4630      	mov	r0, r6
  400df4:	47a8      	blx	r5
  400df6:	2800      	cmp	r0, #0
  400df8:	d1fa      	bne.n	400df0 <usart_serial_putchar+0x24>
		return 1;
  400dfa:	2001      	movs	r0, #1
  400dfc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400dfe:	461e      	mov	r6, r3
  400e00:	4d10      	ldr	r5, [pc, #64]	; (400e44 <usart_serial_putchar+0x78>)
  400e02:	4621      	mov	r1, r4
  400e04:	4630      	mov	r0, r6
  400e06:	47a8      	blx	r5
  400e08:	2800      	cmp	r0, #0
  400e0a:	d1fa      	bne.n	400e02 <usart_serial_putchar+0x36>
		return 1;
  400e0c:	2001      	movs	r0, #1
  400e0e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400e10:	461e      	mov	r6, r3
  400e12:	4d0d      	ldr	r5, [pc, #52]	; (400e48 <usart_serial_putchar+0x7c>)
  400e14:	4621      	mov	r1, r4
  400e16:	4630      	mov	r0, r6
  400e18:	47a8      	blx	r5
  400e1a:	2800      	cmp	r0, #0
  400e1c:	d1fa      	bne.n	400e14 <usart_serial_putchar+0x48>
		return 1;
  400e1e:	2001      	movs	r0, #1
  400e20:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400e22:	461e      	mov	r6, r3
  400e24:	4d08      	ldr	r5, [pc, #32]	; (400e48 <usart_serial_putchar+0x7c>)
  400e26:	4621      	mov	r1, r4
  400e28:	4630      	mov	r0, r6
  400e2a:	47a8      	blx	r5
  400e2c:	2800      	cmp	r0, #0
  400e2e:	d1fa      	bne.n	400e26 <usart_serial_putchar+0x5a>
		return 1;
  400e30:	2001      	movs	r0, #1
  400e32:	bd70      	pop	{r4, r5, r6, pc}
  400e34:	400e0600 	.word	0x400e0600
  400e38:	400e0800 	.word	0x400e0800
  400e3c:	40024000 	.word	0x40024000
  400e40:	40028000 	.word	0x40028000
  400e44:	00400cdd 	.word	0x00400cdd
  400e48:	004003cb 	.word	0x004003cb

00400e4c <vClearSensorCounter>:
#include "BeamBall.h"

static int sensor_counter = 0;

void vClearSensorCounter() {
	sensor_counter = 0;
  400e4c:	2200      	movs	r2, #0
  400e4e:	4b01      	ldr	r3, [pc, #4]	; (400e54 <vClearSensorCounter+0x8>)
  400e50:	601a      	str	r2, [r3, #0]
  400e52:	4770      	bx	lr
  400e54:	20000ac8 	.word	0x20000ac8

00400e58 <vAddSensorCounter>:
int iGetSensorCounter() {
	return sensor_counter;
}

void vAddSensorCounter() {
	sensor_counter++;
  400e58:	4a02      	ldr	r2, [pc, #8]	; (400e64 <vAddSensorCounter+0xc>)
  400e5a:	6813      	ldr	r3, [r2, #0]
  400e5c:	3301      	adds	r3, #1
  400e5e:	6013      	str	r3, [r2, #0]
  400e60:	4770      	bx	lr
  400e62:	bf00      	nop
  400e64:	20000ac8 	.word	0x20000ac8

00400e68 <vConfigureUART>:
}


/* UART Configuration */

void vConfigureUART(void) {
  400e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e6c:	b084      	sub	sp, #16
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400e6e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400efc <vConfigureUART+0x94>
  400e72:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400e76:	4c16      	ldr	r4, [pc, #88]	; (400ed0 <vConfigureUART+0x68>)
  400e78:	6823      	ldr	r3, [r4, #0]
  400e7a:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400e7c:	68a3      	ldr	r3, [r4, #8]
  400e7e:	9303      	str	r3, [sp, #12]
  400e80:	2008      	movs	r0, #8
  400e82:	4f14      	ldr	r7, [pc, #80]	; (400ed4 <vConfigureUART+0x6c>)
  400e84:	47b8      	blx	r7
		uart_init((Uart*)p_usart, &uart_settings);
  400e86:	4d14      	ldr	r5, [pc, #80]	; (400ed8 <vConfigureUART+0x70>)
  400e88:	a901      	add	r1, sp, #4
  400e8a:	4628      	mov	r0, r5
  400e8c:	4e13      	ldr	r6, [pc, #76]	; (400edc <vConfigureUART+0x74>)
  400e8e:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400e90:	4b13      	ldr	r3, [pc, #76]	; (400ee0 <vConfigureUART+0x78>)
  400e92:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400e94:	4a13      	ldr	r2, [pc, #76]	; (400ee4 <vConfigureUART+0x7c>)
  400e96:	4b14      	ldr	r3, [pc, #80]	; (400ee8 <vConfigureUART+0x80>)
  400e98:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400e9a:	4a14      	ldr	r2, [pc, #80]	; (400eec <vConfigureUART+0x84>)
  400e9c:	4b14      	ldr	r3, [pc, #80]	; (400ef0 <vConfigureUART+0x88>)
  400e9e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400ea0:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400ea4:	6823      	ldr	r3, [r4, #0]
  400ea6:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400ea8:	68a3      	ldr	r3, [r4, #8]
  400eaa:	9303      	str	r3, [sp, #12]
  400eac:	2008      	movs	r0, #8
  400eae:	47b8      	blx	r7
		uart_init((Uart*)p_usart, &uart_settings);
  400eb0:	a901      	add	r1, sp, #4
  400eb2:	4628      	mov	r0, r5
  400eb4:	47b0      	blx	r6
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400eb6:	4d0f      	ldr	r5, [pc, #60]	; (400ef4 <vConfigureUART+0x8c>)
  400eb8:	682b      	ldr	r3, [r5, #0]
  400eba:	2100      	movs	r1, #0
  400ebc:	6898      	ldr	r0, [r3, #8]
  400ebe:	4c0e      	ldr	r4, [pc, #56]	; (400ef8 <vConfigureUART+0x90>)
  400ec0:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400ec2:	682b      	ldr	r3, [r5, #0]
  400ec4:	2100      	movs	r1, #0
  400ec6:	6858      	ldr	r0, [r3, #4]
  400ec8:	47a0      	blx	r4
	// define a porta serial para a UART e com a variavel definida acima
	usart_serial_init(CONF_UART, &usart_options);

	// define a saida generica para ser o uart
	stdio_serial_init((Usart *)CONF_UART, &usart_options);
}
  400eca:	b004      	add	sp, #16
  400ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ed0:	200000f4 	.word	0x200000f4
  400ed4:	0040195d 	.word	0x0040195d
  400ed8:	400e0600 	.word	0x400e0600
  400edc:	00400ca7 	.word	0x00400ca7
  400ee0:	20000b80 	.word	0x20000b80
  400ee4:	00400dcd 	.word	0x00400dcd
  400ee8:	20000b7c 	.word	0x20000b7c
  400eec:	00400d45 	.word	0x00400d45
  400ef0:	20000b78 	.word	0x20000b78
  400ef4:	20000108 	.word	0x20000108
  400ef8:	004020dd 	.word	0x004020dd
  400efc:	02dc6c00 	.word	0x02dc6c00

00400f00 <SPI_Handler>:


/* LCD Configuration */

void SPI_Handler(void) {
  400f00:	b508      	push	{r3, lr}
	ili9225_spi_handler();
  400f02:	4b01      	ldr	r3, [pc, #4]	; (400f08 <SPI_Handler+0x8>)
  400f04:	4798      	blx	r3
  400f06:	bd08      	pop	{r3, pc}
  400f08:	00400635 	.word	0x00400635

00400f0c <vConfigureLCD>:
}

void vConfigureLCD(void) {
  400f0c:	b510      	push	{r4, lr}
	/* Initialize display parameter */
	g_ili9225_display_opt.ul_width = ILI9225_LCD_WIDTH;
  400f0e:	4c09      	ldr	r4, [pc, #36]	; (400f34 <vConfigureLCD+0x28>)
  400f10:	23b0      	movs	r3, #176	; 0xb0
  400f12:	6023      	str	r3, [r4, #0]
	g_ili9225_display_opt.ul_height = ILI9225_LCD_HEIGHT;
  400f14:	23dc      	movs	r3, #220	; 0xdc
  400f16:	6063      	str	r3, [r4, #4]
	g_ili9225_display_opt.foreground_color = COLOR_BLACK;
  400f18:	2300      	movs	r3, #0
  400f1a:	60a3      	str	r3, [r4, #8]
	g_ili9225_display_opt.background_color = COLOR_WHITE;
  400f1c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  400f20:	60e3      	str	r3, [r4, #12]

	/* Switch off backlight */
	aat31xx_disable_backlight();
  400f22:	4b05      	ldr	r3, [pc, #20]	; (400f38 <vConfigureLCD+0x2c>)
  400f24:	4798      	blx	r3

	/* Initialize LCD */
	ili9225_init(&g_ili9225_display_opt);
  400f26:	4620      	mov	r0, r4
  400f28:	4b04      	ldr	r3, [pc, #16]	; (400f3c <vConfigureLCD+0x30>)
  400f2a:	4798      	blx	r3

	/* Set backlight level */
	aat31xx_set_backlight(AAT31XX_AVG_BACKLIGHT_LEVEL);
  400f2c:	2008      	movs	r0, #8
  400f2e:	4b04      	ldr	r3, [pc, #16]	; (400f40 <vConfigureLCD+0x34>)
  400f30:	4798      	blx	r3
  400f32:	bd10      	pop	{r4, pc}
  400f34:	20000b98 	.word	0x20000b98
  400f38:	004004a5 	.word	0x004004a5
  400f3c:	004006ed 	.word	0x004006ed
  400f40:	00400449 	.word	0x00400449

00400f44 <drawLCD>:
}

void drawLCD(void) {
  400f44:	b538      	push	{r3, r4, r5, lr}
	/* Draw filled rectangle with white color */
	ili9225_set_foreground_color(COLOR_WHITE);
  400f46:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  400f4a:	4c15      	ldr	r4, [pc, #84]	; (400fa0 <drawLCD+0x5c>)
  400f4c:	47a0      	blx	r4
	ili9225_draw_filled_rectangle(0, 0, ILI9225_LCD_WIDTH, ILI9225_LCD_HEIGHT);
  400f4e:	23dc      	movs	r3, #220	; 0xdc
  400f50:	22b0      	movs	r2, #176	; 0xb0
  400f52:	2100      	movs	r1, #0
  400f54:	4608      	mov	r0, r1
  400f56:	4d13      	ldr	r5, [pc, #76]	; (400fa4 <drawLCD+0x60>)
  400f58:	47a8      	blx	r5
	
	/* Turn on LCD */
	ili9225_display_on();
  400f5a:	4b13      	ldr	r3, [pc, #76]	; (400fa8 <drawLCD+0x64>)
  400f5c:	4798      	blx	r3
	ili9225_set_cursor_position(0,0);
  400f5e:	2100      	movs	r1, #0
  400f60:	4608      	mov	r0, r1
  400f62:	4b12      	ldr	r3, [pc, #72]	; (400fac <drawLCD+0x68>)
  400f64:	4798      	blx	r3
	
	/* Draw text and basic shapes on the LCD */
	ili9225_set_foreground_color(COLOR_BLUE);
  400f66:	20ff      	movs	r0, #255	; 0xff
  400f68:	47a0      	blx	r4
	ili9225_draw_string(10, 10, (uint8_t *)"Beam Ball");
  400f6a:	4a11      	ldr	r2, [pc, #68]	; (400fb0 <drawLCD+0x6c>)
  400f6c:	210a      	movs	r1, #10
  400f6e:	4608      	mov	r0, r1
  400f70:	4b10      	ldr	r3, [pc, #64]	; (400fb4 <drawLCD+0x70>)
  400f72:	4798      	blx	r3
	
	//ili9225_draw_line(0, 11, ILI9225_LCD_WIDTH, 12);

	/* Draw three circle with red, green and blue color */
	ili9225_set_foreground_color(COLOR_RED);
  400f74:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
  400f78:	47a0      	blx	r4
	ili9225_draw_circle(60, 80, 30);
  400f7a:	221e      	movs	r2, #30
  400f7c:	2150      	movs	r1, #80	; 0x50
  400f7e:	203c      	movs	r0, #60	; 0x3c
  400f80:	4d0d      	ldr	r5, [pc, #52]	; (400fb8 <drawLCD+0x74>)
  400f82:	47a8      	blx	r5
	ili9225_set_foreground_color(COLOR_GREEN);
  400f84:	f44f 407f 	mov.w	r0, #65280	; 0xff00
  400f88:	47a0      	blx	r4
	ili9225_draw_circle(60, 120, 30);
  400f8a:	221e      	movs	r2, #30
  400f8c:	2178      	movs	r1, #120	; 0x78
  400f8e:	203c      	movs	r0, #60	; 0x3c
  400f90:	47a8      	blx	r5
	ili9225_set_foreground_color(COLOR_BLUE);
  400f92:	20ff      	movs	r0, #255	; 0xff
  400f94:	47a0      	blx	r4
	ili9225_draw_circle(60, 160, 30);
  400f96:	221e      	movs	r2, #30
  400f98:	21a0      	movs	r1, #160	; 0xa0
  400f9a:	203c      	movs	r0, #60	; 0x3c
  400f9c:	47a8      	blx	r5
  400f9e:	bd38      	pop	{r3, r4, r5, pc}
  400fa0:	00400671 	.word	0x00400671
  400fa4:	004008f1 	.word	0x004008f1
  400fa8:	0040064d 	.word	0x0040064d
  400fac:	004006d5 	.word	0x004006d5
  400fb0:	00404274 	.word	0x00404274
  400fb4:	00400a4d 	.word	0x00400a4d
  400fb8:	004009ad 	.word	0x004009ad

00400fbc <TC0_Handler>:
}

/* Timer Configuration */

// Essa funcao forca outra leitura da malha de controle
void TC0_Handler(void) {
  400fbc:	b508      	push	{r3, lr}
	tc_get_status(TC,CHANNEL);
  400fbe:	2100      	movs	r1, #0
  400fc0:	4804      	ldr	r0, [pc, #16]	; (400fd4 <TC0_Handler+0x18>)
  400fc2:	4b05      	ldr	r3, [pc, #20]	; (400fd8 <TC0_Handler+0x1c>)
  400fc4:	4798      	blx	r3
	
	puts("Nova Leitura\r\n");
  400fc6:	4805      	ldr	r0, [pc, #20]	; (400fdc <TC0_Handler+0x20>)
  400fc8:	4b05      	ldr	r3, [pc, #20]	; (400fe0 <TC0_Handler+0x24>)
  400fca:	4798      	blx	r3
	
	vReadSensor();
  400fcc:	4b05      	ldr	r3, [pc, #20]	; (400fe4 <TC0_Handler+0x28>)
  400fce:	4798      	blx	r3
  400fd0:	bd08      	pop	{r3, pc}
  400fd2:	bf00      	nop
  400fd4:	40010000 	.word	0x40010000
  400fd8:	00400c2f 	.word	0x00400c2f
  400fdc:	00404258 	.word	0x00404258
  400fe0:	004020cd 	.word	0x004020cd
  400fe4:	00400d01 	.word	0x00400d01

00400fe8 <TC1_Handler>:
}

// Essa funcao executa o contador de tempo entre o start do sensor e a sua resposta
void TC1_Handler(void) {
  400fe8:	b508      	push	{r3, lr}
	tc_get_status(TC_SENSOR,CHANNEL_SENSOR);
  400fea:	2101      	movs	r1, #1
  400fec:	4804      	ldr	r0, [pc, #16]	; (401000 <TC1_Handler+0x18>)
  400fee:	4b05      	ldr	r3, [pc, #20]	; (401004 <TC1_Handler+0x1c>)
  400ff0:	4798      	blx	r3
	
	vAddSensorCounter();
  400ff2:	4b05      	ldr	r3, [pc, #20]	; (401008 <TC1_Handler+0x20>)
  400ff4:	4798      	blx	r3
	//char buffer[50];
	////int n = sprintf (buffer, "%d", iGetSensorCounter());
	//
	//ili9225_draw_string(10,165,(uint8_t *) "RC estourou");
	
	puts("Contando\r\n");
  400ff6:	4805      	ldr	r0, [pc, #20]	; (40100c <TC1_Handler+0x24>)
  400ff8:	4b05      	ldr	r3, [pc, #20]	; (401010 <TC1_Handler+0x28>)
  400ffa:	4798      	blx	r3
  400ffc:	bd08      	pop	{r3, pc}
  400ffe:	bf00      	nop
  401000:	40014000 	.word	0x40014000
  401004:	00400c2f 	.word	0x00400c2f
  401008:	00400e59 	.word	0x00400e59
  40100c:	00404268 	.word	0x00404268
  401010:	004020cd 	.word	0x004020cd

00401014 <vConfigureTimer>:
}

void vConfigureTimer() {
  401014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401018:	b085      	sub	sp, #20
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
	uint32_t RC;
	
	/* Configurando o timer da malha de controle */
	
	pmc_enable_periph_clk(ID_TC);
  40101a:	2017      	movs	r0, #23
  40101c:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 401110 <vConfigureTimer+0xfc>
  401020:	47d8      	blx	fp
	tc_find_mck_divisor(TC_FREQ,ul_sysclk,&ul_div,&ul_tcclk,ul_sysclk);
  401022:	4c30      	ldr	r4, [pc, #192]	; (4010e4 <vConfigureTimer+0xd0>)
  401024:	9400      	str	r4, [sp, #0]
  401026:	ab03      	add	r3, sp, #12
  401028:	aa02      	add	r2, sp, #8
  40102a:	4621      	mov	r1, r4
  40102c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401030:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 401114 <vConfigureTimer+0x100>
  401034:	47d0      	blx	sl
	tc_init(TC,CHANNEL,TC_CMR_CPCTRG|ul_tcclk);
  401036:	4e2c      	ldr	r6, [pc, #176]	; (4010e8 <vConfigureTimer+0xd4>)
  401038:	9a03      	ldr	r2, [sp, #12]
  40103a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40103e:	2100      	movs	r1, #0
  401040:	4630      	mov	r0, r6
  401042:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 401118 <vConfigureTimer+0x104>
  401046:	47c8      	blx	r9
	RC = (ul_sysclk/ul_div)/TC_FREQ;
  401048:	9a02      	ldr	r2, [sp, #8]
  40104a:	fbb4 f2f2 	udiv	r2, r4, r2
  40104e:	4b27      	ldr	r3, [pc, #156]	; (4010ec <vConfigureTimer+0xd8>)
  401050:	fba3 3202 	umull	r3, r2, r3, r2
    tc_write_rc(TC,CHANNEL,RC);
  401054:	0992      	lsrs	r2, r2, #6
  401056:	2100      	movs	r1, #0
  401058:	4630      	mov	r0, r6
  40105a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 40111c <vConfigureTimer+0x108>
  40105e:	47c0      	blx	r8
	tc_enable_interrupt(TC,CHANNEL,TC_IER_CPCS);
  401060:	2210      	movs	r2, #16
  401062:	2100      	movs	r1, #0
  401064:	4630      	mov	r0, r6
  401066:	4f22      	ldr	r7, [pc, #136]	; (4010f0 <vConfigureTimer+0xdc>)
  401068:	47b8      	blx	r7
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40106a:	4d22      	ldr	r5, [pc, #136]	; (4010f4 <vConfigureTimer+0xe0>)
  40106c:	2320      	movs	r3, #32
  40106e:	f885 3318 	strb.w	r3, [r5, #792]	; 0x318
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  401072:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  401076:	602b      	str	r3, [r5, #0]
	NVIC_SetPriority(TC_IRQn_SENSOR,TC_PRIORITY);
	NVIC_EnableIRQ(TC_IRQn);
    tc_start(TC,CHANNEL);
  401078:	2100      	movs	r1, #0
  40107a:	4630      	mov	r0, r6
  40107c:	4e1e      	ldr	r6, [pc, #120]	; (4010f8 <vConfigureTimer+0xe4>)
  40107e:	47b0      	blx	r6

	puts("Timer Configurado para 100ms\r\n");
  401080:	481e      	ldr	r0, [pc, #120]	; (4010fc <vConfigureTimer+0xe8>)
  401082:	4b1f      	ldr	r3, [pc, #124]	; (401100 <vConfigureTimer+0xec>)
  401084:	4798      	blx	r3
	
	
	/* Configurando o Timer do contador do Sensor */
	
	pmc_enable_periph_clk(ID_TC_SENSOR);
  401086:	2018      	movs	r0, #24
  401088:	47d8      	blx	fp
	tc_find_mck_divisor(TC_FREQ_SENSOR,ul_sysclk,&ul_div,&ul_tcclk,ul_sysclk);
  40108a:	9400      	str	r4, [sp, #0]
  40108c:	ab03      	add	r3, sp, #12
  40108e:	aa02      	add	r2, sp, #8
  401090:	4621      	mov	r1, r4
  401092:	481c      	ldr	r0, [pc, #112]	; (401104 <vConfigureTimer+0xf0>)
  401094:	47d0      	blx	sl
	tc_init(TC_SENSOR,CHANNEL_SENSOR,TC_CMR_CPCTRG|ul_tcclk);
  401096:	f8df a088 	ldr.w	sl, [pc, #136]	; 401120 <vConfigureTimer+0x10c>
  40109a:	9a03      	ldr	r2, [sp, #12]
  40109c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4010a0:	2101      	movs	r1, #1
  4010a2:	4650      	mov	r0, sl
  4010a4:	47c8      	blx	r9
	RC = (ul_sysclk/ul_div)/TC_FREQ_SENSOR;
  4010a6:	9a02      	ldr	r2, [sp, #8]
  4010a8:	fbb4 f2f2 	udiv	r2, r4, r2
  4010ac:	0952      	lsrs	r2, r2, #5
  4010ae:	4c16      	ldr	r4, [pc, #88]	; (401108 <vConfigureTimer+0xf4>)
  4010b0:	fba4 3202 	umull	r3, r2, r4, r2
    tc_write_rc(TC_SENSOR,CHANNEL_SENSOR,RC);
  4010b4:	09d2      	lsrs	r2, r2, #7
  4010b6:	2101      	movs	r1, #1
  4010b8:	4650      	mov	r0, sl
  4010ba:	47c0      	blx	r8
	
	//	TC_IER_CPCS = RC Compare
	tc_enable_interrupt(TC_SENSOR,CHANNEL_SENSOR,TC_IER_CPCS);
  4010bc:	2210      	movs	r2, #16
  4010be:	2101      	movs	r1, #1
  4010c0:	4650      	mov	r0, sl
  4010c2:	47b8      	blx	r7
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4010c4:	2350      	movs	r3, #80	; 0x50
  4010c6:	f885 3318 	strb.w	r3, [r5, #792]	; 0x318
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  4010ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4010ce:	602b      	str	r3, [r5, #0]
	NVIC_SetPriority(TC_IRQn_SENSOR,TC_SENSOR_PRIORITY);
	NVIC_EnableIRQ(TC_IRQn_SENSOR);
    tc_start(TC_SENSOR,CHANNEL_SENSOR);
  4010d0:	2101      	movs	r1, #1
  4010d2:	4650      	mov	r0, sl
  4010d4:	47b0      	blx	r6
	
	puts("Timer Configurado para 10us\r\n");
  4010d6:	480d      	ldr	r0, [pc, #52]	; (40110c <vConfigureTimer+0xf8>)
  4010d8:	4b09      	ldr	r3, [pc, #36]	; (401100 <vConfigureTimer+0xec>)
  4010da:	4798      	blx	r3
}
  4010dc:	b005      	add	sp, #20
  4010de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4010e2:	bf00      	nop
  4010e4:	02dc6c00 	.word	0x02dc6c00
  4010e8:	40010000 	.word	0x40010000
  4010ec:	10624dd3 	.word	0x10624dd3
  4010f0:	00400c27 	.word	0x00400c27
  4010f4:	e000e100 	.word	0xe000e100
  4010f8:	00400c17 	.word	0x00400c17
  4010fc:	004042e8 	.word	0x004042e8
  401100:	004020cd 	.word	0x004020cd
  401104:	000186a0 	.word	0x000186a0
  401108:	0a7c5ac5 	.word	0x0a7c5ac5
  40110c:	00404308 	.word	0x00404308
  401110:	0040195d 	.word	0x0040195d
  401114:	00400c37 	.word	0x00400c37
  401118:	00400bff 	.word	0x00400bff
  40111c:	00400c1f 	.word	0x00400c1f
  401120:	40014000 	.word	0x40014000

00401124 <vConfigureSensorISR>:

/* ISR Configuration */

void vConfigureSensorISR() {
  401124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401128:	b083      	sub	sp, #12
	puts("Configuracao Sensor ISR \r\n");
  40112a:	481e      	ldr	r0, [pc, #120]	; (4011a4 <vConfigureSensorISR+0x80>)
  40112c:	4e1e      	ldr	r6, [pc, #120]	; (4011a8 <vConfigureSensorISR+0x84>)
  40112e:	47b0      	blx	r6

	/* DEBUG -- ISR no Botao */
	
	// Comente as linhas de baixo para ativar a ISR pelo botao
	
	pio_set_input(PIOA, PIO_BUTTON_LEFT, PIO_PULLUP | PIO_DEBOUNCE);
  401130:	4c1e      	ldr	r4, [pc, #120]	; (4011ac <vConfigureSensorISR+0x88>)
  401132:	2209      	movs	r2, #9
  401134:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401138:	4620      	mov	r0, r4
  40113a:	f8df b084 	ldr.w	fp, [pc, #132]	; 4011c0 <vConfigureSensorISR+0x9c>
  40113e:	47d8      	blx	fp
	pio_handler_set(PIOA,ID_PIOA,PIO_BUTTON_LEFT,PIO_IT_RISE_EDGE,vButtonLeftISR);
  401140:	4b1b      	ldr	r3, [pc, #108]	; (4011b0 <vConfigureSensorISR+0x8c>)
  401142:	9300      	str	r3, [sp, #0]
  401144:	2370      	movs	r3, #112	; 0x70
  401146:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40114a:	210b      	movs	r1, #11
  40114c:	4620      	mov	r0, r4
  40114e:	f8df a074 	ldr.w	sl, [pc, #116]	; 4011c4 <vConfigureSensorISR+0xa0>
  401152:	47d0      	blx	sl
	pio_enable_interrupt(PIOA,PIO_BUTTON_LEFT);
  401154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401158:	4620      	mov	r0, r4
  40115a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4011c8 <vConfigureSensorISR+0xa4>
  40115e:	47c8      	blx	r9
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401160:	4d14      	ldr	r5, [pc, #80]	; (4011b4 <vConfigureSensorISR+0x90>)
  401162:	f04f 0860 	mov.w	r8, #96	; 0x60
  401166:	f885 830b 	strb.w	r8, [r5, #779]	; 0x30b
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  40116a:	f44f 6700 	mov.w	r7, #2048	; 0x800
  40116e:	602f      	str	r7, [r5, #0]
	NVIC_SetPriority(PIOA_IRQn, BUTTON_PRIORITY);
	NVIC_EnableIRQ(PIOA_IRQn);
	
	pio_set_input(PIOA, PIO_BUTTON_RIGTH, PIO_PULLUP | PIO_DEBOUNCE);
  401170:	2209      	movs	r2, #9
  401172:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401176:	4620      	mov	r0, r4
  401178:	47d8      	blx	fp
	pio_handler_set(PIOA,ID_PIOA,PIO_BUTTON_RIGTH,PIO_IT_RISE_EDGE,vButtonRightISR);
  40117a:	4b0f      	ldr	r3, [pc, #60]	; (4011b8 <vConfigureSensorISR+0x94>)
  40117c:	9300      	str	r3, [sp, #0]
  40117e:	2370      	movs	r3, #112	; 0x70
  401180:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401184:	210b      	movs	r1, #11
  401186:	4620      	mov	r0, r4
  401188:	47d0      	blx	sl
	pio_enable_interrupt(PIOA,PIO_BUTTON_RIGTH);
  40118a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40118e:	4620      	mov	r0, r4
  401190:	47c8      	blx	r9
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401192:	f885 830b 	strb.w	r8, [r5, #779]	; 0x30b
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  401196:	602f      	str	r7, [r5, #0]
	NVIC_SetPriority(PIOA_IRQn, BUTTON_PRIORITY);
	NVIC_EnableIRQ(PIOA_IRQn);
	
	
	puts("Fim Config Sensor ISR \r\n");
  401198:	4808      	ldr	r0, [pc, #32]	; (4011bc <vConfigureSensorISR+0x98>)
  40119a:	47b0      	blx	r6
}
  40119c:	b003      	add	sp, #12
  40119e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011a2:	bf00      	nop
  4011a4:	004042b0 	.word	0x004042b0
  4011a8:	004020cd 	.word	0x004020cd
  4011ac:	400e0e00 	.word	0x400e0e00
  4011b0:	00401265 	.word	0x00401265
  4011b4:	e000e100 	.word	0xe000e100
  4011b8:	0040129d 	.word	0x0040129d
  4011bc:	004042cc 	.word	0x004042cc
  4011c0:	0040149d 	.word	0x0040149d
  4011c4:	004017c9 	.word	0x004017c9
  4011c8:	00401523 	.word	0x00401523

004011cc <vConfigurePWM>:
	puts("Fim Button Right ISR \r\n");
}

/* PWM Configuration */

void vConfigurePWM() {
  4011cc:	b530      	push	{r4, r5, lr}
  4011ce:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
  4011d0:	201f      	movs	r0, #31
  4011d2:	4b12      	ldr	r3, [pc, #72]	; (40121c <vConfigurePWM+0x50>)
  4011d4:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL);
  4011d6:	4c12      	ldr	r4, [pc, #72]	; (401220 <vConfigurePWM+0x54>)
  4011d8:	2100      	movs	r1, #0
  4011da:	4620      	mov	r0, r4
  4011dc:	4b11      	ldr	r3, [pc, #68]	; (401224 <vConfigurePWM+0x58>)
  4011de:	4798      	blx	r3
	pwm_clock_t clock_setting = {
  4011e0:	f241 3388 	movw	r3, #5000	; 0x1388
  4011e4:	9301      	str	r3, [sp, #4]
  4011e6:	2500      	movs	r5, #0
  4011e8:	9502      	str	r5, [sp, #8]
  4011ea:	4b0f      	ldr	r3, [pc, #60]	; (401228 <vConfigurePWM+0x5c>)
  4011ec:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};

	pwm_init(PWM, &clock_setting);
  4011ee:	a901      	add	r1, sp, #4
  4011f0:	4620      	mov	r0, r4
  4011f2:	4b0e      	ldr	r3, [pc, #56]	; (40122c <vConfigurePWM+0x60>)
  4011f4:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  4011f6:	490e      	ldr	r1, [pc, #56]	; (401230 <vConfigurePWM+0x64>)
  4011f8:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  4011fa:	2301      	movs	r3, #1
  4011fc:	728b      	strb	r3, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  4011fe:	220b      	movs	r2, #11
  401200:	604a      	str	r2, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  401202:	2264      	movs	r2, #100	; 0x64
  401204:	610a      	str	r2, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = MIN_DUTY_VALUE;
  401206:	60cb      	str	r3, [r1, #12]
	g_pwm_channel_led.channel = PWM_CHANNEL;
  401208:	600d      	str	r5, [r1, #0]

	pwm_channel_init(PWM, &g_pwm_channel_led);
  40120a:	4620      	mov	r0, r4
  40120c:	4b09      	ldr	r3, [pc, #36]	; (401234 <vConfigurePWM+0x68>)
  40120e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(PWM_IRQn);
	NVIC_SetPriority(PWM_IRQn, PWM_PRIORITY);
	NVIC_EnableIRQ(PWM_IRQn);
	*/

	pwm_channel_enable(PWM, PWM_CHANNEL);
  401210:	4629      	mov	r1, r5
  401212:	4620      	mov	r0, r4
  401214:	4b08      	ldr	r3, [pc, #32]	; (401238 <vConfigurePWM+0x6c>)
  401216:	4798      	blx	r3
}
  401218:	b005      	add	sp, #20
  40121a:	bd30      	pop	{r4, r5, pc}
  40121c:	0040195d 	.word	0x0040195d
  401220:	40020000 	.word	0x40020000
  401224:	00400bf5 	.word	0x00400bf5
  401228:	02dc6c00 	.word	0x02dc6c00
  40122c:	00400b51 	.word	0x00400b51
  401230:	20000b84 	.word	0x20000b84
  401234:	00400b95 	.word	0x00400b95
  401238:	00400beb 	.word	0x00400beb

0040123c <vPWMUpdateDuty>:

void vPWMUpdateDuty (double duty) {
  40123c:	b510      	push	{r4, lr}
	g_pwm_channel_led.channel = PWM_CHANNEL;
  40123e:	4c05      	ldr	r4, [pc, #20]	; (401254 <vPWMUpdateDuty+0x18>)
  401240:	2300      	movs	r3, #0
  401242:	6023      	str	r3, [r4, #0]
	pwm_channel_update_duty(PWM, &g_pwm_channel_led, duty);
  401244:	4b04      	ldr	r3, [pc, #16]	; (401258 <vPWMUpdateDuty+0x1c>)
  401246:	4798      	blx	r3
  401248:	4602      	mov	r2, r0
  40124a:	4621      	mov	r1, r4
  40124c:	4803      	ldr	r0, [pc, #12]	; (40125c <vPWMUpdateDuty+0x20>)
  40124e:	4b04      	ldr	r3, [pc, #16]	; (401260 <vPWMUpdateDuty+0x24>)
  401250:	4798      	blx	r3
  401252:	bd10      	pop	{r4, pc}
  401254:	20000b84 	.word	0x20000b84
  401258:	00401f39 	.word	0x00401f39
  40125c:	40020000 	.word	0x40020000
  401260:	00400bc3 	.word	0x00400bc3

00401264 <vButtonLeftISR>:
void vButtonLeftISR(const uint32_t id, const uint32_t index) {
  401264:	b508      	push	{r3, lr}
	if (btn_duty < MAX_DUTY_VALUE) btn_duty++;
  401266:	4b08      	ldr	r3, [pc, #32]	; (401288 <vButtonLeftISR+0x24>)
  401268:	681b      	ldr	r3, [r3, #0]
  40126a:	2b08      	cmp	r3, #8
  40126c:	d802      	bhi.n	401274 <vButtonLeftISR+0x10>
  40126e:	3301      	adds	r3, #1
  401270:	4a05      	ldr	r2, [pc, #20]	; (401288 <vButtonLeftISR+0x24>)
  401272:	6013      	str	r3, [r2, #0]
	vPWMUpdateDuty(btn_duty);
  401274:	4b04      	ldr	r3, [pc, #16]	; (401288 <vButtonLeftISR+0x24>)
  401276:	6818      	ldr	r0, [r3, #0]
  401278:	4b04      	ldr	r3, [pc, #16]	; (40128c <vButtonLeftISR+0x28>)
  40127a:	4798      	blx	r3
  40127c:	4b04      	ldr	r3, [pc, #16]	; (401290 <vButtonLeftISR+0x2c>)
  40127e:	4798      	blx	r3
	puts("Fim Button Left ISR \r\n");
  401280:	4804      	ldr	r0, [pc, #16]	; (401294 <vButtonLeftISR+0x30>)
  401282:	4b05      	ldr	r3, [pc, #20]	; (401298 <vButtonLeftISR+0x34>)
  401284:	4798      	blx	r3
  401286:	bd08      	pop	{r3, pc}
  401288:	200000f0 	.word	0x200000f0
  40128c:	00401e4d 	.word	0x00401e4d
  401290:	0040123d 	.word	0x0040123d
  401294:	00404280 	.word	0x00404280
  401298:	004020cd 	.word	0x004020cd

0040129c <vButtonRightISR>:
void vButtonRightISR(const uint32_t id, const uint32_t index) {
  40129c:	b508      	push	{r3, lr}
	if (btn_duty > MIN_DUTY_VALUE) btn_duty--;
  40129e:	4b08      	ldr	r3, [pc, #32]	; (4012c0 <vButtonRightISR+0x24>)
  4012a0:	681b      	ldr	r3, [r3, #0]
  4012a2:	2b01      	cmp	r3, #1
  4012a4:	d902      	bls.n	4012ac <vButtonRightISR+0x10>
  4012a6:	3b01      	subs	r3, #1
  4012a8:	4a05      	ldr	r2, [pc, #20]	; (4012c0 <vButtonRightISR+0x24>)
  4012aa:	6013      	str	r3, [r2, #0]
	vPWMUpdateDuty(btn_duty);
  4012ac:	4b04      	ldr	r3, [pc, #16]	; (4012c0 <vButtonRightISR+0x24>)
  4012ae:	6818      	ldr	r0, [r3, #0]
  4012b0:	4b04      	ldr	r3, [pc, #16]	; (4012c4 <vButtonRightISR+0x28>)
  4012b2:	4798      	blx	r3
  4012b4:	4b04      	ldr	r3, [pc, #16]	; (4012c8 <vButtonRightISR+0x2c>)
  4012b6:	4798      	blx	r3
	puts("Fim Button Right ISR \r\n");
  4012b8:	4804      	ldr	r0, [pc, #16]	; (4012cc <vButtonRightISR+0x30>)
  4012ba:	4b05      	ldr	r3, [pc, #20]	; (4012d0 <vButtonRightISR+0x34>)
  4012bc:	4798      	blx	r3
  4012be:	bd08      	pop	{r3, pc}
  4012c0:	200000f0 	.word	0x200000f0
  4012c4:	00401e4d 	.word	0x00401e4d
  4012c8:	0040123d 	.word	0x0040123d
  4012cc:	00404298 	.word	0x00404298
  4012d0:	004020cd 	.word	0x004020cd

004012d4 <sysclk_init>:
{
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4012d4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4012d6:	480e      	ldr	r0, [pc, #56]	; (401310 <sysclk_init+0x3c>)
  4012d8:	4b0e      	ldr	r3, [pc, #56]	; (401314 <sysclk_init+0x40>)
  4012da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4012dc:	213e      	movs	r1, #62	; 0x3e
  4012de:	2000      	movs	r0, #0
  4012e0:	4b0d      	ldr	r3, [pc, #52]	; (401318 <sysclk_init+0x44>)
  4012e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4012e4:	4c0d      	ldr	r4, [pc, #52]	; (40131c <sysclk_init+0x48>)
  4012e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4012e8:	2800      	cmp	r0, #0
  4012ea:	d0fc      	beq.n	4012e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4012ec:	4b0c      	ldr	r3, [pc, #48]	; (401320 <sysclk_init+0x4c>)
  4012ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4012f0:	4a0c      	ldr	r2, [pc, #48]	; (401324 <sysclk_init+0x50>)
  4012f2:	4b0d      	ldr	r3, [pc, #52]	; (401328 <sysclk_init+0x54>)
  4012f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4012f6:	4c0d      	ldr	r4, [pc, #52]	; (40132c <sysclk_init+0x58>)
  4012f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4012fa:	2800      	cmp	r0, #0
  4012fc:	d0fc      	beq.n	4012f8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4012fe:	2010      	movs	r0, #16
  401300:	4b0b      	ldr	r3, [pc, #44]	; (401330 <sysclk_init+0x5c>)
  401302:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401304:	4b0b      	ldr	r3, [pc, #44]	; (401334 <sysclk_init+0x60>)
  401306:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401308:	4801      	ldr	r0, [pc, #4]	; (401310 <sysclk_init+0x3c>)
  40130a:	4b02      	ldr	r3, [pc, #8]	; (401314 <sysclk_init+0x40>)
  40130c:	4798      	blx	r3
  40130e:	bd10      	pop	{r4, pc}
  401310:	02dc6c00 	.word	0x02dc6c00
  401314:	200000ad 	.word	0x200000ad
  401318:	004018d9 	.word	0x004018d9
  40131c:	0040192d 	.word	0x0040192d
  401320:	0040193d 	.word	0x0040193d
  401324:	20073f01 	.word	0x20073f01
  401328:	400e0400 	.word	0x400e0400
  40132c:	0040194d 	.word	0x0040194d
  401330:	00401875 	.word	0x00401875
  401334:	00401a25 	.word	0x00401a25

00401338 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  401338:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40133a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40133e:	4b2c      	ldr	r3, [pc, #176]	; (4013f0 <board_init+0xb8>)
  401340:	605a      	str	r2, [r3, #4]
  401342:	200b      	movs	r0, #11
  401344:	4c2b      	ldr	r4, [pc, #172]	; (4013f4 <board_init+0xbc>)
  401346:	47a0      	blx	r4
  401348:	200c      	movs	r0, #12
  40134a:	47a0      	blx	r4
  40134c:	200d      	movs	r0, #13
  40134e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  401350:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401354:	2017      	movs	r0, #23
  401356:	4c28      	ldr	r4, [pc, #160]	; (4013f8 <board_init+0xc0>)
  401358:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40135a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40135e:	202e      	movs	r0, #46	; 0x2e
  401360:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  401362:	4926      	ldr	r1, [pc, #152]	; (4013fc <board_init+0xc4>)
  401364:	200f      	movs	r0, #15
  401366:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  401368:	4925      	ldr	r1, [pc, #148]	; (401400 <board_init+0xc8>)
  40136a:	2010      	movs	r0, #16
  40136c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40136e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401372:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  401376:	4823      	ldr	r0, [pc, #140]	; (401404 <board_init+0xcc>)
  401378:	4b23      	ldr	r3, [pc, #140]	; (401408 <board_init+0xd0>)
  40137a:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  40137c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401380:	2000      	movs	r0, #0
  401382:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  401384:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401388:	2008      	movs	r0, #8
  40138a:	47a0      	blx	r4
		gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#if (defined CONF_BOARD_SPI) || (defined CONF_BOARD_SD_MMC_SPI)
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  40138c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401390:	200c      	movs	r0, #12
  401392:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  401394:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401398:	200d      	movs	r0, #13
  40139a:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  40139c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013a0:	200e      	movs	r0, #14
  4013a2:	47a0      	blx	r4

	#ifdef CONF_BOARD_SPI_NPCS1
		#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
		#else
			gpio_configure_pin(SPI_NPCS1_PA31_GPIO, SPI_NPCS1_PA31_FLAGS);
  4013a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013a8:	201f      	movs	r0, #31
  4013aa:	47a0      	blx	r4

	#ifdef CONF_BOARD_SPI_NPCS2
		#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
		#else
			gpio_configure_pin(SPI_NPCS2_PA30_GPIO, SPI_NPCS2_PA30_FLAGS);
  4013ac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013b0:	201e      	movs	r0, #30
  4013b2:	47a0      	blx	r4
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#ifdef CONF_BOARD_ILI9225
	/* Configure SPI LCD control pin */
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4013b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013b8:	200c      	movs	r0, #12
  4013ba:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4013bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013c0:	200d      	movs	r0, #13
  4013c2:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4013c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013c8:	200e      	movs	r0, #14
  4013ca:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS2_PA30_GPIO, SPI_NPCS2_PA30_FLAGS);
  4013cc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013d0:	201e      	movs	r0, #30
  4013d2:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ILI9225_RS_GPIO, BOARD_ILI9225_RS_FLAGS);
  4013d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4013d8:	201c      	movs	r0, #28
  4013da:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ILI9225_RSTN_GPIO, BOARD_ILI9225_RSTN_FLAGS);
  4013dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4013e0:	201d      	movs	r0, #29
  4013e2:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3193
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  4013e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4013e8:	204d      	movs	r0, #77	; 0x4d
  4013ea:	47a0      	blx	r4
  4013ec:	bd10      	pop	{r4, pc}
  4013ee:	bf00      	nop
  4013f0:	400e1450 	.word	0x400e1450
  4013f4:	0040195d 	.word	0x0040195d
  4013f8:	00401581 	.word	0x00401581
  4013fc:	28000079 	.word	0x28000079
  401400:	28000059 	.word	0x28000059
  401404:	400e0e00 	.word	0x400e0e00
  401408:	004016a1 	.word	0x004016a1

0040140c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40140c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40140e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401412:	d039      	beq.n	401488 <pio_set_peripheral+0x7c>
  401414:	d813      	bhi.n	40143e <pio_set_peripheral+0x32>
  401416:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40141a:	d025      	beq.n	401468 <pio_set_peripheral+0x5c>
  40141c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401420:	d10a      	bne.n	401438 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401422:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401424:	4313      	orrs	r3, r2
  401426:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401428:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40142a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40142c:	400b      	ands	r3, r1
  40142e:	ea23 0302 	bic.w	r3, r3, r2
  401432:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401434:	6042      	str	r2, [r0, #4]
  401436:	4770      	bx	lr
	switch (ul_type) {
  401438:	2900      	cmp	r1, #0
  40143a:	d1fb      	bne.n	401434 <pio_set_peripheral+0x28>
  40143c:	4770      	bx	lr
  40143e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401442:	d020      	beq.n	401486 <pio_set_peripheral+0x7a>
  401444:	d809      	bhi.n	40145a <pio_set_peripheral+0x4e>
  401446:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40144a:	d1f3      	bne.n	401434 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40144c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40144e:	4313      	orrs	r3, r2
  401450:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401452:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401454:	4313      	orrs	r3, r2
  401456:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401458:	e7ec      	b.n	401434 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40145a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40145e:	d012      	beq.n	401486 <pio_set_peripheral+0x7a>
  401460:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401464:	d00f      	beq.n	401486 <pio_set_peripheral+0x7a>
  401466:	e7e5      	b.n	401434 <pio_set_peripheral+0x28>
{
  401468:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40146a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40146c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40146e:	43d3      	mvns	r3, r2
  401470:	4021      	ands	r1, r4
  401472:	461c      	mov	r4, r3
  401474:	4019      	ands	r1, r3
  401476:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401478:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40147a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40147c:	400b      	ands	r3, r1
  40147e:	4023      	ands	r3, r4
  401480:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401482:	6042      	str	r2, [r0, #4]
}
  401484:	bc10      	pop	{r4}
  401486:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401488:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40148a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40148c:	400b      	ands	r3, r1
  40148e:	ea23 0302 	bic.w	r3, r3, r2
  401492:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401494:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401496:	4313      	orrs	r3, r2
  401498:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40149a:	e7cb      	b.n	401434 <pio_set_peripheral+0x28>

0040149c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40149c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40149e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4014a2:	bf14      	ite	ne
  4014a4:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4014a6:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4014a8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4014ac:	bf14      	ite	ne
  4014ae:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  4014b0:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  4014b2:	f012 0f02 	tst.w	r2, #2
  4014b6:	d107      	bne.n	4014c8 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4014b8:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4014bc:	bf18      	it	ne
  4014be:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  4014c2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4014c4:	6001      	str	r1, [r0, #0]
  4014c6:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  4014c8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4014cc:	e7f9      	b.n	4014c2 <pio_set_input+0x26>

004014ce <pio_set_output>:
{
  4014ce:	b410      	push	{r4}
  4014d0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4014d2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4014d4:	b944      	cbnz	r4, 4014e8 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  4014d6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4014d8:	b143      	cbz	r3, 4014ec <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  4014da:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4014dc:	b942      	cbnz	r2, 4014f0 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  4014de:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4014e0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4014e2:	6001      	str	r1, [r0, #0]
}
  4014e4:	bc10      	pop	{r4}
  4014e6:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4014e8:	6641      	str	r1, [r0, #100]	; 0x64
  4014ea:	e7f5      	b.n	4014d8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4014ec:	6541      	str	r1, [r0, #84]	; 0x54
  4014ee:	e7f5      	b.n	4014dc <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4014f0:	6301      	str	r1, [r0, #48]	; 0x30
  4014f2:	e7f5      	b.n	4014e0 <pio_set_output+0x12>

004014f4 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4014f4:	f012 0f10 	tst.w	r2, #16
  4014f8:	d010      	beq.n	40151c <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  4014fa:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4014fe:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  401502:	bf14      	ite	ne
  401504:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  401508:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  40150c:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  401510:	bf14      	ite	ne
  401512:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  401516:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  40151a:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  40151c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  401520:	4770      	bx	lr

00401522 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  401522:	6401      	str	r1, [r0, #64]	; 0x40
  401524:	4770      	bx	lr

00401526 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401526:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401528:	4770      	bx	lr

0040152a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40152a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40152c:	4770      	bx	lr

0040152e <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40152e:	0943      	lsrs	r3, r0, #5
  401530:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401534:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401538:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  40153a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40153c:	f000 001f 	and.w	r0, r0, #31
  401540:	fa23 f000 	lsr.w	r0, r3, r0
}
  401544:	f000 0001 	and.w	r0, r0, #1
  401548:	4770      	bx	lr

0040154a <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40154a:	0943      	lsrs	r3, r0, #5
  40154c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401550:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401554:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  401556:	f000 001f 	and.w	r0, r0, #31
  40155a:	2201      	movs	r2, #1
  40155c:	fa02 f000 	lsl.w	r0, r2, r0
  401560:	6318      	str	r0, [r3, #48]	; 0x30
  401562:	4770      	bx	lr

00401564 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401564:	0943      	lsrs	r3, r0, #5
  401566:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40156a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40156e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401570:	f000 001f 	and.w	r0, r0, #31
  401574:	2201      	movs	r2, #1
  401576:	fa02 f000 	lsl.w	r0, r2, r0
  40157a:	6358      	str	r0, [r3, #52]	; 0x34
  40157c:	4770      	bx	lr
	...

00401580 <pio_configure_pin>:
{
  401580:	b570      	push	{r4, r5, r6, lr}
  401582:	b082      	sub	sp, #8
  401584:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401586:	0943      	lsrs	r3, r0, #5
  401588:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40158c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401590:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401592:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40159a:	d053      	beq.n	401644 <pio_configure_pin+0xc4>
  40159c:	d80a      	bhi.n	4015b4 <pio_configure_pin+0x34>
  40159e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4015a2:	d02d      	beq.n	401600 <pio_configure_pin+0x80>
  4015a4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4015a8:	d03b      	beq.n	401622 <pio_configure_pin+0xa2>
  4015aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4015ae:	d015      	beq.n	4015dc <pio_configure_pin+0x5c>
		return 0;
  4015b0:	2000      	movs	r0, #0
  4015b2:	e023      	b.n	4015fc <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4015b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4015b8:	d055      	beq.n	401666 <pio_configure_pin+0xe6>
  4015ba:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4015be:	d052      	beq.n	401666 <pio_configure_pin+0xe6>
  4015c0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4015c4:	d1f4      	bne.n	4015b0 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4015c6:	f000 011f 	and.w	r1, r0, #31
  4015ca:	2601      	movs	r6, #1
  4015cc:	462a      	mov	r2, r5
  4015ce:	fa06 f101 	lsl.w	r1, r6, r1
  4015d2:	4620      	mov	r0, r4
  4015d4:	4b2f      	ldr	r3, [pc, #188]	; (401694 <pio_configure_pin+0x114>)
  4015d6:	4798      	blx	r3
	return 1;
  4015d8:	4630      	mov	r0, r6
		break;
  4015da:	e00f      	b.n	4015fc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4015dc:	f000 001f 	and.w	r0, r0, #31
  4015e0:	2601      	movs	r6, #1
  4015e2:	4086      	lsls	r6, r0
  4015e4:	4632      	mov	r2, r6
  4015e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4015ea:	4620      	mov	r0, r4
  4015ec:	4b2a      	ldr	r3, [pc, #168]	; (401698 <pio_configure_pin+0x118>)
  4015ee:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015f0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4015f4:	bf14      	ite	ne
  4015f6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4015f8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4015fa:	2001      	movs	r0, #1
}
  4015fc:	b002      	add	sp, #8
  4015fe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401600:	f000 001f 	and.w	r0, r0, #31
  401604:	2601      	movs	r6, #1
  401606:	4086      	lsls	r6, r0
  401608:	4632      	mov	r2, r6
  40160a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40160e:	4620      	mov	r0, r4
  401610:	4b21      	ldr	r3, [pc, #132]	; (401698 <pio_configure_pin+0x118>)
  401612:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401614:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401618:	bf14      	ite	ne
  40161a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40161c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40161e:	2001      	movs	r0, #1
  401620:	e7ec      	b.n	4015fc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401622:	f000 001f 	and.w	r0, r0, #31
  401626:	2601      	movs	r6, #1
  401628:	4086      	lsls	r6, r0
  40162a:	4632      	mov	r2, r6
  40162c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401630:	4620      	mov	r0, r4
  401632:	4b19      	ldr	r3, [pc, #100]	; (401698 <pio_configure_pin+0x118>)
  401634:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401636:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40163a:	bf14      	ite	ne
  40163c:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40163e:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  401640:	2001      	movs	r0, #1
  401642:	e7db      	b.n	4015fc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401644:	f000 001f 	and.w	r0, r0, #31
  401648:	2601      	movs	r6, #1
  40164a:	4086      	lsls	r6, r0
  40164c:	4632      	mov	r2, r6
  40164e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401652:	4620      	mov	r0, r4
  401654:	4b10      	ldr	r3, [pc, #64]	; (401698 <pio_configure_pin+0x118>)
  401656:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401658:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40165c:	bf14      	ite	ne
  40165e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401660:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  401662:	2001      	movs	r0, #1
  401664:	e7ca      	b.n	4015fc <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401666:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40166a:	f000 011f 	and.w	r1, r0, #31
  40166e:	2601      	movs	r6, #1
  401670:	ea05 0306 	and.w	r3, r5, r6
  401674:	9300      	str	r3, [sp, #0]
  401676:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40167a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40167e:	bf14      	ite	ne
  401680:	2200      	movne	r2, #0
  401682:	2201      	moveq	r2, #1
  401684:	fa06 f101 	lsl.w	r1, r6, r1
  401688:	4620      	mov	r0, r4
  40168a:	4c04      	ldr	r4, [pc, #16]	; (40169c <pio_configure_pin+0x11c>)
  40168c:	47a0      	blx	r4
	return 1;
  40168e:	4630      	mov	r0, r6
		break;
  401690:	e7b4      	b.n	4015fc <pio_configure_pin+0x7c>
  401692:	bf00      	nop
  401694:	0040149d 	.word	0x0040149d
  401698:	0040140d 	.word	0x0040140d
  40169c:	004014cf 	.word	0x004014cf

004016a0 <pio_configure_pin_group>:
{
  4016a0:	b570      	push	{r4, r5, r6, lr}
  4016a2:	b082      	sub	sp, #8
  4016a4:	4605      	mov	r5, r0
  4016a6:	460e      	mov	r6, r1
  4016a8:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  4016aa:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4016ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4016b2:	d03d      	beq.n	401730 <pio_configure_pin_group+0x90>
  4016b4:	d80a      	bhi.n	4016cc <pio_configure_pin_group+0x2c>
  4016b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4016ba:	d021      	beq.n	401700 <pio_configure_pin_group+0x60>
  4016bc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4016c0:	d02a      	beq.n	401718 <pio_configure_pin_group+0x78>
  4016c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4016c6:	d00e      	beq.n	4016e6 <pio_configure_pin_group+0x46>
		return 0;
  4016c8:	2000      	movs	r0, #0
  4016ca:	e017      	b.n	4016fc <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4016cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4016d0:	d03a      	beq.n	401748 <pio_configure_pin_group+0xa8>
  4016d2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4016d6:	d037      	beq.n	401748 <pio_configure_pin_group+0xa8>
  4016d8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4016dc:	d1f4      	bne.n	4016c8 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  4016de:	4b23      	ldr	r3, [pc, #140]	; (40176c <pio_configure_pin_group+0xcc>)
  4016e0:	4798      	blx	r3
	return 1;
  4016e2:	2001      	movs	r0, #1
		break;
  4016e4:	e00a      	b.n	4016fc <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4016e6:	460a      	mov	r2, r1
  4016e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4016ec:	4b20      	ldr	r3, [pc, #128]	; (401770 <pio_configure_pin_group+0xd0>)
  4016ee:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4016f0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4016f4:	bf14      	ite	ne
  4016f6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4016f8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4016fa:	2001      	movs	r0, #1
}
  4016fc:	b002      	add	sp, #8
  4016fe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401700:	460a      	mov	r2, r1
  401702:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401706:	4b1a      	ldr	r3, [pc, #104]	; (401770 <pio_configure_pin_group+0xd0>)
  401708:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40170a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40170e:	bf14      	ite	ne
  401710:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401712:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  401714:	2001      	movs	r0, #1
  401716:	e7f1      	b.n	4016fc <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401718:	460a      	mov	r2, r1
  40171a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40171e:	4b14      	ldr	r3, [pc, #80]	; (401770 <pio_configure_pin_group+0xd0>)
  401720:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401722:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401726:	bf14      	ite	ne
  401728:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40172a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40172c:	2001      	movs	r0, #1
  40172e:	e7e5      	b.n	4016fc <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401730:	460a      	mov	r2, r1
  401732:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401736:	4b0e      	ldr	r3, [pc, #56]	; (401770 <pio_configure_pin_group+0xd0>)
  401738:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40173a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40173e:	bf14      	ite	ne
  401740:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401742:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  401744:	2001      	movs	r0, #1
  401746:	e7d9      	b.n	4016fc <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401748:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  40174c:	f004 0301 	and.w	r3, r4, #1
  401750:	9300      	str	r3, [sp, #0]
  401752:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401756:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40175a:	bf14      	ite	ne
  40175c:	2200      	movne	r2, #0
  40175e:	2201      	moveq	r2, #1
  401760:	4631      	mov	r1, r6
  401762:	4628      	mov	r0, r5
  401764:	4c03      	ldr	r4, [pc, #12]	; (401774 <pio_configure_pin_group+0xd4>)
  401766:	47a0      	blx	r4
	return 1;
  401768:	2001      	movs	r0, #1
		break;
  40176a:	e7c7      	b.n	4016fc <pio_configure_pin_group+0x5c>
  40176c:	0040149d 	.word	0x0040149d
  401770:	0040140d 	.word	0x0040140d
  401774:	004014cf 	.word	0x004014cf

00401778 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40177c:	4604      	mov	r4, r0
  40177e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401780:	4b0e      	ldr	r3, [pc, #56]	; (4017bc <pio_handler_process+0x44>)
  401782:	4798      	blx	r3
  401784:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401786:	4620      	mov	r0, r4
  401788:	4b0d      	ldr	r3, [pc, #52]	; (4017c0 <pio_handler_process+0x48>)
  40178a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40178c:	4005      	ands	r5, r0
  40178e:	d013      	beq.n	4017b8 <pio_handler_process+0x40>
  401790:	4c0c      	ldr	r4, [pc, #48]	; (4017c4 <pio_handler_process+0x4c>)
  401792:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401796:	e003      	b.n	4017a0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401798:	42b4      	cmp	r4, r6
  40179a:	d00d      	beq.n	4017b8 <pio_handler_process+0x40>
  40179c:	3410      	adds	r4, #16
		while (status != 0) {
  40179e:	b15d      	cbz	r5, 4017b8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4017a0:	6820      	ldr	r0, [r4, #0]
  4017a2:	4540      	cmp	r0, r8
  4017a4:	d1f8      	bne.n	401798 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4017a6:	6861      	ldr	r1, [r4, #4]
  4017a8:	4229      	tst	r1, r5
  4017aa:	d0f5      	beq.n	401798 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4017ac:	68e3      	ldr	r3, [r4, #12]
  4017ae:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4017b0:	6863      	ldr	r3, [r4, #4]
  4017b2:	ea25 0503 	bic.w	r5, r5, r3
  4017b6:	e7ef      	b.n	401798 <pio_handler_process+0x20>
  4017b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4017bc:	00401527 	.word	0x00401527
  4017c0:	0040152b 	.word	0x0040152b
  4017c4:	20000acc 	.word	0x20000acc

004017c8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4017ca:	4c18      	ldr	r4, [pc, #96]	; (40182c <pio_handler_set+0x64>)
  4017cc:	6826      	ldr	r6, [r4, #0]
  4017ce:	2e06      	cmp	r6, #6
  4017d0:	d829      	bhi.n	401826 <pio_handler_set+0x5e>
  4017d2:	f04f 0c00 	mov.w	ip, #0
  4017d6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4017d8:	4f15      	ldr	r7, [pc, #84]	; (401830 <pio_handler_set+0x68>)
  4017da:	e004      	b.n	4017e6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4017dc:	3401      	adds	r4, #1
  4017de:	b2e4      	uxtb	r4, r4
  4017e0:	46a4      	mov	ip, r4
  4017e2:	42a6      	cmp	r6, r4
  4017e4:	d309      	bcc.n	4017fa <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4017e6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4017e8:	0125      	lsls	r5, r4, #4
  4017ea:	597d      	ldr	r5, [r7, r5]
  4017ec:	428d      	cmp	r5, r1
  4017ee:	d1f5      	bne.n	4017dc <pio_handler_set+0x14>
  4017f0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4017f4:	686d      	ldr	r5, [r5, #4]
  4017f6:	4295      	cmp	r5, r2
  4017f8:	d1f0      	bne.n	4017dc <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4017fa:	4d0d      	ldr	r5, [pc, #52]	; (401830 <pio_handler_set+0x68>)
  4017fc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401800:	eb05 040e 	add.w	r4, r5, lr
  401804:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401808:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40180a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40180c:	9906      	ldr	r1, [sp, #24]
  40180e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401810:	3601      	adds	r6, #1
  401812:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  401814:	bf04      	itt	eq
  401816:	4905      	ldreq	r1, [pc, #20]	; (40182c <pio_handler_set+0x64>)
  401818:	600e      	streq	r6, [r1, #0]
  40181a:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40181c:	461a      	mov	r2, r3
  40181e:	4b05      	ldr	r3, [pc, #20]	; (401834 <pio_handler_set+0x6c>)
  401820:	4798      	blx	r3

	return 0;
  401822:	2000      	movs	r0, #0
  401824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  401826:	2001      	movs	r0, #1
}
  401828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40182a:	bf00      	nop
  40182c:	20000b3c 	.word	0x20000b3c
  401830:	20000acc 	.word	0x20000acc
  401834:	004014f5 	.word	0x004014f5

00401838 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401838:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40183a:	210b      	movs	r1, #11
  40183c:	4801      	ldr	r0, [pc, #4]	; (401844 <PIOA_Handler+0xc>)
  40183e:	4b02      	ldr	r3, [pc, #8]	; (401848 <PIOA_Handler+0x10>)
  401840:	4798      	blx	r3
  401842:	bd08      	pop	{r3, pc}
  401844:	400e0e00 	.word	0x400e0e00
  401848:	00401779 	.word	0x00401779

0040184c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40184c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40184e:	210c      	movs	r1, #12
  401850:	4801      	ldr	r0, [pc, #4]	; (401858 <PIOB_Handler+0xc>)
  401852:	4b02      	ldr	r3, [pc, #8]	; (40185c <PIOB_Handler+0x10>)
  401854:	4798      	blx	r3
  401856:	bd08      	pop	{r3, pc}
  401858:	400e1000 	.word	0x400e1000
  40185c:	00401779 	.word	0x00401779

00401860 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401860:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401862:	210d      	movs	r1, #13
  401864:	4801      	ldr	r0, [pc, #4]	; (40186c <PIOC_Handler+0xc>)
  401866:	4b02      	ldr	r3, [pc, #8]	; (401870 <PIOC_Handler+0x10>)
  401868:	4798      	blx	r3
  40186a:	bd08      	pop	{r3, pc}
  40186c:	400e1200 	.word	0x400e1200
  401870:	00401779 	.word	0x00401779

00401874 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401874:	4a17      	ldr	r2, [pc, #92]	; (4018d4 <pmc_switch_mck_to_pllack+0x60>)
  401876:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40187c:	4318      	orrs	r0, r3
  40187e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401880:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401882:	f013 0f08 	tst.w	r3, #8
  401886:	d10a      	bne.n	40189e <pmc_switch_mck_to_pllack+0x2a>
  401888:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40188c:	4911      	ldr	r1, [pc, #68]	; (4018d4 <pmc_switch_mck_to_pllack+0x60>)
  40188e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401890:	f012 0f08 	tst.w	r2, #8
  401894:	d103      	bne.n	40189e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401896:	3b01      	subs	r3, #1
  401898:	d1f9      	bne.n	40188e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40189a:	2001      	movs	r0, #1
  40189c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40189e:	4a0d      	ldr	r2, [pc, #52]	; (4018d4 <pmc_switch_mck_to_pllack+0x60>)
  4018a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018a2:	f023 0303 	bic.w	r3, r3, #3
  4018a6:	f043 0302 	orr.w	r3, r3, #2
  4018aa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4018ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4018ae:	f013 0f08 	tst.w	r3, #8
  4018b2:	d10a      	bne.n	4018ca <pmc_switch_mck_to_pllack+0x56>
  4018b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4018b8:	4906      	ldr	r1, [pc, #24]	; (4018d4 <pmc_switch_mck_to_pllack+0x60>)
  4018ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4018bc:	f012 0f08 	tst.w	r2, #8
  4018c0:	d105      	bne.n	4018ce <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4018c2:	3b01      	subs	r3, #1
  4018c4:	d1f9      	bne.n	4018ba <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4018c6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4018c8:	4770      	bx	lr
	return 0;
  4018ca:	2000      	movs	r0, #0
  4018cc:	4770      	bx	lr
  4018ce:	2000      	movs	r0, #0
  4018d0:	4770      	bx	lr
  4018d2:	bf00      	nop
  4018d4:	400e0400 	.word	0x400e0400

004018d8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4018d8:	b9c8      	cbnz	r0, 40190e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4018da:	4a11      	ldr	r2, [pc, #68]	; (401920 <pmc_switch_mainck_to_xtal+0x48>)
  4018dc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4018de:	0209      	lsls	r1, r1, #8
  4018e0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4018e2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4018e6:	f023 0303 	bic.w	r3, r3, #3
  4018ea:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4018ee:	f043 0301 	orr.w	r3, r3, #1
  4018f2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4018f4:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4018f6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4018f8:	f013 0f01 	tst.w	r3, #1
  4018fc:	d0fb      	beq.n	4018f6 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4018fe:	4a08      	ldr	r2, [pc, #32]	; (401920 <pmc_switch_mainck_to_xtal+0x48>)
  401900:	6a13      	ldr	r3, [r2, #32]
  401902:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40190a:	6213      	str	r3, [r2, #32]
  40190c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40190e:	4904      	ldr	r1, [pc, #16]	; (401920 <pmc_switch_mainck_to_xtal+0x48>)
  401910:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401912:	4a04      	ldr	r2, [pc, #16]	; (401924 <pmc_switch_mainck_to_xtal+0x4c>)
  401914:	401a      	ands	r2, r3
  401916:	4b04      	ldr	r3, [pc, #16]	; (401928 <pmc_switch_mainck_to_xtal+0x50>)
  401918:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40191a:	620b      	str	r3, [r1, #32]
  40191c:	4770      	bx	lr
  40191e:	bf00      	nop
  401920:	400e0400 	.word	0x400e0400
  401924:	fec8fffc 	.word	0xfec8fffc
  401928:	01370002 	.word	0x01370002

0040192c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40192c:	4b02      	ldr	r3, [pc, #8]	; (401938 <pmc_osc_is_ready_mainck+0xc>)
  40192e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401930:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401934:	4770      	bx	lr
  401936:	bf00      	nop
  401938:	400e0400 	.word	0x400e0400

0040193c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40193c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401940:	4b01      	ldr	r3, [pc, #4]	; (401948 <pmc_disable_pllack+0xc>)
  401942:	629a      	str	r2, [r3, #40]	; 0x28
  401944:	4770      	bx	lr
  401946:	bf00      	nop
  401948:	400e0400 	.word	0x400e0400

0040194c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40194c:	4b02      	ldr	r3, [pc, #8]	; (401958 <pmc_is_locked_pllack+0xc>)
  40194e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401950:	f000 0002 	and.w	r0, r0, #2
  401954:	4770      	bx	lr
  401956:	bf00      	nop
  401958:	400e0400 	.word	0x400e0400

0040195c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40195c:	281f      	cmp	r0, #31
  40195e:	d80c      	bhi.n	40197a <pmc_enable_periph_clk+0x1e>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401960:	4b08      	ldr	r3, [pc, #32]	; (401984 <pmc_enable_periph_clk+0x28>)
  401962:	699a      	ldr	r2, [r3, #24]
  401964:	2301      	movs	r3, #1
  401966:	4083      	lsls	r3, r0
  401968:	4393      	bics	r3, r2
  40196a:	d008      	beq.n	40197e <pmc_enable_periph_clk+0x22>
			PMC->PMC_PCER0 = 1 << ul_id;
  40196c:	2301      	movs	r3, #1
  40196e:	fa03 f000 	lsl.w	r0, r3, r0
  401972:	4b04      	ldr	r3, [pc, #16]	; (401984 <pmc_enable_periph_clk+0x28>)
  401974:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401976:	2000      	movs	r0, #0
  401978:	4770      	bx	lr
		return 1;
  40197a:	2001      	movs	r0, #1
  40197c:	4770      	bx	lr
	return 0;
  40197e:	2000      	movs	r0, #0
}
  401980:	4770      	bx	lr
  401982:	bf00      	nop
  401984:	400e0400 	.word	0x400e0400

00401988 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401988:	e7fe      	b.n	401988 <Dummy_Handler>
	...

0040198c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40198c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  40198e:	4b1c      	ldr	r3, [pc, #112]	; (401a00 <Reset_Handler+0x74>)
  401990:	4a1c      	ldr	r2, [pc, #112]	; (401a04 <Reset_Handler+0x78>)
  401992:	429a      	cmp	r2, r3
  401994:	d010      	beq.n	4019b8 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
  401996:	4b1c      	ldr	r3, [pc, #112]	; (401a08 <Reset_Handler+0x7c>)
  401998:	4a19      	ldr	r2, [pc, #100]	; (401a00 <Reset_Handler+0x74>)
  40199a:	429a      	cmp	r2, r3
  40199c:	d20c      	bcs.n	4019b8 <Reset_Handler+0x2c>
  40199e:	3b01      	subs	r3, #1
  4019a0:	1a9b      	subs	r3, r3, r2
  4019a2:	f023 0303 	bic.w	r3, r3, #3
  4019a6:	3304      	adds	r3, #4
  4019a8:	4413      	add	r3, r2
  4019aa:	4916      	ldr	r1, [pc, #88]	; (401a04 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
  4019ac:	f851 0b04 	ldr.w	r0, [r1], #4
  4019b0:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4019b4:	429a      	cmp	r2, r3
  4019b6:	d1f9      	bne.n	4019ac <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4019b8:	4b14      	ldr	r3, [pc, #80]	; (401a0c <Reset_Handler+0x80>)
  4019ba:	4a15      	ldr	r2, [pc, #84]	; (401a10 <Reset_Handler+0x84>)
  4019bc:	429a      	cmp	r2, r3
  4019be:	d20a      	bcs.n	4019d6 <Reset_Handler+0x4a>
  4019c0:	3b01      	subs	r3, #1
  4019c2:	1a9b      	subs	r3, r3, r2
  4019c4:	f023 0303 	bic.w	r3, r3, #3
  4019c8:	3304      	adds	r3, #4
  4019ca:	4413      	add	r3, r2
		*pDest++ = 0;
  4019cc:	2100      	movs	r1, #0
  4019ce:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4019d2:	4293      	cmp	r3, r2
  4019d4:	d1fb      	bne.n	4019ce <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4019d6:	4b0f      	ldr	r3, [pc, #60]	; (401a14 <Reset_Handler+0x88>)
  4019d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
  4019dc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4019e0:	490d      	ldr	r1, [pc, #52]	; (401a18 <Reset_Handler+0x8c>)
  4019e2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  4019e4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  4019e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
  4019ec:	d203      	bcs.n	4019f6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  4019ee:	688b      	ldr	r3, [r1, #8]
  4019f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4019f4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  4019f6:	4b09      	ldr	r3, [pc, #36]	; (401a1c <Reset_Handler+0x90>)
  4019f8:	4798      	blx	r3

	/* Branch to main function */
	main();
  4019fa:	4b09      	ldr	r3, [pc, #36]	; (401a20 <Reset_Handler+0x94>)
  4019fc:	4798      	blx	r3
  4019fe:	e7fe      	b.n	4019fe <Reset_Handler+0x72>
  401a00:	20000000 	.word	0x20000000
  401a04:	0040436c 	.word	0x0040436c
  401a08:	20000948 	.word	0x20000948
  401a0c:	20000bac 	.word	0x20000bac
  401a10:	20000948 	.word	0x20000948
  401a14:	00400000 	.word	0x00400000
  401a18:	e000ed00 	.word	0xe000ed00
  401a1c:	00401f79 	.word	0x00401f79
  401a20:	00401b75 	.word	0x00401b75

00401a24 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
  401a24:	4b38      	ldr	r3, [pc, #224]	; (401b08 <SystemCoreClockUpdate+0xe4>)
  401a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401a28:	f003 0303 	and.w	r3, r3, #3
  401a2c:	2b01      	cmp	r3, #1
  401a2e:	d01d      	beq.n	401a6c <SystemCoreClockUpdate+0x48>
  401a30:	b183      	cbz	r3, 401a54 <SystemCoreClockUpdate+0x30>
  401a32:	2b02      	cmp	r3, #2
  401a34:	d036      	beq.n	401aa4 <SystemCoreClockUpdate+0x80>
		SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
			                         CKGR_PLLAR_DIVA_Pos));
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  401a36:	4b34      	ldr	r3, [pc, #208]	; (401b08 <SystemCoreClockUpdate+0xe4>)
  401a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401a3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401a3e:	2b70      	cmp	r3, #112	; 0x70
  401a40:	d059      	beq.n	401af6 <SystemCoreClockUpdate+0xd2>
		SystemCoreClock /= 3U;
	} else { 
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
  401a42:	4b31      	ldr	r3, [pc, #196]	; (401b08 <SystemCoreClockUpdate+0xe4>)
  401a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a46:	4931      	ldr	r1, [pc, #196]	; (401b0c <SystemCoreClockUpdate+0xe8>)
  401a48:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401a4c:	680b      	ldr	r3, [r1, #0]
  401a4e:	40d3      	lsrs	r3, r2
  401a50:	600b      	str	r3, [r1, #0]
  401a52:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  401a54:	4b2e      	ldr	r3, [pc, #184]	; (401b10 <SystemCoreClockUpdate+0xec>)
  401a56:	695b      	ldr	r3, [r3, #20]
  401a58:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401a5c:	bf14      	ite	ne
  401a5e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401a62:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401a66:	4b29      	ldr	r3, [pc, #164]	; (401b0c <SystemCoreClockUpdate+0xe8>)
  401a68:	601a      	str	r2, [r3, #0]
  401a6a:	e7e4      	b.n	401a36 <SystemCoreClockUpdate+0x12>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  401a6c:	4b26      	ldr	r3, [pc, #152]	; (401b08 <SystemCoreClockUpdate+0xe4>)
  401a6e:	6a1b      	ldr	r3, [r3, #32]
  401a70:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401a74:	d003      	beq.n	401a7e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401a76:	4a27      	ldr	r2, [pc, #156]	; (401b14 <SystemCoreClockUpdate+0xf0>)
  401a78:	4b24      	ldr	r3, [pc, #144]	; (401b0c <SystemCoreClockUpdate+0xe8>)
  401a7a:	601a      	str	r2, [r3, #0]
  401a7c:	e7db      	b.n	401a36 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401a7e:	4a26      	ldr	r2, [pc, #152]	; (401b18 <SystemCoreClockUpdate+0xf4>)
  401a80:	4b22      	ldr	r3, [pc, #136]	; (401b0c <SystemCoreClockUpdate+0xe8>)
  401a82:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  401a84:	4b20      	ldr	r3, [pc, #128]	; (401b08 <SystemCoreClockUpdate+0xe4>)
  401a86:	6a1b      	ldr	r3, [r3, #32]
  401a88:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401a8c:	2b10      	cmp	r3, #16
  401a8e:	d005      	beq.n	401a9c <SystemCoreClockUpdate+0x78>
  401a90:	2b20      	cmp	r3, #32
  401a92:	d1d0      	bne.n	401a36 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  401a94:	4a1f      	ldr	r2, [pc, #124]	; (401b14 <SystemCoreClockUpdate+0xf0>)
  401a96:	4b1d      	ldr	r3, [pc, #116]	; (401b0c <SystemCoreClockUpdate+0xe8>)
  401a98:	601a      	str	r2, [r3, #0]
				break;
  401a9a:	e7cc      	b.n	401a36 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  401a9c:	4a1f      	ldr	r2, [pc, #124]	; (401b1c <SystemCoreClockUpdate+0xf8>)
  401a9e:	4b1b      	ldr	r3, [pc, #108]	; (401b0c <SystemCoreClockUpdate+0xe8>)
  401aa0:	601a      	str	r2, [r3, #0]
				break;
  401aa2:	e7c8      	b.n	401a36 <SystemCoreClockUpdate+0x12>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  401aa4:	4b18      	ldr	r3, [pc, #96]	; (401b08 <SystemCoreClockUpdate+0xe4>)
  401aa6:	6a1b      	ldr	r3, [r3, #32]
  401aa8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401aac:	d010      	beq.n	401ad0 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401aae:	4a19      	ldr	r2, [pc, #100]	; (401b14 <SystemCoreClockUpdate+0xf0>)
  401ab0:	4b16      	ldr	r3, [pc, #88]	; (401b0c <SystemCoreClockUpdate+0xe8>)
  401ab2:	601a      	str	r2, [r3, #0]
		SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  401ab4:	4a14      	ldr	r2, [pc, #80]	; (401b08 <SystemCoreClockUpdate+0xe4>)
  401ab6:	6a91      	ldr	r1, [r2, #40]	; 0x28
		SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  401ab8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401aba:	4814      	ldr	r0, [pc, #80]	; (401b0c <SystemCoreClockUpdate+0xe8>)
		SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  401abc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401ac0:	6803      	ldr	r3, [r0, #0]
  401ac2:	fb01 3303 	mla	r3, r1, r3, r3
		SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  401ac6:	b2d2      	uxtb	r2, r2
  401ac8:	fbb3 f3f2 	udiv	r3, r3, r2
  401acc:	6003      	str	r3, [r0, #0]
		break;
  401ace:	e7b2      	b.n	401a36 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401ad0:	4a11      	ldr	r2, [pc, #68]	; (401b18 <SystemCoreClockUpdate+0xf4>)
  401ad2:	4b0e      	ldr	r3, [pc, #56]	; (401b0c <SystemCoreClockUpdate+0xe8>)
  401ad4:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  401ad6:	4b0c      	ldr	r3, [pc, #48]	; (401b08 <SystemCoreClockUpdate+0xe4>)
  401ad8:	6a1b      	ldr	r3, [r3, #32]
  401ada:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ade:	2b10      	cmp	r3, #16
  401ae0:	d005      	beq.n	401aee <SystemCoreClockUpdate+0xca>
  401ae2:	2b20      	cmp	r3, #32
  401ae4:	d1e6      	bne.n	401ab4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  401ae6:	4a0b      	ldr	r2, [pc, #44]	; (401b14 <SystemCoreClockUpdate+0xf0>)
  401ae8:	4b08      	ldr	r3, [pc, #32]	; (401b0c <SystemCoreClockUpdate+0xe8>)
  401aea:	601a      	str	r2, [r3, #0]
				break;
  401aec:	e7e2      	b.n	401ab4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  401aee:	4a0b      	ldr	r2, [pc, #44]	; (401b1c <SystemCoreClockUpdate+0xf8>)
  401af0:	4b06      	ldr	r3, [pc, #24]	; (401b0c <SystemCoreClockUpdate+0xe8>)
  401af2:	601a      	str	r2, [r3, #0]
				break;
  401af4:	e7de      	b.n	401ab4 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  401af6:	4a05      	ldr	r2, [pc, #20]	; (401b0c <SystemCoreClockUpdate+0xe8>)
  401af8:	6813      	ldr	r3, [r2, #0]
  401afa:	4909      	ldr	r1, [pc, #36]	; (401b20 <SystemCoreClockUpdate+0xfc>)
  401afc:	fba1 1303 	umull	r1, r3, r1, r3
  401b00:	085b      	lsrs	r3, r3, #1
  401b02:	6013      	str	r3, [r2, #0]
  401b04:	4770      	bx	lr
  401b06:	bf00      	nop
  401b08:	400e0400 	.word	0x400e0400
  401b0c:	20000104 	.word	0x20000104
  401b10:	400e1410 	.word	0x400e1410
  401b14:	00b71b00 	.word	0x00b71b00
  401b18:	003d0900 	.word	0x003d0900
  401b1c:	007a1200 	.word	0x007a1200
  401b20:	aaaaaaab 	.word	0xaaaaaaab

00401b24 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401b24:	4b0a      	ldr	r3, [pc, #40]	; (401b50 <_sbrk+0x2c>)
  401b26:	681b      	ldr	r3, [r3, #0]
  401b28:	b153      	cbz	r3, 401b40 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401b2a:	4b09      	ldr	r3, [pc, #36]	; (401b50 <_sbrk+0x2c>)
  401b2c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401b2e:	181a      	adds	r2, r3, r0
  401b30:	4908      	ldr	r1, [pc, #32]	; (401b54 <_sbrk+0x30>)
  401b32:	4291      	cmp	r1, r2
  401b34:	db08      	blt.n	401b48 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401b36:	4610      	mov	r0, r2
  401b38:	4a05      	ldr	r2, [pc, #20]	; (401b50 <_sbrk+0x2c>)
  401b3a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401b3c:	4618      	mov	r0, r3
  401b3e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401b40:	4a05      	ldr	r2, [pc, #20]	; (401b58 <_sbrk+0x34>)
  401b42:	4b03      	ldr	r3, [pc, #12]	; (401b50 <_sbrk+0x2c>)
  401b44:	601a      	str	r2, [r3, #0]
  401b46:	e7f0      	b.n	401b2a <_sbrk+0x6>
		return (caddr_t) -1;	
  401b48:	f04f 30ff 	mov.w	r0, #4294967295
}
  401b4c:	4770      	bx	lr
  401b4e:	bf00      	nop
  401b50:	20000b40 	.word	0x20000b40
  401b54:	20005ffc 	.word	0x20005ffc
  401b58:	200013b0 	.word	0x200013b0

00401b5c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401b5c:	f04f 30ff 	mov.w	r0, #4294967295
  401b60:	4770      	bx	lr

00401b62 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401b66:	604b      	str	r3, [r1, #4]

	return 0;
}
  401b68:	2000      	movs	r0, #0
  401b6a:	4770      	bx	lr

00401b6c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401b6c:	2001      	movs	r0, #1
  401b6e:	4770      	bx	lr

00401b70 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401b70:	2000      	movs	r0, #0
  401b72:	4770      	bx	lr

00401b74 <main>:
 */
#include <asf.h>
#include "BeamBall.h"

int main (void)
{
  401b74:	b508      	push	{r3, lr}
	sysclk_init();
  401b76:	4b0a      	ldr	r3, [pc, #40]	; (401ba0 <main+0x2c>)
  401b78:	4798      	blx	r3
	board_init();
  401b7a:	4b0a      	ldr	r3, [pc, #40]	; (401ba4 <main+0x30>)
  401b7c:	4798      	blx	r3
	vConfigureUART();
  401b7e:	4b0a      	ldr	r3, [pc, #40]	; (401ba8 <main+0x34>)
  401b80:	4798      	blx	r3

	puts("Inicializing Beam Ball\r\n");
  401b82:	480a      	ldr	r0, [pc, #40]	; (401bac <main+0x38>)
  401b84:	4b0a      	ldr	r3, [pc, #40]	; (401bb0 <main+0x3c>)
  401b86:	4798      	blx	r3

	vConfigurePWM();
  401b88:	4b0a      	ldr	r3, [pc, #40]	; (401bb4 <main+0x40>)
  401b8a:	4798      	blx	r3
	vConfigureSensorISR();
  401b8c:	4b0a      	ldr	r3, [pc, #40]	; (401bb8 <main+0x44>)
  401b8e:	4798      	blx	r3
	vConfigureTimer();
  401b90:	4b0a      	ldr	r3, [pc, #40]	; (401bbc <main+0x48>)
  401b92:	4798      	blx	r3
	
	vConfigureLCD();
  401b94:	4b0a      	ldr	r3, [pc, #40]	; (401bc0 <main+0x4c>)
  401b96:	4798      	blx	r3
	drawLCD();
  401b98:	4b0a      	ldr	r3, [pc, #40]	; (401bc4 <main+0x50>)
  401b9a:	4798      	blx	r3
  401b9c:	e7fe      	b.n	401b9c <main+0x28>
  401b9e:	bf00      	nop
  401ba0:	004012d5 	.word	0x004012d5
  401ba4:	00401339 	.word	0x00401339
  401ba8:	00400e69 	.word	0x00400e69
  401bac:	00404328 	.word	0x00404328
  401bb0:	004020cd 	.word	0x004020cd
  401bb4:	004011cd 	.word	0x004011cd
  401bb8:	00401125 	.word	0x00401125
  401bbc:	00401015 	.word	0x00401015
  401bc0:	00400f0d 	.word	0x00400f0d
  401bc4:	00400f45 	.word	0x00400f45

00401bc8 <__aeabi_drsub>:
  401bc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401bcc:	e002      	b.n	401bd4 <__adddf3>
  401bce:	bf00      	nop

00401bd0 <__aeabi_dsub>:
  401bd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401bd4 <__adddf3>:
  401bd4:	b530      	push	{r4, r5, lr}
  401bd6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401bda:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401bde:	ea94 0f05 	teq	r4, r5
  401be2:	bf08      	it	eq
  401be4:	ea90 0f02 	teqeq	r0, r2
  401be8:	bf1f      	itttt	ne
  401bea:	ea54 0c00 	orrsne.w	ip, r4, r0
  401bee:	ea55 0c02 	orrsne.w	ip, r5, r2
  401bf2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401bf6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401bfa:	f000 80e2 	beq.w	401dc2 <__adddf3+0x1ee>
  401bfe:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401c02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401c06:	bfb8      	it	lt
  401c08:	426d      	neglt	r5, r5
  401c0a:	dd0c      	ble.n	401c26 <__adddf3+0x52>
  401c0c:	442c      	add	r4, r5
  401c0e:	ea80 0202 	eor.w	r2, r0, r2
  401c12:	ea81 0303 	eor.w	r3, r1, r3
  401c16:	ea82 0000 	eor.w	r0, r2, r0
  401c1a:	ea83 0101 	eor.w	r1, r3, r1
  401c1e:	ea80 0202 	eor.w	r2, r0, r2
  401c22:	ea81 0303 	eor.w	r3, r1, r3
  401c26:	2d36      	cmp	r5, #54	; 0x36
  401c28:	bf88      	it	hi
  401c2a:	bd30      	pophi	{r4, r5, pc}
  401c2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401c30:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401c34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401c38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401c3c:	d002      	beq.n	401c44 <__adddf3+0x70>
  401c3e:	4240      	negs	r0, r0
  401c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401c44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401c48:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401c4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401c50:	d002      	beq.n	401c58 <__adddf3+0x84>
  401c52:	4252      	negs	r2, r2
  401c54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401c58:	ea94 0f05 	teq	r4, r5
  401c5c:	f000 80a7 	beq.w	401dae <__adddf3+0x1da>
  401c60:	f1a4 0401 	sub.w	r4, r4, #1
  401c64:	f1d5 0e20 	rsbs	lr, r5, #32
  401c68:	db0d      	blt.n	401c86 <__adddf3+0xb2>
  401c6a:	fa02 fc0e 	lsl.w	ip, r2, lr
  401c6e:	fa22 f205 	lsr.w	r2, r2, r5
  401c72:	1880      	adds	r0, r0, r2
  401c74:	f141 0100 	adc.w	r1, r1, #0
  401c78:	fa03 f20e 	lsl.w	r2, r3, lr
  401c7c:	1880      	adds	r0, r0, r2
  401c7e:	fa43 f305 	asr.w	r3, r3, r5
  401c82:	4159      	adcs	r1, r3
  401c84:	e00e      	b.n	401ca4 <__adddf3+0xd0>
  401c86:	f1a5 0520 	sub.w	r5, r5, #32
  401c8a:	f10e 0e20 	add.w	lr, lr, #32
  401c8e:	2a01      	cmp	r2, #1
  401c90:	fa03 fc0e 	lsl.w	ip, r3, lr
  401c94:	bf28      	it	cs
  401c96:	f04c 0c02 	orrcs.w	ip, ip, #2
  401c9a:	fa43 f305 	asr.w	r3, r3, r5
  401c9e:	18c0      	adds	r0, r0, r3
  401ca0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401ca4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401ca8:	d507      	bpl.n	401cba <__adddf3+0xe6>
  401caa:	f04f 0e00 	mov.w	lr, #0
  401cae:	f1dc 0c00 	rsbs	ip, ip, #0
  401cb2:	eb7e 0000 	sbcs.w	r0, lr, r0
  401cb6:	eb6e 0101 	sbc.w	r1, lr, r1
  401cba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401cbe:	d31b      	bcc.n	401cf8 <__adddf3+0x124>
  401cc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401cc4:	d30c      	bcc.n	401ce0 <__adddf3+0x10c>
  401cc6:	0849      	lsrs	r1, r1, #1
  401cc8:	ea5f 0030 	movs.w	r0, r0, rrx
  401ccc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401cd0:	f104 0401 	add.w	r4, r4, #1
  401cd4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401cd8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401cdc:	f080 809a 	bcs.w	401e14 <__adddf3+0x240>
  401ce0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401ce4:	bf08      	it	eq
  401ce6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401cea:	f150 0000 	adcs.w	r0, r0, #0
  401cee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401cf2:	ea41 0105 	orr.w	r1, r1, r5
  401cf6:	bd30      	pop	{r4, r5, pc}
  401cf8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401cfc:	4140      	adcs	r0, r0
  401cfe:	eb41 0101 	adc.w	r1, r1, r1
  401d02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401d06:	f1a4 0401 	sub.w	r4, r4, #1
  401d0a:	d1e9      	bne.n	401ce0 <__adddf3+0x10c>
  401d0c:	f091 0f00 	teq	r1, #0
  401d10:	bf04      	itt	eq
  401d12:	4601      	moveq	r1, r0
  401d14:	2000      	moveq	r0, #0
  401d16:	fab1 f381 	clz	r3, r1
  401d1a:	bf08      	it	eq
  401d1c:	3320      	addeq	r3, #32
  401d1e:	f1a3 030b 	sub.w	r3, r3, #11
  401d22:	f1b3 0220 	subs.w	r2, r3, #32
  401d26:	da0c      	bge.n	401d42 <__adddf3+0x16e>
  401d28:	320c      	adds	r2, #12
  401d2a:	dd08      	ble.n	401d3e <__adddf3+0x16a>
  401d2c:	f102 0c14 	add.w	ip, r2, #20
  401d30:	f1c2 020c 	rsb	r2, r2, #12
  401d34:	fa01 f00c 	lsl.w	r0, r1, ip
  401d38:	fa21 f102 	lsr.w	r1, r1, r2
  401d3c:	e00c      	b.n	401d58 <__adddf3+0x184>
  401d3e:	f102 0214 	add.w	r2, r2, #20
  401d42:	bfd8      	it	le
  401d44:	f1c2 0c20 	rsble	ip, r2, #32
  401d48:	fa01 f102 	lsl.w	r1, r1, r2
  401d4c:	fa20 fc0c 	lsr.w	ip, r0, ip
  401d50:	bfdc      	itt	le
  401d52:	ea41 010c 	orrle.w	r1, r1, ip
  401d56:	4090      	lslle	r0, r2
  401d58:	1ae4      	subs	r4, r4, r3
  401d5a:	bfa2      	ittt	ge
  401d5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401d60:	4329      	orrge	r1, r5
  401d62:	bd30      	popge	{r4, r5, pc}
  401d64:	ea6f 0404 	mvn.w	r4, r4
  401d68:	3c1f      	subs	r4, #31
  401d6a:	da1c      	bge.n	401da6 <__adddf3+0x1d2>
  401d6c:	340c      	adds	r4, #12
  401d6e:	dc0e      	bgt.n	401d8e <__adddf3+0x1ba>
  401d70:	f104 0414 	add.w	r4, r4, #20
  401d74:	f1c4 0220 	rsb	r2, r4, #32
  401d78:	fa20 f004 	lsr.w	r0, r0, r4
  401d7c:	fa01 f302 	lsl.w	r3, r1, r2
  401d80:	ea40 0003 	orr.w	r0, r0, r3
  401d84:	fa21 f304 	lsr.w	r3, r1, r4
  401d88:	ea45 0103 	orr.w	r1, r5, r3
  401d8c:	bd30      	pop	{r4, r5, pc}
  401d8e:	f1c4 040c 	rsb	r4, r4, #12
  401d92:	f1c4 0220 	rsb	r2, r4, #32
  401d96:	fa20 f002 	lsr.w	r0, r0, r2
  401d9a:	fa01 f304 	lsl.w	r3, r1, r4
  401d9e:	ea40 0003 	orr.w	r0, r0, r3
  401da2:	4629      	mov	r1, r5
  401da4:	bd30      	pop	{r4, r5, pc}
  401da6:	fa21 f004 	lsr.w	r0, r1, r4
  401daa:	4629      	mov	r1, r5
  401dac:	bd30      	pop	{r4, r5, pc}
  401dae:	f094 0f00 	teq	r4, #0
  401db2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401db6:	bf06      	itte	eq
  401db8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401dbc:	3401      	addeq	r4, #1
  401dbe:	3d01      	subne	r5, #1
  401dc0:	e74e      	b.n	401c60 <__adddf3+0x8c>
  401dc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401dc6:	bf18      	it	ne
  401dc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401dcc:	d029      	beq.n	401e22 <__adddf3+0x24e>
  401dce:	ea94 0f05 	teq	r4, r5
  401dd2:	bf08      	it	eq
  401dd4:	ea90 0f02 	teqeq	r0, r2
  401dd8:	d005      	beq.n	401de6 <__adddf3+0x212>
  401dda:	ea54 0c00 	orrs.w	ip, r4, r0
  401dde:	bf04      	itt	eq
  401de0:	4619      	moveq	r1, r3
  401de2:	4610      	moveq	r0, r2
  401de4:	bd30      	pop	{r4, r5, pc}
  401de6:	ea91 0f03 	teq	r1, r3
  401dea:	bf1e      	ittt	ne
  401dec:	2100      	movne	r1, #0
  401dee:	2000      	movne	r0, #0
  401df0:	bd30      	popne	{r4, r5, pc}
  401df2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401df6:	d105      	bne.n	401e04 <__adddf3+0x230>
  401df8:	0040      	lsls	r0, r0, #1
  401dfa:	4149      	adcs	r1, r1
  401dfc:	bf28      	it	cs
  401dfe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401e02:	bd30      	pop	{r4, r5, pc}
  401e04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401e08:	bf3c      	itt	cc
  401e0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401e0e:	bd30      	popcc	{r4, r5, pc}
  401e10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401e14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401e18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401e1c:	f04f 0000 	mov.w	r0, #0
  401e20:	bd30      	pop	{r4, r5, pc}
  401e22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401e26:	bf1a      	itte	ne
  401e28:	4619      	movne	r1, r3
  401e2a:	4610      	movne	r0, r2
  401e2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401e30:	bf1c      	itt	ne
  401e32:	460b      	movne	r3, r1
  401e34:	4602      	movne	r2, r0
  401e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401e3a:	bf06      	itte	eq
  401e3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401e40:	ea91 0f03 	teqeq	r1, r3
  401e44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401e48:	bd30      	pop	{r4, r5, pc}
  401e4a:	bf00      	nop

00401e4c <__aeabi_ui2d>:
  401e4c:	f090 0f00 	teq	r0, #0
  401e50:	bf04      	itt	eq
  401e52:	2100      	moveq	r1, #0
  401e54:	4770      	bxeq	lr
  401e56:	b530      	push	{r4, r5, lr}
  401e58:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401e5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401e60:	f04f 0500 	mov.w	r5, #0
  401e64:	f04f 0100 	mov.w	r1, #0
  401e68:	e750      	b.n	401d0c <__adddf3+0x138>
  401e6a:	bf00      	nop

00401e6c <__aeabi_i2d>:
  401e6c:	f090 0f00 	teq	r0, #0
  401e70:	bf04      	itt	eq
  401e72:	2100      	moveq	r1, #0
  401e74:	4770      	bxeq	lr
  401e76:	b530      	push	{r4, r5, lr}
  401e78:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401e7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401e80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401e84:	bf48      	it	mi
  401e86:	4240      	negmi	r0, r0
  401e88:	f04f 0100 	mov.w	r1, #0
  401e8c:	e73e      	b.n	401d0c <__adddf3+0x138>
  401e8e:	bf00      	nop

00401e90 <__aeabi_f2d>:
  401e90:	0042      	lsls	r2, r0, #1
  401e92:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401e96:	ea4f 0131 	mov.w	r1, r1, rrx
  401e9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401e9e:	bf1f      	itttt	ne
  401ea0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401ea4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401ea8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401eac:	4770      	bxne	lr
  401eae:	f092 0f00 	teq	r2, #0
  401eb2:	bf14      	ite	ne
  401eb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401eb8:	4770      	bxeq	lr
  401eba:	b530      	push	{r4, r5, lr}
  401ebc:	f44f 7460 	mov.w	r4, #896	; 0x380
  401ec0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401ec4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401ec8:	e720      	b.n	401d0c <__adddf3+0x138>
  401eca:	bf00      	nop

00401ecc <__aeabi_ul2d>:
  401ecc:	ea50 0201 	orrs.w	r2, r0, r1
  401ed0:	bf08      	it	eq
  401ed2:	4770      	bxeq	lr
  401ed4:	b530      	push	{r4, r5, lr}
  401ed6:	f04f 0500 	mov.w	r5, #0
  401eda:	e00a      	b.n	401ef2 <__aeabi_l2d+0x16>

00401edc <__aeabi_l2d>:
  401edc:	ea50 0201 	orrs.w	r2, r0, r1
  401ee0:	bf08      	it	eq
  401ee2:	4770      	bxeq	lr
  401ee4:	b530      	push	{r4, r5, lr}
  401ee6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401eea:	d502      	bpl.n	401ef2 <__aeabi_l2d+0x16>
  401eec:	4240      	negs	r0, r0
  401eee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401ef2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401ef6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401efa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401efe:	f43f aedc 	beq.w	401cba <__adddf3+0xe6>
  401f02:	f04f 0203 	mov.w	r2, #3
  401f06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401f0a:	bf18      	it	ne
  401f0c:	3203      	addne	r2, #3
  401f0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401f12:	bf18      	it	ne
  401f14:	3203      	addne	r2, #3
  401f16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401f1a:	f1c2 0320 	rsb	r3, r2, #32
  401f1e:	fa00 fc03 	lsl.w	ip, r0, r3
  401f22:	fa20 f002 	lsr.w	r0, r0, r2
  401f26:	fa01 fe03 	lsl.w	lr, r1, r3
  401f2a:	ea40 000e 	orr.w	r0, r0, lr
  401f2e:	fa21 f102 	lsr.w	r1, r1, r2
  401f32:	4414      	add	r4, r2
  401f34:	e6c1      	b.n	401cba <__adddf3+0xe6>
  401f36:	bf00      	nop

00401f38 <__aeabi_d2uiz>:
  401f38:	004a      	lsls	r2, r1, #1
  401f3a:	d211      	bcs.n	401f60 <__aeabi_d2uiz+0x28>
  401f3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  401f40:	d211      	bcs.n	401f66 <__aeabi_d2uiz+0x2e>
  401f42:	d50d      	bpl.n	401f60 <__aeabi_d2uiz+0x28>
  401f44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  401f48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  401f4c:	d40e      	bmi.n	401f6c <__aeabi_d2uiz+0x34>
  401f4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  401f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  401f56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  401f5a:	fa23 f002 	lsr.w	r0, r3, r2
  401f5e:	4770      	bx	lr
  401f60:	f04f 0000 	mov.w	r0, #0
  401f64:	4770      	bx	lr
  401f66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  401f6a:	d102      	bne.n	401f72 <__aeabi_d2uiz+0x3a>
  401f6c:	f04f 30ff 	mov.w	r0, #4294967295
  401f70:	4770      	bx	lr
  401f72:	f04f 0000 	mov.w	r0, #0
  401f76:	4770      	bx	lr

00401f78 <__libc_init_array>:
  401f78:	b570      	push	{r4, r5, r6, lr}
  401f7a:	4e0f      	ldr	r6, [pc, #60]	; (401fb8 <__libc_init_array+0x40>)
  401f7c:	4d0f      	ldr	r5, [pc, #60]	; (401fbc <__libc_init_array+0x44>)
  401f7e:	1b76      	subs	r6, r6, r5
  401f80:	10b6      	asrs	r6, r6, #2
  401f82:	bf18      	it	ne
  401f84:	2400      	movne	r4, #0
  401f86:	d005      	beq.n	401f94 <__libc_init_array+0x1c>
  401f88:	3401      	adds	r4, #1
  401f8a:	f855 3b04 	ldr.w	r3, [r5], #4
  401f8e:	4798      	blx	r3
  401f90:	42a6      	cmp	r6, r4
  401f92:	d1f9      	bne.n	401f88 <__libc_init_array+0x10>
  401f94:	4e0a      	ldr	r6, [pc, #40]	; (401fc0 <__libc_init_array+0x48>)
  401f96:	4d0b      	ldr	r5, [pc, #44]	; (401fc4 <__libc_init_array+0x4c>)
  401f98:	f002 f9d6 	bl	404348 <_init>
  401f9c:	1b76      	subs	r6, r6, r5
  401f9e:	10b6      	asrs	r6, r6, #2
  401fa0:	bf18      	it	ne
  401fa2:	2400      	movne	r4, #0
  401fa4:	d006      	beq.n	401fb4 <__libc_init_array+0x3c>
  401fa6:	3401      	adds	r4, #1
  401fa8:	f855 3b04 	ldr.w	r3, [r5], #4
  401fac:	4798      	blx	r3
  401fae:	42a6      	cmp	r6, r4
  401fb0:	d1f9      	bne.n	401fa6 <__libc_init_array+0x2e>
  401fb2:	bd70      	pop	{r4, r5, r6, pc}
  401fb4:	bd70      	pop	{r4, r5, r6, pc}
  401fb6:	bf00      	nop
  401fb8:	00404354 	.word	0x00404354
  401fbc:	00404354 	.word	0x00404354
  401fc0:	0040435c 	.word	0x0040435c
  401fc4:	00404354 	.word	0x00404354

00401fc8 <memset>:
  401fc8:	b470      	push	{r4, r5, r6}
  401fca:	0786      	lsls	r6, r0, #30
  401fcc:	d046      	beq.n	40205c <memset+0x94>
  401fce:	1e54      	subs	r4, r2, #1
  401fd0:	2a00      	cmp	r2, #0
  401fd2:	d041      	beq.n	402058 <memset+0x90>
  401fd4:	b2ca      	uxtb	r2, r1
  401fd6:	4603      	mov	r3, r0
  401fd8:	e002      	b.n	401fe0 <memset+0x18>
  401fda:	f114 34ff 	adds.w	r4, r4, #4294967295
  401fde:	d33b      	bcc.n	402058 <memset+0x90>
  401fe0:	f803 2b01 	strb.w	r2, [r3], #1
  401fe4:	079d      	lsls	r5, r3, #30
  401fe6:	d1f8      	bne.n	401fda <memset+0x12>
  401fe8:	2c03      	cmp	r4, #3
  401fea:	d92e      	bls.n	40204a <memset+0x82>
  401fec:	b2cd      	uxtb	r5, r1
  401fee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401ff2:	2c0f      	cmp	r4, #15
  401ff4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401ff8:	d919      	bls.n	40202e <memset+0x66>
  401ffa:	4626      	mov	r6, r4
  401ffc:	f103 0210 	add.w	r2, r3, #16
  402000:	3e10      	subs	r6, #16
  402002:	2e0f      	cmp	r6, #15
  402004:	f842 5c10 	str.w	r5, [r2, #-16]
  402008:	f842 5c0c 	str.w	r5, [r2, #-12]
  40200c:	f842 5c08 	str.w	r5, [r2, #-8]
  402010:	f842 5c04 	str.w	r5, [r2, #-4]
  402014:	f102 0210 	add.w	r2, r2, #16
  402018:	d8f2      	bhi.n	402000 <memset+0x38>
  40201a:	f1a4 0210 	sub.w	r2, r4, #16
  40201e:	f022 020f 	bic.w	r2, r2, #15
  402022:	f004 040f 	and.w	r4, r4, #15
  402026:	3210      	adds	r2, #16
  402028:	2c03      	cmp	r4, #3
  40202a:	4413      	add	r3, r2
  40202c:	d90d      	bls.n	40204a <memset+0x82>
  40202e:	461e      	mov	r6, r3
  402030:	4622      	mov	r2, r4
  402032:	3a04      	subs	r2, #4
  402034:	2a03      	cmp	r2, #3
  402036:	f846 5b04 	str.w	r5, [r6], #4
  40203a:	d8fa      	bhi.n	402032 <memset+0x6a>
  40203c:	1f22      	subs	r2, r4, #4
  40203e:	f022 0203 	bic.w	r2, r2, #3
  402042:	3204      	adds	r2, #4
  402044:	4413      	add	r3, r2
  402046:	f004 0403 	and.w	r4, r4, #3
  40204a:	b12c      	cbz	r4, 402058 <memset+0x90>
  40204c:	b2c9      	uxtb	r1, r1
  40204e:	441c      	add	r4, r3
  402050:	f803 1b01 	strb.w	r1, [r3], #1
  402054:	429c      	cmp	r4, r3
  402056:	d1fb      	bne.n	402050 <memset+0x88>
  402058:	bc70      	pop	{r4, r5, r6}
  40205a:	4770      	bx	lr
  40205c:	4614      	mov	r4, r2
  40205e:	4603      	mov	r3, r0
  402060:	e7c2      	b.n	401fe8 <memset+0x20>
  402062:	bf00      	nop

00402064 <_puts_r>:
  402064:	b5f0      	push	{r4, r5, r6, r7, lr}
  402066:	4605      	mov	r5, r0
  402068:	b089      	sub	sp, #36	; 0x24
  40206a:	4608      	mov	r0, r1
  40206c:	460c      	mov	r4, r1
  40206e:	2701      	movs	r7, #1
  402070:	f000 f8e2 	bl	402238 <strlen>
  402074:	2602      	movs	r6, #2
  402076:	19c3      	adds	r3, r0, r7
  402078:	4913      	ldr	r1, [pc, #76]	; (4020c8 <_puts_r+0x64>)
  40207a:	9303      	str	r3, [sp, #12]
  40207c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40207e:	aa04      	add	r2, sp, #16
  402080:	9404      	str	r4, [sp, #16]
  402082:	9005      	str	r0, [sp, #20]
  402084:	68ac      	ldr	r4, [r5, #8]
  402086:	9707      	str	r7, [sp, #28]
  402088:	9602      	str	r6, [sp, #8]
  40208a:	9106      	str	r1, [sp, #24]
  40208c:	9201      	str	r2, [sp, #4]
  40208e:	b1b3      	cbz	r3, 4020be <_puts_r+0x5a>
  402090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402094:	049a      	lsls	r2, r3, #18
  402096:	d406      	bmi.n	4020a6 <_puts_r+0x42>
  402098:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40209a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40209e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4020a2:	81a3      	strh	r3, [r4, #12]
  4020a4:	6662      	str	r2, [r4, #100]	; 0x64
  4020a6:	4621      	mov	r1, r4
  4020a8:	4628      	mov	r0, r5
  4020aa:	aa01      	add	r2, sp, #4
  4020ac:	f000 fb8c 	bl	4027c8 <__sfvwrite_r>
  4020b0:	2800      	cmp	r0, #0
  4020b2:	bf14      	ite	ne
  4020b4:	f04f 30ff 	movne.w	r0, #4294967295
  4020b8:	200a      	moveq	r0, #10
  4020ba:	b009      	add	sp, #36	; 0x24
  4020bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4020be:	4628      	mov	r0, r5
  4020c0:	f000 fa28 	bl	402514 <__sinit>
  4020c4:	e7e4      	b.n	402090 <_puts_r+0x2c>
  4020c6:	bf00      	nop
  4020c8:	00404254 	.word	0x00404254

004020cc <puts>:
  4020cc:	4b02      	ldr	r3, [pc, #8]	; (4020d8 <puts+0xc>)
  4020ce:	4601      	mov	r1, r0
  4020d0:	6818      	ldr	r0, [r3, #0]
  4020d2:	f7ff bfc7 	b.w	402064 <_puts_r>
  4020d6:	bf00      	nop
  4020d8:	20000108 	.word	0x20000108

004020dc <setbuf>:
  4020dc:	2900      	cmp	r1, #0
  4020de:	bf0c      	ite	eq
  4020e0:	2202      	moveq	r2, #2
  4020e2:	2200      	movne	r2, #0
  4020e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4020e8:	f000 b800 	b.w	4020ec <setvbuf>

004020ec <setvbuf>:
  4020ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4020f0:	4d50      	ldr	r5, [pc, #320]	; (402234 <setvbuf+0x148>)
  4020f2:	b083      	sub	sp, #12
  4020f4:	682d      	ldr	r5, [r5, #0]
  4020f6:	4604      	mov	r4, r0
  4020f8:	460f      	mov	r7, r1
  4020fa:	4690      	mov	r8, r2
  4020fc:	461e      	mov	r6, r3
  4020fe:	b115      	cbz	r5, 402106 <setvbuf+0x1a>
  402100:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402102:	2b00      	cmp	r3, #0
  402104:	d077      	beq.n	4021f6 <setvbuf+0x10a>
  402106:	f1b8 0f02 	cmp.w	r8, #2
  40210a:	d004      	beq.n	402116 <setvbuf+0x2a>
  40210c:	f1b8 0f01 	cmp.w	r8, #1
  402110:	d87d      	bhi.n	40220e <setvbuf+0x122>
  402112:	2e00      	cmp	r6, #0
  402114:	db7b      	blt.n	40220e <setvbuf+0x122>
  402116:	4621      	mov	r1, r4
  402118:	4628      	mov	r0, r5
  40211a:	f000 f967 	bl	4023ec <_fflush_r>
  40211e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402120:	b141      	cbz	r1, 402134 <setvbuf+0x48>
  402122:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402126:	4299      	cmp	r1, r3
  402128:	d002      	beq.n	402130 <setvbuf+0x44>
  40212a:	4628      	mov	r0, r5
  40212c:	f000 fa66 	bl	4025fc <_free_r>
  402130:	2300      	movs	r3, #0
  402132:	6323      	str	r3, [r4, #48]	; 0x30
  402134:	2200      	movs	r2, #0
  402136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40213a:	61a2      	str	r2, [r4, #24]
  40213c:	6062      	str	r2, [r4, #4]
  40213e:	061a      	lsls	r2, r3, #24
  402140:	d452      	bmi.n	4021e8 <setvbuf+0xfc>
  402142:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402146:	f023 0303 	bic.w	r3, r3, #3
  40214a:	f1b8 0f02 	cmp.w	r8, #2
  40214e:	81a3      	strh	r3, [r4, #12]
  402150:	d037      	beq.n	4021c2 <setvbuf+0xd6>
  402152:	ab01      	add	r3, sp, #4
  402154:	466a      	mov	r2, sp
  402156:	4621      	mov	r1, r4
  402158:	4628      	mov	r0, r5
  40215a:	f000 fcd7 	bl	402b0c <__swhatbuf_r>
  40215e:	89a3      	ldrh	r3, [r4, #12]
  402160:	4318      	orrs	r0, r3
  402162:	81a0      	strh	r0, [r4, #12]
  402164:	b316      	cbz	r6, 4021ac <setvbuf+0xc0>
  402166:	b317      	cbz	r7, 4021ae <setvbuf+0xc2>
  402168:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40216a:	2b00      	cmp	r3, #0
  40216c:	d04b      	beq.n	402206 <setvbuf+0x11a>
  40216e:	9b00      	ldr	r3, [sp, #0]
  402170:	6027      	str	r7, [r4, #0]
  402172:	429e      	cmp	r6, r3
  402174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402178:	6127      	str	r7, [r4, #16]
  40217a:	bf1c      	itt	ne
  40217c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  402180:	81a3      	strhne	r3, [r4, #12]
  402182:	f1b8 0f01 	cmp.w	r8, #1
  402186:	bf04      	itt	eq
  402188:	f043 0301 	orreq.w	r3, r3, #1
  40218c:	81a3      	strheq	r3, [r4, #12]
  40218e:	b29b      	uxth	r3, r3
  402190:	f013 0008 	ands.w	r0, r3, #8
  402194:	6166      	str	r6, [r4, #20]
  402196:	d023      	beq.n	4021e0 <setvbuf+0xf4>
  402198:	f013 0001 	ands.w	r0, r3, #1
  40219c:	d02f      	beq.n	4021fe <setvbuf+0x112>
  40219e:	2000      	movs	r0, #0
  4021a0:	4276      	negs	r6, r6
  4021a2:	61a6      	str	r6, [r4, #24]
  4021a4:	60a0      	str	r0, [r4, #8]
  4021a6:	b003      	add	sp, #12
  4021a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4021ac:	9e00      	ldr	r6, [sp, #0]
  4021ae:	4630      	mov	r0, r6
  4021b0:	f000 fd1e 	bl	402bf0 <malloc>
  4021b4:	4607      	mov	r7, r0
  4021b6:	b368      	cbz	r0, 402214 <setvbuf+0x128>
  4021b8:	89a3      	ldrh	r3, [r4, #12]
  4021ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4021be:	81a3      	strh	r3, [r4, #12]
  4021c0:	e7d2      	b.n	402168 <setvbuf+0x7c>
  4021c2:	2000      	movs	r0, #0
  4021c4:	2500      	movs	r5, #0
  4021c6:	2101      	movs	r1, #1
  4021c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4021cc:	f043 0302 	orr.w	r3, r3, #2
  4021d0:	81a3      	strh	r3, [r4, #12]
  4021d2:	60a5      	str	r5, [r4, #8]
  4021d4:	6161      	str	r1, [r4, #20]
  4021d6:	6022      	str	r2, [r4, #0]
  4021d8:	6122      	str	r2, [r4, #16]
  4021da:	b003      	add	sp, #12
  4021dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4021e0:	60a0      	str	r0, [r4, #8]
  4021e2:	b003      	add	sp, #12
  4021e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4021e8:	6921      	ldr	r1, [r4, #16]
  4021ea:	4628      	mov	r0, r5
  4021ec:	f000 fa06 	bl	4025fc <_free_r>
  4021f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4021f4:	e7a5      	b.n	402142 <setvbuf+0x56>
  4021f6:	4628      	mov	r0, r5
  4021f8:	f000 f98c 	bl	402514 <__sinit>
  4021fc:	e783      	b.n	402106 <setvbuf+0x1a>
  4021fe:	60a6      	str	r6, [r4, #8]
  402200:	b003      	add	sp, #12
  402202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402206:	4628      	mov	r0, r5
  402208:	f000 f984 	bl	402514 <__sinit>
  40220c:	e7af      	b.n	40216e <setvbuf+0x82>
  40220e:	f04f 30ff 	mov.w	r0, #4294967295
  402212:	e7e2      	b.n	4021da <setvbuf+0xee>
  402214:	f8dd 9000 	ldr.w	r9, [sp]
  402218:	45b1      	cmp	r9, r6
  40221a:	d006      	beq.n	40222a <setvbuf+0x13e>
  40221c:	4648      	mov	r0, r9
  40221e:	f000 fce7 	bl	402bf0 <malloc>
  402222:	4607      	mov	r7, r0
  402224:	b108      	cbz	r0, 40222a <setvbuf+0x13e>
  402226:	464e      	mov	r6, r9
  402228:	e7c6      	b.n	4021b8 <setvbuf+0xcc>
  40222a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40222e:	f04f 30ff 	mov.w	r0, #4294967295
  402232:	e7c7      	b.n	4021c4 <setvbuf+0xd8>
  402234:	20000108 	.word	0x20000108

00402238 <strlen>:
  402238:	f020 0103 	bic.w	r1, r0, #3
  40223c:	f010 0003 	ands.w	r0, r0, #3
  402240:	f1c0 0000 	rsb	r0, r0, #0
  402244:	f851 3b04 	ldr.w	r3, [r1], #4
  402248:	f100 0c04 	add.w	ip, r0, #4
  40224c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  402250:	f06f 0200 	mvn.w	r2, #0
  402254:	bf1c      	itt	ne
  402256:	fa22 f20c 	lsrne.w	r2, r2, ip
  40225a:	4313      	orrne	r3, r2
  40225c:	f04f 0c01 	mov.w	ip, #1
  402260:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  402264:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  402268:	eba3 020c 	sub.w	r2, r3, ip
  40226c:	ea22 0203 	bic.w	r2, r2, r3
  402270:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  402274:	bf04      	itt	eq
  402276:	f851 3b04 	ldreq.w	r3, [r1], #4
  40227a:	3004      	addeq	r0, #4
  40227c:	d0f4      	beq.n	402268 <strlen+0x30>
  40227e:	f1c2 0100 	rsb	r1, r2, #0
  402282:	ea02 0201 	and.w	r2, r2, r1
  402286:	fab2 f282 	clz	r2, r2
  40228a:	f1c2 021f 	rsb	r2, r2, #31
  40228e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402292:	4770      	bx	lr

00402294 <register_fini>:
  402294:	4b02      	ldr	r3, [pc, #8]	; (4022a0 <register_fini+0xc>)
  402296:	b113      	cbz	r3, 40229e <register_fini+0xa>
  402298:	4802      	ldr	r0, [pc, #8]	; (4022a4 <register_fini+0x10>)
  40229a:	f000 b805 	b.w	4022a8 <atexit>
  40229e:	4770      	bx	lr
  4022a0:	00000000 	.word	0x00000000
  4022a4:	00402529 	.word	0x00402529

004022a8 <atexit>:
  4022a8:	2300      	movs	r3, #0
  4022aa:	4601      	mov	r1, r0
  4022ac:	461a      	mov	r2, r3
  4022ae:	4618      	mov	r0, r3
  4022b0:	f001 baf2 	b.w	403898 <__register_exitproc>

004022b4 <__sflush_r>:
  4022b4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4022b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022bc:	b29a      	uxth	r2, r3
  4022be:	460d      	mov	r5, r1
  4022c0:	0711      	lsls	r1, r2, #28
  4022c2:	4680      	mov	r8, r0
  4022c4:	d43a      	bmi.n	40233c <__sflush_r+0x88>
  4022c6:	686a      	ldr	r2, [r5, #4]
  4022c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4022cc:	2a00      	cmp	r2, #0
  4022ce:	81ab      	strh	r3, [r5, #12]
  4022d0:	dd70      	ble.n	4023b4 <__sflush_r+0x100>
  4022d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4022d4:	2c00      	cmp	r4, #0
  4022d6:	d04a      	beq.n	40236e <__sflush_r+0xba>
  4022d8:	2200      	movs	r2, #0
  4022da:	b29b      	uxth	r3, r3
  4022dc:	f8d8 6000 	ldr.w	r6, [r8]
  4022e0:	f8c8 2000 	str.w	r2, [r8]
  4022e4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4022e8:	d068      	beq.n	4023bc <__sflush_r+0x108>
  4022ea:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4022ec:	075f      	lsls	r7, r3, #29
  4022ee:	d505      	bpl.n	4022fc <__sflush_r+0x48>
  4022f0:	6869      	ldr	r1, [r5, #4]
  4022f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4022f4:	1a52      	subs	r2, r2, r1
  4022f6:	b10b      	cbz	r3, 4022fc <__sflush_r+0x48>
  4022f8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4022fa:	1ad2      	subs	r2, r2, r3
  4022fc:	2300      	movs	r3, #0
  4022fe:	69e9      	ldr	r1, [r5, #28]
  402300:	4640      	mov	r0, r8
  402302:	47a0      	blx	r4
  402304:	1c44      	adds	r4, r0, #1
  402306:	d03d      	beq.n	402384 <__sflush_r+0xd0>
  402308:	2100      	movs	r1, #0
  40230a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40230e:	692a      	ldr	r2, [r5, #16]
  402310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402314:	81ab      	strh	r3, [r5, #12]
  402316:	04db      	lsls	r3, r3, #19
  402318:	6069      	str	r1, [r5, #4]
  40231a:	602a      	str	r2, [r5, #0]
  40231c:	d448      	bmi.n	4023b0 <__sflush_r+0xfc>
  40231e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402320:	f8c8 6000 	str.w	r6, [r8]
  402324:	b319      	cbz	r1, 40236e <__sflush_r+0xba>
  402326:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40232a:	4299      	cmp	r1, r3
  40232c:	d002      	beq.n	402334 <__sflush_r+0x80>
  40232e:	4640      	mov	r0, r8
  402330:	f000 f964 	bl	4025fc <_free_r>
  402334:	2000      	movs	r0, #0
  402336:	6328      	str	r0, [r5, #48]	; 0x30
  402338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40233c:	692e      	ldr	r6, [r5, #16]
  40233e:	b1b6      	cbz	r6, 40236e <__sflush_r+0xba>
  402340:	0791      	lsls	r1, r2, #30
  402342:	bf18      	it	ne
  402344:	2300      	movne	r3, #0
  402346:	682c      	ldr	r4, [r5, #0]
  402348:	bf08      	it	eq
  40234a:	696b      	ldreq	r3, [r5, #20]
  40234c:	602e      	str	r6, [r5, #0]
  40234e:	1ba4      	subs	r4, r4, r6
  402350:	60ab      	str	r3, [r5, #8]
  402352:	e00a      	b.n	40236a <__sflush_r+0xb6>
  402354:	4623      	mov	r3, r4
  402356:	4632      	mov	r2, r6
  402358:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40235a:	69e9      	ldr	r1, [r5, #28]
  40235c:	4640      	mov	r0, r8
  40235e:	47b8      	blx	r7
  402360:	2800      	cmp	r0, #0
  402362:	eba4 0400 	sub.w	r4, r4, r0
  402366:	4406      	add	r6, r0
  402368:	dd04      	ble.n	402374 <__sflush_r+0xc0>
  40236a:	2c00      	cmp	r4, #0
  40236c:	dcf2      	bgt.n	402354 <__sflush_r+0xa0>
  40236e:	2000      	movs	r0, #0
  402370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402374:	89ab      	ldrh	r3, [r5, #12]
  402376:	f04f 30ff 	mov.w	r0, #4294967295
  40237a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40237e:	81ab      	strh	r3, [r5, #12]
  402380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402384:	f8d8 4000 	ldr.w	r4, [r8]
  402388:	2c1d      	cmp	r4, #29
  40238a:	d8f3      	bhi.n	402374 <__sflush_r+0xc0>
  40238c:	4b16      	ldr	r3, [pc, #88]	; (4023e8 <__sflush_r+0x134>)
  40238e:	40e3      	lsrs	r3, r4
  402390:	43db      	mvns	r3, r3
  402392:	f013 0301 	ands.w	r3, r3, #1
  402396:	d1ed      	bne.n	402374 <__sflush_r+0xc0>
  402398:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40239c:	6929      	ldr	r1, [r5, #16]
  40239e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4023a2:	81aa      	strh	r2, [r5, #12]
  4023a4:	04d2      	lsls	r2, r2, #19
  4023a6:	606b      	str	r3, [r5, #4]
  4023a8:	6029      	str	r1, [r5, #0]
  4023aa:	d5b8      	bpl.n	40231e <__sflush_r+0x6a>
  4023ac:	2c00      	cmp	r4, #0
  4023ae:	d1b6      	bne.n	40231e <__sflush_r+0x6a>
  4023b0:	6528      	str	r0, [r5, #80]	; 0x50
  4023b2:	e7b4      	b.n	40231e <__sflush_r+0x6a>
  4023b4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4023b6:	2a00      	cmp	r2, #0
  4023b8:	dc8b      	bgt.n	4022d2 <__sflush_r+0x1e>
  4023ba:	e7d8      	b.n	40236e <__sflush_r+0xba>
  4023bc:	2301      	movs	r3, #1
  4023be:	69e9      	ldr	r1, [r5, #28]
  4023c0:	4640      	mov	r0, r8
  4023c2:	47a0      	blx	r4
  4023c4:	1c43      	adds	r3, r0, #1
  4023c6:	4602      	mov	r2, r0
  4023c8:	d002      	beq.n	4023d0 <__sflush_r+0x11c>
  4023ca:	89ab      	ldrh	r3, [r5, #12]
  4023cc:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4023ce:	e78d      	b.n	4022ec <__sflush_r+0x38>
  4023d0:	f8d8 3000 	ldr.w	r3, [r8]
  4023d4:	2b00      	cmp	r3, #0
  4023d6:	d0f8      	beq.n	4023ca <__sflush_r+0x116>
  4023d8:	2b1d      	cmp	r3, #29
  4023da:	d001      	beq.n	4023e0 <__sflush_r+0x12c>
  4023dc:	2b16      	cmp	r3, #22
  4023de:	d1c9      	bne.n	402374 <__sflush_r+0xc0>
  4023e0:	f8c8 6000 	str.w	r6, [r8]
  4023e4:	e7c3      	b.n	40236e <__sflush_r+0xba>
  4023e6:	bf00      	nop
  4023e8:	20400001 	.word	0x20400001

004023ec <_fflush_r>:
  4023ec:	b510      	push	{r4, lr}
  4023ee:	4604      	mov	r4, r0
  4023f0:	b082      	sub	sp, #8
  4023f2:	b108      	cbz	r0, 4023f8 <_fflush_r+0xc>
  4023f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4023f6:	b153      	cbz	r3, 40240e <_fflush_r+0x22>
  4023f8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4023fc:	b908      	cbnz	r0, 402402 <_fflush_r+0x16>
  4023fe:	b002      	add	sp, #8
  402400:	bd10      	pop	{r4, pc}
  402402:	4620      	mov	r0, r4
  402404:	b002      	add	sp, #8
  402406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40240a:	f7ff bf53 	b.w	4022b4 <__sflush_r>
  40240e:	9101      	str	r1, [sp, #4]
  402410:	f000 f880 	bl	402514 <__sinit>
  402414:	9901      	ldr	r1, [sp, #4]
  402416:	e7ef      	b.n	4023f8 <_fflush_r+0xc>

00402418 <_cleanup_r>:
  402418:	4901      	ldr	r1, [pc, #4]	; (402420 <_cleanup_r+0x8>)
  40241a:	f000 bb4f 	b.w	402abc <_fwalk_reent>
  40241e:	bf00      	nop
  402420:	00403969 	.word	0x00403969

00402424 <__sinit.part.1>:
  402424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402428:	4607      	mov	r7, r0
  40242a:	2400      	movs	r4, #0
  40242c:	2304      	movs	r3, #4
  40242e:	2103      	movs	r1, #3
  402430:	687d      	ldr	r5, [r7, #4]
  402432:	4833      	ldr	r0, [pc, #204]	; (402500 <__sinit.part.1+0xdc>)
  402434:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  402438:	63f8      	str	r0, [r7, #60]	; 0x3c
  40243a:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  40243e:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  402442:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  402446:	b083      	sub	sp, #12
  402448:	602c      	str	r4, [r5, #0]
  40244a:	606c      	str	r4, [r5, #4]
  40244c:	60ac      	str	r4, [r5, #8]
  40244e:	666c      	str	r4, [r5, #100]	; 0x64
  402450:	81ec      	strh	r4, [r5, #14]
  402452:	612c      	str	r4, [r5, #16]
  402454:	616c      	str	r4, [r5, #20]
  402456:	61ac      	str	r4, [r5, #24]
  402458:	81ab      	strh	r3, [r5, #12]
  40245a:	4621      	mov	r1, r4
  40245c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402460:	2208      	movs	r2, #8
  402462:	f7ff fdb1 	bl	401fc8 <memset>
  402466:	2301      	movs	r3, #1
  402468:	2209      	movs	r2, #9
  40246a:	68be      	ldr	r6, [r7, #8]
  40246c:	f8df b094 	ldr.w	fp, [pc, #148]	; 402504 <__sinit.part.1+0xe0>
  402470:	f8df a094 	ldr.w	sl, [pc, #148]	; 402508 <__sinit.part.1+0xe4>
  402474:	f8df 9094 	ldr.w	r9, [pc, #148]	; 40250c <__sinit.part.1+0xe8>
  402478:	f8df 8094 	ldr.w	r8, [pc, #148]	; 402510 <__sinit.part.1+0xec>
  40247c:	f8c5 b020 	str.w	fp, [r5, #32]
  402480:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402484:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402488:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40248c:	61ed      	str	r5, [r5, #28]
  40248e:	4621      	mov	r1, r4
  402490:	81f3      	strh	r3, [r6, #14]
  402492:	81b2      	strh	r2, [r6, #12]
  402494:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  402498:	6034      	str	r4, [r6, #0]
  40249a:	6074      	str	r4, [r6, #4]
  40249c:	60b4      	str	r4, [r6, #8]
  40249e:	6674      	str	r4, [r6, #100]	; 0x64
  4024a0:	6134      	str	r4, [r6, #16]
  4024a2:	6174      	str	r4, [r6, #20]
  4024a4:	61b4      	str	r4, [r6, #24]
  4024a6:	2208      	movs	r2, #8
  4024a8:	9301      	str	r3, [sp, #4]
  4024aa:	f7ff fd8d 	bl	401fc8 <memset>
  4024ae:	2012      	movs	r0, #18
  4024b0:	2202      	movs	r2, #2
  4024b2:	68fd      	ldr	r5, [r7, #12]
  4024b4:	4621      	mov	r1, r4
  4024b6:	61f6      	str	r6, [r6, #28]
  4024b8:	f8c6 b020 	str.w	fp, [r6, #32]
  4024bc:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4024c0:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4024c4:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4024c8:	81a8      	strh	r0, [r5, #12]
  4024ca:	81ea      	strh	r2, [r5, #14]
  4024cc:	602c      	str	r4, [r5, #0]
  4024ce:	606c      	str	r4, [r5, #4]
  4024d0:	60ac      	str	r4, [r5, #8]
  4024d2:	666c      	str	r4, [r5, #100]	; 0x64
  4024d4:	612c      	str	r4, [r5, #16]
  4024d6:	616c      	str	r4, [r5, #20]
  4024d8:	61ac      	str	r4, [r5, #24]
  4024da:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4024de:	2208      	movs	r2, #8
  4024e0:	f7ff fd72 	bl	401fc8 <memset>
  4024e4:	9b01      	ldr	r3, [sp, #4]
  4024e6:	61ed      	str	r5, [r5, #28]
  4024e8:	f8c5 b020 	str.w	fp, [r5, #32]
  4024ec:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4024f0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4024f4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4024f8:	63bb      	str	r3, [r7, #56]	; 0x38
  4024fa:	b003      	add	sp, #12
  4024fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402500:	00402419 	.word	0x00402419
  402504:	0040371d 	.word	0x0040371d
  402508:	00403741 	.word	0x00403741
  40250c:	0040377d 	.word	0x0040377d
  402510:	0040379d 	.word	0x0040379d

00402514 <__sinit>:
  402514:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402516:	b103      	cbz	r3, 40251a <__sinit+0x6>
  402518:	4770      	bx	lr
  40251a:	f7ff bf83 	b.w	402424 <__sinit.part.1>
  40251e:	bf00      	nop

00402520 <__sfp_lock_acquire>:
  402520:	4770      	bx	lr
  402522:	bf00      	nop

00402524 <__sfp_lock_release>:
  402524:	4770      	bx	lr
  402526:	bf00      	nop

00402528 <__libc_fini_array>:
  402528:	b538      	push	{r3, r4, r5, lr}
  40252a:	4c0a      	ldr	r4, [pc, #40]	; (402554 <__libc_fini_array+0x2c>)
  40252c:	4d0a      	ldr	r5, [pc, #40]	; (402558 <__libc_fini_array+0x30>)
  40252e:	1b64      	subs	r4, r4, r5
  402530:	10a4      	asrs	r4, r4, #2
  402532:	d00a      	beq.n	40254a <__libc_fini_array+0x22>
  402534:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402538:	3b01      	subs	r3, #1
  40253a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40253e:	3c01      	subs	r4, #1
  402540:	f855 3904 	ldr.w	r3, [r5], #-4
  402544:	4798      	blx	r3
  402546:	2c00      	cmp	r4, #0
  402548:	d1f9      	bne.n	40253e <__libc_fini_array+0x16>
  40254a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40254e:	f001 bf05 	b.w	40435c <_fini>
  402552:	bf00      	nop
  402554:	0040436c 	.word	0x0040436c
  402558:	00404368 	.word	0x00404368

0040255c <_malloc_trim_r>:
  40255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40255e:	460c      	mov	r4, r1
  402560:	4f23      	ldr	r7, [pc, #140]	; (4025f0 <_malloc_trim_r+0x94>)
  402562:	4606      	mov	r6, r0
  402564:	f000 ff0e 	bl	403384 <__malloc_lock>
  402568:	68bb      	ldr	r3, [r7, #8]
  40256a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40256e:	685d      	ldr	r5, [r3, #4]
  402570:	310f      	adds	r1, #15
  402572:	f025 0503 	bic.w	r5, r5, #3
  402576:	4429      	add	r1, r5
  402578:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40257c:	f021 010f 	bic.w	r1, r1, #15
  402580:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402584:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402588:	db07      	blt.n	40259a <_malloc_trim_r+0x3e>
  40258a:	2100      	movs	r1, #0
  40258c:	4630      	mov	r0, r6
  40258e:	f001 f8b3 	bl	4036f8 <_sbrk_r>
  402592:	68bb      	ldr	r3, [r7, #8]
  402594:	442b      	add	r3, r5
  402596:	4298      	cmp	r0, r3
  402598:	d004      	beq.n	4025a4 <_malloc_trim_r+0x48>
  40259a:	4630      	mov	r0, r6
  40259c:	f000 fef4 	bl	403388 <__malloc_unlock>
  4025a0:	2000      	movs	r0, #0
  4025a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025a4:	4261      	negs	r1, r4
  4025a6:	4630      	mov	r0, r6
  4025a8:	f001 f8a6 	bl	4036f8 <_sbrk_r>
  4025ac:	3001      	adds	r0, #1
  4025ae:	d00d      	beq.n	4025cc <_malloc_trim_r+0x70>
  4025b0:	4b10      	ldr	r3, [pc, #64]	; (4025f4 <_malloc_trim_r+0x98>)
  4025b2:	68ba      	ldr	r2, [r7, #8]
  4025b4:	6819      	ldr	r1, [r3, #0]
  4025b6:	1b2d      	subs	r5, r5, r4
  4025b8:	f045 0501 	orr.w	r5, r5, #1
  4025bc:	4630      	mov	r0, r6
  4025be:	1b09      	subs	r1, r1, r4
  4025c0:	6055      	str	r5, [r2, #4]
  4025c2:	6019      	str	r1, [r3, #0]
  4025c4:	f000 fee0 	bl	403388 <__malloc_unlock>
  4025c8:	2001      	movs	r0, #1
  4025ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025cc:	2100      	movs	r1, #0
  4025ce:	4630      	mov	r0, r6
  4025d0:	f001 f892 	bl	4036f8 <_sbrk_r>
  4025d4:	68ba      	ldr	r2, [r7, #8]
  4025d6:	1a83      	subs	r3, r0, r2
  4025d8:	2b0f      	cmp	r3, #15
  4025da:	ddde      	ble.n	40259a <_malloc_trim_r+0x3e>
  4025dc:	4c06      	ldr	r4, [pc, #24]	; (4025f8 <_malloc_trim_r+0x9c>)
  4025de:	4905      	ldr	r1, [pc, #20]	; (4025f4 <_malloc_trim_r+0x98>)
  4025e0:	6824      	ldr	r4, [r4, #0]
  4025e2:	f043 0301 	orr.w	r3, r3, #1
  4025e6:	1b00      	subs	r0, r0, r4
  4025e8:	6053      	str	r3, [r2, #4]
  4025ea:	6008      	str	r0, [r1, #0]
  4025ec:	e7d5      	b.n	40259a <_malloc_trim_r+0x3e>
  4025ee:	bf00      	nop
  4025f0:	20000538 	.word	0x20000538
  4025f4:	20000b44 	.word	0x20000b44
  4025f8:	20000940 	.word	0x20000940

004025fc <_free_r>:
  4025fc:	2900      	cmp	r1, #0
  4025fe:	d044      	beq.n	40268a <_free_r+0x8e>
  402600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402604:	460d      	mov	r5, r1
  402606:	4680      	mov	r8, r0
  402608:	f000 febc 	bl	403384 <__malloc_lock>
  40260c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402610:	4969      	ldr	r1, [pc, #420]	; (4027b8 <_free_r+0x1bc>)
  402612:	f1a5 0408 	sub.w	r4, r5, #8
  402616:	f027 0301 	bic.w	r3, r7, #1
  40261a:	18e2      	adds	r2, r4, r3
  40261c:	688e      	ldr	r6, [r1, #8]
  40261e:	6850      	ldr	r0, [r2, #4]
  402620:	42b2      	cmp	r2, r6
  402622:	f020 0003 	bic.w	r0, r0, #3
  402626:	d05e      	beq.n	4026e6 <_free_r+0xea>
  402628:	07fe      	lsls	r6, r7, #31
  40262a:	6050      	str	r0, [r2, #4]
  40262c:	d40b      	bmi.n	402646 <_free_r+0x4a>
  40262e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402632:	f101 0e08 	add.w	lr, r1, #8
  402636:	1be4      	subs	r4, r4, r7
  402638:	68a5      	ldr	r5, [r4, #8]
  40263a:	443b      	add	r3, r7
  40263c:	4575      	cmp	r5, lr
  40263e:	d06d      	beq.n	40271c <_free_r+0x120>
  402640:	68e7      	ldr	r7, [r4, #12]
  402642:	60ef      	str	r7, [r5, #12]
  402644:	60bd      	str	r5, [r7, #8]
  402646:	1815      	adds	r5, r2, r0
  402648:	686d      	ldr	r5, [r5, #4]
  40264a:	07ed      	lsls	r5, r5, #31
  40264c:	d53e      	bpl.n	4026cc <_free_r+0xd0>
  40264e:	f043 0201 	orr.w	r2, r3, #1
  402652:	6062      	str	r2, [r4, #4]
  402654:	50e3      	str	r3, [r4, r3]
  402656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40265a:	d217      	bcs.n	40268c <_free_r+0x90>
  40265c:	2201      	movs	r2, #1
  40265e:	08db      	lsrs	r3, r3, #3
  402660:	1098      	asrs	r0, r3, #2
  402662:	684d      	ldr	r5, [r1, #4]
  402664:	4413      	add	r3, r2
  402666:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
  40266a:	4082      	lsls	r2, r0
  40266c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  402670:	432a      	orrs	r2, r5
  402672:	3808      	subs	r0, #8
  402674:	60e0      	str	r0, [r4, #12]
  402676:	60a7      	str	r7, [r4, #8]
  402678:	604a      	str	r2, [r1, #4]
  40267a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
  40267e:	60fc      	str	r4, [r7, #12]
  402680:	4640      	mov	r0, r8
  402682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402686:	f000 be7f 	b.w	403388 <__malloc_unlock>
  40268a:	4770      	bx	lr
  40268c:	0a5a      	lsrs	r2, r3, #9
  40268e:	2a04      	cmp	r2, #4
  402690:	d852      	bhi.n	402738 <_free_r+0x13c>
  402692:	099a      	lsrs	r2, r3, #6
  402694:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402698:	00ff      	lsls	r7, r7, #3
  40269a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40269e:	19c8      	adds	r0, r1, r7
  4026a0:	59ca      	ldr	r2, [r1, r7]
  4026a2:	3808      	subs	r0, #8
  4026a4:	4290      	cmp	r0, r2
  4026a6:	d04f      	beq.n	402748 <_free_r+0x14c>
  4026a8:	6851      	ldr	r1, [r2, #4]
  4026aa:	f021 0103 	bic.w	r1, r1, #3
  4026ae:	428b      	cmp	r3, r1
  4026b0:	d232      	bcs.n	402718 <_free_r+0x11c>
  4026b2:	6892      	ldr	r2, [r2, #8]
  4026b4:	4290      	cmp	r0, r2
  4026b6:	d1f7      	bne.n	4026a8 <_free_r+0xac>
  4026b8:	68c3      	ldr	r3, [r0, #12]
  4026ba:	60a0      	str	r0, [r4, #8]
  4026bc:	60e3      	str	r3, [r4, #12]
  4026be:	609c      	str	r4, [r3, #8]
  4026c0:	60c4      	str	r4, [r0, #12]
  4026c2:	4640      	mov	r0, r8
  4026c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4026c8:	f000 be5e 	b.w	403388 <__malloc_unlock>
  4026cc:	6895      	ldr	r5, [r2, #8]
  4026ce:	4f3b      	ldr	r7, [pc, #236]	; (4027bc <_free_r+0x1c0>)
  4026d0:	4403      	add	r3, r0
  4026d2:	42bd      	cmp	r5, r7
  4026d4:	d040      	beq.n	402758 <_free_r+0x15c>
  4026d6:	68d0      	ldr	r0, [r2, #12]
  4026d8:	f043 0201 	orr.w	r2, r3, #1
  4026dc:	60e8      	str	r0, [r5, #12]
  4026de:	6085      	str	r5, [r0, #8]
  4026e0:	6062      	str	r2, [r4, #4]
  4026e2:	50e3      	str	r3, [r4, r3]
  4026e4:	e7b7      	b.n	402656 <_free_r+0x5a>
  4026e6:	07ff      	lsls	r7, r7, #31
  4026e8:	4403      	add	r3, r0
  4026ea:	d407      	bmi.n	4026fc <_free_r+0x100>
  4026ec:	f855 5c08 	ldr.w	r5, [r5, #-8]
  4026f0:	1b64      	subs	r4, r4, r5
  4026f2:	68e2      	ldr	r2, [r4, #12]
  4026f4:	68a0      	ldr	r0, [r4, #8]
  4026f6:	442b      	add	r3, r5
  4026f8:	60c2      	str	r2, [r0, #12]
  4026fa:	6090      	str	r0, [r2, #8]
  4026fc:	4a30      	ldr	r2, [pc, #192]	; (4027c0 <_free_r+0x1c4>)
  4026fe:	f043 0001 	orr.w	r0, r3, #1
  402702:	6812      	ldr	r2, [r2, #0]
  402704:	6060      	str	r0, [r4, #4]
  402706:	4293      	cmp	r3, r2
  402708:	608c      	str	r4, [r1, #8]
  40270a:	d3b9      	bcc.n	402680 <_free_r+0x84>
  40270c:	4b2d      	ldr	r3, [pc, #180]	; (4027c4 <_free_r+0x1c8>)
  40270e:	4640      	mov	r0, r8
  402710:	6819      	ldr	r1, [r3, #0]
  402712:	f7ff ff23 	bl	40255c <_malloc_trim_r>
  402716:	e7b3      	b.n	402680 <_free_r+0x84>
  402718:	4610      	mov	r0, r2
  40271a:	e7cd      	b.n	4026b8 <_free_r+0xbc>
  40271c:	1811      	adds	r1, r2, r0
  40271e:	6849      	ldr	r1, [r1, #4]
  402720:	07c9      	lsls	r1, r1, #31
  402722:	d444      	bmi.n	4027ae <_free_r+0x1b2>
  402724:	6891      	ldr	r1, [r2, #8]
  402726:	4403      	add	r3, r0
  402728:	68d2      	ldr	r2, [r2, #12]
  40272a:	f043 0001 	orr.w	r0, r3, #1
  40272e:	60ca      	str	r2, [r1, #12]
  402730:	6091      	str	r1, [r2, #8]
  402732:	6060      	str	r0, [r4, #4]
  402734:	50e3      	str	r3, [r4, r3]
  402736:	e7a3      	b.n	402680 <_free_r+0x84>
  402738:	2a14      	cmp	r2, #20
  40273a:	d816      	bhi.n	40276a <_free_r+0x16e>
  40273c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402740:	00ff      	lsls	r7, r7, #3
  402742:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402746:	e7aa      	b.n	40269e <_free_r+0xa2>
  402748:	2301      	movs	r3, #1
  40274a:	10aa      	asrs	r2, r5, #2
  40274c:	684d      	ldr	r5, [r1, #4]
  40274e:	4093      	lsls	r3, r2
  402750:	432b      	orrs	r3, r5
  402752:	604b      	str	r3, [r1, #4]
  402754:	4603      	mov	r3, r0
  402756:	e7b0      	b.n	4026ba <_free_r+0xbe>
  402758:	f043 0201 	orr.w	r2, r3, #1
  40275c:	614c      	str	r4, [r1, #20]
  40275e:	610c      	str	r4, [r1, #16]
  402760:	60e5      	str	r5, [r4, #12]
  402762:	60a5      	str	r5, [r4, #8]
  402764:	6062      	str	r2, [r4, #4]
  402766:	50e3      	str	r3, [r4, r3]
  402768:	e78a      	b.n	402680 <_free_r+0x84>
  40276a:	2a54      	cmp	r2, #84	; 0x54
  40276c:	d806      	bhi.n	40277c <_free_r+0x180>
  40276e:	0b1a      	lsrs	r2, r3, #12
  402770:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402774:	00ff      	lsls	r7, r7, #3
  402776:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40277a:	e790      	b.n	40269e <_free_r+0xa2>
  40277c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402780:	d806      	bhi.n	402790 <_free_r+0x194>
  402782:	0bda      	lsrs	r2, r3, #15
  402784:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402788:	00ff      	lsls	r7, r7, #3
  40278a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40278e:	e786      	b.n	40269e <_free_r+0xa2>
  402790:	f240 5054 	movw	r0, #1364	; 0x554
  402794:	4282      	cmp	r2, r0
  402796:	d806      	bhi.n	4027a6 <_free_r+0x1aa>
  402798:	0c9a      	lsrs	r2, r3, #18
  40279a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40279e:	00ff      	lsls	r7, r7, #3
  4027a0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4027a4:	e77b      	b.n	40269e <_free_r+0xa2>
  4027a6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4027aa:	257e      	movs	r5, #126	; 0x7e
  4027ac:	e777      	b.n	40269e <_free_r+0xa2>
  4027ae:	f043 0101 	orr.w	r1, r3, #1
  4027b2:	6061      	str	r1, [r4, #4]
  4027b4:	6013      	str	r3, [r2, #0]
  4027b6:	e763      	b.n	402680 <_free_r+0x84>
  4027b8:	20000538 	.word	0x20000538
  4027bc:	20000540 	.word	0x20000540
  4027c0:	20000944 	.word	0x20000944
  4027c4:	20000b74 	.word	0x20000b74

004027c8 <__sfvwrite_r>:
  4027c8:	6893      	ldr	r3, [r2, #8]
  4027ca:	2b00      	cmp	r3, #0
  4027cc:	d071      	beq.n	4028b2 <__sfvwrite_r+0xea>
  4027ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027d2:	898b      	ldrh	r3, [r1, #12]
  4027d4:	b083      	sub	sp, #12
  4027d6:	460c      	mov	r4, r1
  4027d8:	0719      	lsls	r1, r3, #28
  4027da:	9000      	str	r0, [sp, #0]
  4027dc:	4616      	mov	r6, r2
  4027de:	d525      	bpl.n	40282c <__sfvwrite_r+0x64>
  4027e0:	6922      	ldr	r2, [r4, #16]
  4027e2:	b31a      	cbz	r2, 40282c <__sfvwrite_r+0x64>
  4027e4:	f013 0002 	ands.w	r0, r3, #2
  4027e8:	6835      	ldr	r5, [r6, #0]
  4027ea:	d02b      	beq.n	402844 <__sfvwrite_r+0x7c>
  4027ec:	f04f 0900 	mov.w	r9, #0
  4027f0:	46b0      	mov	r8, r6
  4027f2:	464f      	mov	r7, r9
  4027f4:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 402ab8 <__sfvwrite_r+0x2f0>
  4027f8:	2f00      	cmp	r7, #0
  4027fa:	d055      	beq.n	4028a8 <__sfvwrite_r+0xe0>
  4027fc:	4557      	cmp	r7, sl
  4027fe:	463b      	mov	r3, r7
  402800:	464a      	mov	r2, r9
  402802:	bf28      	it	cs
  402804:	4653      	movcs	r3, sl
  402806:	69e1      	ldr	r1, [r4, #28]
  402808:	9800      	ldr	r0, [sp, #0]
  40280a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40280c:	47b0      	blx	r6
  40280e:	2800      	cmp	r0, #0
  402810:	dd56      	ble.n	4028c0 <__sfvwrite_r+0xf8>
  402812:	f8d8 3008 	ldr.w	r3, [r8, #8]
  402816:	4481      	add	r9, r0
  402818:	1a1b      	subs	r3, r3, r0
  40281a:	1a3f      	subs	r7, r7, r0
  40281c:	f8c8 3008 	str.w	r3, [r8, #8]
  402820:	2b00      	cmp	r3, #0
  402822:	d1e9      	bne.n	4027f8 <__sfvwrite_r+0x30>
  402824:	2000      	movs	r0, #0
  402826:	b003      	add	sp, #12
  402828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40282c:	4621      	mov	r1, r4
  40282e:	9800      	ldr	r0, [sp, #0]
  402830:	f000 ffce 	bl	4037d0 <__swsetup_r>
  402834:	2800      	cmp	r0, #0
  402836:	f040 8135 	bne.w	402aa4 <__sfvwrite_r+0x2dc>
  40283a:	89a3      	ldrh	r3, [r4, #12]
  40283c:	6835      	ldr	r5, [r6, #0]
  40283e:	f013 0002 	ands.w	r0, r3, #2
  402842:	d1d3      	bne.n	4027ec <__sfvwrite_r+0x24>
  402844:	f013 0901 	ands.w	r9, r3, #1
  402848:	d144      	bne.n	4028d4 <__sfvwrite_r+0x10c>
  40284a:	464f      	mov	r7, r9
  40284c:	9601      	str	r6, [sp, #4]
  40284e:	b337      	cbz	r7, 40289e <__sfvwrite_r+0xd6>
  402850:	059a      	lsls	r2, r3, #22
  402852:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402856:	f140 8085 	bpl.w	402964 <__sfvwrite_r+0x19c>
  40285a:	4547      	cmp	r7, r8
  40285c:	46c3      	mov	fp, r8
  40285e:	f0c0 80ad 	bcc.w	4029bc <__sfvwrite_r+0x1f4>
  402862:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402866:	f040 80ae 	bne.w	4029c6 <__sfvwrite_r+0x1fe>
  40286a:	46ba      	mov	sl, r7
  40286c:	6820      	ldr	r0, [r4, #0]
  40286e:	465a      	mov	r2, fp
  402870:	4649      	mov	r1, r9
  402872:	f000 fd23 	bl	4032bc <memmove>
  402876:	68a2      	ldr	r2, [r4, #8]
  402878:	6823      	ldr	r3, [r4, #0]
  40287a:	eba2 0208 	sub.w	r2, r2, r8
  40287e:	445b      	add	r3, fp
  402880:	60a2      	str	r2, [r4, #8]
  402882:	6023      	str	r3, [r4, #0]
  402884:	9a01      	ldr	r2, [sp, #4]
  402886:	44d1      	add	r9, sl
  402888:	6893      	ldr	r3, [r2, #8]
  40288a:	eba7 070a 	sub.w	r7, r7, sl
  40288e:	eba3 030a 	sub.w	r3, r3, sl
  402892:	6093      	str	r3, [r2, #8]
  402894:	2b00      	cmp	r3, #0
  402896:	d0c5      	beq.n	402824 <__sfvwrite_r+0x5c>
  402898:	89a3      	ldrh	r3, [r4, #12]
  40289a:	2f00      	cmp	r7, #0
  40289c:	d1d8      	bne.n	402850 <__sfvwrite_r+0x88>
  40289e:	f8d5 9000 	ldr.w	r9, [r5]
  4028a2:	686f      	ldr	r7, [r5, #4]
  4028a4:	3508      	adds	r5, #8
  4028a6:	e7d2      	b.n	40284e <__sfvwrite_r+0x86>
  4028a8:	f8d5 9000 	ldr.w	r9, [r5]
  4028ac:	686f      	ldr	r7, [r5, #4]
  4028ae:	3508      	adds	r5, #8
  4028b0:	e7a2      	b.n	4027f8 <__sfvwrite_r+0x30>
  4028b2:	2000      	movs	r0, #0
  4028b4:	4770      	bx	lr
  4028b6:	4621      	mov	r1, r4
  4028b8:	9800      	ldr	r0, [sp, #0]
  4028ba:	f7ff fd97 	bl	4023ec <_fflush_r>
  4028be:	b378      	cbz	r0, 402920 <__sfvwrite_r+0x158>
  4028c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4028c4:	f04f 30ff 	mov.w	r0, #4294967295
  4028c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028cc:	81a3      	strh	r3, [r4, #12]
  4028ce:	b003      	add	sp, #12
  4028d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4028d4:	4681      	mov	r9, r0
  4028d6:	4633      	mov	r3, r6
  4028d8:	464e      	mov	r6, r9
  4028da:	46a8      	mov	r8, r5
  4028dc:	469a      	mov	sl, r3
  4028de:	464d      	mov	r5, r9
  4028e0:	b356      	cbz	r6, 402938 <__sfvwrite_r+0x170>
  4028e2:	2800      	cmp	r0, #0
  4028e4:	d032      	beq.n	40294c <__sfvwrite_r+0x184>
  4028e6:	45b1      	cmp	r9, r6
  4028e8:	46cb      	mov	fp, r9
  4028ea:	bf28      	it	cs
  4028ec:	46b3      	movcs	fp, r6
  4028ee:	6820      	ldr	r0, [r4, #0]
  4028f0:	6923      	ldr	r3, [r4, #16]
  4028f2:	465f      	mov	r7, fp
  4028f4:	4298      	cmp	r0, r3
  4028f6:	6962      	ldr	r2, [r4, #20]
  4028f8:	d904      	bls.n	402904 <__sfvwrite_r+0x13c>
  4028fa:	68a3      	ldr	r3, [r4, #8]
  4028fc:	4413      	add	r3, r2
  4028fe:	459b      	cmp	fp, r3
  402900:	f300 80a8 	bgt.w	402a54 <__sfvwrite_r+0x28c>
  402904:	4593      	cmp	fp, r2
  402906:	db4d      	blt.n	4029a4 <__sfvwrite_r+0x1dc>
  402908:	4613      	mov	r3, r2
  40290a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40290c:	462a      	mov	r2, r5
  40290e:	69e1      	ldr	r1, [r4, #28]
  402910:	9800      	ldr	r0, [sp, #0]
  402912:	47b8      	blx	r7
  402914:	1e07      	subs	r7, r0, #0
  402916:	ddd3      	ble.n	4028c0 <__sfvwrite_r+0xf8>
  402918:	ebb9 0907 	subs.w	r9, r9, r7
  40291c:	d0cb      	beq.n	4028b6 <__sfvwrite_r+0xee>
  40291e:	2001      	movs	r0, #1
  402920:	f8da 3008 	ldr.w	r3, [sl, #8]
  402924:	443d      	add	r5, r7
  402926:	1bdb      	subs	r3, r3, r7
  402928:	1bf6      	subs	r6, r6, r7
  40292a:	f8ca 3008 	str.w	r3, [sl, #8]
  40292e:	2b00      	cmp	r3, #0
  402930:	f43f af78 	beq.w	402824 <__sfvwrite_r+0x5c>
  402934:	2e00      	cmp	r6, #0
  402936:	d1d4      	bne.n	4028e2 <__sfvwrite_r+0x11a>
  402938:	f108 0308 	add.w	r3, r8, #8
  40293c:	f853 6c04 	ldr.w	r6, [r3, #-4]
  402940:	4698      	mov	r8, r3
  402942:	f853 5c08 	ldr.w	r5, [r3, #-8]
  402946:	3308      	adds	r3, #8
  402948:	2e00      	cmp	r6, #0
  40294a:	d0f7      	beq.n	40293c <__sfvwrite_r+0x174>
  40294c:	4632      	mov	r2, r6
  40294e:	210a      	movs	r1, #10
  402950:	4628      	mov	r0, r5
  402952:	f000 fbf7 	bl	403144 <memchr>
  402956:	2800      	cmp	r0, #0
  402958:	f000 80a1 	beq.w	402a9e <__sfvwrite_r+0x2d6>
  40295c:	3001      	adds	r0, #1
  40295e:	eba0 0905 	sub.w	r9, r0, r5
  402962:	e7c0      	b.n	4028e6 <__sfvwrite_r+0x11e>
  402964:	6820      	ldr	r0, [r4, #0]
  402966:	6923      	ldr	r3, [r4, #16]
  402968:	4298      	cmp	r0, r3
  40296a:	d802      	bhi.n	402972 <__sfvwrite_r+0x1aa>
  40296c:	6963      	ldr	r3, [r4, #20]
  40296e:	429f      	cmp	r7, r3
  402970:	d25d      	bcs.n	402a2e <__sfvwrite_r+0x266>
  402972:	45b8      	cmp	r8, r7
  402974:	bf28      	it	cs
  402976:	46b8      	movcs	r8, r7
  402978:	4649      	mov	r1, r9
  40297a:	4642      	mov	r2, r8
  40297c:	f000 fc9e 	bl	4032bc <memmove>
  402980:	68a3      	ldr	r3, [r4, #8]
  402982:	6822      	ldr	r2, [r4, #0]
  402984:	eba3 0308 	sub.w	r3, r3, r8
  402988:	4442      	add	r2, r8
  40298a:	60a3      	str	r3, [r4, #8]
  40298c:	6022      	str	r2, [r4, #0]
  40298e:	b10b      	cbz	r3, 402994 <__sfvwrite_r+0x1cc>
  402990:	46c2      	mov	sl, r8
  402992:	e777      	b.n	402884 <__sfvwrite_r+0xbc>
  402994:	4621      	mov	r1, r4
  402996:	9800      	ldr	r0, [sp, #0]
  402998:	f7ff fd28 	bl	4023ec <_fflush_r>
  40299c:	2800      	cmp	r0, #0
  40299e:	d18f      	bne.n	4028c0 <__sfvwrite_r+0xf8>
  4029a0:	46c2      	mov	sl, r8
  4029a2:	e76f      	b.n	402884 <__sfvwrite_r+0xbc>
  4029a4:	465a      	mov	r2, fp
  4029a6:	4629      	mov	r1, r5
  4029a8:	f000 fc88 	bl	4032bc <memmove>
  4029ac:	68a2      	ldr	r2, [r4, #8]
  4029ae:	6823      	ldr	r3, [r4, #0]
  4029b0:	eba2 020b 	sub.w	r2, r2, fp
  4029b4:	445b      	add	r3, fp
  4029b6:	60a2      	str	r2, [r4, #8]
  4029b8:	6023      	str	r3, [r4, #0]
  4029ba:	e7ad      	b.n	402918 <__sfvwrite_r+0x150>
  4029bc:	46b8      	mov	r8, r7
  4029be:	46ba      	mov	sl, r7
  4029c0:	46bb      	mov	fp, r7
  4029c2:	6820      	ldr	r0, [r4, #0]
  4029c4:	e753      	b.n	40286e <__sfvwrite_r+0xa6>
  4029c6:	6962      	ldr	r2, [r4, #20]
  4029c8:	6820      	ldr	r0, [r4, #0]
  4029ca:	6921      	ldr	r1, [r4, #16]
  4029cc:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4029d0:	eba0 0a01 	sub.w	sl, r0, r1
  4029d4:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4029d8:	f10a 0001 	add.w	r0, sl, #1
  4029dc:	ea4f 0868 	mov.w	r8, r8, asr #1
  4029e0:	4438      	add	r0, r7
  4029e2:	4540      	cmp	r0, r8
  4029e4:	4642      	mov	r2, r8
  4029e6:	bf84      	itt	hi
  4029e8:	4680      	movhi	r8, r0
  4029ea:	4642      	movhi	r2, r8
  4029ec:	055b      	lsls	r3, r3, #21
  4029ee:	d544      	bpl.n	402a7a <__sfvwrite_r+0x2b2>
  4029f0:	4611      	mov	r1, r2
  4029f2:	9800      	ldr	r0, [sp, #0]
  4029f4:	f000 f904 	bl	402c00 <_malloc_r>
  4029f8:	4683      	mov	fp, r0
  4029fa:	2800      	cmp	r0, #0
  4029fc:	d055      	beq.n	402aaa <__sfvwrite_r+0x2e2>
  4029fe:	4652      	mov	r2, sl
  402a00:	6921      	ldr	r1, [r4, #16]
  402a02:	f000 fbe5 	bl	4031d0 <memcpy>
  402a06:	89a3      	ldrh	r3, [r4, #12]
  402a08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402a10:	81a3      	strh	r3, [r4, #12]
  402a12:	eb0b 000a 	add.w	r0, fp, sl
  402a16:	eba8 030a 	sub.w	r3, r8, sl
  402a1a:	f8c4 b010 	str.w	fp, [r4, #16]
  402a1e:	f8c4 8014 	str.w	r8, [r4, #20]
  402a22:	6020      	str	r0, [r4, #0]
  402a24:	60a3      	str	r3, [r4, #8]
  402a26:	46b8      	mov	r8, r7
  402a28:	46ba      	mov	sl, r7
  402a2a:	46bb      	mov	fp, r7
  402a2c:	e71f      	b.n	40286e <__sfvwrite_r+0xa6>
  402a2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  402a32:	42ba      	cmp	r2, r7
  402a34:	bf28      	it	cs
  402a36:	463a      	movcs	r2, r7
  402a38:	fb92 f2f3 	sdiv	r2, r2, r3
  402a3c:	69e1      	ldr	r1, [r4, #28]
  402a3e:	fb03 f302 	mul.w	r3, r3, r2
  402a42:	9800      	ldr	r0, [sp, #0]
  402a44:	464a      	mov	r2, r9
  402a46:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402a48:	47b0      	blx	r6
  402a4a:	f1b0 0a00 	subs.w	sl, r0, #0
  402a4e:	f73f af19 	bgt.w	402884 <__sfvwrite_r+0xbc>
  402a52:	e735      	b.n	4028c0 <__sfvwrite_r+0xf8>
  402a54:	461a      	mov	r2, r3
  402a56:	4629      	mov	r1, r5
  402a58:	9301      	str	r3, [sp, #4]
  402a5a:	f000 fc2f 	bl	4032bc <memmove>
  402a5e:	6822      	ldr	r2, [r4, #0]
  402a60:	9b01      	ldr	r3, [sp, #4]
  402a62:	4621      	mov	r1, r4
  402a64:	441a      	add	r2, r3
  402a66:	6022      	str	r2, [r4, #0]
  402a68:	9800      	ldr	r0, [sp, #0]
  402a6a:	f7ff fcbf 	bl	4023ec <_fflush_r>
  402a6e:	9b01      	ldr	r3, [sp, #4]
  402a70:	2800      	cmp	r0, #0
  402a72:	f47f af25 	bne.w	4028c0 <__sfvwrite_r+0xf8>
  402a76:	461f      	mov	r7, r3
  402a78:	e74e      	b.n	402918 <__sfvwrite_r+0x150>
  402a7a:	9800      	ldr	r0, [sp, #0]
  402a7c:	f000 fc86 	bl	40338c <_realloc_r>
  402a80:	4683      	mov	fp, r0
  402a82:	2800      	cmp	r0, #0
  402a84:	d1c5      	bne.n	402a12 <__sfvwrite_r+0x24a>
  402a86:	9d00      	ldr	r5, [sp, #0]
  402a88:	6921      	ldr	r1, [r4, #16]
  402a8a:	4628      	mov	r0, r5
  402a8c:	f7ff fdb6 	bl	4025fc <_free_r>
  402a90:	220c      	movs	r2, #12
  402a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a96:	602a      	str	r2, [r5, #0]
  402a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402a9c:	e712      	b.n	4028c4 <__sfvwrite_r+0xfc>
  402a9e:	f106 0901 	add.w	r9, r6, #1
  402aa2:	e720      	b.n	4028e6 <__sfvwrite_r+0x11e>
  402aa4:	f04f 30ff 	mov.w	r0, #4294967295
  402aa8:	e6bd      	b.n	402826 <__sfvwrite_r+0x5e>
  402aaa:	220c      	movs	r2, #12
  402aac:	9900      	ldr	r1, [sp, #0]
  402aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ab2:	600a      	str	r2, [r1, #0]
  402ab4:	e706      	b.n	4028c4 <__sfvwrite_r+0xfc>
  402ab6:	bf00      	nop
  402ab8:	7ffffc00 	.word	0x7ffffc00

00402abc <_fwalk_reent>:
  402abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402ac0:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
  402ac4:	d01e      	beq.n	402b04 <_fwalk_reent+0x48>
  402ac6:	4688      	mov	r8, r1
  402ac8:	4607      	mov	r7, r0
  402aca:	f04f 0900 	mov.w	r9, #0
  402ace:	6875      	ldr	r5, [r6, #4]
  402ad0:	68b4      	ldr	r4, [r6, #8]
  402ad2:	3d01      	subs	r5, #1
  402ad4:	d410      	bmi.n	402af8 <_fwalk_reent+0x3c>
  402ad6:	89a3      	ldrh	r3, [r4, #12]
  402ad8:	3d01      	subs	r5, #1
  402ada:	2b01      	cmp	r3, #1
  402adc:	d908      	bls.n	402af0 <_fwalk_reent+0x34>
  402ade:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402ae2:	3301      	adds	r3, #1
  402ae4:	d004      	beq.n	402af0 <_fwalk_reent+0x34>
  402ae6:	4621      	mov	r1, r4
  402ae8:	4638      	mov	r0, r7
  402aea:	47c0      	blx	r8
  402aec:	ea49 0900 	orr.w	r9, r9, r0
  402af0:	1c6b      	adds	r3, r5, #1
  402af2:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402af6:	d1ee      	bne.n	402ad6 <_fwalk_reent+0x1a>
  402af8:	6836      	ldr	r6, [r6, #0]
  402afa:	2e00      	cmp	r6, #0
  402afc:	d1e7      	bne.n	402ace <_fwalk_reent+0x12>
  402afe:	4648      	mov	r0, r9
  402b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402b04:	46b1      	mov	r9, r6
  402b06:	4648      	mov	r0, r9
  402b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00402b0c <__swhatbuf_r>:
  402b0c:	b570      	push	{r4, r5, r6, lr}
  402b0e:	460c      	mov	r4, r1
  402b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402b14:	b090      	sub	sp, #64	; 0x40
  402b16:	2900      	cmp	r1, #0
  402b18:	4615      	mov	r5, r2
  402b1a:	461e      	mov	r6, r3
  402b1c:	db14      	blt.n	402b48 <__swhatbuf_r+0x3c>
  402b1e:	aa01      	add	r2, sp, #4
  402b20:	f000 ff62 	bl	4039e8 <_fstat_r>
  402b24:	2800      	cmp	r0, #0
  402b26:	db0f      	blt.n	402b48 <__swhatbuf_r+0x3c>
  402b28:	9a02      	ldr	r2, [sp, #8]
  402b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402b2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402b32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402b36:	fab2 f282 	clz	r2, r2
  402b3a:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402b3e:	0952      	lsrs	r2, r2, #5
  402b40:	6032      	str	r2, [r6, #0]
  402b42:	602b      	str	r3, [r5, #0]
  402b44:	b010      	add	sp, #64	; 0x40
  402b46:	bd70      	pop	{r4, r5, r6, pc}
  402b48:	2300      	movs	r3, #0
  402b4a:	89a2      	ldrh	r2, [r4, #12]
  402b4c:	6033      	str	r3, [r6, #0]
  402b4e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402b52:	d004      	beq.n	402b5e <__swhatbuf_r+0x52>
  402b54:	2240      	movs	r2, #64	; 0x40
  402b56:	4618      	mov	r0, r3
  402b58:	602a      	str	r2, [r5, #0]
  402b5a:	b010      	add	sp, #64	; 0x40
  402b5c:	bd70      	pop	{r4, r5, r6, pc}
  402b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402b62:	602b      	str	r3, [r5, #0]
  402b64:	b010      	add	sp, #64	; 0x40
  402b66:	bd70      	pop	{r4, r5, r6, pc}

00402b68 <__smakebuf_r>:
  402b68:	898a      	ldrh	r2, [r1, #12]
  402b6a:	460b      	mov	r3, r1
  402b6c:	0792      	lsls	r2, r2, #30
  402b6e:	d506      	bpl.n	402b7e <__smakebuf_r+0x16>
  402b70:	2101      	movs	r1, #1
  402b72:	f103 0243 	add.w	r2, r3, #67	; 0x43
  402b76:	6159      	str	r1, [r3, #20]
  402b78:	601a      	str	r2, [r3, #0]
  402b7a:	611a      	str	r2, [r3, #16]
  402b7c:	4770      	bx	lr
  402b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b80:	b083      	sub	sp, #12
  402b82:	ab01      	add	r3, sp, #4
  402b84:	466a      	mov	r2, sp
  402b86:	460c      	mov	r4, r1
  402b88:	4605      	mov	r5, r0
  402b8a:	f7ff ffbf 	bl	402b0c <__swhatbuf_r>
  402b8e:	9900      	ldr	r1, [sp, #0]
  402b90:	4606      	mov	r6, r0
  402b92:	4628      	mov	r0, r5
  402b94:	f000 f834 	bl	402c00 <_malloc_r>
  402b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b9c:	b1d0      	cbz	r0, 402bd4 <__smakebuf_r+0x6c>
  402b9e:	e89d 0006 	ldmia.w	sp, {r1, r2}
  402ba2:	4f12      	ldr	r7, [pc, #72]	; (402bec <__smakebuf_r+0x84>)
  402ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ba8:	63ef      	str	r7, [r5, #60]	; 0x3c
  402baa:	81a3      	strh	r3, [r4, #12]
  402bac:	6020      	str	r0, [r4, #0]
  402bae:	6120      	str	r0, [r4, #16]
  402bb0:	6161      	str	r1, [r4, #20]
  402bb2:	b91a      	cbnz	r2, 402bbc <__smakebuf_r+0x54>
  402bb4:	4333      	orrs	r3, r6
  402bb6:	81a3      	strh	r3, [r4, #12]
  402bb8:	b003      	add	sp, #12
  402bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402bbc:	4628      	mov	r0, r5
  402bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402bc2:	f000 ff25 	bl	403a10 <_isatty_r>
  402bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402bca:	2800      	cmp	r0, #0
  402bcc:	d0f2      	beq.n	402bb4 <__smakebuf_r+0x4c>
  402bce:	f043 0301 	orr.w	r3, r3, #1
  402bd2:	e7ef      	b.n	402bb4 <__smakebuf_r+0x4c>
  402bd4:	059a      	lsls	r2, r3, #22
  402bd6:	d4ef      	bmi.n	402bb8 <__smakebuf_r+0x50>
  402bd8:	2101      	movs	r1, #1
  402bda:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402bde:	f043 0302 	orr.w	r3, r3, #2
  402be2:	81a3      	strh	r3, [r4, #12]
  402be4:	6161      	str	r1, [r4, #20]
  402be6:	6022      	str	r2, [r4, #0]
  402be8:	6122      	str	r2, [r4, #16]
  402bea:	e7e5      	b.n	402bb8 <__smakebuf_r+0x50>
  402bec:	00402419 	.word	0x00402419

00402bf0 <malloc>:
  402bf0:	4b02      	ldr	r3, [pc, #8]	; (402bfc <malloc+0xc>)
  402bf2:	4601      	mov	r1, r0
  402bf4:	6818      	ldr	r0, [r3, #0]
  402bf6:	f000 b803 	b.w	402c00 <_malloc_r>
  402bfa:	bf00      	nop
  402bfc:	20000108 	.word	0x20000108

00402c00 <_malloc_r>:
  402c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c04:	f101 060b 	add.w	r6, r1, #11
  402c08:	2e16      	cmp	r6, #22
  402c0a:	b083      	sub	sp, #12
  402c0c:	4605      	mov	r5, r0
  402c0e:	f240 809e 	bls.w	402d4e <_malloc_r+0x14e>
  402c12:	f036 0607 	bics.w	r6, r6, #7
  402c16:	f100 80bd 	bmi.w	402d94 <_malloc_r+0x194>
  402c1a:	42b1      	cmp	r1, r6
  402c1c:	f200 80ba 	bhi.w	402d94 <_malloc_r+0x194>
  402c20:	f000 fbb0 	bl	403384 <__malloc_lock>
  402c24:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402c28:	f0c0 8285 	bcc.w	403136 <_malloc_r+0x536>
  402c2c:	0a73      	lsrs	r3, r6, #9
  402c2e:	f000 80b8 	beq.w	402da2 <_malloc_r+0x1a2>
  402c32:	2b04      	cmp	r3, #4
  402c34:	f200 816c 	bhi.w	402f10 <_malloc_r+0x310>
  402c38:	09b3      	lsrs	r3, r6, #6
  402c3a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402c3e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402c42:	00c1      	lsls	r1, r0, #3
  402c44:	4fb8      	ldr	r7, [pc, #736]	; (402f28 <_malloc_r+0x328>)
  402c46:	4439      	add	r1, r7
  402c48:	684c      	ldr	r4, [r1, #4]
  402c4a:	3908      	subs	r1, #8
  402c4c:	42a1      	cmp	r1, r4
  402c4e:	d106      	bne.n	402c5e <_malloc_r+0x5e>
  402c50:	e00c      	b.n	402c6c <_malloc_r+0x6c>
  402c52:	2a00      	cmp	r2, #0
  402c54:	f280 80ab 	bge.w	402dae <_malloc_r+0x1ae>
  402c58:	68e4      	ldr	r4, [r4, #12]
  402c5a:	42a1      	cmp	r1, r4
  402c5c:	d006      	beq.n	402c6c <_malloc_r+0x6c>
  402c5e:	6863      	ldr	r3, [r4, #4]
  402c60:	f023 0303 	bic.w	r3, r3, #3
  402c64:	1b9a      	subs	r2, r3, r6
  402c66:	2a0f      	cmp	r2, #15
  402c68:	ddf3      	ble.n	402c52 <_malloc_r+0x52>
  402c6a:	4670      	mov	r0, lr
  402c6c:	693c      	ldr	r4, [r7, #16]
  402c6e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 402f3c <_malloc_r+0x33c>
  402c72:	4574      	cmp	r4, lr
  402c74:	f000 819e 	beq.w	402fb4 <_malloc_r+0x3b4>
  402c78:	6863      	ldr	r3, [r4, #4]
  402c7a:	f023 0303 	bic.w	r3, r3, #3
  402c7e:	1b9a      	subs	r2, r3, r6
  402c80:	2a0f      	cmp	r2, #15
  402c82:	f300 8183 	bgt.w	402f8c <_malloc_r+0x38c>
  402c86:	2a00      	cmp	r2, #0
  402c88:	f8c7 e014 	str.w	lr, [r7, #20]
  402c8c:	f8c7 e010 	str.w	lr, [r7, #16]
  402c90:	f280 8091 	bge.w	402db6 <_malloc_r+0x1b6>
  402c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402c98:	f080 8154 	bcs.w	402f44 <_malloc_r+0x344>
  402c9c:	2201      	movs	r2, #1
  402c9e:	08db      	lsrs	r3, r3, #3
  402ca0:	6879      	ldr	r1, [r7, #4]
  402ca2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  402ca6:	4413      	add	r3, r2
  402ca8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
  402cac:	fa02 f20c 	lsl.w	r2, r2, ip
  402cb0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
  402cb4:	430a      	orrs	r2, r1
  402cb6:	f1ac 0108 	sub.w	r1, ip, #8
  402cba:	60e1      	str	r1, [r4, #12]
  402cbc:	f8c4 8008 	str.w	r8, [r4, #8]
  402cc0:	607a      	str	r2, [r7, #4]
  402cc2:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  402cc6:	f8c8 400c 	str.w	r4, [r8, #12]
  402cca:	2401      	movs	r4, #1
  402ccc:	1083      	asrs	r3, r0, #2
  402cce:	409c      	lsls	r4, r3
  402cd0:	4294      	cmp	r4, r2
  402cd2:	d87d      	bhi.n	402dd0 <_malloc_r+0x1d0>
  402cd4:	4214      	tst	r4, r2
  402cd6:	d106      	bne.n	402ce6 <_malloc_r+0xe6>
  402cd8:	f020 0003 	bic.w	r0, r0, #3
  402cdc:	0064      	lsls	r4, r4, #1
  402cde:	4214      	tst	r4, r2
  402ce0:	f100 0004 	add.w	r0, r0, #4
  402ce4:	d0fa      	beq.n	402cdc <_malloc_r+0xdc>
  402ce6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402cea:	46cc      	mov	ip, r9
  402cec:	4680      	mov	r8, r0
  402cee:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402cf2:	459c      	cmp	ip, r3
  402cf4:	d107      	bne.n	402d06 <_malloc_r+0x106>
  402cf6:	e15f      	b.n	402fb8 <_malloc_r+0x3b8>
  402cf8:	2a00      	cmp	r2, #0
  402cfa:	f280 816d 	bge.w	402fd8 <_malloc_r+0x3d8>
  402cfe:	68db      	ldr	r3, [r3, #12]
  402d00:	459c      	cmp	ip, r3
  402d02:	f000 8159 	beq.w	402fb8 <_malloc_r+0x3b8>
  402d06:	6859      	ldr	r1, [r3, #4]
  402d08:	f021 0103 	bic.w	r1, r1, #3
  402d0c:	1b8a      	subs	r2, r1, r6
  402d0e:	2a0f      	cmp	r2, #15
  402d10:	ddf2      	ble.n	402cf8 <_malloc_r+0xf8>
  402d12:	68dc      	ldr	r4, [r3, #12]
  402d14:	f8d3 c008 	ldr.w	ip, [r3, #8]
  402d18:	f046 0801 	orr.w	r8, r6, #1
  402d1c:	4628      	mov	r0, r5
  402d1e:	441e      	add	r6, r3
  402d20:	f042 0501 	orr.w	r5, r2, #1
  402d24:	f8c3 8004 	str.w	r8, [r3, #4]
  402d28:	f8cc 400c 	str.w	r4, [ip, #12]
  402d2c:	f8c4 c008 	str.w	ip, [r4, #8]
  402d30:	617e      	str	r6, [r7, #20]
  402d32:	613e      	str	r6, [r7, #16]
  402d34:	f8c6 e00c 	str.w	lr, [r6, #12]
  402d38:	f8c6 e008 	str.w	lr, [r6, #8]
  402d3c:	6075      	str	r5, [r6, #4]
  402d3e:	505a      	str	r2, [r3, r1]
  402d40:	9300      	str	r3, [sp, #0]
  402d42:	f000 fb21 	bl	403388 <__malloc_unlock>
  402d46:	9b00      	ldr	r3, [sp, #0]
  402d48:	f103 0408 	add.w	r4, r3, #8
  402d4c:	e01e      	b.n	402d8c <_malloc_r+0x18c>
  402d4e:	2910      	cmp	r1, #16
  402d50:	d820      	bhi.n	402d94 <_malloc_r+0x194>
  402d52:	f000 fb17 	bl	403384 <__malloc_lock>
  402d56:	2610      	movs	r6, #16
  402d58:	2318      	movs	r3, #24
  402d5a:	2002      	movs	r0, #2
  402d5c:	4f72      	ldr	r7, [pc, #456]	; (402f28 <_malloc_r+0x328>)
  402d5e:	443b      	add	r3, r7
  402d60:	685c      	ldr	r4, [r3, #4]
  402d62:	f1a3 0208 	sub.w	r2, r3, #8
  402d66:	4294      	cmp	r4, r2
  402d68:	f000 812f 	beq.w	402fca <_malloc_r+0x3ca>
  402d6c:	6863      	ldr	r3, [r4, #4]
  402d6e:	68e1      	ldr	r1, [r4, #12]
  402d70:	f023 0303 	bic.w	r3, r3, #3
  402d74:	4423      	add	r3, r4
  402d76:	685a      	ldr	r2, [r3, #4]
  402d78:	68a6      	ldr	r6, [r4, #8]
  402d7a:	f042 0201 	orr.w	r2, r2, #1
  402d7e:	60f1      	str	r1, [r6, #12]
  402d80:	4628      	mov	r0, r5
  402d82:	608e      	str	r6, [r1, #8]
  402d84:	605a      	str	r2, [r3, #4]
  402d86:	f000 faff 	bl	403388 <__malloc_unlock>
  402d8a:	3408      	adds	r4, #8
  402d8c:	4620      	mov	r0, r4
  402d8e:	b003      	add	sp, #12
  402d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d94:	2400      	movs	r4, #0
  402d96:	230c      	movs	r3, #12
  402d98:	4620      	mov	r0, r4
  402d9a:	602b      	str	r3, [r5, #0]
  402d9c:	b003      	add	sp, #12
  402d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402da2:	2040      	movs	r0, #64	; 0x40
  402da4:	f44f 7100 	mov.w	r1, #512	; 0x200
  402da8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402dac:	e74a      	b.n	402c44 <_malloc_r+0x44>
  402dae:	4423      	add	r3, r4
  402db0:	685a      	ldr	r2, [r3, #4]
  402db2:	68e1      	ldr	r1, [r4, #12]
  402db4:	e7e0      	b.n	402d78 <_malloc_r+0x178>
  402db6:	4423      	add	r3, r4
  402db8:	685a      	ldr	r2, [r3, #4]
  402dba:	4628      	mov	r0, r5
  402dbc:	f042 0201 	orr.w	r2, r2, #1
  402dc0:	605a      	str	r2, [r3, #4]
  402dc2:	3408      	adds	r4, #8
  402dc4:	f000 fae0 	bl	403388 <__malloc_unlock>
  402dc8:	4620      	mov	r0, r4
  402dca:	b003      	add	sp, #12
  402dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402dd0:	68bc      	ldr	r4, [r7, #8]
  402dd2:	6863      	ldr	r3, [r4, #4]
  402dd4:	f023 0803 	bic.w	r8, r3, #3
  402dd8:	45b0      	cmp	r8, r6
  402dda:	d304      	bcc.n	402de6 <_malloc_r+0x1e6>
  402ddc:	eba8 0306 	sub.w	r3, r8, r6
  402de0:	2b0f      	cmp	r3, #15
  402de2:	f300 8085 	bgt.w	402ef0 <_malloc_r+0x2f0>
  402de6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402f40 <_malloc_r+0x340>
  402dea:	4b50      	ldr	r3, [pc, #320]	; (402f2c <_malloc_r+0x32c>)
  402dec:	f8d9 2000 	ldr.w	r2, [r9]
  402df0:	681b      	ldr	r3, [r3, #0]
  402df2:	3201      	adds	r2, #1
  402df4:	4433      	add	r3, r6
  402df6:	eb04 0a08 	add.w	sl, r4, r8
  402dfa:	f000 8154 	beq.w	4030a6 <_malloc_r+0x4a6>
  402dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402e02:	330f      	adds	r3, #15
  402e04:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402e08:	f02b 0b0f 	bic.w	fp, fp, #15
  402e0c:	4659      	mov	r1, fp
  402e0e:	4628      	mov	r0, r5
  402e10:	f000 fc72 	bl	4036f8 <_sbrk_r>
  402e14:	1c41      	adds	r1, r0, #1
  402e16:	4602      	mov	r2, r0
  402e18:	f000 80fb 	beq.w	403012 <_malloc_r+0x412>
  402e1c:	4582      	cmp	sl, r0
  402e1e:	f200 80f6 	bhi.w	40300e <_malloc_r+0x40e>
  402e22:	4b43      	ldr	r3, [pc, #268]	; (402f30 <_malloc_r+0x330>)
  402e24:	6819      	ldr	r1, [r3, #0]
  402e26:	4459      	add	r1, fp
  402e28:	6019      	str	r1, [r3, #0]
  402e2a:	f000 814c 	beq.w	4030c6 <_malloc_r+0x4c6>
  402e2e:	f8d9 0000 	ldr.w	r0, [r9]
  402e32:	3001      	adds	r0, #1
  402e34:	bf1b      	ittet	ne
  402e36:	eba2 0a0a 	subne.w	sl, r2, sl
  402e3a:	4451      	addne	r1, sl
  402e3c:	f8c9 2000 	streq.w	r2, [r9]
  402e40:	6019      	strne	r1, [r3, #0]
  402e42:	f012 0107 	ands.w	r1, r2, #7
  402e46:	f000 8114 	beq.w	403072 <_malloc_r+0x472>
  402e4a:	f1c1 0008 	rsb	r0, r1, #8
  402e4e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402e52:	4402      	add	r2, r0
  402e54:	3108      	adds	r1, #8
  402e56:	eb02 090b 	add.w	r9, r2, fp
  402e5a:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402e5e:	eba1 0909 	sub.w	r9, r1, r9
  402e62:	4649      	mov	r1, r9
  402e64:	4628      	mov	r0, r5
  402e66:	9301      	str	r3, [sp, #4]
  402e68:	9200      	str	r2, [sp, #0]
  402e6a:	f000 fc45 	bl	4036f8 <_sbrk_r>
  402e6e:	1c43      	adds	r3, r0, #1
  402e70:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402e74:	f000 8142 	beq.w	4030fc <_malloc_r+0x4fc>
  402e78:	1a80      	subs	r0, r0, r2
  402e7a:	4448      	add	r0, r9
  402e7c:	f040 0001 	orr.w	r0, r0, #1
  402e80:	6819      	ldr	r1, [r3, #0]
  402e82:	42bc      	cmp	r4, r7
  402e84:	4449      	add	r1, r9
  402e86:	60ba      	str	r2, [r7, #8]
  402e88:	6019      	str	r1, [r3, #0]
  402e8a:	6050      	str	r0, [r2, #4]
  402e8c:	d017      	beq.n	402ebe <_malloc_r+0x2be>
  402e8e:	f1b8 0f0f 	cmp.w	r8, #15
  402e92:	f240 80fa 	bls.w	40308a <_malloc_r+0x48a>
  402e96:	f04f 0c05 	mov.w	ip, #5
  402e9a:	6862      	ldr	r2, [r4, #4]
  402e9c:	f1a8 000c 	sub.w	r0, r8, #12
  402ea0:	f020 0007 	bic.w	r0, r0, #7
  402ea4:	f002 0201 	and.w	r2, r2, #1
  402ea8:	eb04 0e00 	add.w	lr, r4, r0
  402eac:	4302      	orrs	r2, r0
  402eae:	280f      	cmp	r0, #15
  402eb0:	6062      	str	r2, [r4, #4]
  402eb2:	f8ce c004 	str.w	ip, [lr, #4]
  402eb6:	f8ce c008 	str.w	ip, [lr, #8]
  402eba:	f200 8116 	bhi.w	4030ea <_malloc_r+0x4ea>
  402ebe:	4b1d      	ldr	r3, [pc, #116]	; (402f34 <_malloc_r+0x334>)
  402ec0:	68bc      	ldr	r4, [r7, #8]
  402ec2:	681a      	ldr	r2, [r3, #0]
  402ec4:	4291      	cmp	r1, r2
  402ec6:	bf88      	it	hi
  402ec8:	6019      	strhi	r1, [r3, #0]
  402eca:	4b1b      	ldr	r3, [pc, #108]	; (402f38 <_malloc_r+0x338>)
  402ecc:	681a      	ldr	r2, [r3, #0]
  402ece:	4291      	cmp	r1, r2
  402ed0:	6862      	ldr	r2, [r4, #4]
  402ed2:	bf88      	it	hi
  402ed4:	6019      	strhi	r1, [r3, #0]
  402ed6:	f022 0203 	bic.w	r2, r2, #3
  402eda:	4296      	cmp	r6, r2
  402edc:	eba2 0306 	sub.w	r3, r2, r6
  402ee0:	d801      	bhi.n	402ee6 <_malloc_r+0x2e6>
  402ee2:	2b0f      	cmp	r3, #15
  402ee4:	dc04      	bgt.n	402ef0 <_malloc_r+0x2f0>
  402ee6:	4628      	mov	r0, r5
  402ee8:	f000 fa4e 	bl	403388 <__malloc_unlock>
  402eec:	2400      	movs	r4, #0
  402eee:	e74d      	b.n	402d8c <_malloc_r+0x18c>
  402ef0:	f046 0201 	orr.w	r2, r6, #1
  402ef4:	f043 0301 	orr.w	r3, r3, #1
  402ef8:	4426      	add	r6, r4
  402efa:	6062      	str	r2, [r4, #4]
  402efc:	4628      	mov	r0, r5
  402efe:	60be      	str	r6, [r7, #8]
  402f00:	3408      	adds	r4, #8
  402f02:	6073      	str	r3, [r6, #4]
  402f04:	f000 fa40 	bl	403388 <__malloc_unlock>
  402f08:	4620      	mov	r0, r4
  402f0a:	b003      	add	sp, #12
  402f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f10:	2b14      	cmp	r3, #20
  402f12:	d970      	bls.n	402ff6 <_malloc_r+0x3f6>
  402f14:	2b54      	cmp	r3, #84	; 0x54
  402f16:	f200 80a2 	bhi.w	40305e <_malloc_r+0x45e>
  402f1a:	0b33      	lsrs	r3, r6, #12
  402f1c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402f20:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402f24:	00c1      	lsls	r1, r0, #3
  402f26:	e68d      	b.n	402c44 <_malloc_r+0x44>
  402f28:	20000538 	.word	0x20000538
  402f2c:	20000b74 	.word	0x20000b74
  402f30:	20000b44 	.word	0x20000b44
  402f34:	20000b6c 	.word	0x20000b6c
  402f38:	20000b70 	.word	0x20000b70
  402f3c:	20000540 	.word	0x20000540
  402f40:	20000940 	.word	0x20000940
  402f44:	0a5a      	lsrs	r2, r3, #9
  402f46:	2a04      	cmp	r2, #4
  402f48:	d95b      	bls.n	403002 <_malloc_r+0x402>
  402f4a:	2a14      	cmp	r2, #20
  402f4c:	f200 80ae 	bhi.w	4030ac <_malloc_r+0x4ac>
  402f50:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402f54:	00c9      	lsls	r1, r1, #3
  402f56:	325b      	adds	r2, #91	; 0x5b
  402f58:	eb07 0c01 	add.w	ip, r7, r1
  402f5c:	5879      	ldr	r1, [r7, r1]
  402f5e:	f1ac 0c08 	sub.w	ip, ip, #8
  402f62:	458c      	cmp	ip, r1
  402f64:	f000 8088 	beq.w	403078 <_malloc_r+0x478>
  402f68:	684a      	ldr	r2, [r1, #4]
  402f6a:	f022 0203 	bic.w	r2, r2, #3
  402f6e:	4293      	cmp	r3, r2
  402f70:	d273      	bcs.n	40305a <_malloc_r+0x45a>
  402f72:	6889      	ldr	r1, [r1, #8]
  402f74:	458c      	cmp	ip, r1
  402f76:	d1f7      	bne.n	402f68 <_malloc_r+0x368>
  402f78:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402f7c:	687a      	ldr	r2, [r7, #4]
  402f7e:	60e3      	str	r3, [r4, #12]
  402f80:	f8c4 c008 	str.w	ip, [r4, #8]
  402f84:	609c      	str	r4, [r3, #8]
  402f86:	f8cc 400c 	str.w	r4, [ip, #12]
  402f8a:	e69e      	b.n	402cca <_malloc_r+0xca>
  402f8c:	f046 0c01 	orr.w	ip, r6, #1
  402f90:	f042 0101 	orr.w	r1, r2, #1
  402f94:	4426      	add	r6, r4
  402f96:	f8c4 c004 	str.w	ip, [r4, #4]
  402f9a:	4628      	mov	r0, r5
  402f9c:	617e      	str	r6, [r7, #20]
  402f9e:	613e      	str	r6, [r7, #16]
  402fa0:	f8c6 e00c 	str.w	lr, [r6, #12]
  402fa4:	f8c6 e008 	str.w	lr, [r6, #8]
  402fa8:	6071      	str	r1, [r6, #4]
  402faa:	50e2      	str	r2, [r4, r3]
  402fac:	f000 f9ec 	bl	403388 <__malloc_unlock>
  402fb0:	3408      	adds	r4, #8
  402fb2:	e6eb      	b.n	402d8c <_malloc_r+0x18c>
  402fb4:	687a      	ldr	r2, [r7, #4]
  402fb6:	e688      	b.n	402cca <_malloc_r+0xca>
  402fb8:	f108 0801 	add.w	r8, r8, #1
  402fbc:	f018 0f03 	tst.w	r8, #3
  402fc0:	f10c 0c08 	add.w	ip, ip, #8
  402fc4:	f47f ae93 	bne.w	402cee <_malloc_r+0xee>
  402fc8:	e02d      	b.n	403026 <_malloc_r+0x426>
  402fca:	68dc      	ldr	r4, [r3, #12]
  402fcc:	42a3      	cmp	r3, r4
  402fce:	bf08      	it	eq
  402fd0:	3002      	addeq	r0, #2
  402fd2:	f43f ae4b 	beq.w	402c6c <_malloc_r+0x6c>
  402fd6:	e6c9      	b.n	402d6c <_malloc_r+0x16c>
  402fd8:	461c      	mov	r4, r3
  402fda:	4419      	add	r1, r3
  402fdc:	684a      	ldr	r2, [r1, #4]
  402fde:	68db      	ldr	r3, [r3, #12]
  402fe0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402fe4:	f042 0201 	orr.w	r2, r2, #1
  402fe8:	604a      	str	r2, [r1, #4]
  402fea:	4628      	mov	r0, r5
  402fec:	60f3      	str	r3, [r6, #12]
  402fee:	609e      	str	r6, [r3, #8]
  402ff0:	f000 f9ca 	bl	403388 <__malloc_unlock>
  402ff4:	e6ca      	b.n	402d8c <_malloc_r+0x18c>
  402ff6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402ffa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402ffe:	00c1      	lsls	r1, r0, #3
  403000:	e620      	b.n	402c44 <_malloc_r+0x44>
  403002:	099a      	lsrs	r2, r3, #6
  403004:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403008:	00c9      	lsls	r1, r1, #3
  40300a:	3238      	adds	r2, #56	; 0x38
  40300c:	e7a4      	b.n	402f58 <_malloc_r+0x358>
  40300e:	42bc      	cmp	r4, r7
  403010:	d054      	beq.n	4030bc <_malloc_r+0x4bc>
  403012:	68bc      	ldr	r4, [r7, #8]
  403014:	6862      	ldr	r2, [r4, #4]
  403016:	f022 0203 	bic.w	r2, r2, #3
  40301a:	e75e      	b.n	402eda <_malloc_r+0x2da>
  40301c:	f859 3908 	ldr.w	r3, [r9], #-8
  403020:	4599      	cmp	r9, r3
  403022:	f040 8086 	bne.w	403132 <_malloc_r+0x532>
  403026:	f010 0f03 	tst.w	r0, #3
  40302a:	f100 30ff 	add.w	r0, r0, #4294967295
  40302e:	d1f5      	bne.n	40301c <_malloc_r+0x41c>
  403030:	687b      	ldr	r3, [r7, #4]
  403032:	ea23 0304 	bic.w	r3, r3, r4
  403036:	607b      	str	r3, [r7, #4]
  403038:	0064      	lsls	r4, r4, #1
  40303a:	429c      	cmp	r4, r3
  40303c:	f63f aec8 	bhi.w	402dd0 <_malloc_r+0x1d0>
  403040:	2c00      	cmp	r4, #0
  403042:	f43f aec5 	beq.w	402dd0 <_malloc_r+0x1d0>
  403046:	421c      	tst	r4, r3
  403048:	4640      	mov	r0, r8
  40304a:	f47f ae4c 	bne.w	402ce6 <_malloc_r+0xe6>
  40304e:	0064      	lsls	r4, r4, #1
  403050:	421c      	tst	r4, r3
  403052:	f100 0004 	add.w	r0, r0, #4
  403056:	d0fa      	beq.n	40304e <_malloc_r+0x44e>
  403058:	e645      	b.n	402ce6 <_malloc_r+0xe6>
  40305a:	468c      	mov	ip, r1
  40305c:	e78c      	b.n	402f78 <_malloc_r+0x378>
  40305e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403062:	d815      	bhi.n	403090 <_malloc_r+0x490>
  403064:	0bf3      	lsrs	r3, r6, #15
  403066:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40306a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40306e:	00c1      	lsls	r1, r0, #3
  403070:	e5e8      	b.n	402c44 <_malloc_r+0x44>
  403072:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403076:	e6ee      	b.n	402e56 <_malloc_r+0x256>
  403078:	2101      	movs	r1, #1
  40307a:	687b      	ldr	r3, [r7, #4]
  40307c:	1092      	asrs	r2, r2, #2
  40307e:	fa01 f202 	lsl.w	r2, r1, r2
  403082:	431a      	orrs	r2, r3
  403084:	607a      	str	r2, [r7, #4]
  403086:	4663      	mov	r3, ip
  403088:	e779      	b.n	402f7e <_malloc_r+0x37e>
  40308a:	2301      	movs	r3, #1
  40308c:	6053      	str	r3, [r2, #4]
  40308e:	e72a      	b.n	402ee6 <_malloc_r+0x2e6>
  403090:	f240 5254 	movw	r2, #1364	; 0x554
  403094:	4293      	cmp	r3, r2
  403096:	d822      	bhi.n	4030de <_malloc_r+0x4de>
  403098:	0cb3      	lsrs	r3, r6, #18
  40309a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40309e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4030a2:	00c1      	lsls	r1, r0, #3
  4030a4:	e5ce      	b.n	402c44 <_malloc_r+0x44>
  4030a6:	f103 0b10 	add.w	fp, r3, #16
  4030aa:	e6af      	b.n	402e0c <_malloc_r+0x20c>
  4030ac:	2a54      	cmp	r2, #84	; 0x54
  4030ae:	d829      	bhi.n	403104 <_malloc_r+0x504>
  4030b0:	0b1a      	lsrs	r2, r3, #12
  4030b2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4030b6:	00c9      	lsls	r1, r1, #3
  4030b8:	326e      	adds	r2, #110	; 0x6e
  4030ba:	e74d      	b.n	402f58 <_malloc_r+0x358>
  4030bc:	4b20      	ldr	r3, [pc, #128]	; (403140 <_malloc_r+0x540>)
  4030be:	6819      	ldr	r1, [r3, #0]
  4030c0:	4459      	add	r1, fp
  4030c2:	6019      	str	r1, [r3, #0]
  4030c4:	e6b3      	b.n	402e2e <_malloc_r+0x22e>
  4030c6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4030ca:	2800      	cmp	r0, #0
  4030cc:	f47f aeaf 	bne.w	402e2e <_malloc_r+0x22e>
  4030d0:	eb08 030b 	add.w	r3, r8, fp
  4030d4:	68ba      	ldr	r2, [r7, #8]
  4030d6:	f043 0301 	orr.w	r3, r3, #1
  4030da:	6053      	str	r3, [r2, #4]
  4030dc:	e6ef      	b.n	402ebe <_malloc_r+0x2be>
  4030de:	207f      	movs	r0, #127	; 0x7f
  4030e0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4030e4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4030e8:	e5ac      	b.n	402c44 <_malloc_r+0x44>
  4030ea:	f104 0108 	add.w	r1, r4, #8
  4030ee:	4628      	mov	r0, r5
  4030f0:	9300      	str	r3, [sp, #0]
  4030f2:	f7ff fa83 	bl	4025fc <_free_r>
  4030f6:	9b00      	ldr	r3, [sp, #0]
  4030f8:	6819      	ldr	r1, [r3, #0]
  4030fa:	e6e0      	b.n	402ebe <_malloc_r+0x2be>
  4030fc:	2001      	movs	r0, #1
  4030fe:	f04f 0900 	mov.w	r9, #0
  403102:	e6bd      	b.n	402e80 <_malloc_r+0x280>
  403104:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403108:	d805      	bhi.n	403116 <_malloc_r+0x516>
  40310a:	0bda      	lsrs	r2, r3, #15
  40310c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403110:	00c9      	lsls	r1, r1, #3
  403112:	3277      	adds	r2, #119	; 0x77
  403114:	e720      	b.n	402f58 <_malloc_r+0x358>
  403116:	f240 5154 	movw	r1, #1364	; 0x554
  40311a:	428a      	cmp	r2, r1
  40311c:	d805      	bhi.n	40312a <_malloc_r+0x52a>
  40311e:	0c9a      	lsrs	r2, r3, #18
  403120:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403124:	00c9      	lsls	r1, r1, #3
  403126:	327c      	adds	r2, #124	; 0x7c
  403128:	e716      	b.n	402f58 <_malloc_r+0x358>
  40312a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40312e:	227e      	movs	r2, #126	; 0x7e
  403130:	e712      	b.n	402f58 <_malloc_r+0x358>
  403132:	687b      	ldr	r3, [r7, #4]
  403134:	e780      	b.n	403038 <_malloc_r+0x438>
  403136:	08f0      	lsrs	r0, r6, #3
  403138:	f106 0308 	add.w	r3, r6, #8
  40313c:	e60e      	b.n	402d5c <_malloc_r+0x15c>
  40313e:	bf00      	nop
  403140:	20000b44 	.word	0x20000b44

00403144 <memchr>:
  403144:	0783      	lsls	r3, r0, #30
  403146:	b470      	push	{r4, r5, r6}
  403148:	b2cd      	uxtb	r5, r1
  40314a:	d03d      	beq.n	4031c8 <memchr+0x84>
  40314c:	1e54      	subs	r4, r2, #1
  40314e:	b30a      	cbz	r2, 403194 <memchr+0x50>
  403150:	7803      	ldrb	r3, [r0, #0]
  403152:	42ab      	cmp	r3, r5
  403154:	d01f      	beq.n	403196 <memchr+0x52>
  403156:	1c43      	adds	r3, r0, #1
  403158:	e005      	b.n	403166 <memchr+0x22>
  40315a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40315e:	d319      	bcc.n	403194 <memchr+0x50>
  403160:	7802      	ldrb	r2, [r0, #0]
  403162:	42aa      	cmp	r2, r5
  403164:	d017      	beq.n	403196 <memchr+0x52>
  403166:	f013 0f03 	tst.w	r3, #3
  40316a:	4618      	mov	r0, r3
  40316c:	f103 0301 	add.w	r3, r3, #1
  403170:	d1f3      	bne.n	40315a <memchr+0x16>
  403172:	2c03      	cmp	r4, #3
  403174:	d811      	bhi.n	40319a <memchr+0x56>
  403176:	b34c      	cbz	r4, 4031cc <memchr+0x88>
  403178:	7803      	ldrb	r3, [r0, #0]
  40317a:	42ab      	cmp	r3, r5
  40317c:	d00b      	beq.n	403196 <memchr+0x52>
  40317e:	4404      	add	r4, r0
  403180:	1c43      	adds	r3, r0, #1
  403182:	e002      	b.n	40318a <memchr+0x46>
  403184:	7802      	ldrb	r2, [r0, #0]
  403186:	42aa      	cmp	r2, r5
  403188:	d005      	beq.n	403196 <memchr+0x52>
  40318a:	429c      	cmp	r4, r3
  40318c:	4618      	mov	r0, r3
  40318e:	f103 0301 	add.w	r3, r3, #1
  403192:	d1f7      	bne.n	403184 <memchr+0x40>
  403194:	2000      	movs	r0, #0
  403196:	bc70      	pop	{r4, r5, r6}
  403198:	4770      	bx	lr
  40319a:	0209      	lsls	r1, r1, #8
  40319c:	b289      	uxth	r1, r1
  40319e:	4329      	orrs	r1, r5
  4031a0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4031a4:	6803      	ldr	r3, [r0, #0]
  4031a6:	4606      	mov	r6, r0
  4031a8:	404b      	eors	r3, r1
  4031aa:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4031ae:	ea22 0303 	bic.w	r3, r2, r3
  4031b2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4031b6:	f100 0004 	add.w	r0, r0, #4
  4031ba:	d103      	bne.n	4031c4 <memchr+0x80>
  4031bc:	3c04      	subs	r4, #4
  4031be:	2c03      	cmp	r4, #3
  4031c0:	d8f0      	bhi.n	4031a4 <memchr+0x60>
  4031c2:	e7d8      	b.n	403176 <memchr+0x32>
  4031c4:	4630      	mov	r0, r6
  4031c6:	e7d7      	b.n	403178 <memchr+0x34>
  4031c8:	4614      	mov	r4, r2
  4031ca:	e7d2      	b.n	403172 <memchr+0x2e>
  4031cc:	4620      	mov	r0, r4
  4031ce:	e7e2      	b.n	403196 <memchr+0x52>

004031d0 <memcpy>:
  4031d0:	4684      	mov	ip, r0
  4031d2:	ea41 0300 	orr.w	r3, r1, r0
  4031d6:	f013 0303 	ands.w	r3, r3, #3
  4031da:	d149      	bne.n	403270 <memcpy+0xa0>
  4031dc:	3a40      	subs	r2, #64	; 0x40
  4031de:	d323      	bcc.n	403228 <memcpy+0x58>
  4031e0:	680b      	ldr	r3, [r1, #0]
  4031e2:	6003      	str	r3, [r0, #0]
  4031e4:	684b      	ldr	r3, [r1, #4]
  4031e6:	6043      	str	r3, [r0, #4]
  4031e8:	688b      	ldr	r3, [r1, #8]
  4031ea:	6083      	str	r3, [r0, #8]
  4031ec:	68cb      	ldr	r3, [r1, #12]
  4031ee:	60c3      	str	r3, [r0, #12]
  4031f0:	690b      	ldr	r3, [r1, #16]
  4031f2:	6103      	str	r3, [r0, #16]
  4031f4:	694b      	ldr	r3, [r1, #20]
  4031f6:	6143      	str	r3, [r0, #20]
  4031f8:	698b      	ldr	r3, [r1, #24]
  4031fa:	6183      	str	r3, [r0, #24]
  4031fc:	69cb      	ldr	r3, [r1, #28]
  4031fe:	61c3      	str	r3, [r0, #28]
  403200:	6a0b      	ldr	r3, [r1, #32]
  403202:	6203      	str	r3, [r0, #32]
  403204:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  403206:	6243      	str	r3, [r0, #36]	; 0x24
  403208:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  40320a:	6283      	str	r3, [r0, #40]	; 0x28
  40320c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  40320e:	62c3      	str	r3, [r0, #44]	; 0x2c
  403210:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403212:	6303      	str	r3, [r0, #48]	; 0x30
  403214:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  403216:	6343      	str	r3, [r0, #52]	; 0x34
  403218:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  40321a:	6383      	str	r3, [r0, #56]	; 0x38
  40321c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  40321e:	63c3      	str	r3, [r0, #60]	; 0x3c
  403220:	3040      	adds	r0, #64	; 0x40
  403222:	3140      	adds	r1, #64	; 0x40
  403224:	3a40      	subs	r2, #64	; 0x40
  403226:	d2db      	bcs.n	4031e0 <memcpy+0x10>
  403228:	3230      	adds	r2, #48	; 0x30
  40322a:	d30b      	bcc.n	403244 <memcpy+0x74>
  40322c:	680b      	ldr	r3, [r1, #0]
  40322e:	6003      	str	r3, [r0, #0]
  403230:	684b      	ldr	r3, [r1, #4]
  403232:	6043      	str	r3, [r0, #4]
  403234:	688b      	ldr	r3, [r1, #8]
  403236:	6083      	str	r3, [r0, #8]
  403238:	68cb      	ldr	r3, [r1, #12]
  40323a:	60c3      	str	r3, [r0, #12]
  40323c:	3010      	adds	r0, #16
  40323e:	3110      	adds	r1, #16
  403240:	3a10      	subs	r2, #16
  403242:	d2f3      	bcs.n	40322c <memcpy+0x5c>
  403244:	320c      	adds	r2, #12
  403246:	d305      	bcc.n	403254 <memcpy+0x84>
  403248:	f851 3b04 	ldr.w	r3, [r1], #4
  40324c:	f840 3b04 	str.w	r3, [r0], #4
  403250:	3a04      	subs	r2, #4
  403252:	d2f9      	bcs.n	403248 <memcpy+0x78>
  403254:	3204      	adds	r2, #4
  403256:	d008      	beq.n	40326a <memcpy+0x9a>
  403258:	07d2      	lsls	r2, r2, #31
  40325a:	bf1c      	itt	ne
  40325c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403260:	f800 3b01 	strbne.w	r3, [r0], #1
  403264:	d301      	bcc.n	40326a <memcpy+0x9a>
  403266:	880b      	ldrh	r3, [r1, #0]
  403268:	8003      	strh	r3, [r0, #0]
  40326a:	4660      	mov	r0, ip
  40326c:	4770      	bx	lr
  40326e:	bf00      	nop
  403270:	2a08      	cmp	r2, #8
  403272:	d313      	bcc.n	40329c <memcpy+0xcc>
  403274:	078b      	lsls	r3, r1, #30
  403276:	d0b1      	beq.n	4031dc <memcpy+0xc>
  403278:	f010 0303 	ands.w	r3, r0, #3
  40327c:	d0ae      	beq.n	4031dc <memcpy+0xc>
  40327e:	f1c3 0304 	rsb	r3, r3, #4
  403282:	1ad2      	subs	r2, r2, r3
  403284:	07db      	lsls	r3, r3, #31
  403286:	bf1c      	itt	ne
  403288:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40328c:	f800 3b01 	strbne.w	r3, [r0], #1
  403290:	d3a4      	bcc.n	4031dc <memcpy+0xc>
  403292:	f831 3b02 	ldrh.w	r3, [r1], #2
  403296:	f820 3b02 	strh.w	r3, [r0], #2
  40329a:	e79f      	b.n	4031dc <memcpy+0xc>
  40329c:	3a04      	subs	r2, #4
  40329e:	d3d9      	bcc.n	403254 <memcpy+0x84>
  4032a0:	3a01      	subs	r2, #1
  4032a2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4032a6:	f800 3b01 	strb.w	r3, [r0], #1
  4032aa:	d2f9      	bcs.n	4032a0 <memcpy+0xd0>
  4032ac:	780b      	ldrb	r3, [r1, #0]
  4032ae:	7003      	strb	r3, [r0, #0]
  4032b0:	784b      	ldrb	r3, [r1, #1]
  4032b2:	7043      	strb	r3, [r0, #1]
  4032b4:	788b      	ldrb	r3, [r1, #2]
  4032b6:	7083      	strb	r3, [r0, #2]
  4032b8:	4660      	mov	r0, ip
  4032ba:	4770      	bx	lr

004032bc <memmove>:
  4032bc:	4288      	cmp	r0, r1
  4032be:	b5f0      	push	{r4, r5, r6, r7, lr}
  4032c0:	d90d      	bls.n	4032de <memmove+0x22>
  4032c2:	188b      	adds	r3, r1, r2
  4032c4:	4298      	cmp	r0, r3
  4032c6:	d20a      	bcs.n	4032de <memmove+0x22>
  4032c8:	1884      	adds	r4, r0, r2
  4032ca:	2a00      	cmp	r2, #0
  4032cc:	d051      	beq.n	403372 <memmove+0xb6>
  4032ce:	4622      	mov	r2, r4
  4032d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4032d4:	4299      	cmp	r1, r3
  4032d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4032da:	d1f9      	bne.n	4032d0 <memmove+0x14>
  4032dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4032de:	2a0f      	cmp	r2, #15
  4032e0:	d948      	bls.n	403374 <memmove+0xb8>
  4032e2:	ea41 0300 	orr.w	r3, r1, r0
  4032e6:	079b      	lsls	r3, r3, #30
  4032e8:	d146      	bne.n	403378 <memmove+0xbc>
  4032ea:	4615      	mov	r5, r2
  4032ec:	f100 0410 	add.w	r4, r0, #16
  4032f0:	f101 0310 	add.w	r3, r1, #16
  4032f4:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4032f8:	3d10      	subs	r5, #16
  4032fa:	f844 6c10 	str.w	r6, [r4, #-16]
  4032fe:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403302:	2d0f      	cmp	r5, #15
  403304:	f844 6c0c 	str.w	r6, [r4, #-12]
  403308:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40330c:	f104 0410 	add.w	r4, r4, #16
  403310:	f844 6c18 	str.w	r6, [r4, #-24]
  403314:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403318:	f103 0310 	add.w	r3, r3, #16
  40331c:	f844 6c14 	str.w	r6, [r4, #-20]
  403320:	d8e8      	bhi.n	4032f4 <memmove+0x38>
  403322:	f1a2 0310 	sub.w	r3, r2, #16
  403326:	f023 030f 	bic.w	r3, r3, #15
  40332a:	f002 0e0f 	and.w	lr, r2, #15
  40332e:	3310      	adds	r3, #16
  403330:	f1be 0f03 	cmp.w	lr, #3
  403334:	4419      	add	r1, r3
  403336:	4403      	add	r3, r0
  403338:	d921      	bls.n	40337e <memmove+0xc2>
  40333a:	460e      	mov	r6, r1
  40333c:	4674      	mov	r4, lr
  40333e:	1f1d      	subs	r5, r3, #4
  403340:	f856 7b04 	ldr.w	r7, [r6], #4
  403344:	3c04      	subs	r4, #4
  403346:	2c03      	cmp	r4, #3
  403348:	f845 7f04 	str.w	r7, [r5, #4]!
  40334c:	d8f8      	bhi.n	403340 <memmove+0x84>
  40334e:	f1ae 0404 	sub.w	r4, lr, #4
  403352:	f024 0403 	bic.w	r4, r4, #3
  403356:	3404      	adds	r4, #4
  403358:	4421      	add	r1, r4
  40335a:	4423      	add	r3, r4
  40335c:	f002 0203 	and.w	r2, r2, #3
  403360:	b162      	cbz	r2, 40337c <memmove+0xc0>
  403362:	3b01      	subs	r3, #1
  403364:	440a      	add	r2, r1
  403366:	f811 4b01 	ldrb.w	r4, [r1], #1
  40336a:	428a      	cmp	r2, r1
  40336c:	f803 4f01 	strb.w	r4, [r3, #1]!
  403370:	d1f9      	bne.n	403366 <memmove+0xaa>
  403372:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403374:	4603      	mov	r3, r0
  403376:	e7f3      	b.n	403360 <memmove+0xa4>
  403378:	4603      	mov	r3, r0
  40337a:	e7f2      	b.n	403362 <memmove+0xa6>
  40337c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40337e:	4672      	mov	r2, lr
  403380:	e7ee      	b.n	403360 <memmove+0xa4>
  403382:	bf00      	nop

00403384 <__malloc_lock>:
  403384:	4770      	bx	lr
  403386:	bf00      	nop

00403388 <__malloc_unlock>:
  403388:	4770      	bx	lr
  40338a:	bf00      	nop

0040338c <_realloc_r>:
  40338c:	2900      	cmp	r1, #0
  40338e:	f000 8094 	beq.w	4034ba <_realloc_r+0x12e>
  403392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403396:	460c      	mov	r4, r1
  403398:	4615      	mov	r5, r2
  40339a:	b083      	sub	sp, #12
  40339c:	4680      	mov	r8, r0
  40339e:	f105 060b 	add.w	r6, r5, #11
  4033a2:	f7ff ffef 	bl	403384 <__malloc_lock>
  4033a6:	f854 ec04 	ldr.w	lr, [r4, #-4]
  4033aa:	2e16      	cmp	r6, #22
  4033ac:	f02e 0703 	bic.w	r7, lr, #3
  4033b0:	f1a4 0908 	sub.w	r9, r4, #8
  4033b4:	d83c      	bhi.n	403430 <_realloc_r+0xa4>
  4033b6:	2210      	movs	r2, #16
  4033b8:	4616      	mov	r6, r2
  4033ba:	42b5      	cmp	r5, r6
  4033bc:	d83d      	bhi.n	40343a <_realloc_r+0xae>
  4033be:	4297      	cmp	r7, r2
  4033c0:	da43      	bge.n	40344a <_realloc_r+0xbe>
  4033c2:	4bc6      	ldr	r3, [pc, #792]	; (4036dc <_realloc_r+0x350>)
  4033c4:	eb09 0007 	add.w	r0, r9, r7
  4033c8:	6899      	ldr	r1, [r3, #8]
  4033ca:	4288      	cmp	r0, r1
  4033cc:	f000 80c3 	beq.w	403556 <_realloc_r+0x1ca>
  4033d0:	6843      	ldr	r3, [r0, #4]
  4033d2:	f023 0101 	bic.w	r1, r3, #1
  4033d6:	4401      	add	r1, r0
  4033d8:	6849      	ldr	r1, [r1, #4]
  4033da:	07c9      	lsls	r1, r1, #31
  4033dc:	d54d      	bpl.n	40347a <_realloc_r+0xee>
  4033de:	f01e 0f01 	tst.w	lr, #1
  4033e2:	f000 809b 	beq.w	40351c <_realloc_r+0x190>
  4033e6:	4629      	mov	r1, r5
  4033e8:	4640      	mov	r0, r8
  4033ea:	f7ff fc09 	bl	402c00 <_malloc_r>
  4033ee:	4605      	mov	r5, r0
  4033f0:	2800      	cmp	r0, #0
  4033f2:	d03b      	beq.n	40346c <_realloc_r+0xe0>
  4033f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4033f8:	f1a0 0208 	sub.w	r2, r0, #8
  4033fc:	f023 0301 	bic.w	r3, r3, #1
  403400:	444b      	add	r3, r9
  403402:	429a      	cmp	r2, r3
  403404:	f000 812b 	beq.w	40365e <_realloc_r+0x2d2>
  403408:	1f3a      	subs	r2, r7, #4
  40340a:	2a24      	cmp	r2, #36	; 0x24
  40340c:	f200 8118 	bhi.w	403640 <_realloc_r+0x2b4>
  403410:	2a13      	cmp	r2, #19
  403412:	f200 80eb 	bhi.w	4035ec <_realloc_r+0x260>
  403416:	4603      	mov	r3, r0
  403418:	4622      	mov	r2, r4
  40341a:	6811      	ldr	r1, [r2, #0]
  40341c:	6019      	str	r1, [r3, #0]
  40341e:	6851      	ldr	r1, [r2, #4]
  403420:	6059      	str	r1, [r3, #4]
  403422:	6892      	ldr	r2, [r2, #8]
  403424:	609a      	str	r2, [r3, #8]
  403426:	4621      	mov	r1, r4
  403428:	4640      	mov	r0, r8
  40342a:	f7ff f8e7 	bl	4025fc <_free_r>
  40342e:	e01d      	b.n	40346c <_realloc_r+0xe0>
  403430:	f026 0607 	bic.w	r6, r6, #7
  403434:	2e00      	cmp	r6, #0
  403436:	4632      	mov	r2, r6
  403438:	dabf      	bge.n	4033ba <_realloc_r+0x2e>
  40343a:	2500      	movs	r5, #0
  40343c:	230c      	movs	r3, #12
  40343e:	4628      	mov	r0, r5
  403440:	f8c8 3000 	str.w	r3, [r8]
  403444:	b003      	add	sp, #12
  403446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40344a:	4625      	mov	r5, r4
  40344c:	1bbb      	subs	r3, r7, r6
  40344e:	2b0f      	cmp	r3, #15
  403450:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403454:	d81d      	bhi.n	403492 <_realloc_r+0x106>
  403456:	f002 0201 	and.w	r2, r2, #1
  40345a:	433a      	orrs	r2, r7
  40345c:	eb09 0107 	add.w	r1, r9, r7
  403460:	f8c9 2004 	str.w	r2, [r9, #4]
  403464:	684b      	ldr	r3, [r1, #4]
  403466:	f043 0301 	orr.w	r3, r3, #1
  40346a:	604b      	str	r3, [r1, #4]
  40346c:	4640      	mov	r0, r8
  40346e:	f7ff ff8b 	bl	403388 <__malloc_unlock>
  403472:	4628      	mov	r0, r5
  403474:	b003      	add	sp, #12
  403476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40347a:	f023 0303 	bic.w	r3, r3, #3
  40347e:	18f9      	adds	r1, r7, r3
  403480:	4291      	cmp	r1, r2
  403482:	db1d      	blt.n	4034c0 <_realloc_r+0x134>
  403484:	68c3      	ldr	r3, [r0, #12]
  403486:	6882      	ldr	r2, [r0, #8]
  403488:	4625      	mov	r5, r4
  40348a:	60d3      	str	r3, [r2, #12]
  40348c:	460f      	mov	r7, r1
  40348e:	609a      	str	r2, [r3, #8]
  403490:	e7dc      	b.n	40344c <_realloc_r+0xc0>
  403492:	f002 0201 	and.w	r2, r2, #1
  403496:	eb09 0106 	add.w	r1, r9, r6
  40349a:	f043 0301 	orr.w	r3, r3, #1
  40349e:	4332      	orrs	r2, r6
  4034a0:	f8c9 2004 	str.w	r2, [r9, #4]
  4034a4:	444f      	add	r7, r9
  4034a6:	604b      	str	r3, [r1, #4]
  4034a8:	687b      	ldr	r3, [r7, #4]
  4034aa:	3108      	adds	r1, #8
  4034ac:	f043 0301 	orr.w	r3, r3, #1
  4034b0:	607b      	str	r3, [r7, #4]
  4034b2:	4640      	mov	r0, r8
  4034b4:	f7ff f8a2 	bl	4025fc <_free_r>
  4034b8:	e7d8      	b.n	40346c <_realloc_r+0xe0>
  4034ba:	4611      	mov	r1, r2
  4034bc:	f7ff bba0 	b.w	402c00 <_malloc_r>
  4034c0:	f01e 0f01 	tst.w	lr, #1
  4034c4:	d18f      	bne.n	4033e6 <_realloc_r+0x5a>
  4034c6:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4034ca:	eba9 0a01 	sub.w	sl, r9, r1
  4034ce:	f8da 1004 	ldr.w	r1, [sl, #4]
  4034d2:	f021 0103 	bic.w	r1, r1, #3
  4034d6:	440b      	add	r3, r1
  4034d8:	443b      	add	r3, r7
  4034da:	4293      	cmp	r3, r2
  4034dc:	db26      	blt.n	40352c <_realloc_r+0x1a0>
  4034de:	4655      	mov	r5, sl
  4034e0:	68c1      	ldr	r1, [r0, #12]
  4034e2:	6880      	ldr	r0, [r0, #8]
  4034e4:	1f3a      	subs	r2, r7, #4
  4034e6:	60c1      	str	r1, [r0, #12]
  4034e8:	6088      	str	r0, [r1, #8]
  4034ea:	f855 0f08 	ldr.w	r0, [r5, #8]!
  4034ee:	f8da 100c 	ldr.w	r1, [sl, #12]
  4034f2:	2a24      	cmp	r2, #36	; 0x24
  4034f4:	60c1      	str	r1, [r0, #12]
  4034f6:	6088      	str	r0, [r1, #8]
  4034f8:	d826      	bhi.n	403548 <_realloc_r+0x1bc>
  4034fa:	2a13      	cmp	r2, #19
  4034fc:	f240 8081 	bls.w	403602 <_realloc_r+0x276>
  403500:	6821      	ldr	r1, [r4, #0]
  403502:	2a1b      	cmp	r2, #27
  403504:	f8ca 1008 	str.w	r1, [sl, #8]
  403508:	6861      	ldr	r1, [r4, #4]
  40350a:	f8ca 100c 	str.w	r1, [sl, #12]
  40350e:	f200 80ad 	bhi.w	40366c <_realloc_r+0x2e0>
  403512:	f104 0008 	add.w	r0, r4, #8
  403516:	f10a 0210 	add.w	r2, sl, #16
  40351a:	e074      	b.n	403606 <_realloc_r+0x27a>
  40351c:	f854 3c08 	ldr.w	r3, [r4, #-8]
  403520:	eba9 0a03 	sub.w	sl, r9, r3
  403524:	f8da 1004 	ldr.w	r1, [sl, #4]
  403528:	f021 0103 	bic.w	r1, r1, #3
  40352c:	187b      	adds	r3, r7, r1
  40352e:	4293      	cmp	r3, r2
  403530:	f6ff af59 	blt.w	4033e6 <_realloc_r+0x5a>
  403534:	4655      	mov	r5, sl
  403536:	f8da 100c 	ldr.w	r1, [sl, #12]
  40353a:	f855 0f08 	ldr.w	r0, [r5, #8]!
  40353e:	1f3a      	subs	r2, r7, #4
  403540:	2a24      	cmp	r2, #36	; 0x24
  403542:	60c1      	str	r1, [r0, #12]
  403544:	6088      	str	r0, [r1, #8]
  403546:	d9d8      	bls.n	4034fa <_realloc_r+0x16e>
  403548:	4621      	mov	r1, r4
  40354a:	4628      	mov	r0, r5
  40354c:	461f      	mov	r7, r3
  40354e:	46d1      	mov	r9, sl
  403550:	f7ff feb4 	bl	4032bc <memmove>
  403554:	e77a      	b.n	40344c <_realloc_r+0xc0>
  403556:	6841      	ldr	r1, [r0, #4]
  403558:	f106 0010 	add.w	r0, r6, #16
  40355c:	f021 0b03 	bic.w	fp, r1, #3
  403560:	44bb      	add	fp, r7
  403562:	4583      	cmp	fp, r0
  403564:	da58      	bge.n	403618 <_realloc_r+0x28c>
  403566:	f01e 0f01 	tst.w	lr, #1
  40356a:	f47f af3c 	bne.w	4033e6 <_realloc_r+0x5a>
  40356e:	f854 1c08 	ldr.w	r1, [r4, #-8]
  403572:	eba9 0a01 	sub.w	sl, r9, r1
  403576:	f8da 1004 	ldr.w	r1, [sl, #4]
  40357a:	f021 0103 	bic.w	r1, r1, #3
  40357e:	448b      	add	fp, r1
  403580:	4558      	cmp	r0, fp
  403582:	dcd3      	bgt.n	40352c <_realloc_r+0x1a0>
  403584:	4655      	mov	r5, sl
  403586:	f8da 100c 	ldr.w	r1, [sl, #12]
  40358a:	f855 0f08 	ldr.w	r0, [r5, #8]!
  40358e:	1f3a      	subs	r2, r7, #4
  403590:	2a24      	cmp	r2, #36	; 0x24
  403592:	60c1      	str	r1, [r0, #12]
  403594:	6088      	str	r0, [r1, #8]
  403596:	f200 808d 	bhi.w	4036b4 <_realloc_r+0x328>
  40359a:	2a13      	cmp	r2, #19
  40359c:	f240 8087 	bls.w	4036ae <_realloc_r+0x322>
  4035a0:	6821      	ldr	r1, [r4, #0]
  4035a2:	2a1b      	cmp	r2, #27
  4035a4:	f8ca 1008 	str.w	r1, [sl, #8]
  4035a8:	6861      	ldr	r1, [r4, #4]
  4035aa:	f8ca 100c 	str.w	r1, [sl, #12]
  4035ae:	f200 8088 	bhi.w	4036c2 <_realloc_r+0x336>
  4035b2:	f104 0108 	add.w	r1, r4, #8
  4035b6:	f10a 0210 	add.w	r2, sl, #16
  4035ba:	6808      	ldr	r0, [r1, #0]
  4035bc:	6010      	str	r0, [r2, #0]
  4035be:	6848      	ldr	r0, [r1, #4]
  4035c0:	6050      	str	r0, [r2, #4]
  4035c2:	6889      	ldr	r1, [r1, #8]
  4035c4:	6091      	str	r1, [r2, #8]
  4035c6:	ebab 0206 	sub.w	r2, fp, r6
  4035ca:	eb0a 0106 	add.w	r1, sl, r6
  4035ce:	f042 0201 	orr.w	r2, r2, #1
  4035d2:	6099      	str	r1, [r3, #8]
  4035d4:	604a      	str	r2, [r1, #4]
  4035d6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4035da:	4640      	mov	r0, r8
  4035dc:	f003 0301 	and.w	r3, r3, #1
  4035e0:	431e      	orrs	r6, r3
  4035e2:	f8ca 6004 	str.w	r6, [sl, #4]
  4035e6:	f7ff fecf 	bl	403388 <__malloc_unlock>
  4035ea:	e742      	b.n	403472 <_realloc_r+0xe6>
  4035ec:	6823      	ldr	r3, [r4, #0]
  4035ee:	2a1b      	cmp	r2, #27
  4035f0:	6003      	str	r3, [r0, #0]
  4035f2:	6863      	ldr	r3, [r4, #4]
  4035f4:	6043      	str	r3, [r0, #4]
  4035f6:	d827      	bhi.n	403648 <_realloc_r+0x2bc>
  4035f8:	f100 0308 	add.w	r3, r0, #8
  4035fc:	f104 0208 	add.w	r2, r4, #8
  403600:	e70b      	b.n	40341a <_realloc_r+0x8e>
  403602:	4620      	mov	r0, r4
  403604:	462a      	mov	r2, r5
  403606:	6801      	ldr	r1, [r0, #0]
  403608:	461f      	mov	r7, r3
  40360a:	6011      	str	r1, [r2, #0]
  40360c:	6841      	ldr	r1, [r0, #4]
  40360e:	46d1      	mov	r9, sl
  403610:	6051      	str	r1, [r2, #4]
  403612:	6883      	ldr	r3, [r0, #8]
  403614:	6093      	str	r3, [r2, #8]
  403616:	e719      	b.n	40344c <_realloc_r+0xc0>
  403618:	ebab 0b06 	sub.w	fp, fp, r6
  40361c:	eb09 0106 	add.w	r1, r9, r6
  403620:	f04b 0201 	orr.w	r2, fp, #1
  403624:	6099      	str	r1, [r3, #8]
  403626:	604a      	str	r2, [r1, #4]
  403628:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40362c:	4640      	mov	r0, r8
  40362e:	f003 0301 	and.w	r3, r3, #1
  403632:	431e      	orrs	r6, r3
  403634:	f844 6c04 	str.w	r6, [r4, #-4]
  403638:	f7ff fea6 	bl	403388 <__malloc_unlock>
  40363c:	4625      	mov	r5, r4
  40363e:	e718      	b.n	403472 <_realloc_r+0xe6>
  403640:	4621      	mov	r1, r4
  403642:	f7ff fe3b 	bl	4032bc <memmove>
  403646:	e6ee      	b.n	403426 <_realloc_r+0x9a>
  403648:	68a3      	ldr	r3, [r4, #8]
  40364a:	2a24      	cmp	r2, #36	; 0x24
  40364c:	6083      	str	r3, [r0, #8]
  40364e:	68e3      	ldr	r3, [r4, #12]
  403650:	60c3      	str	r3, [r0, #12]
  403652:	d018      	beq.n	403686 <_realloc_r+0x2fa>
  403654:	f100 0310 	add.w	r3, r0, #16
  403658:	f104 0210 	add.w	r2, r4, #16
  40365c:	e6dd      	b.n	40341a <_realloc_r+0x8e>
  40365e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403662:	4625      	mov	r5, r4
  403664:	f023 0303 	bic.w	r3, r3, #3
  403668:	441f      	add	r7, r3
  40366a:	e6ef      	b.n	40344c <_realloc_r+0xc0>
  40366c:	68a1      	ldr	r1, [r4, #8]
  40366e:	2a24      	cmp	r2, #36	; 0x24
  403670:	f8ca 1010 	str.w	r1, [sl, #16]
  403674:	68e1      	ldr	r1, [r4, #12]
  403676:	f8ca 1014 	str.w	r1, [sl, #20]
  40367a:	d00d      	beq.n	403698 <_realloc_r+0x30c>
  40367c:	f104 0010 	add.w	r0, r4, #16
  403680:	f10a 0218 	add.w	r2, sl, #24
  403684:	e7bf      	b.n	403606 <_realloc_r+0x27a>
  403686:	6922      	ldr	r2, [r4, #16]
  403688:	f100 0318 	add.w	r3, r0, #24
  40368c:	6102      	str	r2, [r0, #16]
  40368e:	6961      	ldr	r1, [r4, #20]
  403690:	f104 0218 	add.w	r2, r4, #24
  403694:	6141      	str	r1, [r0, #20]
  403696:	e6c0      	b.n	40341a <_realloc_r+0x8e>
  403698:	6922      	ldr	r2, [r4, #16]
  40369a:	f104 0018 	add.w	r0, r4, #24
  40369e:	f8ca 2018 	str.w	r2, [sl, #24]
  4036a2:	6961      	ldr	r1, [r4, #20]
  4036a4:	f10a 0220 	add.w	r2, sl, #32
  4036a8:	f8ca 101c 	str.w	r1, [sl, #28]
  4036ac:	e7ab      	b.n	403606 <_realloc_r+0x27a>
  4036ae:	4621      	mov	r1, r4
  4036b0:	462a      	mov	r2, r5
  4036b2:	e782      	b.n	4035ba <_realloc_r+0x22e>
  4036b4:	4621      	mov	r1, r4
  4036b6:	4628      	mov	r0, r5
  4036b8:	9301      	str	r3, [sp, #4]
  4036ba:	f7ff fdff 	bl	4032bc <memmove>
  4036be:	9b01      	ldr	r3, [sp, #4]
  4036c0:	e781      	b.n	4035c6 <_realloc_r+0x23a>
  4036c2:	68a1      	ldr	r1, [r4, #8]
  4036c4:	2a24      	cmp	r2, #36	; 0x24
  4036c6:	f8ca 1010 	str.w	r1, [sl, #16]
  4036ca:	68e1      	ldr	r1, [r4, #12]
  4036cc:	f8ca 1014 	str.w	r1, [sl, #20]
  4036d0:	d006      	beq.n	4036e0 <_realloc_r+0x354>
  4036d2:	f104 0110 	add.w	r1, r4, #16
  4036d6:	f10a 0218 	add.w	r2, sl, #24
  4036da:	e76e      	b.n	4035ba <_realloc_r+0x22e>
  4036dc:	20000538 	.word	0x20000538
  4036e0:	6922      	ldr	r2, [r4, #16]
  4036e2:	f104 0118 	add.w	r1, r4, #24
  4036e6:	f8ca 2018 	str.w	r2, [sl, #24]
  4036ea:	6960      	ldr	r0, [r4, #20]
  4036ec:	f10a 0220 	add.w	r2, sl, #32
  4036f0:	f8ca 001c 	str.w	r0, [sl, #28]
  4036f4:	e761      	b.n	4035ba <_realloc_r+0x22e>
  4036f6:	bf00      	nop

004036f8 <_sbrk_r>:
  4036f8:	b538      	push	{r3, r4, r5, lr}
  4036fa:	2300      	movs	r3, #0
  4036fc:	4c06      	ldr	r4, [pc, #24]	; (403718 <_sbrk_r+0x20>)
  4036fe:	4605      	mov	r5, r0
  403700:	4608      	mov	r0, r1
  403702:	6023      	str	r3, [r4, #0]
  403704:	f7fe fa0e 	bl	401b24 <_sbrk>
  403708:	1c43      	adds	r3, r0, #1
  40370a:	d000      	beq.n	40370e <_sbrk_r+0x16>
  40370c:	bd38      	pop	{r3, r4, r5, pc}
  40370e:	6823      	ldr	r3, [r4, #0]
  403710:	2b00      	cmp	r3, #0
  403712:	d0fb      	beq.n	40370c <_sbrk_r+0x14>
  403714:	602b      	str	r3, [r5, #0]
  403716:	bd38      	pop	{r3, r4, r5, pc}
  403718:	20000ba8 	.word	0x20000ba8

0040371c <__sread>:
  40371c:	b510      	push	{r4, lr}
  40371e:	460c      	mov	r4, r1
  403720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403724:	f000 f99c 	bl	403a60 <_read_r>
  403728:	2800      	cmp	r0, #0
  40372a:	db03      	blt.n	403734 <__sread+0x18>
  40372c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40372e:	4403      	add	r3, r0
  403730:	6523      	str	r3, [r4, #80]	; 0x50
  403732:	bd10      	pop	{r4, pc}
  403734:	89a3      	ldrh	r3, [r4, #12]
  403736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40373a:	81a3      	strh	r3, [r4, #12]
  40373c:	bd10      	pop	{r4, pc}
  40373e:	bf00      	nop

00403740 <__swrite>:
  403740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403744:	460c      	mov	r4, r1
  403746:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
  40374a:	461f      	mov	r7, r3
  40374c:	05cb      	lsls	r3, r1, #23
  40374e:	4616      	mov	r6, r2
  403750:	4605      	mov	r5, r0
  403752:	d507      	bpl.n	403764 <__swrite+0x24>
  403754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403758:	2302      	movs	r3, #2
  40375a:	2200      	movs	r2, #0
  40375c:	f000 f96a 	bl	403a34 <_lseek_r>
  403760:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
  403764:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  403768:	81a1      	strh	r1, [r4, #12]
  40376a:	463b      	mov	r3, r7
  40376c:	4632      	mov	r2, r6
  40376e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403772:	4628      	mov	r0, r5
  403774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403778:	f000 b814 	b.w	4037a4 <_write_r>

0040377c <__sseek>:
  40377c:	b510      	push	{r4, lr}
  40377e:	460c      	mov	r4, r1
  403780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403784:	f000 f956 	bl	403a34 <_lseek_r>
  403788:	89a3      	ldrh	r3, [r4, #12]
  40378a:	1c42      	adds	r2, r0, #1
  40378c:	bf0e      	itee	eq
  40378e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403796:	6520      	strne	r0, [r4, #80]	; 0x50
  403798:	81a3      	strh	r3, [r4, #12]
  40379a:	bd10      	pop	{r4, pc}

0040379c <__sclose>:
  40379c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037a0:	f000 b8d0 	b.w	403944 <_close_r>

004037a4 <_write_r>:
  4037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4037a6:	460e      	mov	r6, r1
  4037a8:	2500      	movs	r5, #0
  4037aa:	4c08      	ldr	r4, [pc, #32]	; (4037cc <_write_r+0x28>)
  4037ac:	4611      	mov	r1, r2
  4037ae:	4607      	mov	r7, r0
  4037b0:	461a      	mov	r2, r3
  4037b2:	4630      	mov	r0, r6
  4037b4:	6025      	str	r5, [r4, #0]
  4037b6:	f7fc fe1f 	bl	4003f8 <_write>
  4037ba:	1c43      	adds	r3, r0, #1
  4037bc:	d000      	beq.n	4037c0 <_write_r+0x1c>
  4037be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4037c0:	6823      	ldr	r3, [r4, #0]
  4037c2:	2b00      	cmp	r3, #0
  4037c4:	d0fb      	beq.n	4037be <_write_r+0x1a>
  4037c6:	603b      	str	r3, [r7, #0]
  4037c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4037ca:	bf00      	nop
  4037cc:	20000ba8 	.word	0x20000ba8

004037d0 <__swsetup_r>:
  4037d0:	b538      	push	{r3, r4, r5, lr}
  4037d2:	4b30      	ldr	r3, [pc, #192]	; (403894 <__swsetup_r+0xc4>)
  4037d4:	4605      	mov	r5, r0
  4037d6:	6818      	ldr	r0, [r3, #0]
  4037d8:	460c      	mov	r4, r1
  4037da:	b110      	cbz	r0, 4037e2 <__swsetup_r+0x12>
  4037dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4037de:	2b00      	cmp	r3, #0
  4037e0:	d038      	beq.n	403854 <__swsetup_r+0x84>
  4037e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4037e6:	b293      	uxth	r3, r2
  4037e8:	0718      	lsls	r0, r3, #28
  4037ea:	d50c      	bpl.n	403806 <__swsetup_r+0x36>
  4037ec:	6920      	ldr	r0, [r4, #16]
  4037ee:	b1a8      	cbz	r0, 40381c <__swsetup_r+0x4c>
  4037f0:	f013 0201 	ands.w	r2, r3, #1
  4037f4:	d01e      	beq.n	403834 <__swsetup_r+0x64>
  4037f6:	2200      	movs	r2, #0
  4037f8:	6963      	ldr	r3, [r4, #20]
  4037fa:	60a2      	str	r2, [r4, #8]
  4037fc:	425b      	negs	r3, r3
  4037fe:	61a3      	str	r3, [r4, #24]
  403800:	b1f0      	cbz	r0, 403840 <__swsetup_r+0x70>
  403802:	2000      	movs	r0, #0
  403804:	bd38      	pop	{r3, r4, r5, pc}
  403806:	06d9      	lsls	r1, r3, #27
  403808:	d53b      	bpl.n	403882 <__swsetup_r+0xb2>
  40380a:	0758      	lsls	r0, r3, #29
  40380c:	d425      	bmi.n	40385a <__swsetup_r+0x8a>
  40380e:	6920      	ldr	r0, [r4, #16]
  403810:	f042 0308 	orr.w	r3, r2, #8
  403814:	81a3      	strh	r3, [r4, #12]
  403816:	b29b      	uxth	r3, r3
  403818:	2800      	cmp	r0, #0
  40381a:	d1e9      	bne.n	4037f0 <__swsetup_r+0x20>
  40381c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403820:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403824:	d0e4      	beq.n	4037f0 <__swsetup_r+0x20>
  403826:	4628      	mov	r0, r5
  403828:	4621      	mov	r1, r4
  40382a:	f7ff f99d 	bl	402b68 <__smakebuf_r>
  40382e:	89a3      	ldrh	r3, [r4, #12]
  403830:	6920      	ldr	r0, [r4, #16]
  403832:	e7dd      	b.n	4037f0 <__swsetup_r+0x20>
  403834:	0799      	lsls	r1, r3, #30
  403836:	bf58      	it	pl
  403838:	6962      	ldrpl	r2, [r4, #20]
  40383a:	60a2      	str	r2, [r4, #8]
  40383c:	2800      	cmp	r0, #0
  40383e:	d1e0      	bne.n	403802 <__swsetup_r+0x32>
  403840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403844:	061a      	lsls	r2, r3, #24
  403846:	d5dd      	bpl.n	403804 <__swsetup_r+0x34>
  403848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40384c:	81a3      	strh	r3, [r4, #12]
  40384e:	f04f 30ff 	mov.w	r0, #4294967295
  403852:	bd38      	pop	{r3, r4, r5, pc}
  403854:	f7fe fe5e 	bl	402514 <__sinit>
  403858:	e7c3      	b.n	4037e2 <__swsetup_r+0x12>
  40385a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40385c:	b151      	cbz	r1, 403874 <__swsetup_r+0xa4>
  40385e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403862:	4299      	cmp	r1, r3
  403864:	d004      	beq.n	403870 <__swsetup_r+0xa0>
  403866:	4628      	mov	r0, r5
  403868:	f7fe fec8 	bl	4025fc <_free_r>
  40386c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403870:	2300      	movs	r3, #0
  403872:	6323      	str	r3, [r4, #48]	; 0x30
  403874:	2300      	movs	r3, #0
  403876:	6920      	ldr	r0, [r4, #16]
  403878:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40387c:	e884 0009 	stmia.w	r4, {r0, r3}
  403880:	e7c6      	b.n	403810 <__swsetup_r+0x40>
  403882:	2309      	movs	r3, #9
  403884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403888:	602b      	str	r3, [r5, #0]
  40388a:	f04f 30ff 	mov.w	r0, #4294967295
  40388e:	81a2      	strh	r2, [r4, #12]
  403890:	bd38      	pop	{r3, r4, r5, pc}
  403892:	bf00      	nop
  403894:	20000108 	.word	0x20000108

00403898 <__register_exitproc>:
  403898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40389c:	4c27      	ldr	r4, [pc, #156]	; (40393c <__register_exitproc+0xa4>)
  40389e:	4607      	mov	r7, r0
  4038a0:	6826      	ldr	r6, [r4, #0]
  4038a2:	4688      	mov	r8, r1
  4038a4:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  4038a8:	4692      	mov	sl, r2
  4038aa:	4699      	mov	r9, r3
  4038ac:	2c00      	cmp	r4, #0
  4038ae:	d03c      	beq.n	40392a <__register_exitproc+0x92>
  4038b0:	6865      	ldr	r5, [r4, #4]
  4038b2:	2d1f      	cmp	r5, #31
  4038b4:	dc1a      	bgt.n	4038ec <__register_exitproc+0x54>
  4038b6:	f105 0e01 	add.w	lr, r5, #1
  4038ba:	b17f      	cbz	r7, 4038dc <__register_exitproc+0x44>
  4038bc:	2001      	movs	r0, #1
  4038be:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4038c2:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
  4038c6:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4038ca:	fa00 f205 	lsl.w	r2, r0, r5
  4038ce:	4311      	orrs	r1, r2
  4038d0:	2f02      	cmp	r7, #2
  4038d2:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4038d6:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
  4038da:	d020      	beq.n	40391e <__register_exitproc+0x86>
  4038dc:	3502      	adds	r5, #2
  4038de:	f8c4 e004 	str.w	lr, [r4, #4]
  4038e2:	2000      	movs	r0, #0
  4038e4:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
  4038e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4038ec:	4b14      	ldr	r3, [pc, #80]	; (403940 <__register_exitproc+0xa8>)
  4038ee:	b30b      	cbz	r3, 403934 <__register_exitproc+0x9c>
  4038f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4038f4:	f7ff f97c 	bl	402bf0 <malloc>
  4038f8:	4604      	mov	r4, r0
  4038fa:	b1d8      	cbz	r0, 403934 <__register_exitproc+0x9c>
  4038fc:	2000      	movs	r0, #0
  4038fe:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
  403902:	f04f 0e01 	mov.w	lr, #1
  403906:	6060      	str	r0, [r4, #4]
  403908:	6023      	str	r3, [r4, #0]
  40390a:	4605      	mov	r5, r0
  40390c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  403910:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  403914:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  403918:	2f00      	cmp	r7, #0
  40391a:	d0df      	beq.n	4038dc <__register_exitproc+0x44>
  40391c:	e7ce      	b.n	4038bc <__register_exitproc+0x24>
  40391e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  403922:	431a      	orrs	r2, r3
  403924:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403928:	e7d8      	b.n	4038dc <__register_exitproc+0x44>
  40392a:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  40392e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  403932:	e7bd      	b.n	4038b0 <__register_exitproc+0x18>
  403934:	f04f 30ff 	mov.w	r0, #4294967295
  403938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40393c:	00404344 	.word	0x00404344
  403940:	00402bf1 	.word	0x00402bf1

00403944 <_close_r>:
  403944:	b538      	push	{r3, r4, r5, lr}
  403946:	2300      	movs	r3, #0
  403948:	4c06      	ldr	r4, [pc, #24]	; (403964 <_close_r+0x20>)
  40394a:	4605      	mov	r5, r0
  40394c:	4608      	mov	r0, r1
  40394e:	6023      	str	r3, [r4, #0]
  403950:	f7fe f904 	bl	401b5c <_close>
  403954:	1c43      	adds	r3, r0, #1
  403956:	d000      	beq.n	40395a <_close_r+0x16>
  403958:	bd38      	pop	{r3, r4, r5, pc}
  40395a:	6823      	ldr	r3, [r4, #0]
  40395c:	2b00      	cmp	r3, #0
  40395e:	d0fb      	beq.n	403958 <_close_r+0x14>
  403960:	602b      	str	r3, [r5, #0]
  403962:	bd38      	pop	{r3, r4, r5, pc}
  403964:	20000ba8 	.word	0x20000ba8

00403968 <_fclose_r>:
  403968:	b570      	push	{r4, r5, r6, lr}
  40396a:	b139      	cbz	r1, 40397c <_fclose_r+0x14>
  40396c:	4605      	mov	r5, r0
  40396e:	460c      	mov	r4, r1
  403970:	b108      	cbz	r0, 403976 <_fclose_r+0xe>
  403972:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403974:	b383      	cbz	r3, 4039d8 <_fclose_r+0x70>
  403976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40397a:	b913      	cbnz	r3, 403982 <_fclose_r+0x1a>
  40397c:	2600      	movs	r6, #0
  40397e:	4630      	mov	r0, r6
  403980:	bd70      	pop	{r4, r5, r6, pc}
  403982:	4621      	mov	r1, r4
  403984:	4628      	mov	r0, r5
  403986:	f7fe fc95 	bl	4022b4 <__sflush_r>
  40398a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40398c:	4606      	mov	r6, r0
  40398e:	b133      	cbz	r3, 40399e <_fclose_r+0x36>
  403990:	69e1      	ldr	r1, [r4, #28]
  403992:	4628      	mov	r0, r5
  403994:	4798      	blx	r3
  403996:	2800      	cmp	r0, #0
  403998:	bfb8      	it	lt
  40399a:	f04f 36ff 	movlt.w	r6, #4294967295
  40399e:	89a3      	ldrh	r3, [r4, #12]
  4039a0:	061b      	lsls	r3, r3, #24
  4039a2:	d41c      	bmi.n	4039de <_fclose_r+0x76>
  4039a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4039a6:	b141      	cbz	r1, 4039ba <_fclose_r+0x52>
  4039a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4039ac:	4299      	cmp	r1, r3
  4039ae:	d002      	beq.n	4039b6 <_fclose_r+0x4e>
  4039b0:	4628      	mov	r0, r5
  4039b2:	f7fe fe23 	bl	4025fc <_free_r>
  4039b6:	2300      	movs	r3, #0
  4039b8:	6323      	str	r3, [r4, #48]	; 0x30
  4039ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4039bc:	b121      	cbz	r1, 4039c8 <_fclose_r+0x60>
  4039be:	4628      	mov	r0, r5
  4039c0:	f7fe fe1c 	bl	4025fc <_free_r>
  4039c4:	2300      	movs	r3, #0
  4039c6:	6463      	str	r3, [r4, #68]	; 0x44
  4039c8:	f7fe fdaa 	bl	402520 <__sfp_lock_acquire>
  4039cc:	2300      	movs	r3, #0
  4039ce:	81a3      	strh	r3, [r4, #12]
  4039d0:	f7fe fda8 	bl	402524 <__sfp_lock_release>
  4039d4:	4630      	mov	r0, r6
  4039d6:	bd70      	pop	{r4, r5, r6, pc}
  4039d8:	f7fe fd9c 	bl	402514 <__sinit>
  4039dc:	e7cb      	b.n	403976 <_fclose_r+0xe>
  4039de:	6921      	ldr	r1, [r4, #16]
  4039e0:	4628      	mov	r0, r5
  4039e2:	f7fe fe0b 	bl	4025fc <_free_r>
  4039e6:	e7dd      	b.n	4039a4 <_fclose_r+0x3c>

004039e8 <_fstat_r>:
  4039e8:	b570      	push	{r4, r5, r6, lr}
  4039ea:	460d      	mov	r5, r1
  4039ec:	2300      	movs	r3, #0
  4039ee:	4c07      	ldr	r4, [pc, #28]	; (403a0c <_fstat_r+0x24>)
  4039f0:	4606      	mov	r6, r0
  4039f2:	4611      	mov	r1, r2
  4039f4:	4628      	mov	r0, r5
  4039f6:	6023      	str	r3, [r4, #0]
  4039f8:	f7fe f8b3 	bl	401b62 <_fstat>
  4039fc:	1c43      	adds	r3, r0, #1
  4039fe:	d000      	beq.n	403a02 <_fstat_r+0x1a>
  403a00:	bd70      	pop	{r4, r5, r6, pc}
  403a02:	6823      	ldr	r3, [r4, #0]
  403a04:	2b00      	cmp	r3, #0
  403a06:	d0fb      	beq.n	403a00 <_fstat_r+0x18>
  403a08:	6033      	str	r3, [r6, #0]
  403a0a:	bd70      	pop	{r4, r5, r6, pc}
  403a0c:	20000ba8 	.word	0x20000ba8

00403a10 <_isatty_r>:
  403a10:	b538      	push	{r3, r4, r5, lr}
  403a12:	2300      	movs	r3, #0
  403a14:	4c06      	ldr	r4, [pc, #24]	; (403a30 <_isatty_r+0x20>)
  403a16:	4605      	mov	r5, r0
  403a18:	4608      	mov	r0, r1
  403a1a:	6023      	str	r3, [r4, #0]
  403a1c:	f7fe f8a6 	bl	401b6c <_isatty>
  403a20:	1c43      	adds	r3, r0, #1
  403a22:	d000      	beq.n	403a26 <_isatty_r+0x16>
  403a24:	bd38      	pop	{r3, r4, r5, pc}
  403a26:	6823      	ldr	r3, [r4, #0]
  403a28:	2b00      	cmp	r3, #0
  403a2a:	d0fb      	beq.n	403a24 <_isatty_r+0x14>
  403a2c:	602b      	str	r3, [r5, #0]
  403a2e:	bd38      	pop	{r3, r4, r5, pc}
  403a30:	20000ba8 	.word	0x20000ba8

00403a34 <_lseek_r>:
  403a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403a36:	460e      	mov	r6, r1
  403a38:	2500      	movs	r5, #0
  403a3a:	4c08      	ldr	r4, [pc, #32]	; (403a5c <_lseek_r+0x28>)
  403a3c:	4611      	mov	r1, r2
  403a3e:	4607      	mov	r7, r0
  403a40:	461a      	mov	r2, r3
  403a42:	4630      	mov	r0, r6
  403a44:	6025      	str	r5, [r4, #0]
  403a46:	f7fe f893 	bl	401b70 <_lseek>
  403a4a:	1c43      	adds	r3, r0, #1
  403a4c:	d000      	beq.n	403a50 <_lseek_r+0x1c>
  403a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a50:	6823      	ldr	r3, [r4, #0]
  403a52:	2b00      	cmp	r3, #0
  403a54:	d0fb      	beq.n	403a4e <_lseek_r+0x1a>
  403a56:	603b      	str	r3, [r7, #0]
  403a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a5a:	bf00      	nop
  403a5c:	20000ba8 	.word	0x20000ba8

00403a60 <_read_r>:
  403a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403a62:	460e      	mov	r6, r1
  403a64:	2500      	movs	r5, #0
  403a66:	4c08      	ldr	r4, [pc, #32]	; (403a88 <_read_r+0x28>)
  403a68:	4611      	mov	r1, r2
  403a6a:	4607      	mov	r7, r0
  403a6c:	461a      	mov	r2, r3
  403a6e:	4630      	mov	r0, r6
  403a70:	6025      	str	r5, [r4, #0]
  403a72:	f7fc fbdf 	bl	400234 <_read>
  403a76:	1c43      	adds	r3, r0, #1
  403a78:	d000      	beq.n	403a7c <_read_r+0x1c>
  403a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a7c:	6823      	ldr	r3, [r4, #0]
  403a7e:	2b00      	cmp	r3, #0
  403a80:	d0fb      	beq.n	403a7a <_read_r+0x1a>
  403a82:	603b      	str	r3, [r7, #0]
  403a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a86:	bf00      	nop
  403a88:	20000ba8 	.word	0x20000ba8

00403a8c <p_uc_charset10x14>:
	...
  403aa8:	ccffccff 00000000 00000000 00000000     ................
  403ab8:	00f000f0 00000000 00f000f0 00000000     ................
  403ac8:	c00cc00c fcfffcff c00cc00c fcfffcff     ................
  403ad8:	c00cc00c 701e600c 3033303f fcfffcff     .....`.p?030....
  403ae8:	f0333033 c018e039 0cf00060 f0603cf0     303.9...`....<`.
  403af8:	000fc003 3cf0183c 18003cc0 f87ff03c     ....<..<.<..<...
  403b08:	8cc71cc3 ecdccccf 30307878 cc00fc00     ........xx00....
  403b18:	00000000 00440000 00f800ec 00000070     ......D.....p...
	...
  403b30:	f03fc00f 18607878 0cc00cc0 00000000     ..?.xx`.........
  403b40:	00000000 0cc00cc0 78781860 c00ff03f     ........`.xx?...
  403b50:	00000000 e00e600c 8003c007 f83ff83f     .....`......?.?.
  403b60:	c0078003 600ce00e 00030003 00030003     .......`........
  403b70:	f03ff03f 00030003 00030003 ec004400     ?.?..........D..
  403b80:	7000f800 00000000 00000000 00000000     ...p............
  403b90:	00030003 00030003 00030003 00030003     ................
  403ba0:	00030003 3c001800 18003c00 00000000     .......<.<......
	...
  403bb8:	0c000000 f0003c00 000fc003 00f0003c     .....<......<...
  403bc8:	000000c0 f87ff03f ccc1fce0 0cc78cc3     ....?...........
  403bd8:	1cfc0cce f03ff87f 00000000 0c700c30     ......?.....0.p.
  403be8:	fcfffcff 0c000c00 00000000 1c700c30     ............0.p.
  403bf8:	7cc03ce0 ccc1ecc0 0ce78cc3 0c3c0c7e     .<.|........~.<.
  403c08:	38703030 0cc01ce0 0cc30cc0 1ce30cc3     00p8............
  403c18:	f03cf87f c007c003 c01cc00e c070c038     ..<.........8.p.
  403c28:	fcfffcff c000c000 38fc30fc 0ccc1ccc     .........0.8....
  403c38:	0ccc0ccc 1cce0ccc f0c3f8c7 f87ff03f     ............?...
  403c48:	0cc31ce3 0cc30cc3 9ce30cc3 f030f871     ............q.0.
  403c58:	00c000c0 00c000c0 fcc7fcc3 00dc00ce     ................
  403c68:	00f000f8 f87ff03c 0cc39ce7 0cc30cc3     ....<...........
  403c78:	9ce70cc3 f03cf87f 007e003c 0cc30ce7     ......<.<.~.....
  403c88:	38c31cc3 e0e770c3 803fc07f 00000000     ...8.p....?.....
  403c98:	60180000 f03cf03c 00006018 00000000     ...`<.<..`......
  403ca8:	00000000 44180000 f83cec3c 00007018     .......D<.<..p..
  403cb8:	00000000 00030000 c00f8007 7038e01c     ..............8p
  403cc8:	1ce03870 00000cc0 c00cc00c c00cc00c     p8..............
  403cd8:	c00cc00c c00cc00c c00cc00c 0cc00000     ................
  403ce8:	38701ce0 e01c7038 8007c00f 00000003     ..p88p..........
  403cf8:	00700030 00c000e0 ecc3ecc1 00e600c3     0.p.............
  403d08:	003c007e f871f030 0cc39ce3 fcc3fcc3     ~.<.0.q.........
  403d18:	1ce00cc0 f03ff87f fc7ffc3f c0c0c0e0     ......?.?.......
  403d28:	c0c0c0c0 c0e0c0c0 fc3ffc7f fcfffcff     ..........?.....
  403d38:	0cc30cc3 0cc30cc3 9ce70cc3 f03cf87f     ..............<.
  403d48:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  403d58:	30303870 fcfffcff 0cc00cc0 0cc00cc0     p800............
  403d68:	1ce00cc0 f03ff87f fcfffcff 0cc30cc3     ......?.........
  403d78:	0cc30cc3 0cc30cc3 0cc00cc0 fcfffcff     ................
  403d88:	00c300c3 00c300c3 00c300c3 00c000c0     ................
  403d98:	f87ff03f 0cc01ce0 0cc30cc0 1ce30cc3     ?...............
  403da8:	f033f873 fcfffcff 00030003 00030003     s.3.............
  403db8:	00030003 fcfffcff 00000000 0cc00cc0     ................
  403dc8:	fcfffcff 0cc00cc0 00000000 38003000     .............0.8
  403dd8:	0cc01cc0 1cc00cc0 f0fff8ff 00c000c0     ................
  403de8:	fcfffcff 80078007 e01cc00f 38707038     ............8pp8
  403df8:	0cc01ce0 fcfffcff 0c000c00 0c000c00     ................
  403e08:	0c000c00 0c000c00 fcfffcff 00380070     ............p.8.
  403e18:	001f001f 00700038 fcfffcff fcfffcff     ....8.p.........
  403e28:	000e001c 80030007 e000c001 fcfffcff     ................
  403e38:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  403e48:	f03ff87f fcfffcff 00c300c3 00c300c3     ..?.............
  403e58:	00e700c3 003c007e f87ff03f 0cc01ce0     ....~.<.?.......
  403e68:	ecc0ccc0 38e07cc0 ec3ffc7f fcfffcff     .....|.8..?.....
  403e78:	80c300c3 c0c380c3 70e7c0c3 1c3c3c7e     ...........p~<<.
  403e88:	1c7e183c 0cc30ce7 0cc30cc3 9cc30cc3     <.~.............
  403e98:	f060f8e1 00c000c0 00c000c0 fcfffcff     ..`.............
  403ea8:	00c000c0 00c000c0 f8fff0ff 0c001c00     ................
  403eb8:	0c000c00 1c000c00 f0fff8ff e0ffc0ff     ................
  403ec8:	38007000 1c001c00 70003800 c0ffe0ff     .p.8.....8.p....
  403ed8:	f8fff0ff 3c001c00 f800f800 1c003c00     .......<.....<..
  403ee8:	f0fff8ff 7cf83cf0 c00fe01c 80078007     .....<.|........
  403ef8:	e01cc00f 3cf07cf8 00fe00fc 80030007     .....|.<........
  403f08:	fc01fc01 00078003 00fc00fe 7cc03cc0     .............<.|
  403f18:	ccc1ecc0 0cc78cc3 0cdc0cce 0cf00cf8     ................
  403f28:	00000000 fcfffcff 0cc00cc0 00000cc0     ................
  403f38:	00000000 00300030 000c000c 00030003     ....0.0.........
  403f48:	c000c000 30003000 00000000 0cc00cc0     .....0.0........
  403f58:	fcff0cc0 0000fcff 00000000 001c000c     ................
  403f68:	00700038 00e000e0 00380070 000c001c     8.p.....p.8.....
  403f78:	0c000c00 0c000c00 0c000c00 0c000c00     ................
  403f88:	0c000c00 00000000 00e000c0 00380070     ............p.8.
  403f98:	00000018 00000000 78063000 cc0cfc0e     .........0.x....
  403fa8:	cc0ccc0c cc0ecc0c f803fc07 fcfffcff     ................
  403fb8:	0c030c03 0c030c03 9c030c03 f000f801     ................
  403fc8:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  403fd8:	30033807 f801f000 0c039c03 0c030c03     .8.0............
  403fe8:	0c030c03 fcfffcff f807f003 cc0cdc0e     ................
  403ff8:	cc0ccc0c dc0ecc0c 9003d807 00030000     ................
  404008:	fc7ffc3f 00e300e3 00300070 00000000     ?.......p.0.....
  404018:	9c071803 cc0ccc0f cc0ccc0c dc0ccc0c     ................
  404028:	f007f80f fcfffcff 00030003 00030003     ................
  404038:	fc018003 0000fc00 00000000 00000000     ................
  404048:	fc1bfc1b 00000000 00000000 30000000     ...............0
  404058:	1c003800 0c000c00 f8cf1c00 0000f0cf     .8..............
  404068:	fcff0000 e000fcff f003e001 1c0e3807     .............8..
  404078:	00000c0c 00000000 0cc00cc0 fcfffcff     ................
  404088:	0c000c00 00000000 fc0ffc0f 0007000e     ................
  404098:	c003c003 000e0007 fc0ffc0f fc0ffc0f     ................
  4040a8:	00070003 000c000e 000e000c fc03fc07     ................
  4040b8:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  4040c8:	f003f807 fc0ffc0f c00cc00c c00cc00c     ................
  4040d8:	c00fc00c 00038007 80070003 c00cc00f     ................
  4040e8:	c00cc00c c00cc00c fc0ffc0f fc0ffc0f     ................
  4040f8:	00078003 000c000e 000e000c 00030007     ................
  404108:	9c071803 cc0ccc0f cc0ccc0c fc0ccc0c     ................
  404118:	3006780e 000c0000 f0ff000c 1c0cf8ff     .x.0............
  404128:	380c1c0c 0000300c f80ff00f 0c001c00     ...8.0..........
  404138:	0c000c00 1c000c00 f00ff80f e00fc00f     ................
  404148:	38007000 1c001c00 70003800 c00fe00f     .p.8.....8.p....
  404158:	f80ff00f 1c001c00 f800f800 1c001c00     ................
  404168:	f00ff80f 1c0e0c0c f0033807 e001e001     .........8......
  404178:	3807f003 0c0c1c0e 000e000c 9c030c07     ...8............
  404188:	f001f801 00078003 000c000e 1c0c0c0c     ................
  404198:	7c0c3c0c cc0dec0c 0c0f8c0f 0c0c0c0e     .<.|............
  4041a8:	00030000 f03f8007 1ce0f87c 0cc00cc0     ......?.|.......
  4041b8:	00000cc0 0c030c03 fc7ffc3f 0cc30ce3     ........?.......
  4041c8:	0ce00cc0 0c300c70 0cc00000 0cc00cc0     ....p.0.........
  4041d8:	f87c1ce0 8007f03f 00000003 00c000c0     ..|.?...........
  4041e8:	00c000c0 00c000c0 00c000c0 00c000c0     ................
  4041f8:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
  404208:	fcfffcff 00000001 00000002 00000004     ................
  404218:	00000008 00000010 00000020 00000040     ........ ...@...
  404228:	00000080 00000100 00000200 00000400     ................
  404238:	63696e49 646e6169 654c206f 72757469     Iniciando Leitur
  404248:	6f642061 6e655320 0d726f73 0000000a     a do Sensor.....
  404258:	61766f4e 69654c20 61727574 00000a0d     Nova Leitura....
  404268:	746e6f43 6f646e61 00000a0d 6d616542     Contando....Beam
  404278:	6c614220 0000006c 206d6946 74747542      Ball...Fim Butt
  404288:	4c206e6f 20746665 20525349 00000a0d     on Left ISR ....
  404298:	206d6946 74747542 52206e6f 74686769     Fim Button Right
  4042a8:	52534920 000a0d20 666e6f43 72756769      ISR ...Configur
  4042b8:	6f616361 6e655320 20726f73 20525349     acao Sensor ISR 
  4042c8:	00000a0d 206d6946 666e6f43 53206769     ....Fim Config S
  4042d8:	6f736e65 53492072 0a0d2052 00000000     ensor ISR ......
  4042e8:	656d6954 6f432072 6769666e 64617275     Timer Configurad
  4042f8:	6170206f 31206172 736d3030 00000a0d     o para 100ms....
  404308:	656d6954 6f432072 6769666e 64617275     Timer Configurad
  404318:	6170206f 31206172 0d737530 0000000a     o para 10us.....
  404328:	63696e49 696c6169 676e697a 61654220     Inicializing Bea
  404338:	6142206d 0a0d6c6c 00000000              m Ball......

00404344 <_global_impure_ptr>:
  404344:	20000110                                ... 

00404348 <_init>:
  404348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40434a:	bf00      	nop
  40434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40434e:	bc08      	pop	{r3}
  404350:	469e      	mov	lr, r3
  404352:	4770      	bx	lr

00404354 <__init_array_start>:
  404354:	00402295 	.word	0x00402295

00404358 <__frame_dummy_init_array_entry>:
  404358:	004000e9                                ..@.

0040435c <_fini>:
  40435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40435e:	bf00      	nop
  404360:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404362:	bc08      	pop	{r3}
  404364:	469e      	mov	lr, r3
  404366:	4770      	bx	lr

00404368 <__fini_array_start>:
  404368:	004000c5 	.word	0x004000c5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemInit>:
	EFC->EEFC_FMR = EEFC_FMR_FWS(3);
2000000c:	f44f 7240 	mov.w	r2, #768	; 0x300
20000010:	4b1f      	ldr	r3, [pc, #124]	; (20000090 <SystemInit+0x84>)
20000012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000014:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
20000018:	6a1b      	ldr	r3, [r3, #32]
2000001a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
2000001e:	d107      	bne.n	20000030 <SystemInit+0x24>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000020:	4a1c      	ldr	r2, [pc, #112]	; (20000094 <SystemInit+0x88>)
20000022:	4b1d      	ldr	r3, [pc, #116]	; (20000098 <SystemInit+0x8c>)
20000024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000026:	461a      	mov	r2, r3
20000028:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000002a:	f013 0f01 	tst.w	r3, #1
2000002e:	d0fb      	beq.n	20000028 <SystemInit+0x1c>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000030:	4a1a      	ldr	r2, [pc, #104]	; (2000009c <SystemInit+0x90>)
20000032:	4b19      	ldr	r3, [pc, #100]	; (20000098 <SystemInit+0x8c>)
20000034:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000036:	461a      	mov	r2, r3
20000038:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000003a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
2000003e:	d0fb      	beq.n	20000038 <SystemInit+0x2c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000040:	4a15      	ldr	r2, [pc, #84]	; (20000098 <SystemInit+0x8c>)
20000042:	6b13      	ldr	r3, [r2, #48]	; 0x30
20000044:	f023 0303 	bic.w	r3, r3, #3
20000048:	f043 0301 	orr.w	r3, r3, #1
2000004c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000004e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000050:	f013 0f08 	tst.w	r3, #8
20000054:	d0fb      	beq.n	2000004e <SystemInit+0x42>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000056:	4a12      	ldr	r2, [pc, #72]	; (200000a0 <SystemInit+0x94>)
20000058:	4b0f      	ldr	r3, [pc, #60]	; (20000098 <SystemInit+0x8c>)
2000005a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2000005c:	461a      	mov	r2, r3
2000005e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000060:	f013 0f02 	tst.w	r3, #2
20000064:	d0fb      	beq.n	2000005e <SystemInit+0x52>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | 
20000066:	2211      	movs	r2, #17
20000068:	4b0b      	ldr	r3, [pc, #44]	; (20000098 <SystemInit+0x8c>)
2000006a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000006c:	461a      	mov	r2, r3
2000006e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000070:	f013 0f08 	tst.w	r3, #8
20000074:	d0fb      	beq.n	2000006e <SystemInit+0x62>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000076:	2212      	movs	r2, #18
20000078:	4b07      	ldr	r3, [pc, #28]	; (20000098 <SystemInit+0x8c>)
2000007a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000007c:	461a      	mov	r2, r3
2000007e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000080:	f013 0f08 	tst.w	r3, #8
20000084:	d0fb      	beq.n	2000007e <SystemInit+0x72>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000086:	4a07      	ldr	r2, [pc, #28]	; (200000a4 <SystemInit+0x98>)
20000088:	4b07      	ldr	r3, [pc, #28]	; (200000a8 <SystemInit+0x9c>)
2000008a:	601a      	str	r2, [r3, #0]
2000008c:	4770      	bx	lr
2000008e:	bf00      	nop
20000090:	400e0a00 	.word	0x400e0a00
20000094:	00370809 	.word	0x00370809
20000098:	400e0400 	.word	0x400e0400
2000009c:	01370809 	.word	0x01370809
200000a0:	20073f01 	.word	0x20073f01
200000a4:	02dc6c00 	.word	0x02dc6c00
200000a8:	20000104 	.word	0x20000104

200000ac <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000ac:	4b0c      	ldr	r3, [pc, #48]	; (200000e0 <system_init_flash+0x34>)
200000ae:	4298      	cmp	r0, r3
200000b0:	d90c      	bls.n	200000cc <system_init_flash+0x20>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000b2:	4b0c      	ldr	r3, [pc, #48]	; (200000e4 <system_init_flash+0x38>)
200000b4:	4298      	cmp	r0, r3
200000b6:	d90d      	bls.n	200000d4 <system_init_flash+0x28>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000b8:	4b0b      	ldr	r3, [pc, #44]	; (200000e8 <system_init_flash+0x3c>)
200000ba:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
200000bc:	bf94      	ite	ls
200000be:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
200000c2:	f44f 7240 	movhi.w	r2, #768	; 0x300
200000c6:	4b09      	ldr	r3, [pc, #36]	; (200000ec <system_init_flash+0x40>)
200000c8:	601a      	str	r2, [r3, #0]
200000ca:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
200000cc:	2200      	movs	r2, #0
200000ce:	4b07      	ldr	r3, [pc, #28]	; (200000ec <system_init_flash+0x40>)
200000d0:	601a      	str	r2, [r3, #0]
200000d2:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
200000d4:	f44f 7280 	mov.w	r2, #256	; 0x100
200000d8:	4b04      	ldr	r3, [pc, #16]	; (200000ec <system_init_flash+0x40>)
200000da:	601a      	str	r2, [r3, #0]
200000dc:	4770      	bx	lr
200000de:	bf00      	nop
200000e0:	01406f3f 	.word	0x01406f3f
200000e4:	01e847ff 	.word	0x01e847ff
200000e8:	02dc6bff 	.word	0x02dc6bff
200000ec:	400e0a00 	.word	0x400e0a00

200000f0 <btn_duty>:
200000f0:	00000001                                ....

200000f4 <usart_options.8096>:
200000f4:	0001c200 000000c0 00000800 00000000     ................

20000104 <SystemCoreClock>:
20000104:	003d0900                                ..=.

20000108 <_impure_ptr>:
20000108:	20000110 00000000                       ... ....

20000110 <impure_data>:
20000110:	00000000 200003fc 20000464 200004cc     ....... d.. ... 
	...
200001b8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200001c8:	0005deec 0000000b 00000000 00000000     ................
	...

20000538 <__malloc_av_>:
	...
20000540:	20000538 20000538 20000540 20000540     8.. 8.. @.. @.. 
20000550:	20000548 20000548 20000550 20000550     H.. H.. P.. P.. 
20000560:	20000558 20000558 20000560 20000560     X.. X.. `.. `.. 
20000570:	20000568 20000568 20000570 20000570     h.. h.. p.. p.. 
20000580:	20000578 20000578 20000580 20000580     x.. x.. ... ... 
20000590:	20000588 20000588 20000590 20000590     ... ... ... ... 
200005a0:	20000598 20000598 200005a0 200005a0     ... ... ... ... 
200005b0:	200005a8 200005a8 200005b0 200005b0     ... ... ... ... 
200005c0:	200005b8 200005b8 200005c0 200005c0     ... ... ... ... 
200005d0:	200005c8 200005c8 200005d0 200005d0     ... ... ... ... 
200005e0:	200005d8 200005d8 200005e0 200005e0     ... ... ... ... 
200005f0:	200005e8 200005e8 200005f0 200005f0     ... ... ... ... 
20000600:	200005f8 200005f8 20000600 20000600     ... ... ... ... 
20000610:	20000608 20000608 20000610 20000610     ... ... ... ... 
20000620:	20000618 20000618 20000620 20000620     ... ...  ..  .. 
20000630:	20000628 20000628 20000630 20000630     (.. (.. 0.. 0.. 
20000640:	20000638 20000638 20000640 20000640     8.. 8.. @.. @.. 
20000650:	20000648 20000648 20000650 20000650     H.. H.. P.. P.. 
20000660:	20000658 20000658 20000660 20000660     X.. X.. `.. `.. 
20000670:	20000668 20000668 20000670 20000670     h.. h.. p.. p.. 
20000680:	20000678 20000678 20000680 20000680     x.. x.. ... ... 
20000690:	20000688 20000688 20000690 20000690     ... ... ... ... 
200006a0:	20000698 20000698 200006a0 200006a0     ... ... ... ... 
200006b0:	200006a8 200006a8 200006b0 200006b0     ... ... ... ... 
200006c0:	200006b8 200006b8 200006c0 200006c0     ... ... ... ... 
200006d0:	200006c8 200006c8 200006d0 200006d0     ... ... ... ... 
200006e0:	200006d8 200006d8 200006e0 200006e0     ... ... ... ... 
200006f0:	200006e8 200006e8 200006f0 200006f0     ... ... ... ... 
20000700:	200006f8 200006f8 20000700 20000700     ... ... ... ... 
20000710:	20000708 20000708 20000710 20000710     ... ... ... ... 
20000720:	20000718 20000718 20000720 20000720     ... ...  ..  .. 
20000730:	20000728 20000728 20000730 20000730     (.. (.. 0.. 0.. 
20000740:	20000738 20000738 20000740 20000740     8.. 8.. @.. @.. 
20000750:	20000748 20000748 20000750 20000750     H.. H.. P.. P.. 
20000760:	20000758 20000758 20000760 20000760     X.. X.. `.. `.. 
20000770:	20000768 20000768 20000770 20000770     h.. h.. p.. p.. 
20000780:	20000778 20000778 20000780 20000780     x.. x.. ... ... 
20000790:	20000788 20000788 20000790 20000790     ... ... ... ... 
200007a0:	20000798 20000798 200007a0 200007a0     ... ... ... ... 
200007b0:	200007a8 200007a8 200007b0 200007b0     ... ... ... ... 
200007c0:	200007b8 200007b8 200007c0 200007c0     ... ... ... ... 
200007d0:	200007c8 200007c8 200007d0 200007d0     ... ... ... ... 
200007e0:	200007d8 200007d8 200007e0 200007e0     ... ... ... ... 
200007f0:	200007e8 200007e8 200007f0 200007f0     ... ... ... ... 
20000800:	200007f8 200007f8 20000800 20000800     ... ... ... ... 
20000810:	20000808 20000808 20000810 20000810     ... ... ... ... 
20000820:	20000818 20000818 20000820 20000820     ... ...  ..  .. 
20000830:	20000828 20000828 20000830 20000830     (.. (.. 0.. 0.. 
20000840:	20000838 20000838 20000840 20000840     8.. 8.. @.. @.. 
20000850:	20000848 20000848 20000850 20000850     H.. H.. P.. P.. 
20000860:	20000858 20000858 20000860 20000860     X.. X.. `.. `.. 
20000870:	20000868 20000868 20000870 20000870     h.. h.. p.. p.. 
20000880:	20000878 20000878 20000880 20000880     x.. x.. ... ... 
20000890:	20000888 20000888 20000890 20000890     ... ... ... ... 
200008a0:	20000898 20000898 200008a0 200008a0     ... ... ... ... 
200008b0:	200008a8 200008a8 200008b0 200008b0     ... ... ... ... 
200008c0:	200008b8 200008b8 200008c0 200008c0     ... ... ... ... 
200008d0:	200008c8 200008c8 200008d0 200008d0     ... ... ... ... 
200008e0:	200008d8 200008d8 200008e0 200008e0     ... ... ... ... 
200008f0:	200008e8 200008e8 200008f0 200008f0     ... ... ... ... 
20000900:	200008f8 200008f8 20000900 20000900     ... ... ... ... 
20000910:	20000908 20000908 20000910 20000910     ... ... ... ... 
20000920:	20000918 20000918 20000920 20000920     ... ...  ..  .. 
20000930:	20000928 20000928 20000930 20000930     (.. (.. 0.. 0.. 

20000940 <__malloc_sbrk_base>:
20000940:	ffffffff                                ....

20000944 <__malloc_trim_threshold>:
20000944:	00020000                                ....
